
STM32F769_SDCARD_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000842c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08008624  08008624  00018624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b14  08008b14  00020008  2**0
                  CONTENTS
  4 .ARM          00000008  08008b14  08008b14  00018b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b1c  08008b1c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b1c  08008b1c  00018b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b20  08008b20  00018b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08008b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  20000008  08008b2c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  08008b2c  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ddd  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031b3  00000000  00000000  00038e13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001408  00000000  00000000  0003bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001288  00000000  00000000  0003d3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002fc0d  00000000  00000000  0003e658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011e0e  00000000  00000000  0006e265  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00119955  00000000  00000000  00080073  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001999c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052f8  00000000  00000000  00199a44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000008 	.word	0x20000008
 8000214:	00000000 	.word	0x00000000
 8000218:	0800860c 	.word	0x0800860c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000000c 	.word	0x2000000c
 8000234:	0800860c 	.word	0x0800860c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800053c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000540:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <SCB_EnableICache+0x3c>)
 8000546:	2200      	movs	r2, #0
 8000548:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800054c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000550:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <SCB_EnableICache+0x3c>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	4a06      	ldr	r2, [pc, #24]	; (8000574 <SCB_EnableICache+0x3c>)
 800055a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800055e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000560:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000564:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800057e:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <SCB_EnableDCache+0x7c>)
 8000580:	2200      	movs	r2, #0
 8000582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000586:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <SCB_EnableDCache+0x7c>)
 800058c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000590:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	0b5b      	lsrs	r3, r3, #13
 8000596:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800059a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	08db      	lsrs	r3, r3, #3
 80005a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005a4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	015a      	lsls	r2, r3, #5
 80005aa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005ae:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005b4:	490f      	ldr	r1, [pc, #60]	; (80005f4 <SCB_EnableDCache+0x7c>)
 80005b6:	4313      	orrs	r3, r2
 80005b8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	1e5a      	subs	r2, r3, #1
 80005c0:	60ba      	str	r2, [r7, #8]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d1ef      	bne.n	80005a6 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	1e5a      	subs	r2, r3, #1
 80005ca:	60fa      	str	r2, [r7, #12]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d1e5      	bne.n	800059c <SCB_EnableDCache+0x24>
 80005d0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <SCB_EnableDCache+0x7c>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <SCB_EnableDCache+0x7c>)
 80005da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005de:	6153      	str	r3, [r2, #20]
 80005e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005e4:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80005e8:	bf00      	nop
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fa:	f2ad 4dbc 	subw	sp, sp, #1212	; 0x4bc
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000600:	f7ff ff9a 	bl	8000538 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000604:	f7ff ffb8 	bl	8000578 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 ff84 	bl	8001514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f868 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f95c 	bl	80008cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000614:	f000 f92a 	bl	800086c <MX_USART1_UART_Init>
  MX_SDMMC2_SD_Init();
 8000618:	f000 f908 	bl	800082c <MX_SDMMC2_SD_Init>
  MX_FATFS_Init();
 800061c:	f004 feba 	bl	8005394 <MX_FATFS_Init>
  }*/

  FRESULT res;
  FATFS SDFatFs;
  FIL myFile;
  char buffwr[30] = "This is Test programming\n\r";
 8000620:	f107 0630 	add.w	r6, r7, #48	; 0x30
 8000624:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <main+0xdc>)
 8000626:	4634      	mov	r4, r6
 8000628:	461d      	mov	r5, r3
 800062a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000632:	c403      	stmia	r4!, {r0, r1}
 8000634:	8022      	strh	r2, [r4, #0]
 8000636:	3402      	adds	r4, #2
 8000638:	0c13      	lsrs	r3, r2, #16
 800063a:	7023      	strb	r3, [r4, #0]
 800063c:	f106 031b 	add.w	r3, r6, #27
 8000640:	2200      	movs	r2, #0
 8000642:	801a      	strh	r2, [r3, #0]
 8000644:	709a      	strb	r2, [r3, #2]
  char buffrd[30];
  char SDPath[10];
  uint32_t byteswritten, bytesread;

  res = BSP_SD_Init();
 8000646:	f004 febf 	bl	80053c8 <BSP_SD_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
  if(res != FR_OK) {
 8000650:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <main+0x64>
	  Error_Handler();
 8000658:	f000 fd62 	bl	8001120 <Error_Handler>
  }

  res = f_mount(&SDFatFs, "", 1);
 800065c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8000660:	2201      	movs	r2, #1
 8000662:	491d      	ldr	r1, [pc, #116]	; (80006d8 <main+0xe0>)
 8000664:	4618      	mov	r0, r3
 8000666:	f007 f941 	bl	80078ec <f_mount>
 800066a:	4603      	mov	r3, r0
 800066c:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
  if(res != FR_OK) {
 8000670:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <main+0x84>
	  Error_Handler();
 8000678:	f000 fd52 	bl	8001120 <Error_Handler>
  }

  res = f_open(&myFile, "test123.txt", FA_OPEN_ALWAYS|FA_WRITE|FA_READ);
 800067c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000680:	2213      	movs	r2, #19
 8000682:	4916      	ldr	r1, [pc, #88]	; (80006dc <main+0xe4>)
 8000684:	4618      	mov	r0, r3
 8000686:	f007 f977 	bl	8007978 <f_open>
 800068a:	4603      	mov	r3, r0
 800068c:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
  if(res != FR_OK) {
 8000690:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <main+0xa4>
	  Error_Handler();
 8000698:	f000 fd42 	bl	8001120 <Error_Handler>
  }

  res = f_lseek(&myFile, f_size(&myFile));
 800069c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006a0:	68da      	ldr	r2, [r3, #12]
 80006a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006a6:	4611      	mov	r1, r2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f007 fc57 	bl	8007f5c <f_lseek>
 80006ae:	4603      	mov	r3, r0
 80006b0:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
  if(res != FR_OK) {
 80006b4:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <main+0xc8>
	  Error_Handler();
 80006bc:	f000 fd30 	bl	8001120 <Error_Handler>
  }

  res = f_close(&myFile);
 80006c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006c4:	4618      	mov	r0, r3
 80006c6:	f007 fc1f 	bl	8007f08 <f_close>
 80006ca:	4603      	mov	r3, r0
 80006cc:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <main+0xd8>
 80006d2:	bf00      	nop
 80006d4:	08008634 	.word	0x08008634
 80006d8:	08008624 	.word	0x08008624
 80006dc:	08008628 	.word	0x08008628

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b0b8      	sub	sp, #224	; 0xe0
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006ea:	2234      	movs	r2, #52	; 0x34
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f007 ff84 	bl	80085fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2290      	movs	r2, #144	; 0x90
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f007 ff75 	bl	80085fc <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000712:	f001 fa1b 	bl	8001b4c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b42      	ldr	r3, [pc, #264]	; (8000820 <SystemClock_Config+0x140>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	4a41      	ldr	r2, [pc, #260]	; (8000820 <SystemClock_Config+0x140>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	6413      	str	r3, [r2, #64]	; 0x40
 8000722:	4b3f      	ldr	r3, [pc, #252]	; (8000820 <SystemClock_Config+0x140>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072e:	4b3d      	ldr	r3, [pc, #244]	; (8000824 <SystemClock_Config+0x144>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a3c      	ldr	r2, [pc, #240]	; (8000824 <SystemClock_Config+0x144>)
 8000734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000738:	6013      	str	r3, [r2, #0]
 800073a:	4b3a      	ldr	r3, [pc, #232]	; (8000824 <SystemClock_Config+0x144>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000746:	2301      	movs	r3, #1
 8000748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800074c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000750:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000762:	2319      	movs	r3, #25
 8000764:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000768:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800076c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000776:	2304      	movs	r3, #4
 8000778:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fa43 	bl	8001c0c <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800078c:	f000 fcc8 	bl	8001120 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000790:	f001 f9ec 	bl	8001b6c <HAL_PWREx_EnableOverDrive>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800079a:	f000 fcc1 	bl	8001120 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a4:	2302      	movs	r3, #2
 80007a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007c4:	2107      	movs	r1, #7
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fc92 	bl	80020f0 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80007d2:	f000 fca5 	bl	8001120 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SDMMC2
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <SystemClock_Config+0x148>)
 80007d8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80007da:	23c0      	movs	r3, #192	; 0xc0
 80007dc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80007de:	2302      	movs	r3, #2
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 80007e2:	2303      	movs	r3, #3
 80007e4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80007e6:	2301      	movs	r3, #1
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80007ea:	2301      	movs	r3, #1
 80007ec:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80007ee:	2300      	movs	r3, #0
 80007f0:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007f2:	2300      	movs	r3, #0
 80007f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80007f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 80007fe:	2300      	movs	r3, #0
 8000800:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fe71 	bl	80024f0 <HAL_RCCEx_PeriphCLKConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8000814:	f000 fc84 	bl	8001120 <Error_Handler>
  }
}
 8000818:	bf00      	nop
 800081a:	37e0      	adds	r7, #224	; 0xe0
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000
 8000828:	04200040 	.word	0x04200040

0800082c <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_SDMMC2_SD_Init+0x38>)
 8000832:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <MX_SDMMC2_SD_Init+0x3c>)
 8000834:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_SDMMC2_SD_Init+0x38>)
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_SDMMC2_SD_Init+0x38>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_SDMMC2_SD_Init+0x38>)
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_SDMMC2_SD_Init+0x38>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <MX_SDMMC2_SD_Init+0x38>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <MX_SDMMC2_SD_Init+0x38>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	20000058 	.word	0x20000058
 8000868:	40011c00 	.word	0x40011c00

0800086c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 8000872:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <MX_USART1_UART_Init+0x5c>)
 8000874:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 80008b0:	f003 fc4a 	bl	8004148 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008ba:	f000 fc31 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000dc 	.word	0x200000dc
 80008c8:	40011000 	.word	0x40011000

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b090      	sub	sp, #64	; 0x40
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e2:	4bac      	ldr	r3, [pc, #688]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4aab      	ldr	r2, [pc, #684]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 80008e8:	f043 0310 	orr.w	r3, r3, #16
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4ba9      	ldr	r3, [pc, #676]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0310 	and.w	r3, r3, #16
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80008f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008fa:	4ba6      	ldr	r3, [pc, #664]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4aa5      	ldr	r2, [pc, #660]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 8000900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4ba3      	ldr	r3, [pc, #652]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
 8000910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	4ba0      	ldr	r3, [pc, #640]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a9f      	ldr	r2, [pc, #636]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b9d      	ldr	r3, [pc, #628]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	623b      	str	r3, [r7, #32]
 8000928:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	4b9a      	ldr	r3, [pc, #616]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a99      	ldr	r2, [pc, #612]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b97      	ldr	r3, [pc, #604]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	61fb      	str	r3, [r7, #28]
 8000940:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b94      	ldr	r3, [pc, #592]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a93      	ldr	r2, [pc, #588]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b91      	ldr	r3, [pc, #580]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	61bb      	str	r3, [r7, #24]
 8000958:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b8e      	ldr	r3, [pc, #568]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a8d      	ldr	r2, [pc, #564]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b8b      	ldr	r3, [pc, #556]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000972:	4b88      	ldr	r3, [pc, #544]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a87      	ldr	r2, [pc, #540]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 8000978:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b85      	ldr	r3, [pc, #532]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800098a:	4b82      	ldr	r3, [pc, #520]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a81      	ldr	r2, [pc, #516]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 8000990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b7f      	ldr	r3, [pc, #508]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009a2:	4b7c      	ldr	r3, [pc, #496]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a7b      	ldr	r2, [pc, #492]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 80009a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b79      	ldr	r3, [pc, #484]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ba:	4b76      	ldr	r3, [pc, #472]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a75      	ldr	r2, [pc, #468]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 80009c0:	f043 0320 	orr.w	r3, r3, #32
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b73      	ldr	r3, [pc, #460]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0320 	and.w	r3, r3, #32
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	4b70      	ldr	r3, [pc, #448]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a6f      	ldr	r2, [pc, #444]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 80009d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b6d      	ldr	r3, [pc, #436]	; (8000b94 <MX_GPIO_Init+0x2c8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009f0:	4869      	ldr	r0, [pc, #420]	; (8000b98 <MX_GPIO_Init+0x2cc>)
 80009f2:	f001 f891 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_SCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 80009f6:	2378      	movs	r3, #120	; 0x78
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000a06:	2306      	movs	r3, #6
 8000a08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4862      	ldr	r0, [pc, #392]	; (8000b9c <MX_GPIO_Init+0x2d0>)
 8000a12:	f000 febf 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000a16:	2304      	movs	r3, #4
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a26:	2309      	movs	r3, #9
 8000a28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a2e:	4619      	mov	r1, r3
 8000a30:	485a      	ldr	r0, [pc, #360]	; (8000b9c <MX_GPIO_Init+0x2d0>)
 8000a32:	f000 feaf 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000a36:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a48:	230b      	movs	r3, #11
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a50:	4619      	mov	r1, r3
 8000a52:	4853      	ldr	r0, [pc, #332]	; (8000ba0 <MX_GPIO_Init+0x2d4>)
 8000a54:	f000 fe9e 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin 
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin 
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8000a58:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a72:	4619      	mov	r1, r3
 8000a74:	4849      	ldr	r0, [pc, #292]	; (8000b9c <MX_GPIO_Init+0x2d0>)
 8000a76:	f000 fe8d 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000a7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a80:	2312      	movs	r3, #18
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a94:	4619      	mov	r1, r3
 8000a96:	4843      	ldr	r0, [pc, #268]	; (8000ba4 <MX_GPIO_Init+0x2d8>)
 8000a98:	f000 fe7c 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8000a9c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000aae:	230a      	movs	r3, #10
 8000ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	483a      	ldr	r0, [pc, #232]	; (8000ba4 <MX_GPIO_Init+0x2d8>)
 8000aba:	f000 fe6b 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RX_Pin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8000abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4833      	ldr	r0, [pc, #204]	; (8000ba8 <MX_GPIO_Init+0x2dc>)
 8000adc:	f000 fe5a 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_Pin */
  GPIO_InitStruct.Pin = CEC_Pin;
 8000ae0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae6:	2312      	movs	r3, #18
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8000af2:	2304      	movs	r3, #4
 8000af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afa:	4619      	mov	r1, r3
 8000afc:	482b      	ldr	r0, [pc, #172]	; (8000bac <MX_GPIO_Init+0x2e0>)
 8000afe:	f000 fe49 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SDA_Pin */
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b06:	2312      	movs	r3, #18
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8000b12:	230b      	movs	r3, #11
 8000b14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4821      	ldr	r0, [pc, #132]	; (8000ba4 <MX_GPIO_Init+0x2d8>)
 8000b1e:	f000 fe39 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000b22:	2340      	movs	r3, #64	; 0x40
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b32:	230a      	movs	r3, #10
 8000b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4819      	ldr	r0, [pc, #100]	; (8000ba4 <MX_GPIO_Init+0x2d8>)
 8000b3e:	f000 fe29 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A12_Pin 
                           FMC_A10_Pin FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin 
 8000b42:	f248 1337 	movw	r3, #33079	; 0x8137
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b54:	230c      	movs	r3, #12
 8000b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4810      	ldr	r0, [pc, #64]	; (8000ba0 <MX_GPIO_Init+0x2d4>)
 8000b60:	f000 fe18 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_USER1_Pin Audio_INT_Pin WIFI_RST_Pin ARD_D8_Pin 
                           LD_USER2_Pin ARD_D7_Pin ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin 
 8000b64:	f247 033b 	movw	r3, #28731	; 0x703b
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000b72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b76:	4619      	mov	r1, r3
 8000b78:	4807      	ldr	r0, [pc, #28]	; (8000b98 <MX_GPIO_Init+0x2cc>)
 8000b7a:	f000 fe0b 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin 
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8000b7e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b90:	230c      	movs	r3, #12
 8000b92:	e00d      	b.n	8000bb0 <MX_GPIO_Init+0x2e4>
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40022400 	.word	0x40022400
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40021800 	.word	0x40021800
 8000ba4:	40020400 	.word	0x40020400
 8000ba8:	40020800 	.word	0x40020800
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	48ba      	ldr	r0, [pc, #744]	; (8000ea4 <MX_GPIO_Init+0x5d8>)
 8000bba:	f000 fdeb 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN5_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 8000bbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd8:	4619      	mov	r1, r3
 8000bda:	48b3      	ldr	r0, [pc, #716]	; (8000ea8 <MX_GPIO_Init+0x5dc>)
 8000bdc:	f000 fdda 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8000be0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000bf2:	2309      	movs	r3, #9
 8000bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	48aa      	ldr	r0, [pc, #680]	; (8000ea8 <MX_GPIO_Init+0x5dc>)
 8000bfe:	f000 fdc9 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_SCK_Pin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8000c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c14:	2305      	movs	r3, #5
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	48a3      	ldr	r0, [pc, #652]	; (8000eac <MX_GPIO_Init+0x5e0>)
 8000c20:	f000 fdb8 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|LCD_BL_CTRL_Pin;
 8000c24:	f44f 43a2 	mov.w	r3, #20736	; 0x5100
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c36:	4619      	mov	r1, r3
 8000c38:	489d      	ldr	r0, [pc, #628]	; (8000eb0 <MX_GPIO_Init+0x5e4>)
 8000c3a:	f000 fdab 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL2_Pin D27_Pin D26_Pin FMC_NBL3_Pin 
                           D29_Pin D31_Pin D28_Pin D25_Pin 
                           D30_Pin D24_Pin */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 8000c3e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin 
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c50:	230c      	movs	r3, #12
 8000c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4895      	ldr	r0, [pc, #596]	; (8000eb0 <MX_GPIO_Init+0x5e4>)
 8000c5c:	f000 fd9a 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin 
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin 
 8000c60:	23f8      	movs	r3, #248	; 0xf8
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c64:	2300      	movs	r3, #0
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000c6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c70:	4619      	mov	r1, r3
 8000c72:	4890      	ldr	r0, [pc, #576]	; (8000eb4 <MX_GPIO_Init+0x5e8>)
 8000c74:	f000 fd8e 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8000c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c92:	4619      	mov	r1, r3
 8000c94:	4888      	ldr	r0, [pc, #544]	; (8000eb8 <MX_GPIO_Init+0x5ec>)
 8000c96:	f000 fd7d 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8000c9a:	2330      	movs	r3, #48	; 0x30
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000caa:	4619      	mov	r1, r3
 8000cac:	487d      	ldr	r0, [pc, #500]	; (8000ea4 <MX_GPIO_Init+0x5d8>)
 8000cae:	f000 fd71 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8000cb2:	2308      	movs	r3, #8
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4875      	ldr	r0, [pc, #468]	; (8000ea4 <MX_GPIO_Init+0x5d8>)
 8000cce:	f000 fd61 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8000cd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ce4:	2305      	movs	r3, #5
 8000ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cec:	4619      	mov	r1, r3
 8000cee:	486f      	ldr	r0, [pc, #444]	; (8000eac <MX_GPIO_Init+0x5e0>)
 8000cf0:	f000 fd50 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin 
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin 
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8000cf4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d06:	230c      	movs	r3, #12
 8000d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	486a      	ldr	r0, [pc, #424]	; (8000ebc <MX_GPIO_Init+0x5f0>)
 8000d12:	f000 fd3f 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_RESET_Pin */
  GPIO_InitStruct.Pin = DSI_RESET_Pin;
 8000d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4864      	ldr	r0, [pc, #400]	; (8000ec0 <MX_GPIO_Init+0x5f4>)
 8000d30:	f000 fd30 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_TX_Pin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8000d34:	2304      	movs	r3, #4
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d44:	2308      	movs	r3, #8
 8000d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4855      	ldr	r0, [pc, #340]	; (8000ea4 <MX_GPIO_Init+0x5d8>)
 8000d50:	f000 fd20 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : D23_Pin D21_Pin D22_Pin FMC_SDNME_Pin 
                           FMC_SDNE0_Pin FMC_SDCKE0_Pin D20_Pin FMC_D_7_Pin 
                           FMC_D19_Pin FMC_D16_Pin FMC_D18_Pin */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin 
 8000d54:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin 
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d66:	230c      	movs	r3, #12
 8000d68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4854      	ldr	r0, [pc, #336]	; (8000ec4 <MX_GPIO_Init+0x5f8>)
 8000d72:	f000 fd0f 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8000d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d88:	230a      	movs	r3, #10
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d90:	4619      	mov	r1, r3
 8000d92:	4847      	ldr	r0, [pc, #284]	; (8000eb0 <MX_GPIO_Init+0x5e4>)
 8000d94:	f000 fcfe 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CLK_Pin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8000d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000daa:	2300      	movs	r3, #0
 8000dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db2:	4619      	mov	r1, r3
 8000db4:	483d      	ldr	r0, [pc, #244]	; (8000eac <MX_GPIO_Init+0x5e0>)
 8000db6:	f000 fced 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000dba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dc0:	4b41      	ldr	r3, [pc, #260]	; (8000ec8 <MX_GPIO_Init+0x5fc>)
 8000dc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4838      	ldr	r0, [pc, #224]	; (8000eb0 <MX_GPIO_Init+0x5e4>)
 8000dd0:	f000 fce0 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000dd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de6:	4619      	mov	r1, r3
 8000de8:	4831      	ldr	r0, [pc, #196]	; (8000eb0 <MX_GPIO_Init+0x5e4>)
 8000dea:	f000 fcd3 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8000dee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e00:	2302      	movs	r3, #2
 8000e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4827      	ldr	r0, [pc, #156]	; (8000ea8 <MX_GPIO_Init+0x5dc>)
 8000e0c:	f000 fcc2 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_RX_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8000e10:	23c0      	movs	r3, #192	; 0xc0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e20:	2308      	movs	r3, #8
 8000e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	481f      	ldr	r0, [pc, #124]	; (8000ea8 <MX_GPIO_Init+0x5dc>)
 8000e2c:	f000 fcb2 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000e30:	2310      	movs	r3, #16
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e40:	230a      	movs	r3, #10
 8000e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e48:	4619      	mov	r1, r3
 8000e4a:	481e      	ldr	r0, [pc, #120]	; (8000ec4 <MX_GPIO_Init+0x5f8>)
 8000e4c:	f000 fca2 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_MCLKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000e60:	2306      	movs	r3, #6
 8000e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4813      	ldr	r0, [pc, #76]	; (8000eb8 <MX_GPIO_Init+0x5ec>)
 8000e6c:	f000 fc92 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8000e70:	2348      	movs	r3, #72	; 0x48
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e80:	4619      	mov	r1, r3
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <MX_GPIO_Init+0x5ec>)
 8000e84:	f000 fc86 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	e013      	b.n	8000ecc <MX_GPIO_Init+0x600>
 8000ea4:	40020c00 	.word	0x40020c00
 8000ea8:	40020800 	.word	0x40020800
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	40022000 	.word	0x40022000
 8000eb4:	40022800 	.word	0x40022800
 8000eb8:	40021800 	.word	0x40021800
 8000ebc:	40021400 	.word	0x40021400
 8000ec0:	40022400 	.word	0x40022400
 8000ec4:	40021c00 	.word	0x40021c00
 8000ec8:	10120000 	.word	0x10120000
 8000ecc:	4883      	ldr	r0, [pc, #524]	; (80010dc <MX_GPIO_Init+0x810>)
 8000ece:	f000 fc61 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8000ed2:	2340      	movs	r3, #64	; 0x40
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eea:	4619      	mov	r1, r3
 8000eec:	487b      	ldr	r0, [pc, #492]	; (80010dc <MX_GPIO_Init+0x810>)
 8000eee:	f000 fc51 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8000ef2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f04:	4619      	mov	r1, r3
 8000f06:	4875      	ldr	r0, [pc, #468]	; (80010dc <MX_GPIO_Init+0x810>)
 8000f08:	f000 fc44 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_STP_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f1c:	230a      	movs	r3, #10
 8000f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f24:	4619      	mov	r1, r3
 8000f26:	486e      	ldr	r0, [pc, #440]	; (80010e0 <MX_GPIO_Init+0x814>)
 8000f28:	f000 fc34 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f2c:	2332      	movs	r3, #50	; 0x32
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f3c:	230b      	movs	r3, #11
 8000f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f44:	4619      	mov	r1, r3
 8000f46:	4866      	ldr	r0, [pc, #408]	; (80010e0 <MX_GPIO_Init+0x814>)
 8000f48:	f000 fc24 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f50:	2303      	movs	r3, #3
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4860      	ldr	r0, [pc, #384]	; (80010e0 <MX_GPIO_Init+0x814>)
 8000f60:	f000 fc18 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f64:	2304      	movs	r3, #4
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f74:	2309      	movs	r3, #9
 8000f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4859      	ldr	r0, [pc, #356]	; (80010e4 <MX_GPIO_Init+0x818>)
 8000f80:	f000 fc08 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SCL_Pin */
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8000f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f8a:	2312      	movs	r3, #18
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000f96:	2304      	movs	r3, #4
 8000f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4851      	ldr	r0, [pc, #324]	; (80010e8 <MX_GPIO_Init+0x81c>)
 8000fa2:	f000 fbf7 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8000fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fb8:	2309      	movs	r3, #9
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4849      	ldr	r0, [pc, #292]	; (80010e8 <MX_GPIO_Init+0x81c>)
 8000fc4:	f000 fbe6 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fc8:	2386      	movs	r3, #134	; 0x86
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd8:	230b      	movs	r3, #11
 8000fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4842      	ldr	r0, [pc, #264]	; (80010ec <MX_GPIO_Init+0x820>)
 8000fe4:	f000 fbd6 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fec:	4b40      	ldr	r3, [pc, #256]	; (80010f0 <MX_GPIO_Init+0x824>)
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	483c      	ldr	r0, [pc, #240]	; (80010ec <MX_GPIO_Init+0x820>)
 8000ffc:	f000 fbca 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8001000:	2350      	movs	r3, #80	; 0x50
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001004:	2303      	movs	r3, #3
 8001006:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001010:	4619      	mov	r1, r3
 8001012:	4836      	ldr	r0, [pc, #216]	; (80010ec <MX_GPIO_Init+0x820>)
 8001014:	f000 fbbe 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_TX_Pin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8001018:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800102a:	230a      	movs	r3, #10
 800102c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001032:	4619      	mov	r1, r3
 8001034:	482c      	ldr	r0, [pc, #176]	; (80010e8 <MX_GPIO_Init+0x81c>)
 8001036:	f000 fbad 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103e:	2300      	movs	r3, #0
 8001040:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001046:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104a:	4619      	mov	r1, r3
 800104c:	4829      	ldr	r0, [pc, #164]	; (80010f4 <MX_GPIO_Init+0x828>)
 800104e:	f000 fba1 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001052:	2328      	movs	r3, #40	; 0x28
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001062:	230a      	movs	r3, #10
 8001064:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106a:	4619      	mov	r1, r3
 800106c:	481f      	ldr	r0, [pc, #124]	; (80010ec <MX_GPIO_Init+0x820>)
 800106e:	f000 fb91 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSIHOST_TE_Pin */
  GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 8001072:	2304      	movs	r3, #4
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001082:	230d      	movs	r3, #13
 8001084:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108a:	4619      	mov	r1, r3
 800108c:	481a      	ldr	r0, [pc, #104]	; (80010f8 <MX_GPIO_Init+0x82c>)
 800108e:	f000 fb81 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001092:	2340      	movs	r3, #64	; 0x40
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80010a2:	2309      	movs	r3, #9
 80010a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010aa:	4619      	mov	r1, r3
 80010ac:	4811      	ldr	r0, [pc, #68]	; (80010f4 <MX_GPIO_Init+0x828>)
 80010ae:	f000 fb71 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80010b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010c4:	2305      	movs	r3, #5
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010cc:	4619      	mov	r1, r3
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_GPIO_Init+0x818>)
 80010d0:	f000 fb60 	bl	8001794 <HAL_GPIO_Init>

}
 80010d4:	bf00      	nop
 80010d6:	3740      	adds	r7, #64	; 0x40
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40021400 	.word	0x40021400
 80010e0:	40020800 	.word	0x40020800
 80010e4:	40020400 	.word	0x40020400
 80010e8:	40020c00 	.word	0x40020c00
 80010ec:	40020000 	.word	0x40020000
 80010f0:	10110000 	.word	0x10110000
 80010f4:	40021c00 	.word	0x40021c00
 80010f8:	40022400 	.word	0x40022400

080010fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d101      	bne.n	8001112 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800110e:	f000 fa1d 	bl	800154c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40001000 	.word	0x40001000

08001120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_MspInit+0x50>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	4a11      	ldr	r2, [pc, #68]	; (8001180 <HAL_MspInit+0x50>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001140:	6413      	str	r3, [r2, #64]	; 0x40
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_MspInit+0x50>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_MspInit+0x50>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <HAL_MspInit+0x50>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_MspInit+0x50>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2005      	movs	r0, #5
 800116c:	f000 fae8 	bl	8001740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001170:	2005      	movs	r0, #5
 8001172:	f000 fb01 	bl	8001778 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800

08001184 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	; 0x30
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a33      	ldr	r2, [pc, #204]	; (8001270 <HAL_SD_MspInit+0xec>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d160      	bne.n	8001268 <HAL_SD_MspInit+0xe4>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80011a6:	4b33      	ldr	r3, [pc, #204]	; (8001274 <HAL_SD_MspInit+0xf0>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a32      	ldr	r2, [pc, #200]	; (8001274 <HAL_SD_MspInit+0xf0>)
 80011ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b30      	ldr	r3, [pc, #192]	; (8001274 <HAL_SD_MspInit+0xf0>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <HAL_SD_MspInit+0xf0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a2c      	ldr	r2, [pc, #176]	; (8001274 <HAL_SD_MspInit+0xf0>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <HAL_SD_MspInit+0xf0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d6:	4b27      	ldr	r3, [pc, #156]	; (8001274 <HAL_SD_MspInit+0xf0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a26      	ldr	r2, [pc, #152]	; (8001274 <HAL_SD_MspInit+0xf0>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <HAL_SD_MspInit+0xf0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <HAL_SD_MspInit+0xf0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a20      	ldr	r2, [pc, #128]	; (8001274 <HAL_SD_MspInit+0xf0>)
 80011f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <HAL_SD_MspInit+0xf0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0 
    */
    GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8001206:	2318      	movs	r3, #24
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8001216:	230a      	movs	r3, #10
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	4815      	ldr	r0, [pc, #84]	; (8001278 <HAL_SD_MspInit+0xf4>)
 8001222:	f000 fab7 	bl	8001794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8001226:	23c0      	movs	r3, #192	; 0xc0
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001236:	230b      	movs	r3, #11
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	480e      	ldr	r0, [pc, #56]	; (800127c <HAL_SD_MspInit+0xf8>)
 8001242:	f000 faa7 	bl	8001794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8001246:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001258:	230b      	movs	r3, #11
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	4807      	ldr	r0, [pc, #28]	; (8001280 <HAL_SD_MspInit+0xfc>)
 8001264:	f000 fa96 	bl	8001794 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8001268:	bf00      	nop
 800126a:	3730      	adds	r7, #48	; 0x30
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40011c00 	.word	0x40011c00
 8001274:	40023800 	.word	0x40023800
 8001278:	40020400 	.word	0x40020400
 800127c:	40020c00 	.word	0x40020c00
 8001280:	40021800 	.word	0x40021800

08001284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a20      	ldr	r2, [pc, #128]	; (8001324 <HAL_UART_MspInit+0xa0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d139      	bne.n	800131a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <HAL_UART_MspInit+0xa4>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a1f      	ldr	r2, [pc, #124]	; (8001328 <HAL_UART_MspInit+0xa4>)
 80012ac:	f043 0310 	orr.w	r3, r3, #16
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_UART_MspInit+0xa4>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <HAL_UART_MspInit+0xa4>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a19      	ldr	r2, [pc, #100]	; (8001328 <HAL_UART_MspInit+0xa4>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <HAL_UART_MspInit+0xa4>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80012d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012e8:	2307      	movs	r3, #7
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	480e      	ldr	r0, [pc, #56]	; (800132c <HAL_UART_MspInit+0xa8>)
 80012f4:	f000 fa4e 	bl	8001794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80012f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800130a:	2307      	movs	r3, #7
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <HAL_UART_MspInit+0xa8>)
 8001316:	f000 fa3d 	bl	8001794 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40011000 	.word	0x40011000
 8001328:	40023800 	.word	0x40023800
 800132c:	40020000 	.word	0x40020000

08001330 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	; 0x30
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	2036      	movs	r0, #54	; 0x36
 8001346:	f000 f9fb 	bl	8001740 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800134a:	2036      	movs	r0, #54	; 0x36
 800134c:	f000 fa14 	bl	8001778 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001350:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <HAL_InitTick+0xa0>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <HAL_InitTick+0xa0>)
 8001356:	f043 0310 	orr.w	r3, r3, #16
 800135a:	6413      	str	r3, [r2, #64]	; 0x40
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <HAL_InitTick+0xa0>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001368:	f107 0210 	add.w	r2, r7, #16
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f001 f88a 	bl	800248c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001378:	f001 f860 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 800137c:	4603      	mov	r3, r0
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001384:	4a13      	ldr	r2, [pc, #76]	; (80013d4 <HAL_InitTick+0xa4>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	0c9b      	lsrs	r3, r3, #18
 800138c:	3b01      	subs	r3, #1
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_InitTick+0xa8>)
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <HAL_InitTick+0xac>)
 8001394:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_InitTick+0xa8>)
 8001398:	f240 32e7 	movw	r2, #999	; 0x3e7
 800139c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800139e:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <HAL_InitTick+0xa8>)
 80013a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <HAL_InitTick+0xa8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_InitTick+0xa8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <HAL_InitTick+0xa8>)
 80013b2:	f002 fc63 	bl	8003c7c <HAL_TIM_Base_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d104      	bne.n	80013c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013bc:	4806      	ldr	r0, [pc, #24]	; (80013d8 <HAL_InitTick+0xa8>)
 80013be:	f002 fc93 	bl	8003ce8 <HAL_TIM_Base_Start_IT>
 80013c2:	4603      	mov	r3, r0
 80013c4:	e000      	b.n	80013c8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3730      	adds	r7, #48	; 0x30
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40023800 	.word	0x40023800
 80013d4:	431bde83 	.word	0x431bde83
 80013d8:	2000015c 	.word	0x2000015c
 80013dc:	40001000 	.word	0x40001000

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <MemManage_Handler+0x4>

080013fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <UsageFault_Handler+0x4>

08001406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <TIM6_DAC_IRQHandler+0x10>)
 8001446:	f002 fc79 	bl	8003d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000015c 	.word	0x2000015c

08001454 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <SystemInit+0x5c>)
 800145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145e:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <SystemInit+0x5c>)
 8001460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <SystemInit+0x60>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a11      	ldr	r2, [pc, #68]	; (80014b4 <SystemInit+0x60>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <SystemInit+0x60>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <SystemInit+0x60>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	490d      	ldr	r1, [pc, #52]	; (80014b4 <SystemInit+0x60>)
 8001480:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <SystemInit+0x64>)
 8001482:	4013      	ands	r3, r2
 8001484:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <SystemInit+0x60>)
 8001488:	4a0c      	ldr	r2, [pc, #48]	; (80014bc <SystemInit+0x68>)
 800148a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <SystemInit+0x60>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <SystemInit+0x60>)
 8001492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001496:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <SystemInit+0x60>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SystemInit+0x5c>)
 80014a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014a4:	609a      	str	r2, [r3, #8]
#endif
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00
 80014b4:	40023800 	.word	0x40023800
 80014b8:	fef6ffff 	.word	0xfef6ffff
 80014bc:	24003010 	.word	0x24003010

080014c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014c6:	e003      	b.n	80014d0 <LoopCopyDataInit>

080014c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014ce:	3104      	adds	r1, #4

080014d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014d0:	480b      	ldr	r0, [pc, #44]	; (8001500 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014d8:	d3f6      	bcc.n	80014c8 <CopyDataInit>
  ldr  r2, =_sbss
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014dc:	e002      	b.n	80014e4 <LoopFillZerobss>

080014de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014e0:	f842 3b04 	str.w	r3, [r2], #4

080014e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014e8:	d3f9      	bcc.n	80014de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014ea:	f7ff ffb3 	bl	8001454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ee:	f007 f861 	bl	80085b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014f2:	f7ff f881 	bl	80005f8 <main>
  bx  lr    
 80014f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014f8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80014fc:	08008b24 	.word	0x08008b24
  ldr  r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001504:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8001508:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 800150c:	2000060c 	.word	0x2000060c

08001510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC_IRQHandler>
	...

08001514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_Init+0x34>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_Init+0x34>)
 800151e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001522:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_Init+0x34>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_Init+0x34>)
 800152a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f000 f8fa 	bl	800172a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff fefa 	bl	8001330 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800153c:	f7ff fdf8 	bl	8001130 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023c00 	.word	0x40023c00

0800154c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_IncTick+0x20>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_IncTick+0x24>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_IncTick+0x24>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000004 	.word	0x20000004
 8001570:	2000019c 	.word	0x2000019c

08001574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <HAL_GetTick+0x14>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	2000019c 	.word	0x2000019c

0800158c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001594:	f7ff ffee 	bl	8001574 <HAL_GetTick>
 8001598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a4:	d005      	beq.n	80015b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_Delay+0x40>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b2:	bf00      	nop
 80015b4:	f7ff ffde 	bl	8001574 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d8f7      	bhi.n	80015b4 <HAL_Delay+0x28>
  {
  }
}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000004 	.word	0x20000004

080015d0 <__NVIC_SetPriorityGrouping>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <__NVIC_SetPriorityGrouping+0x40>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	; (8001610 <__NVIC_SetPriorityGrouping+0x40>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00
 8001614:	05fa0000 	.word	0x05fa0000

08001618 <__NVIC_GetPriorityGrouping>:
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_EnableIRQ>:
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db0b      	blt.n	800165e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	4907      	ldr	r1, [pc, #28]	; (800166c <__NVIC_EnableIRQ+0x38>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	2001      	movs	r0, #1
 8001656:	fa00 f202 	lsl.w	r2, r0, r2
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_SetPriority>:
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	490c      	ldr	r1, [pc, #48]	; (80016bc <__NVIC_SetPriority+0x4c>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001698:	e00a      	b.n	80016b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4908      	ldr	r1, [pc, #32]	; (80016c0 <__NVIC_SetPriority+0x50>)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	3b04      	subs	r3, #4
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	440b      	add	r3, r1
 80016ae:	761a      	strb	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <NVIC_EncodePriority>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f1c3 0307 	rsb	r3, r3, #7
 80016de:	2b04      	cmp	r3, #4
 80016e0:	bf28      	it	cs
 80016e2:	2304      	movcs	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3304      	adds	r3, #4
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <NVIC_EncodePriority+0x30>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3b03      	subs	r3, #3
 80016f2:	e000      	b.n	80016f6 <NVIC_EncodePriority+0x32>
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43d9      	mvns	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	4313      	orrs	r3, r2
}
 800171e:	4618      	mov	r0, r3
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ff4c 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001752:	f7ff ff61 	bl	8001618 <__NVIC_GetPriorityGrouping>
 8001756:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	6978      	ldr	r0, [r7, #20]
 800175e:	f7ff ffb1 	bl	80016c4 <NVIC_EncodePriority>
 8001762:	4602      	mov	r2, r0
 8001764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ff80 	bl	8001670 <__NVIC_SetPriority>
}
 8001770:	bf00      	nop
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ff54 	bl	8001634 <__NVIC_EnableIRQ>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	e175      	b.n	8001aa0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017b4:	2201      	movs	r2, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	f040 8164 	bne.w	8001a9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x4e>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b12      	cmp	r3, #18
 80017e0:	d123      	bne.n	800182a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	08da      	lsrs	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3208      	adds	r2, #8
 80017ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	220f      	movs	r2, #15
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	691a      	ldr	r2, [r3, #16]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	69b9      	ldr	r1, [r7, #24]
 8001826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0203 	and.w	r2, r3, #3
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d00b      	beq.n	800187e <HAL_GPIO_Init+0xea>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d007      	beq.n	800187e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001872:	2b11      	cmp	r3, #17
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b12      	cmp	r3, #18
 800187c:	d130      	bne.n	80018e0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b4:	2201      	movs	r2, #1
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	f003 0201 	and.w	r2, r3, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	2203      	movs	r2, #3
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80be 	beq.w	8001a9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	4b65      	ldr	r3, [pc, #404]	; (8001ab4 <HAL_GPIO_Init+0x320>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a64      	ldr	r2, [pc, #400]	; (8001ab4 <HAL_GPIO_Init+0x320>)
 8001924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b62      	ldr	r3, [pc, #392]	; (8001ab4 <HAL_GPIO_Init+0x320>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001936:	4a60      	ldr	r2, [pc, #384]	; (8001ab8 <HAL_GPIO_Init+0x324>)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	3302      	adds	r3, #2
 800193e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	220f      	movs	r2, #15
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a57      	ldr	r2, [pc, #348]	; (8001abc <HAL_GPIO_Init+0x328>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d037      	beq.n	80019d2 <HAL_GPIO_Init+0x23e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a56      	ldr	r2, [pc, #344]	; (8001ac0 <HAL_GPIO_Init+0x32c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d031      	beq.n	80019ce <HAL_GPIO_Init+0x23a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a55      	ldr	r2, [pc, #340]	; (8001ac4 <HAL_GPIO_Init+0x330>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d02b      	beq.n	80019ca <HAL_GPIO_Init+0x236>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a54      	ldr	r2, [pc, #336]	; (8001ac8 <HAL_GPIO_Init+0x334>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d025      	beq.n	80019c6 <HAL_GPIO_Init+0x232>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a53      	ldr	r2, [pc, #332]	; (8001acc <HAL_GPIO_Init+0x338>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01f      	beq.n	80019c2 <HAL_GPIO_Init+0x22e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a52      	ldr	r2, [pc, #328]	; (8001ad0 <HAL_GPIO_Init+0x33c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d019      	beq.n	80019be <HAL_GPIO_Init+0x22a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a51      	ldr	r2, [pc, #324]	; (8001ad4 <HAL_GPIO_Init+0x340>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <HAL_GPIO_Init+0x226>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a50      	ldr	r2, [pc, #320]	; (8001ad8 <HAL_GPIO_Init+0x344>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00d      	beq.n	80019b6 <HAL_GPIO_Init+0x222>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4f      	ldr	r2, [pc, #316]	; (8001adc <HAL_GPIO_Init+0x348>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d007      	beq.n	80019b2 <HAL_GPIO_Init+0x21e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4e      	ldr	r2, [pc, #312]	; (8001ae0 <HAL_GPIO_Init+0x34c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d101      	bne.n	80019ae <HAL_GPIO_Init+0x21a>
 80019aa:	2309      	movs	r3, #9
 80019ac:	e012      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019ae:	230a      	movs	r3, #10
 80019b0:	e010      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019b2:	2308      	movs	r3, #8
 80019b4:	e00e      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019b6:	2307      	movs	r3, #7
 80019b8:	e00c      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019ba:	2306      	movs	r3, #6
 80019bc:	e00a      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019be:	2305      	movs	r3, #5
 80019c0:	e008      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019c2:	2304      	movs	r3, #4
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019c6:	2303      	movs	r3, #3
 80019c8:	e004      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e002      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019d2:	2300      	movs	r3, #0
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	f002 0203 	and.w	r2, r2, #3
 80019da:	0092      	lsls	r2, r2, #2
 80019dc:	4093      	lsls	r3, r2
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019e4:	4934      	ldr	r1, [pc, #208]	; (8001ab8 <HAL_GPIO_Init+0x324>)
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	3302      	adds	r3, #2
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f2:	4b3c      	ldr	r3, [pc, #240]	; (8001ae4 <HAL_GPIO_Init+0x350>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a16:	4a33      	ldr	r2, [pc, #204]	; (8001ae4 <HAL_GPIO_Init+0x350>)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a1c:	4b31      	ldr	r3, [pc, #196]	; (8001ae4 <HAL_GPIO_Init+0x350>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a40:	4a28      	ldr	r2, [pc, #160]	; (8001ae4 <HAL_GPIO_Init+0x350>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a46:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_GPIO_Init+0x350>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a6a:	4a1e      	ldr	r2, [pc, #120]	; (8001ae4 <HAL_GPIO_Init+0x350>)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a70:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <HAL_GPIO_Init+0x350>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a94:	4a13      	ldr	r2, [pc, #76]	; (8001ae4 <HAL_GPIO_Init+0x350>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	61fb      	str	r3, [r7, #28]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	2b0f      	cmp	r3, #15
 8001aa4:	f67f ae86 	bls.w	80017b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3724      	adds	r7, #36	; 0x24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40013800 	.word	0x40013800
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40020400 	.word	0x40020400
 8001ac4:	40020800 	.word	0x40020800
 8001ac8:	40020c00 	.word	0x40020c00
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40021400 	.word	0x40021400
 8001ad4:	40021800 	.word	0x40021800
 8001ad8:	40021c00 	.word	0x40021c00
 8001adc:	40022000 	.word	0x40022000
 8001ae0:	40022400 	.word	0x40022400
 8001ae4:	40013c00 	.word	0x40013c00

08001ae8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	887b      	ldrh	r3, [r7, #2]
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	e001      	b.n	8001b0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
 8001b24:	4613      	mov	r3, r2
 8001b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b28:	787b      	ldrb	r3, [r7, #1]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b34:	e003      	b.n	8001b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	041a      	lsls	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	619a      	str	r2, [r3, #24]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5a:	6013      	str	r3, [r2, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40007000 	.word	0x40007000

08001b6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	4a22      	ldr	r2, [pc, #136]	; (8001c04 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	; 0x40
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1d      	ldr	r2, [pc, #116]	; (8001c08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b9a:	f7ff fceb 	bl	8001574 <HAL_GetTick>
 8001b9e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ba0:	e009      	b.n	8001bb6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ba2:	f7ff fce7 	bl	8001574 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bb0:	d901      	bls.n	8001bb6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e022      	b.n	8001bfc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc2:	d1ee      	bne.n	8001ba2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0f      	ldr	r2, [pc, #60]	; (8001c08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bd0:	f7ff fcd0 	bl	8001574 <HAL_GetTick>
 8001bd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bd6:	e009      	b.n	8001bec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bd8:	f7ff fccc 	bl	8001574 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001be6:	d901      	bls.n	8001bec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e007      	b.n	8001bfc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bf8:	d1ee      	bne.n	8001bd8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40007000 	.word	0x40007000

08001c0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e25e      	b.n	80020e0 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8087 	beq.w	8001d3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c30:	4b96      	ldr	r3, [pc, #600]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d00c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c3c:	4b93      	ldr	r3, [pc, #588]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d112      	bne.n	8001c6e <HAL_RCC_OscConfig+0x62>
 8001c48:	4b90      	ldr	r3, [pc, #576]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c54:	d10b      	bne.n	8001c6e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c56:	4b8d      	ldr	r3, [pc, #564]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d06c      	beq.n	8001d3c <HAL_RCC_OscConfig+0x130>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d168      	bne.n	8001d3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e238      	b.n	80020e0 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x7a>
 8001c78:	4b84      	ldr	r3, [pc, #528]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a83      	ldr	r2, [pc, #524]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	e02e      	b.n	8001ce4 <HAL_RCC_OscConfig+0xd8>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x9c>
 8001c8e:	4b7f      	ldr	r3, [pc, #508]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a7e      	ldr	r2, [pc, #504]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b7c      	ldr	r3, [pc, #496]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a7b      	ldr	r2, [pc, #492]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e01d      	b.n	8001ce4 <HAL_RCC_OscConfig+0xd8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0xc0>
 8001cb2:	4b76      	ldr	r3, [pc, #472]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a75      	ldr	r2, [pc, #468]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b73      	ldr	r3, [pc, #460]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a72      	ldr	r2, [pc, #456]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e00b      	b.n	8001ce4 <HAL_RCC_OscConfig+0xd8>
 8001ccc:	4b6f      	ldr	r3, [pc, #444]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a6e      	ldr	r2, [pc, #440]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b6c      	ldr	r3, [pc, #432]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a6b      	ldr	r2, [pc, #428]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d013      	beq.n	8001d14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7ff fc42 	bl	8001574 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7ff fc3e 	bl	8001574 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e1ec      	b.n	80020e0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	4b61      	ldr	r3, [pc, #388]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0xe8>
 8001d12:	e014      	b.n	8001d3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff fc2e 	bl	8001574 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fc2a 	bl	8001574 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e1d8      	b.n	80020e0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	4b57      	ldr	r3, [pc, #348]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x110>
 8001d3a:	e000      	b.n	8001d3e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d069      	beq.n	8001e1e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d4a:	4b50      	ldr	r3, [pc, #320]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00b      	beq.n	8001d6e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d56:	4b4d      	ldr	r3, [pc, #308]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d11c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x190>
 8001d62:	4b4a      	ldr	r3, [pc, #296]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d116      	bne.n	8001d9c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d005      	beq.n	8001d86 <HAL_RCC_OscConfig+0x17a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e1ac      	b.n	80020e0 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d86:	4b41      	ldr	r3, [pc, #260]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	493d      	ldr	r1, [pc, #244]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9a:	e040      	b.n	8001e1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d023      	beq.n	8001dec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da4:	4b39      	ldr	r3, [pc, #228]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a38      	ldr	r2, [pc, #224]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7ff fbe0 	bl	8001574 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db8:	f7ff fbdc 	bl	8001574 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e18a      	b.n	80020e0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dca:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd6:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4929      	ldr	r1, [pc, #164]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]
 8001dea:	e018      	b.n	8001e1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dec:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff fbbc 	bl	8001574 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e00:	f7ff fbb8 	bl	8001574 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e166      	b.n	80020e0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d038      	beq.n	8001e9c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d019      	beq.n	8001e66 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e32:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e36:	4a15      	ldr	r2, [pc, #84]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3e:	f7ff fb99 	bl	8001574 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e46:	f7ff fb95 	bl	8001574 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e143      	b.n	80020e0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x23a>
 8001e64:	e01a      	b.n	8001e9c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6a:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e72:	f7ff fb7f 	bl	8001574 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e78:	e00a      	b.n	8001e90 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e7a:	f7ff fb7b 	bl	8001574 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d903      	bls.n	8001e90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e129      	b.n	80020e0 <HAL_RCC_OscConfig+0x4d4>
 8001e8c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e90:	4b95      	ldr	r3, [pc, #596]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1ee      	bne.n	8001e7a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80a4 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eaa:	4b8f      	ldr	r3, [pc, #572]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10d      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	4b8c      	ldr	r3, [pc, #560]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	4a8b      	ldr	r2, [pc, #556]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec2:	4b89      	ldr	r3, [pc, #548]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed2:	4b86      	ldr	r3, [pc, #536]	; (80020ec <HAL_RCC_OscConfig+0x4e0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d118      	bne.n	8001f10 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ede:	4b83      	ldr	r3, [pc, #524]	; (80020ec <HAL_RCC_OscConfig+0x4e0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a82      	ldr	r2, [pc, #520]	; (80020ec <HAL_RCC_OscConfig+0x4e0>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eea:	f7ff fb43 	bl	8001574 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ef2:	f7ff fb3f 	bl	8001574 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b64      	cmp	r3, #100	; 0x64
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0ed      	b.n	80020e0 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f04:	4b79      	ldr	r3, [pc, #484]	; (80020ec <HAL_RCC_OscConfig+0x4e0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d106      	bne.n	8001f26 <HAL_RCC_OscConfig+0x31a>
 8001f18:	4b73      	ldr	r3, [pc, #460]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1c:	4a72      	ldr	r2, [pc, #456]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6713      	str	r3, [r2, #112]	; 0x70
 8001f24:	e02d      	b.n	8001f82 <HAL_RCC_OscConfig+0x376>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x33c>
 8001f2e:	4b6e      	ldr	r3, [pc, #440]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f32:	4a6d      	ldr	r2, [pc, #436]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3a:	4b6b      	ldr	r3, [pc, #428]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3e:	4a6a      	ldr	r2, [pc, #424]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001f40:	f023 0304 	bic.w	r3, r3, #4
 8001f44:	6713      	str	r3, [r2, #112]	; 0x70
 8001f46:	e01c      	b.n	8001f82 <HAL_RCC_OscConfig+0x376>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d10c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x35e>
 8001f50:	4b65      	ldr	r3, [pc, #404]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f54:	4a64      	ldr	r2, [pc, #400]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5c:	4b62      	ldr	r3, [pc, #392]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f60:	4a61      	ldr	r2, [pc, #388]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6713      	str	r3, [r2, #112]	; 0x70
 8001f68:	e00b      	b.n	8001f82 <HAL_RCC_OscConfig+0x376>
 8001f6a:	4b5f      	ldr	r3, [pc, #380]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6e:	4a5e      	ldr	r2, [pc, #376]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	6713      	str	r3, [r2, #112]	; 0x70
 8001f76:	4b5c      	ldr	r3, [pc, #368]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7a:	4a5b      	ldr	r2, [pc, #364]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001f7c:	f023 0304 	bic.w	r3, r3, #4
 8001f80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d015      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8a:	f7ff faf3 	bl	8001574 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7ff faef 	bl	8001574 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e09b      	b.n	80020e0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa8:	4b4f      	ldr	r3, [pc, #316]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ee      	beq.n	8001f92 <HAL_RCC_OscConfig+0x386>
 8001fb4:	e014      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb6:	f7ff fadd 	bl	8001574 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7ff fad9 	bl	8001574 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e085      	b.n	80020e0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd4:	4b44      	ldr	r3, [pc, #272]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1ee      	bne.n	8001fbe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d105      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe6:	4b40      	ldr	r3, [pc, #256]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	4a3f      	ldr	r2, [pc, #252]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d071      	beq.n	80020de <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b08      	cmp	r3, #8
 8002004:	d069      	beq.n	80020da <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d14b      	bne.n	80020a6 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200e:	4b36      	ldr	r3, [pc, #216]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a35      	ldr	r2, [pc, #212]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8002014:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7ff faab 	bl	8001574 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002022:	f7ff faa7 	bl	8001574 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e055      	b.n	80020e0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002034:	4b2c      	ldr	r3, [pc, #176]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f0      	bne.n	8002022 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69da      	ldr	r2, [r3, #28]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	019b      	lsls	r3, r3, #6
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002056:	085b      	lsrs	r3, r3, #1
 8002058:	3b01      	subs	r3, #1
 800205a:	041b      	lsls	r3, r3, #16
 800205c:	431a      	orrs	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002062:	061b      	lsls	r3, r3, #24
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	071b      	lsls	r3, r3, #28
 800206c:	491e      	ldr	r1, [pc, #120]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a1c      	ldr	r2, [pc, #112]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8002078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800207c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7ff fa79 	bl	8001574 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002086:	f7ff fa75 	bl	8001574 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e023      	b.n	80020e0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x47a>
 80020a4:	e01b      	b.n	80020de <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a0f      	ldr	r2, [pc, #60]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 80020ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7ff fa5f 	bl	8001574 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ba:	f7ff fa5b 	bl	8001574 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e009      	b.n	80020e0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0x4ae>
 80020d8:	e001      	b.n	80020de <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40007000 	.word	0x40007000

080020f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0ce      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002108:	4b69      	ldr	r3, [pc, #420]	; (80022b0 <HAL_RCC_ClockConfig+0x1c0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d910      	bls.n	8002138 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	4b66      	ldr	r3, [pc, #408]	; (80022b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 020f 	bic.w	r2, r3, #15
 800211e:	4964      	ldr	r1, [pc, #400]	; (80022b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b62      	ldr	r3, [pc, #392]	; (80022b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0b6      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d020      	beq.n	8002186 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002150:	4b58      	ldr	r3, [pc, #352]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4a57      	ldr	r2, [pc, #348]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800215a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002168:	4b52      	ldr	r3, [pc, #328]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	4a51      	ldr	r2, [pc, #324]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002172:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002174:	4b4f      	ldr	r3, [pc, #316]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	494c      	ldr	r1, [pc, #304]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d040      	beq.n	8002214 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d107      	bne.n	80021aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	4b46      	ldr	r3, [pc, #280]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d115      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e07d      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b2:	4b40      	ldr	r3, [pc, #256]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e071      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c2:	4b3c      	ldr	r3, [pc, #240]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e069      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d2:	4b38      	ldr	r3, [pc, #224]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f023 0203 	bic.w	r2, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4935      	ldr	r1, [pc, #212]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021e4:	f7ff f9c6 	bl	8001574 <HAL_GetTick>
 80021e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ec:	f7ff f9c2 	bl	8001574 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e051      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	4b2c      	ldr	r3, [pc, #176]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 020c 	and.w	r2, r3, #12
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	429a      	cmp	r2, r3
 8002212:	d1eb      	bne.n	80021ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002214:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d210      	bcs.n	8002244 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 020f 	bic.w	r2, r3, #15
 800222a:	4921      	ldr	r1, [pc, #132]	; (80022b0 <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002232:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d001      	beq.n	8002244 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e030      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4915      	ldr	r1, [pc, #84]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	4313      	orrs	r3, r2
 8002260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d009      	beq.n	8002282 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	490d      	ldr	r1, [pc, #52]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002282:	f000 f81d 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 8002286:	4601      	mov	r1, r0
 8002288:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002294:	5cd3      	ldrb	r3, [r2, r3]
 8002296:	fa21 f303 	lsr.w	r3, r1, r3
 800229a:	4a08      	ldr	r2, [pc, #32]	; (80022bc <HAL_RCC_ClockConfig+0x1cc>)
 800229c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800229e:	2000      	movs	r0, #0
 80022a0:	f7ff f846 	bl	8001330 <HAL_InitTick>

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023c00 	.word	0x40023c00
 80022b4:	40023800 	.word	0x40023800
 80022b8:	080086a8 	.word	0x080086a8
 80022bc:	20000000 	.word	0x20000000

080022c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	2300      	movs	r3, #0
 80022d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d6:	4b50      	ldr	r3, [pc, #320]	; (8002418 <HAL_RCC_GetSysClockFreq+0x158>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d007      	beq.n	80022f2 <HAL_RCC_GetSysClockFreq+0x32>
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d008      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x38>
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 808d 	bne.w	8002406 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022ec:	4b4b      	ldr	r3, [pc, #300]	; (800241c <HAL_RCC_GetSysClockFreq+0x15c>)
 80022ee:	60bb      	str	r3, [r7, #8]
       break;
 80022f0:	e08c      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022f2:	4b4b      	ldr	r3, [pc, #300]	; (8002420 <HAL_RCC_GetSysClockFreq+0x160>)
 80022f4:	60bb      	str	r3, [r7, #8]
      break;
 80022f6:	e089      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022f8:	4b47      	ldr	r3, [pc, #284]	; (8002418 <HAL_RCC_GetSysClockFreq+0x158>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002300:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002302:	4b45      	ldr	r3, [pc, #276]	; (8002418 <HAL_RCC_GetSysClockFreq+0x158>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d023      	beq.n	8002356 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800230e:	4b42      	ldr	r3, [pc, #264]	; (8002418 <HAL_RCC_GetSysClockFreq+0x158>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	099b      	lsrs	r3, r3, #6
 8002314:	f04f 0400 	mov.w	r4, #0
 8002318:	f240 11ff 	movw	r1, #511	; 0x1ff
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	ea03 0501 	and.w	r5, r3, r1
 8002324:	ea04 0602 	and.w	r6, r4, r2
 8002328:	4a3d      	ldr	r2, [pc, #244]	; (8002420 <HAL_RCC_GetSysClockFreq+0x160>)
 800232a:	fb02 f106 	mul.w	r1, r2, r6
 800232e:	2200      	movs	r2, #0
 8002330:	fb02 f205 	mul.w	r2, r2, r5
 8002334:	440a      	add	r2, r1
 8002336:	493a      	ldr	r1, [pc, #232]	; (8002420 <HAL_RCC_GetSysClockFreq+0x160>)
 8002338:	fba5 0101 	umull	r0, r1, r5, r1
 800233c:	1853      	adds	r3, r2, r1
 800233e:	4619      	mov	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f04f 0400 	mov.w	r4, #0
 8002346:	461a      	mov	r2, r3
 8002348:	4623      	mov	r3, r4
 800234a:	f7fd ff75 	bl	8000238 <__aeabi_uldivmod>
 800234e:	4603      	mov	r3, r0
 8002350:	460c      	mov	r4, r1
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e049      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002356:	4b30      	ldr	r3, [pc, #192]	; (8002418 <HAL_RCC_GetSysClockFreq+0x158>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	099b      	lsrs	r3, r3, #6
 800235c:	f04f 0400 	mov.w	r4, #0
 8002360:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	ea03 0501 	and.w	r5, r3, r1
 800236c:	ea04 0602 	and.w	r6, r4, r2
 8002370:	4629      	mov	r1, r5
 8002372:	4632      	mov	r2, r6
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	f04f 0400 	mov.w	r4, #0
 800237c:	0154      	lsls	r4, r2, #5
 800237e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002382:	014b      	lsls	r3, r1, #5
 8002384:	4619      	mov	r1, r3
 8002386:	4622      	mov	r2, r4
 8002388:	1b49      	subs	r1, r1, r5
 800238a:	eb62 0206 	sbc.w	r2, r2, r6
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	f04f 0400 	mov.w	r4, #0
 8002396:	0194      	lsls	r4, r2, #6
 8002398:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800239c:	018b      	lsls	r3, r1, #6
 800239e:	1a5b      	subs	r3, r3, r1
 80023a0:	eb64 0402 	sbc.w	r4, r4, r2
 80023a4:	f04f 0100 	mov.w	r1, #0
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	00e2      	lsls	r2, r4, #3
 80023ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023b2:	00d9      	lsls	r1, r3, #3
 80023b4:	460b      	mov	r3, r1
 80023b6:	4614      	mov	r4, r2
 80023b8:	195b      	adds	r3, r3, r5
 80023ba:	eb44 0406 	adc.w	r4, r4, r6
 80023be:	f04f 0100 	mov.w	r1, #0
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	02a2      	lsls	r2, r4, #10
 80023c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023cc:	0299      	lsls	r1, r3, #10
 80023ce:	460b      	mov	r3, r1
 80023d0:	4614      	mov	r4, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	4621      	mov	r1, r4
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f04f 0400 	mov.w	r4, #0
 80023dc:	461a      	mov	r2, r3
 80023de:	4623      	mov	r3, r4
 80023e0:	f7fd ff2a 	bl	8000238 <__aeabi_uldivmod>
 80023e4:	4603      	mov	r3, r0
 80023e6:	460c      	mov	r4, r1
 80023e8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCC_GetSysClockFreq+0x158>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	0c1b      	lsrs	r3, r3, #16
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	3301      	adds	r3, #1
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	60bb      	str	r3, [r7, #8]
      break;
 8002404:	e002      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002408:	60bb      	str	r3, [r7, #8]
      break;
 800240a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800240c:	68bb      	ldr	r3, [r7, #8]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800
 800241c:	00f42400 	.word	0x00f42400
 8002420:	017d7840 	.word	0x017d7840

08002424 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <HAL_RCC_GetHCLKFreq+0x14>)
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000000 	.word	0x20000000

0800243c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002440:	f7ff fff0 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 8002444:	4601      	mov	r1, r0
 8002446:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	0a9b      	lsrs	r3, r3, #10
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	4a03      	ldr	r2, [pc, #12]	; (8002460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002452:	5cd3      	ldrb	r3, [r2, r3]
 8002454:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40023800 	.word	0x40023800
 8002460:	080086b8 	.word	0x080086b8

08002464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002468:	f7ff ffdc 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 800246c:	4601      	mov	r1, r0
 800246e:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	0b5b      	lsrs	r3, r3, #13
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4a03      	ldr	r2, [pc, #12]	; (8002488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800247a:	5cd3      	ldrb	r3, [r2, r3]
 800247c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	080086b8 	.word	0x080086b8

0800248c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	220f      	movs	r2, #15
 800249a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800249c:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_RCC_GetClockConfig+0x5c>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 0203 	and.w	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024a8:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <HAL_RCC_GetClockConfig+0x5c>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <HAL_RCC_GetClockConfig+0x5c>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_RCC_GetClockConfig+0x5c>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	08db      	lsrs	r3, r3, #3
 80024c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <HAL_RCC_GetClockConfig+0x60>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 020f 	and.w	r2, r3, #15
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	601a      	str	r2, [r3, #0]
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40023c00 	.word	0x40023c00

080024f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d012      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002518:	4b69      	ldr	r3, [pc, #420]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a68      	ldr	r2, [pc, #416]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800251e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002522:	6093      	str	r3, [r2, #8]
 8002524:	4b66      	ldr	r3, [pc, #408]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252c:	4964      	ldr	r1, [pc, #400]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800253a:	2301      	movs	r3, #1
 800253c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d017      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800254a:	4b5d      	ldr	r3, [pc, #372]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800254c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002550:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002558:	4959      	ldr	r1, [pc, #356]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002568:	d101      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800256a:	2301      	movs	r3, #1
 800256c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002576:	2301      	movs	r3, #1
 8002578:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d017      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002586:	4b4e      	ldr	r3, [pc, #312]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800258c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	494a      	ldr	r1, [pc, #296]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a4:	d101      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80025a6:	2301      	movs	r3, #1
 80025a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80025b2:	2301      	movs	r3, #1
 80025b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80025c2:	2301      	movs	r3, #1
 80025c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 808b 	beq.w	80026ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025d4:	4b3a      	ldr	r3, [pc, #232]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	4a39      	ldr	r2, [pc, #228]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025de:	6413      	str	r3, [r2, #64]	; 0x40
 80025e0:	4b37      	ldr	r3, [pc, #220]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025ec:	4b35      	ldr	r3, [pc, #212]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a34      	ldr	r2, [pc, #208]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f8:	f7fe ffbc 	bl	8001574 <HAL_GetTick>
 80025fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002600:	f7fe ffb8 	bl	8001574 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e38d      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002612:	4b2c      	ldr	r3, [pc, #176]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800261e:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002626:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d035      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	429a      	cmp	r2, r3
 800263a:	d02e      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800263c:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002644:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002646:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002650:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002656:	4a1a      	ldr	r2, [pc, #104]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800265e:	4a18      	ldr	r2, [pc, #96]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002664:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b01      	cmp	r3, #1
 800266e:	d114      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7fe ff80 	bl	8001574 <HAL_GetTick>
 8002674:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002676:	e00a      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002678:	f7fe ff7c 	bl	8001574 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	; 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e34f      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0ee      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026a6:	d111      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026b6:	400b      	ands	r3, r1
 80026b8:	4901      	ldr	r1, [pc, #4]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
 80026be:	e00b      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40007000 	.word	0x40007000
 80026c8:	0ffffcff 	.word	0x0ffffcff
 80026cc:	4bb3      	ldr	r3, [pc, #716]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4ab2      	ldr	r2, [pc, #712]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80026d6:	6093      	str	r3, [r2, #8]
 80026d8:	4bb0      	ldr	r3, [pc, #704]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e4:	49ad      	ldr	r1, [pc, #692]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d010      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026f6:	4ba9      	ldr	r3, [pc, #676]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026fc:	4aa7      	ldr	r2, [pc, #668]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002702:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002706:	4ba5      	ldr	r3, [pc, #660]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002708:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002710:	49a2      	ldr	r1, [pc, #648]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002724:	4b9d      	ldr	r3, [pc, #628]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002732:	499a      	ldr	r1, [pc, #616]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002746:	4b95      	ldr	r3, [pc, #596]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002754:	4991      	ldr	r1, [pc, #580]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002768:	4b8c      	ldr	r3, [pc, #560]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002776:	4989      	ldr	r1, [pc, #548]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800278a:	4b84      	ldr	r3, [pc, #528]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002798:	4980      	ldr	r1, [pc, #512]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027ac:	4b7b      	ldr	r3, [pc, #492]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	f023 0203 	bic.w	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	4978      	ldr	r1, [pc, #480]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027ce:	4b73      	ldr	r3, [pc, #460]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	f023 020c 	bic.w	r2, r3, #12
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027dc:	496f      	ldr	r1, [pc, #444]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027f0:	4b6a      	ldr	r3, [pc, #424]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	4967      	ldr	r1, [pc, #412]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002812:	4b62      	ldr	r3, [pc, #392]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002818:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002820:	495e      	ldr	r1, [pc, #376]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002834:	4b59      	ldr	r3, [pc, #356]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002842:	4956      	ldr	r1, [pc, #344]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002856:	4b51      	ldr	r3, [pc, #324]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	494d      	ldr	r1, [pc, #308]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002878:	4b48      	ldr	r3, [pc, #288]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002886:	4945      	ldr	r1, [pc, #276]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800289a:	4b40      	ldr	r3, [pc, #256]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a8:	493c      	ldr	r1, [pc, #240]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028bc:	4b37      	ldr	r3, [pc, #220]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028ca:	4934      	ldr	r1, [pc, #208]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d011      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028de:	4b2f      	ldr	r3, [pc, #188]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ec:	492b      	ldr	r1, [pc, #172]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028fc:	d101      	bne.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80028fe:	2301      	movs	r3, #1
 8002900:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800290e:	2301      	movs	r3, #1
 8002910:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800291e:	4b1f      	ldr	r3, [pc, #124]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292c:	491b      	ldr	r1, [pc, #108]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00b      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002940:	4b16      	ldr	r3, [pc, #88]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002950:	4912      	ldr	r1, [pc, #72]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00b      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002964:	4b0d      	ldr	r3, [pc, #52]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002974:	4909      	ldr	r1, [pc, #36]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00f      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002998:	e002      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	4985      	ldr	r1, [pc, #532]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00b      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80029b4:	4b80      	ldr	r3, [pc, #512]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c4:	497c      	ldr	r1, [pc, #496]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d005      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029da:	f040 80d6 	bne.w	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029de:	4b76      	ldr	r3, [pc, #472]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a75      	ldr	r2, [pc, #468]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ea:	f7fe fdc3 	bl	8001574 <HAL_GetTick>
 80029ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029f2:	f7fe fdbf 	bl	8001574 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b64      	cmp	r3, #100	; 0x64
 80029fe:	d901      	bls.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e194      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a04:	4b6c      	ldr	r3, [pc, #432]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f0      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d021      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d11d      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a24:	4b64      	ldr	r3, [pc, #400]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a2a:	0c1b      	lsrs	r3, r3, #16
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a32:	4b61      	ldr	r3, [pc, #388]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a38:	0e1b      	lsrs	r3, r3, #24
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	019a      	lsls	r2, r3, #6
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	041b      	lsls	r3, r3, #16
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	061b      	lsls	r3, r3, #24
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	071b      	lsls	r3, r3, #28
 8002a58:	4957      	ldr	r1, [pc, #348]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a74:	d00a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d02e      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a8a:	d129      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a8c:	4b4a      	ldr	r3, [pc, #296]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a92:	0c1b      	lsrs	r3, r3, #16
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a9a:	4b47      	ldr	r3, [pc, #284]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aa0:	0f1b      	lsrs	r3, r3, #28
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	019a      	lsls	r2, r3, #6
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	041b      	lsls	r3, r3, #16
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	431a      	orrs	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	071b      	lsls	r3, r3, #28
 8002ac0:	493d      	ldr	r1, [pc, #244]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ac8:	4b3b      	ldr	r3, [pc, #236]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ace:	f023 021f 	bic.w	r2, r3, #31
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	4937      	ldr	r1, [pc, #220]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01d      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002aec:	4b32      	ldr	r3, [pc, #200]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002af2:	0e1b      	lsrs	r3, r3, #24
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002afa:	4b2f      	ldr	r3, [pc, #188]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b00:	0f1b      	lsrs	r3, r3, #28
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	019a      	lsls	r2, r3, #6
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	431a      	orrs	r2, r3
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	061b      	lsls	r3, r3, #24
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	071b      	lsls	r3, r3, #28
 8002b20:	4925      	ldr	r1, [pc, #148]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d011      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	019a      	lsls	r2, r3, #6
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	061b      	lsls	r3, r3, #24
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	071b      	lsls	r3, r3, #28
 8002b50:	4919      	ldr	r1, [pc, #100]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b58:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a16      	ldr	r2, [pc, #88]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b64:	f7fe fd06 	bl	8001574 <HAL_GetTick>
 8002b68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b6c:	f7fe fd02 	bl	8001574 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	; 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e0d7      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	f040 80cd 	bne.w	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a08      	ldr	r2, [pc, #32]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b9e:	f7fe fce9 	bl	8001574 <HAL_GetTick>
 8002ba2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ba6:	f7fe fce5 	bl	8001574 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b64      	cmp	r3, #100	; 0x64
 8002bb2:	d903      	bls.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e0ba      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002bb8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bbc:	4b5e      	ldr	r3, [pc, #376]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bc8:	d0ed      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d02e      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d12a      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bf2:	4b51      	ldr	r3, [pc, #324]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c00:	4b4d      	ldr	r3, [pc, #308]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	0f1b      	lsrs	r3, r3, #28
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	019a      	lsls	r2, r3, #6
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	041b      	lsls	r3, r3, #16
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	061b      	lsls	r3, r3, #24
 8002c20:	431a      	orrs	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	071b      	lsls	r3, r3, #28
 8002c26:	4944      	ldr	r1, [pc, #272]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c2e:	4b42      	ldr	r3, [pc, #264]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c34:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	493d      	ldr	r1, [pc, #244]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d022      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c5c:	d11d      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c5e:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c64:	0e1b      	lsrs	r3, r3, #24
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c6c:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	0f1b      	lsrs	r3, r3, #28
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	019a      	lsls	r2, r3, #6
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	431a      	orrs	r2, r3
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	061b      	lsls	r3, r3, #24
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	071b      	lsls	r3, r3, #28
 8002c92:	4929      	ldr	r1, [pc, #164]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d028      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ca6:	4b24      	ldr	r3, [pc, #144]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	0e1b      	lsrs	r3, r3, #24
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cb4:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cba:	0c1b      	lsrs	r3, r3, #16
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	019a      	lsls	r2, r3, #6
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	041b      	lsls	r3, r3, #16
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	061b      	lsls	r3, r3, #24
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	071b      	lsls	r3, r3, #28
 8002cda:	4917      	ldr	r1, [pc, #92]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	4911      	ldr	r1, [pc, #68]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002cf8:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a0e      	ldr	r2, [pc, #56]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d04:	f7fe fc36 	bl	8001574 <HAL_GetTick>
 8002d08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d0c:	f7fe fc32 	bl	8001574 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e007      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d2a:	d1ef      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800

08002d3c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e01d      	b.n	8002d8a <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d105      	bne.n	8002d66 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7fe fa0f 	bl	8001184 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2203      	movs	r2, #3
 8002d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f80f 	bl	8002d92 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002d92:	b5b0      	push	{r4, r5, r7, lr}
 8002d94:	b08e      	sub	sp, #56	; 0x38
 8002d96:	af04      	add	r7, sp, #16
 8002d98:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002db2:	2376      	movs	r3, #118	; 0x76
 8002db4:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681d      	ldr	r5, [r3, #0]
 8002dba:	466c      	mov	r4, sp
 8002dbc:	f107 0318 	add.w	r3, r7, #24
 8002dc0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002dc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002dc8:	f107 030c 	add.w	r3, r7, #12
 8002dcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dce:	4628      	mov	r0, r5
 8002dd0:	f001 fdc6 	bl	8004960 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002de2:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f001 fe03 	bl	80049f4 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dfc:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 8002dfe:	2002      	movs	r0, #2
 8002e00:	f7fe fbc4 	bl	800158c <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fe67 	bl	8003ad8 <SD_PowerON>
 8002e0a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e013      	b.n	8002e52 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fd8b 	bl	8003946 <SD_InitCard>
 8002e30:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00b      	beq.n	8002e50 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3728      	adds	r7, #40	; 0x28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bdb0      	pop	{r4, r5, r7, pc}

08002e5a <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002e5a:	b590      	push	{r4, r7, lr}
 8002e5c:	b08f      	sub	sp, #60	; 0x3c
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8002e6c:	f7fe fb82 	bl	8001574 <HAL_GetTick>
 8002e70:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 8002e72:	2300      	movs	r3, #0
 8002e74:	633b      	str	r3, [r7, #48]	; 0x30
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d107      	bne.n	8002e90 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e176      	b.n	800317e <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	f040 8169 	bne.w	8003170 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	441a      	add	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d907      	bls.n	8002ec2 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e15d      	b.n	800317e <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d002      	beq.n	8002ee0 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	025b      	lsls	r3, r3, #9
 8002ede:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f001 fe17 	bl	8004b1c <SDMMC_CmdBlockLength>
 8002eee:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d010      	beq.n	8002f18 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f06:	431a      	orrs	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e132      	b.n	800317e <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002f18:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1c:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	025b      	lsls	r3, r3, #9
 8002f22:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002f24:	2390      	movs	r3, #144	; 0x90
 8002f26:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8002f30:	2301      	movs	r3, #1
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f107 0210 	add.w	r2, r7, #16
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f001 fdc0 	bl	8004ac4 <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d90a      	bls.n	8002f60 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f001 fe28 	bl	8004bac <SDMMC_CmdReadMultiBlock>
 8002f5c:	6378      	str	r0, [r7, #52]	; 0x34
 8002f5e:	e009      	b.n	8002f74 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2201      	movs	r2, #1
 8002f64:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f001 fdf9 	bl	8004b64 <SDMMC_CmdReadSingleBlock>
 8002f72:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d04a      	beq.n	8003010 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002f82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0f0      	b.n	800317e <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d016      	beq.n	8002fd8 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	633b      	str	r3, [r7, #48]	; 0x30
 8002fae:	e00d      	b.n	8002fcc <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fba:	18d4      	adds	r4, r2, r3
 8002fbc:	4608      	mov	r0, r1
 8002fbe:	f001 fcfb 	bl	80049b8 <SDMMC_ReadFIFO>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	3301      	adds	r3, #1
 8002fca:	633b      	str	r3, [r7, #48]	; 0x30
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	2b07      	cmp	r3, #7
 8002fd0:	d9ee      	bls.n	8002fb0 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	3320      	adds	r3, #32
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8002fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <HAL_SD_ReadBlocks+0x194>
 8002fde:	f7fe fac9 	bl	8001574 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d810      	bhi.n	8003010 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002ff6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e0b6      	b.n	800317e <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003016:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0be      	beq.n	8002f9c <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003028:	2b00      	cmp	r3, #0
 800302a:	d020      	beq.n	800306e <HAL_SD_ReadBlocks+0x214>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d91d      	bls.n	800306e <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	2b03      	cmp	r3, #3
 8003038:	d019      	beq.n	800306e <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f001 fe20 	bl	8004c84 <SDMMC_CmdStopTransfer>
 8003044:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8003046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003048:	2b00      	cmp	r3, #0
 800304a:	d010      	beq.n	800306e <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003054:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800305a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305c:	431a      	orrs	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e087      	b.n	800317e <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d010      	beq.n	800309e <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003084:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308a:	f043 0208 	orr.w	r2, r3, #8
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e06f      	b.n	800317e <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d010      	beq.n	80030ce <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ba:	f043 0202 	orr.w	r2, r3, #2
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e057      	b.n	800317e <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d037      	beq.n	800314c <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ea:	f043 0220 	orr.w	r2, r3, #32
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e03f      	b.n	800317e <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f001 fc58 	bl	80049b8 <SDMMC_ReadFIFO>
 8003108:	4602      	mov	r2, r0
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310c:	601a      	str	r2, [r3, #0]
      tempbuff++;
 800310e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003110:	3304      	adds	r3, #4
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <HAL_SD_ReadBlocks+0x2d0>
 800311a:	f7fe fa2b 	bl	8001574 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003126:	429a      	cmp	r2, r3
 8003128:	d810      	bhi.n	800314c <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003132:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e018      	b.n	800317e <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1d1      	bne.n	80030fe <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	e006      	b.n	800317e <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
  }
}
 800317e:	4618      	mov	r0, r3
 8003180:	373c      	adds	r7, #60	; 0x3c
 8003182:	46bd      	mov	sp, r7
 8003184:	bd90      	pop	{r4, r7, pc}

08003186 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b08e      	sub	sp, #56	; 0x38
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003194:	2300      	movs	r3, #0
 8003196:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8003198:	f7fe f9ec 	bl	8001574 <HAL_GetTick>
 800319c:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e147      	b.n	800344c <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	f040 813a 	bne.w	800343e <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	441a      	add	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	429a      	cmp	r2, r3
 80031dc:	d907      	bls.n	80031ee <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e12e      	b.n	800344c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2203      	movs	r2, #3
 80031f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2200      	movs	r2, #0
 80031fc:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003202:	2b01      	cmp	r3, #1
 8003204:	d002      	beq.n	800320c <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	025b      	lsls	r3, r3, #9
 800320a:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003214:	4618      	mov	r0, r3
 8003216:	f001 fc81 	bl	8004b1c <SDMMC_CmdBlockLength>
 800321a:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 800321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321e:	2b00      	cmp	r3, #0
 8003220:	d010      	beq.n	8003244 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800322a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003232:	431a      	orrs	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e103      	b.n	800344c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d90a      	bls.n	8003260 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4618      	mov	r0, r3
 8003258:	f001 fcf0 	bl	8004c3c <SDMMC_CmdWriteMultiBlock>
 800325c:	6378      	str	r0, [r7, #52]	; 0x34
 800325e:	e009      	b.n	8003274 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2210      	movs	r2, #16
 8003264:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4618      	mov	r0, r3
 800326e:	f001 fcc1 	bl	8004bf4 <SDMMC_CmdWriteSingleBlock>
 8003272:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003276:	2b00      	cmp	r3, #0
 8003278:	d010      	beq.n	800329c <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003282:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328a:	431a      	orrs	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0d7      	b.n	800344c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800329c:	f04f 33ff 	mov.w	r3, #4294967295
 80032a0:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	025b      	lsls	r3, r3, #9
 80032a6:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80032a8:	2390      	movs	r3, #144	; 0x90
 80032aa:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80032b4:	2301      	movs	r3, #1
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f107 0210 	add.w	r2, r7, #16
 80032c0:	4611      	mov	r1, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f001 fbfe 	bl	8004ac4 <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80032c8:	e037      	b.n	800333a <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d014      	beq.n	8003302 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80032d8:	2300      	movs	r3, #0
 80032da:	633b      	str	r3, [r7, #48]	; 0x30
 80032dc:	e00b      	b.n	80032f6 <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e8:	4413      	add	r3, r2
 80032ea:	4619      	mov	r1, r3
 80032ec:	f001 fb71 	bl	80049d2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80032f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f2:	3301      	adds	r3, #1
 80032f4:	633b      	str	r3, [r7, #48]	; 0x30
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	2b07      	cmp	r3, #7
 80032fa:	d9f0      	bls.n	80032de <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 80032fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fe:	3320      	adds	r3, #32
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	d007      	beq.n	8003318 <HAL_SD_WriteBlocks+0x192>
 8003308:	f7fe f934 	bl	8001574 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003314:	429a      	cmp	r2, r3
 8003316:	d810      	bhi.n	800333a <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003320:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003328:	431a      	orrs	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e088      	b.n	800344c <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003340:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0c0      	beq.n	80032ca <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d020      	beq.n	8003398 <HAL_SD_WriteBlocks+0x212>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d91d      	bls.n	8003398 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003360:	2b03      	cmp	r3, #3
 8003362:	d019      	beq.n	8003398 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f001 fc8b 	bl	8004c84 <SDMMC_CmdStopTransfer>
 800336e:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8003370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003372:	2b00      	cmp	r3, #0
 8003374:	d010      	beq.n	8003398 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800337e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003386:	431a      	orrs	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e059      	b.n	800344c <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d010      	beq.n	80033c8 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b4:	f043 0208 	orr.w	r2, r3, #8
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e041      	b.n	800344c <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d010      	beq.n	80033f8 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80033de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	f043 0202 	orr.w	r2, r3, #2
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e029      	b.n	800344c <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b00      	cmp	r3, #0
 8003404:	d010      	beq.n	8003428 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800340e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	f043 0210 	orr.w	r2, r3, #16
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e011      	b.n	800344c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003430:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	e006      	b.n	800344c <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
  }
}
 800344c:	4618      	mov	r0, r3
 800344e:	3738      	adds	r7, #56	; 0x38
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003466:	0e1b      	lsrs	r3, r3, #24
 8003468:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	099b      	lsrs	r3, r3, #6
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	b2da      	uxtb	r2, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	089b      	lsrs	r3, r3, #2
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	b2da      	uxtb	r2, r3
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	b2da      	uxtb	r2, r3
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800349c:	0c1b      	lsrs	r3, r3, #16
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034d0:	0e1b      	lsrs	r3, r3, #24
 80034d2:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	b29a      	uxth	r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034e4:	0c1b      	lsrs	r3, r3, #16
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	88db      	ldrh	r3, [r3, #6]
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	091b      	lsrs	r3, r3, #4
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	4313      	orrs	r3, r2
 80034fe:	b29a      	uxth	r2, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	b2da      	uxtb	r2, r3
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003516:	0a1b      	lsrs	r3, r3, #8
 8003518:	b2db      	uxtb	r3, r3
 800351a:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	09db      	lsrs	r3, r3, #7
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	b2da      	uxtb	r2, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	099b      	lsrs	r3, r3, #6
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	b2da      	uxtb	r2, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	b2da      	uxtb	r2, r3
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	091b      	lsrs	r3, r3, #4
 8003550:	b2db      	uxtb	r3, r3
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	b2da      	uxtb	r2, r3
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2200      	movs	r2, #0
 8003560:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	2b00      	cmp	r3, #0
 8003568:	f040 8086 	bne.w	8003678 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	029b      	lsls	r3, r3, #10
 8003570:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800357c:	b2db      	uxtb	r3, r3
 800357e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	431a      	orrs	r2, r3
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003592:	0e1b      	lsrs	r3, r3, #24
 8003594:	b2db      	uxtb	r3, r3
 8003596:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	099b      	lsrs	r3, r3, #6
 80035a0:	f003 0303 	and.w	r3, r3, #3
 80035a4:	431a      	orrs	r2, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	08db      	lsrs	r3, r3, #3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035cc:	0c1b      	lsrs	r3, r3, #16
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	089b      	lsrs	r3, r3, #2
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	f003 0306 	and.w	r3, r3, #6
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003608:	0a1b      	lsrs	r3, r3, #8
 800360a:	b2db      	uxtb	r3, r3
 800360c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	7e1b      	ldrb	r3, [r3, #24]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	09db      	lsrs	r3, r3, #7
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	b2db      	uxtb	r3, r3
 8003620:	4313      	orrs	r3, r2
 8003622:	b2da      	uxtb	r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	7e1b      	ldrb	r3, [r3, #24]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	3302      	adds	r3, #2
 800363a:	2201      	movs	r2, #1
 800363c:	409a      	lsls	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	fb02 f203 	mul.w	r2, r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	7a1b      	ldrb	r3, [r3, #8]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	2301      	movs	r3, #1
 8003654:	4093      	lsls	r3, r2
 8003656:	461a      	mov	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003664:	0a52      	lsrs	r2, r2, #9
 8003666:	fb02 f203 	mul.w	r2, r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003674:	661a      	str	r2, [r3, #96]	; 0x60
 8003676:	e04d      	b.n	8003714 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367c:	2b01      	cmp	r3, #1
 800367e:	d138      	bne.n	80036f2 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003684:	b2db      	uxtb	r3, r3
 8003686:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	041b      	lsls	r3, r3, #16
 800368c:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003698:	0e1b      	lsrs	r3, r3, #24
 800369a:	b2db      	uxtb	r3, r3
 800369c:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	431a      	orrs	r2, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b0:	0c1b      	lsrs	r3, r3, #16
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	431a      	orrs	r2, r3
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c6:	0a1b      	lsrs	r3, r3, #8
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	3301      	adds	r3, #1
 80036d2:	029a      	lsls	r2, r3, #10
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	655a      	str	r2, [r3, #84]	; 0x54
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036e6:	659a      	str	r2, [r3, #88]	; 0x58
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	661a      	str	r2, [r3, #96]	; 0x60
 80036f0:	e010      	b.n	8003714 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80036fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0c1      	b.n	8003898 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	099b      	lsrs	r3, r3, #6
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	b2da      	uxtb	r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003730:	b2da      	uxtb	r2, r3
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800373a:	b2db      	uxtb	r3, r3
 800373c:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	7e9b      	ldrb	r3, [r3, #26]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	09db      	lsrs	r3, r3, #7
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	b2db      	uxtb	r3, r3
 8003750:	4313      	orrs	r3, r2
 8003752:	b2da      	uxtb	r2, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003760:	b2da      	uxtb	r2, r3
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	0e1b      	lsrs	r3, r3, #24
 800376c:	b2db      	uxtb	r3, r3
 800376e:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	09db      	lsrs	r3, r3, #7
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	b2da      	uxtb	r2, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	b2da      	uxtb	r2, r3
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	089b      	lsrs	r3, r3, #2
 8003794:	b2db      	uxtb	r3, r3
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	b2da      	uxtb	r2, r3
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	0c1b      	lsrs	r3, r3, #16
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	7fdb      	ldrb	r3, [r3, #31]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	099b      	lsrs	r3, r3, #6
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	4313      	orrs	r3, r2
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	0a1b      	lsrs	r3, r3, #8
 8003806:	b2db      	uxtb	r3, r3
 8003808:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	09db      	lsrs	r3, r3, #7
 800380e:	b2db      	uxtb	r3, r3
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	b2da      	uxtb	r2, r3
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	099b      	lsrs	r3, r3, #6
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	b2da      	uxtb	r2, r3
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	095b      	lsrs	r3, r3, #5
 8003832:	b2db      	uxtb	r3, r3
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	b2da      	uxtb	r2, r3
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	b2da      	uxtb	r2, r3
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	089b      	lsrs	r3, r3, #2
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	b2da      	uxtb	r2, r3
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	b2da      	uxtb	r2, r3
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	b2db      	uxtb	r3, r3
 800387a:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	085b      	lsrs	r3, r3, #1
 8003880:	b2db      	uxtb	r3, r3
 8003882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003886:	b2da      	uxtb	r2, r3
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8003904:	2304      	movs	r3, #4
 8003906:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003908:	2300      	movs	r3, #0
 800390a:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8003910:	f107 030c 	add.w	r3, r7, #12
 8003914:	4619      	mov	r1, r3
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f986 	bl	8003c28 <SD_SendStatus>
 800391c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	0a5b      	lsrs	r3, r3, #9
 8003934:	b2db      	uxtb	r3, r3
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 800393c:	7dfb      	ldrb	r3, [r7, #23]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003946:	b5b0      	push	{r4, r5, r7, lr}
 8003948:	b094      	sub	sp, #80	; 0x50
 800394a:	af04      	add	r7, sp, #16
 800394c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800394e:	2300      	movs	r3, #0
 8003950:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8003952:	2301      	movs	r3, #1
 8003954:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f001 f858 	bl	8004a10 <SDMMC_GetPowerState>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d102      	bne.n	800396c <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003966:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800396a:	e0b1      	b.n	8003ad0 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	2b03      	cmp	r3, #3
 8003972:	d02f      	beq.n	80039d4 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f001 fa57 	bl	8004e2c <SDMMC_CmdSendCID>
 800397e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <SD_InitCard+0x44>
    {
      return errorstate;
 8003986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003988:	e0a2      	b.n	8003ad0 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f001 f882 	bl	8004a9a <SDMMC_GetResponse>
 8003996:	4602      	mov	r2, r0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2104      	movs	r1, #4
 80039a2:	4618      	mov	r0, r3
 80039a4:	f001 f879 	bl	8004a9a <SDMMC_GetResponse>
 80039a8:	4602      	mov	r2, r0
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2108      	movs	r1, #8
 80039b4:	4618      	mov	r0, r3
 80039b6:	f001 f870 	bl	8004a9a <SDMMC_GetResponse>
 80039ba:	4602      	mov	r2, r0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	210c      	movs	r1, #12
 80039c6:	4618      	mov	r0, r3
 80039c8:	f001 f867 	bl	8004a9a <SDMMC_GetResponse>
 80039cc:	4602      	mov	r2, r0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d00d      	beq.n	80039f8 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f107 020e 	add.w	r2, r7, #14
 80039e4:	4611      	mov	r1, r2
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 fa61 	bl	8004eae <SDMMC_CmdSetRelAdd>
 80039ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <SD_InitCard+0xb2>
    {
      return errorstate;
 80039f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f6:	e06b      	b.n	8003ad0 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d036      	beq.n	8003a6e <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003a00:	89fb      	ldrh	r3, [r7, #14]
 8003a02:	461a      	mov	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a10:	041b      	lsls	r3, r3, #16
 8003a12:	4619      	mov	r1, r3
 8003a14:	4610      	mov	r0, r2
 8003a16:	f001 fa29 	bl	8004e6c <SDMMC_CmdSendCSD>
 8003a1a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <SD_InitCard+0xe0>
    {
      return errorstate;
 8003a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a24:	e054      	b.n	8003ad0 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 f834 	bl	8004a9a <SDMMC_GetResponse>
 8003a32:	4602      	mov	r2, r0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2104      	movs	r1, #4
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 f82b 	bl	8004a9a <SDMMC_GetResponse>
 8003a44:	4602      	mov	r2, r0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2108      	movs	r1, #8
 8003a50:	4618      	mov	r0, r3
 8003a52:	f001 f822 	bl	8004a9a <SDMMC_GetResponse>
 8003a56:	4602      	mov	r2, r0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	210c      	movs	r1, #12
 8003a62:	4618      	mov	r0, r3
 8003a64:	f001 f819 	bl	8004a9a <SDMMC_GetResponse>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2104      	movs	r1, #4
 8003a74:	4618      	mov	r0, r3
 8003a76:	f001 f810 	bl	8004a9a <SDMMC_GetResponse>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	0d1a      	lsrs	r2, r3, #20
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8003a82:	f107 0310 	add.w	r3, r7, #16
 8003a86:	4619      	mov	r1, r3
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff fce3 	bl	8003454 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6819      	ldr	r1, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a96:	041b      	lsls	r3, r3, #16
 8003a98:	f04f 0400 	mov.w	r4, #0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	f001 f913 	bl	8004ccc <SDMMC_CmdSelDesel>
 8003aa6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <SD_InitCard+0x16c>
  {
    return errorstate;
 8003aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab0:	e00e      	b.n	8003ad0 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681d      	ldr	r5, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	466c      	mov	r4, sp
 8003aba:	f103 0210 	add.w	r2, r3, #16
 8003abe:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ac0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f000 ff49 	bl	8004960 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3740      	adds	r7, #64	; 0x40
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bdb0      	pop	{r4, r5, r7, pc}

08003ad8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f001 f90e 	bl	8004d16 <SDMMC_CmdGoIdleState>
 8003afa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <SD_PowerON+0x2e>
  {
    return errorstate;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	e08c      	b.n	8003c20 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 f923 	bl	8004d56 <SDMMC_CmdOperCond>
 8003b10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d03d      	beq.n	8003b94 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8003b1e:	e032      	b.n	8003b86 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	60ba      	str	r2, [r7, #8]
 8003b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d102      	bne.n	8003b34 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003b2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b32:	e075      	b.n	8003c20 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 f92c 	bl	8004d98 <SDMMC_CmdAppCommand>
 8003b40:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b4c:	e068      	b.n	8003c20 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f001 f943 	bl	8004de0 <SDMMC_CmdAppOperCommand>
 8003b5a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b66:	e05b      	b.n	8003c20 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 ff93 	bl	8004a9a <SDMMC_GetResponse>
 8003b74:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	0fdb      	lsrs	r3, r3, #31
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	bf0c      	ite	eq
 8003b7e:	2301      	moveq	r3, #1
 8003b80:	2300      	movne	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0c9      	beq.n	8003b20 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	645a      	str	r2, [r3, #68]	; 0x44
 8003b92:	e044      	b.n	8003c1e <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8003b9a:	e031      	b.n	8003c00 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	60ba      	str	r2, [r7, #8]
 8003ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d102      	bne.n	8003bb0 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003baa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bae:	e037      	b.n	8003c20 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f001 f8ee 	bl	8004d98 <SDMMC_CmdAppCommand>
 8003bbc:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <SD_PowerON+0xf0>
      {
        return errorstate;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	e02b      	b.n	8003c20 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f001 f905 	bl	8004de0 <SDMMC_CmdAppOperCommand>
 8003bd6:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <SD_PowerON+0x10a>
      {
        return errorstate;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	e01e      	b.n	8003c20 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 ff56 	bl	8004a9a <SDMMC_GetResponse>
 8003bee:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	0fdb      	lsrs	r3, r3, #31
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2301      	moveq	r3, #1
 8003bfa:	2300      	movne	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0ca      	beq.n	8003b9c <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	645a      	str	r2, [r3, #68]	; 0x44
 8003c16:	e002      	b.n	8003c1e <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d102      	bne.n	8003c42 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8003c3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c40:	e018      	b.n	8003c74 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4a:	041b      	lsls	r3, r3, #16
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f001 f950 	bl	8004ef4 <SDMMC_CmdSendStatus>
 8003c54:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <SD_SendStatus+0x38>
  {
    return errorstate;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	e009      	b.n	8003c74 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 ff17 	bl	8004a9a <SDMMC_GetResponse>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e01d      	b.n	8003cca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f815 	bl	8003cd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f000 f986 	bl	8003fcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
	...

08003ce8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <HAL_TIM_Base_Start_IT+0x50>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b06      	cmp	r3, #6
 8003d10:	d00b      	beq.n	8003d2a <HAL_TIM_Base_Start_IT+0x42>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d18:	d007      	beq.n	8003d2a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0201 	orr.w	r2, r2, #1
 8003d28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	00010007 	.word	0x00010007

08003d3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d122      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d11b      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0202 	mvn.w	r2, #2
 8003d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f905 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003d84:	e005      	b.n	8003d92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8f7 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f908 	bl	8003fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d122      	bne.n	8003dec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d11b      	bne.n	8003dec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0204 	mvn.w	r2, #4
 8003dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f8db 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003dd8:	e005      	b.n	8003de6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f8cd 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f8de 	bl	8003fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d122      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d11b      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0208 	mvn.w	r2, #8
 8003e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2204      	movs	r2, #4
 8003e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f8b1 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003e2c:	e005      	b.n	8003e3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f8a3 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f8b4 	bl	8003fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d122      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d11b      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0210 	mvn.w	r2, #16
 8003e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2208      	movs	r2, #8
 8003e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f887 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f879 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f88a 	bl	8003fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d10e      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d107      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0201 	mvn.w	r2, #1
 8003eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fd f91e 	bl	80010fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	2b80      	cmp	r3, #128	; 0x80
 8003ecc:	d10e      	bne.n	8003eec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed8:	2b80      	cmp	r3, #128	; 0x80
 8003eda:	d107      	bne.n	8003eec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f91a 	bl	8004120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efa:	d10e      	bne.n	8003f1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	2b80      	cmp	r3, #128	; 0x80
 8003f08:	d107      	bne.n	8003f1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f90d 	bl	8004134 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b40      	cmp	r3, #64	; 0x40
 8003f26:	d10e      	bne.n	8003f46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f32:	2b40      	cmp	r3, #64	; 0x40
 8003f34:	d107      	bne.n	8003f46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f838 	bl	8003fb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d10e      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d107      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f06f 0220 	mvn.w	r2, #32
 8003f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f8cd 	bl	800410c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a40      	ldr	r2, [pc, #256]	; (80040e0 <TIM_Base_SetConfig+0x114>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d013      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fea:	d00f      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a3d      	ldr	r2, [pc, #244]	; (80040e4 <TIM_Base_SetConfig+0x118>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00b      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a3c      	ldr	r2, [pc, #240]	; (80040e8 <TIM_Base_SetConfig+0x11c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d007      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a3b      	ldr	r2, [pc, #236]	; (80040ec <TIM_Base_SetConfig+0x120>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d003      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a3a      	ldr	r2, [pc, #232]	; (80040f0 <TIM_Base_SetConfig+0x124>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d108      	bne.n	800401e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2f      	ldr	r2, [pc, #188]	; (80040e0 <TIM_Base_SetConfig+0x114>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d02b      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800402c:	d027      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a2c      	ldr	r2, [pc, #176]	; (80040e4 <TIM_Base_SetConfig+0x118>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d023      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a2b      	ldr	r2, [pc, #172]	; (80040e8 <TIM_Base_SetConfig+0x11c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01f      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a2a      	ldr	r2, [pc, #168]	; (80040ec <TIM_Base_SetConfig+0x120>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d01b      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a29      	ldr	r2, [pc, #164]	; (80040f0 <TIM_Base_SetConfig+0x124>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d017      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a28      	ldr	r2, [pc, #160]	; (80040f4 <TIM_Base_SetConfig+0x128>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d013      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a27      	ldr	r2, [pc, #156]	; (80040f8 <TIM_Base_SetConfig+0x12c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00f      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a26      	ldr	r2, [pc, #152]	; (80040fc <TIM_Base_SetConfig+0x130>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00b      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a25      	ldr	r2, [pc, #148]	; (8004100 <TIM_Base_SetConfig+0x134>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d007      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a24      	ldr	r2, [pc, #144]	; (8004104 <TIM_Base_SetConfig+0x138>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a23      	ldr	r2, [pc, #140]	; (8004108 <TIM_Base_SetConfig+0x13c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d108      	bne.n	8004090 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <TIM_Base_SetConfig+0x114>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_Base_SetConfig+0xf8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <TIM_Base_SetConfig+0x124>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d103      	bne.n	80040cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	615a      	str	r2, [r3, #20]
}
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40000400 	.word	0x40000400
 80040e8:	40000800 	.word	0x40000800
 80040ec:	40000c00 	.word	0x40000c00
 80040f0:	40010400 	.word	0x40010400
 80040f4:	40014000 	.word	0x40014000
 80040f8:	40014400 	.word	0x40014400
 80040fc:	40014800 	.word	0x40014800
 8004100:	40001800 	.word	0x40001800
 8004104:	40001c00 	.word	0x40001c00
 8004108:	40002000 	.word	0x40002000

0800410c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e040      	b.n	80041dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fd f88a 	bl	8001284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2224      	movs	r2, #36	; 0x24
 8004174:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0201 	bic.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f82c 	bl	80041e4 <UART_SetConfig>
 800418c:	4603      	mov	r3, r0
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e022      	b.n	80041dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fac4 	bl	800472c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041c2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fb4b 	bl	8004870 <UART_CheckIdleState>
 80041da:	4603      	mov	r3, r0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4bb1      	ldr	r3, [pc, #708]	; (80044d8 <UART_SetConfig+0x2f4>)
 8004214:	4013      	ands	r3, r2
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6812      	ldr	r2, [r2, #0]
 800421a:	6939      	ldr	r1, [r7, #16]
 800421c:	430b      	orrs	r3, r1
 800421e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	430a      	orrs	r2, r1
 8004258:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a9f      	ldr	r2, [pc, #636]	; (80044dc <UART_SetConfig+0x2f8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d121      	bne.n	80042a8 <UART_SetConfig+0xc4>
 8004264:	4b9e      	ldr	r3, [pc, #632]	; (80044e0 <UART_SetConfig+0x2fc>)
 8004266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	2b03      	cmp	r3, #3
 8004270:	d816      	bhi.n	80042a0 <UART_SetConfig+0xbc>
 8004272:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <UART_SetConfig+0x94>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	08004289 	.word	0x08004289
 800427c:	08004295 	.word	0x08004295
 8004280:	0800428f 	.word	0x0800428f
 8004284:	0800429b 	.word	0x0800429b
 8004288:	2301      	movs	r3, #1
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e151      	b.n	8004532 <UART_SetConfig+0x34e>
 800428e:	2302      	movs	r3, #2
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e14e      	b.n	8004532 <UART_SetConfig+0x34e>
 8004294:	2304      	movs	r3, #4
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e14b      	b.n	8004532 <UART_SetConfig+0x34e>
 800429a:	2308      	movs	r3, #8
 800429c:	77fb      	strb	r3, [r7, #31]
 800429e:	e148      	b.n	8004532 <UART_SetConfig+0x34e>
 80042a0:	2310      	movs	r3, #16
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	bf00      	nop
 80042a6:	e144      	b.n	8004532 <UART_SetConfig+0x34e>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a8d      	ldr	r2, [pc, #564]	; (80044e4 <UART_SetConfig+0x300>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d134      	bne.n	800431c <UART_SetConfig+0x138>
 80042b2:	4b8b      	ldr	r3, [pc, #556]	; (80044e0 <UART_SetConfig+0x2fc>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b8:	f003 030c 	and.w	r3, r3, #12
 80042bc:	2b0c      	cmp	r3, #12
 80042be:	d829      	bhi.n	8004314 <UART_SetConfig+0x130>
 80042c0:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <UART_SetConfig+0xe4>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	080042fd 	.word	0x080042fd
 80042cc:	08004315 	.word	0x08004315
 80042d0:	08004315 	.word	0x08004315
 80042d4:	08004315 	.word	0x08004315
 80042d8:	08004309 	.word	0x08004309
 80042dc:	08004315 	.word	0x08004315
 80042e0:	08004315 	.word	0x08004315
 80042e4:	08004315 	.word	0x08004315
 80042e8:	08004303 	.word	0x08004303
 80042ec:	08004315 	.word	0x08004315
 80042f0:	08004315 	.word	0x08004315
 80042f4:	08004315 	.word	0x08004315
 80042f8:	0800430f 	.word	0x0800430f
 80042fc:	2300      	movs	r3, #0
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e117      	b.n	8004532 <UART_SetConfig+0x34e>
 8004302:	2302      	movs	r3, #2
 8004304:	77fb      	strb	r3, [r7, #31]
 8004306:	e114      	b.n	8004532 <UART_SetConfig+0x34e>
 8004308:	2304      	movs	r3, #4
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e111      	b.n	8004532 <UART_SetConfig+0x34e>
 800430e:	2308      	movs	r3, #8
 8004310:	77fb      	strb	r3, [r7, #31]
 8004312:	e10e      	b.n	8004532 <UART_SetConfig+0x34e>
 8004314:	2310      	movs	r3, #16
 8004316:	77fb      	strb	r3, [r7, #31]
 8004318:	bf00      	nop
 800431a:	e10a      	b.n	8004532 <UART_SetConfig+0x34e>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a71      	ldr	r2, [pc, #452]	; (80044e8 <UART_SetConfig+0x304>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d120      	bne.n	8004368 <UART_SetConfig+0x184>
 8004326:	4b6e      	ldr	r3, [pc, #440]	; (80044e0 <UART_SetConfig+0x2fc>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004330:	2b10      	cmp	r3, #16
 8004332:	d00f      	beq.n	8004354 <UART_SetConfig+0x170>
 8004334:	2b10      	cmp	r3, #16
 8004336:	d802      	bhi.n	800433e <UART_SetConfig+0x15a>
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <UART_SetConfig+0x164>
 800433c:	e010      	b.n	8004360 <UART_SetConfig+0x17c>
 800433e:	2b20      	cmp	r3, #32
 8004340:	d005      	beq.n	800434e <UART_SetConfig+0x16a>
 8004342:	2b30      	cmp	r3, #48	; 0x30
 8004344:	d009      	beq.n	800435a <UART_SetConfig+0x176>
 8004346:	e00b      	b.n	8004360 <UART_SetConfig+0x17c>
 8004348:	2300      	movs	r3, #0
 800434a:	77fb      	strb	r3, [r7, #31]
 800434c:	e0f1      	b.n	8004532 <UART_SetConfig+0x34e>
 800434e:	2302      	movs	r3, #2
 8004350:	77fb      	strb	r3, [r7, #31]
 8004352:	e0ee      	b.n	8004532 <UART_SetConfig+0x34e>
 8004354:	2304      	movs	r3, #4
 8004356:	77fb      	strb	r3, [r7, #31]
 8004358:	e0eb      	b.n	8004532 <UART_SetConfig+0x34e>
 800435a:	2308      	movs	r3, #8
 800435c:	77fb      	strb	r3, [r7, #31]
 800435e:	e0e8      	b.n	8004532 <UART_SetConfig+0x34e>
 8004360:	2310      	movs	r3, #16
 8004362:	77fb      	strb	r3, [r7, #31]
 8004364:	bf00      	nop
 8004366:	e0e4      	b.n	8004532 <UART_SetConfig+0x34e>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a5f      	ldr	r2, [pc, #380]	; (80044ec <UART_SetConfig+0x308>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d120      	bne.n	80043b4 <UART_SetConfig+0x1d0>
 8004372:	4b5b      	ldr	r3, [pc, #364]	; (80044e0 <UART_SetConfig+0x2fc>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004378:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800437c:	2b40      	cmp	r3, #64	; 0x40
 800437e:	d00f      	beq.n	80043a0 <UART_SetConfig+0x1bc>
 8004380:	2b40      	cmp	r3, #64	; 0x40
 8004382:	d802      	bhi.n	800438a <UART_SetConfig+0x1a6>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d005      	beq.n	8004394 <UART_SetConfig+0x1b0>
 8004388:	e010      	b.n	80043ac <UART_SetConfig+0x1c8>
 800438a:	2b80      	cmp	r3, #128	; 0x80
 800438c:	d005      	beq.n	800439a <UART_SetConfig+0x1b6>
 800438e:	2bc0      	cmp	r3, #192	; 0xc0
 8004390:	d009      	beq.n	80043a6 <UART_SetConfig+0x1c2>
 8004392:	e00b      	b.n	80043ac <UART_SetConfig+0x1c8>
 8004394:	2300      	movs	r3, #0
 8004396:	77fb      	strb	r3, [r7, #31]
 8004398:	e0cb      	b.n	8004532 <UART_SetConfig+0x34e>
 800439a:	2302      	movs	r3, #2
 800439c:	77fb      	strb	r3, [r7, #31]
 800439e:	e0c8      	b.n	8004532 <UART_SetConfig+0x34e>
 80043a0:	2304      	movs	r3, #4
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e0c5      	b.n	8004532 <UART_SetConfig+0x34e>
 80043a6:	2308      	movs	r3, #8
 80043a8:	77fb      	strb	r3, [r7, #31]
 80043aa:	e0c2      	b.n	8004532 <UART_SetConfig+0x34e>
 80043ac:	2310      	movs	r3, #16
 80043ae:	77fb      	strb	r3, [r7, #31]
 80043b0:	bf00      	nop
 80043b2:	e0be      	b.n	8004532 <UART_SetConfig+0x34e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a4d      	ldr	r2, [pc, #308]	; (80044f0 <UART_SetConfig+0x30c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d124      	bne.n	8004408 <UART_SetConfig+0x224>
 80043be:	4b48      	ldr	r3, [pc, #288]	; (80044e0 <UART_SetConfig+0x2fc>)
 80043c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043cc:	d012      	beq.n	80043f4 <UART_SetConfig+0x210>
 80043ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d2:	d802      	bhi.n	80043da <UART_SetConfig+0x1f6>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d007      	beq.n	80043e8 <UART_SetConfig+0x204>
 80043d8:	e012      	b.n	8004400 <UART_SetConfig+0x21c>
 80043da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043de:	d006      	beq.n	80043ee <UART_SetConfig+0x20a>
 80043e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e4:	d009      	beq.n	80043fa <UART_SetConfig+0x216>
 80043e6:	e00b      	b.n	8004400 <UART_SetConfig+0x21c>
 80043e8:	2300      	movs	r3, #0
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e0a1      	b.n	8004532 <UART_SetConfig+0x34e>
 80043ee:	2302      	movs	r3, #2
 80043f0:	77fb      	strb	r3, [r7, #31]
 80043f2:	e09e      	b.n	8004532 <UART_SetConfig+0x34e>
 80043f4:	2304      	movs	r3, #4
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e09b      	b.n	8004532 <UART_SetConfig+0x34e>
 80043fa:	2308      	movs	r3, #8
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e098      	b.n	8004532 <UART_SetConfig+0x34e>
 8004400:	2310      	movs	r3, #16
 8004402:	77fb      	strb	r3, [r7, #31]
 8004404:	bf00      	nop
 8004406:	e094      	b.n	8004532 <UART_SetConfig+0x34e>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a39      	ldr	r2, [pc, #228]	; (80044f4 <UART_SetConfig+0x310>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d124      	bne.n	800445c <UART_SetConfig+0x278>
 8004412:	4b33      	ldr	r3, [pc, #204]	; (80044e0 <UART_SetConfig+0x2fc>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004418:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800441c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004420:	d012      	beq.n	8004448 <UART_SetConfig+0x264>
 8004422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004426:	d802      	bhi.n	800442e <UART_SetConfig+0x24a>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d007      	beq.n	800443c <UART_SetConfig+0x258>
 800442c:	e012      	b.n	8004454 <UART_SetConfig+0x270>
 800442e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004432:	d006      	beq.n	8004442 <UART_SetConfig+0x25e>
 8004434:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004438:	d009      	beq.n	800444e <UART_SetConfig+0x26a>
 800443a:	e00b      	b.n	8004454 <UART_SetConfig+0x270>
 800443c:	2301      	movs	r3, #1
 800443e:	77fb      	strb	r3, [r7, #31]
 8004440:	e077      	b.n	8004532 <UART_SetConfig+0x34e>
 8004442:	2302      	movs	r3, #2
 8004444:	77fb      	strb	r3, [r7, #31]
 8004446:	e074      	b.n	8004532 <UART_SetConfig+0x34e>
 8004448:	2304      	movs	r3, #4
 800444a:	77fb      	strb	r3, [r7, #31]
 800444c:	e071      	b.n	8004532 <UART_SetConfig+0x34e>
 800444e:	2308      	movs	r3, #8
 8004450:	77fb      	strb	r3, [r7, #31]
 8004452:	e06e      	b.n	8004532 <UART_SetConfig+0x34e>
 8004454:	2310      	movs	r3, #16
 8004456:	77fb      	strb	r3, [r7, #31]
 8004458:	bf00      	nop
 800445a:	e06a      	b.n	8004532 <UART_SetConfig+0x34e>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a25      	ldr	r2, [pc, #148]	; (80044f8 <UART_SetConfig+0x314>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d124      	bne.n	80044b0 <UART_SetConfig+0x2cc>
 8004466:	4b1e      	ldr	r3, [pc, #120]	; (80044e0 <UART_SetConfig+0x2fc>)
 8004468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004474:	d012      	beq.n	800449c <UART_SetConfig+0x2b8>
 8004476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447a:	d802      	bhi.n	8004482 <UART_SetConfig+0x29e>
 800447c:	2b00      	cmp	r3, #0
 800447e:	d007      	beq.n	8004490 <UART_SetConfig+0x2ac>
 8004480:	e012      	b.n	80044a8 <UART_SetConfig+0x2c4>
 8004482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004486:	d006      	beq.n	8004496 <UART_SetConfig+0x2b2>
 8004488:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800448c:	d009      	beq.n	80044a2 <UART_SetConfig+0x2be>
 800448e:	e00b      	b.n	80044a8 <UART_SetConfig+0x2c4>
 8004490:	2300      	movs	r3, #0
 8004492:	77fb      	strb	r3, [r7, #31]
 8004494:	e04d      	b.n	8004532 <UART_SetConfig+0x34e>
 8004496:	2302      	movs	r3, #2
 8004498:	77fb      	strb	r3, [r7, #31]
 800449a:	e04a      	b.n	8004532 <UART_SetConfig+0x34e>
 800449c:	2304      	movs	r3, #4
 800449e:	77fb      	strb	r3, [r7, #31]
 80044a0:	e047      	b.n	8004532 <UART_SetConfig+0x34e>
 80044a2:	2308      	movs	r3, #8
 80044a4:	77fb      	strb	r3, [r7, #31]
 80044a6:	e044      	b.n	8004532 <UART_SetConfig+0x34e>
 80044a8:	2310      	movs	r3, #16
 80044aa:	77fb      	strb	r3, [r7, #31]
 80044ac:	bf00      	nop
 80044ae:	e040      	b.n	8004532 <UART_SetConfig+0x34e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a11      	ldr	r2, [pc, #68]	; (80044fc <UART_SetConfig+0x318>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d139      	bne.n	800452e <UART_SetConfig+0x34a>
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <UART_SetConfig+0x2fc>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044c8:	d027      	beq.n	800451a <UART_SetConfig+0x336>
 80044ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044ce:	d817      	bhi.n	8004500 <UART_SetConfig+0x31c>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01c      	beq.n	800450e <UART_SetConfig+0x32a>
 80044d4:	e027      	b.n	8004526 <UART_SetConfig+0x342>
 80044d6:	bf00      	nop
 80044d8:	efff69f3 	.word	0xefff69f3
 80044dc:	40011000 	.word	0x40011000
 80044e0:	40023800 	.word	0x40023800
 80044e4:	40004400 	.word	0x40004400
 80044e8:	40004800 	.word	0x40004800
 80044ec:	40004c00 	.word	0x40004c00
 80044f0:	40005000 	.word	0x40005000
 80044f4:	40011400 	.word	0x40011400
 80044f8:	40007800 	.word	0x40007800
 80044fc:	40007c00 	.word	0x40007c00
 8004500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004504:	d006      	beq.n	8004514 <UART_SetConfig+0x330>
 8004506:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800450a:	d009      	beq.n	8004520 <UART_SetConfig+0x33c>
 800450c:	e00b      	b.n	8004526 <UART_SetConfig+0x342>
 800450e:	2300      	movs	r3, #0
 8004510:	77fb      	strb	r3, [r7, #31]
 8004512:	e00e      	b.n	8004532 <UART_SetConfig+0x34e>
 8004514:	2302      	movs	r3, #2
 8004516:	77fb      	strb	r3, [r7, #31]
 8004518:	e00b      	b.n	8004532 <UART_SetConfig+0x34e>
 800451a:	2304      	movs	r3, #4
 800451c:	77fb      	strb	r3, [r7, #31]
 800451e:	e008      	b.n	8004532 <UART_SetConfig+0x34e>
 8004520:	2308      	movs	r3, #8
 8004522:	77fb      	strb	r3, [r7, #31]
 8004524:	e005      	b.n	8004532 <UART_SetConfig+0x34e>
 8004526:	2310      	movs	r3, #16
 8004528:	77fb      	strb	r3, [r7, #31]
 800452a:	bf00      	nop
 800452c:	e001      	b.n	8004532 <UART_SetConfig+0x34e>
 800452e:	2310      	movs	r3, #16
 8004530:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800453a:	d17c      	bne.n	8004636 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800453c:	7ffb      	ldrb	r3, [r7, #31]
 800453e:	2b08      	cmp	r3, #8
 8004540:	d859      	bhi.n	80045f6 <UART_SetConfig+0x412>
 8004542:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <UART_SetConfig+0x364>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	0800456d 	.word	0x0800456d
 800454c:	0800458b 	.word	0x0800458b
 8004550:	080045a9 	.word	0x080045a9
 8004554:	080045f7 	.word	0x080045f7
 8004558:	080045c1 	.word	0x080045c1
 800455c:	080045f7 	.word	0x080045f7
 8004560:	080045f7 	.word	0x080045f7
 8004564:	080045f7 	.word	0x080045f7
 8004568:	080045df 	.word	0x080045df
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800456c:	f7fd ff66 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 8004570:	4603      	mov	r3, r0
 8004572:	005a      	lsls	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	441a      	add	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	fbb2 f3f3 	udiv	r3, r2, r3
 8004584:	b29b      	uxth	r3, r3
 8004586:	61bb      	str	r3, [r7, #24]
        break;
 8004588:	e038      	b.n	80045fc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800458a:	f7fd ff6b 	bl	8002464 <HAL_RCC_GetPCLK2Freq>
 800458e:	4603      	mov	r3, r0
 8004590:	005a      	lsls	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	441a      	add	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	61bb      	str	r3, [r7, #24]
        break;
 80045a6:	e029      	b.n	80045fc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	085a      	lsrs	r2, r3, #1
 80045ae:	4b5d      	ldr	r3, [pc, #372]	; (8004724 <UART_SetConfig+0x540>)
 80045b0:	4413      	add	r3, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6852      	ldr	r2, [r2, #4]
 80045b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	61bb      	str	r3, [r7, #24]
        break;
 80045be:	e01d      	b.n	80045fc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80045c0:	f7fd fe7e 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 80045c4:	4603      	mov	r3, r0
 80045c6:	005a      	lsls	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	085b      	lsrs	r3, r3, #1
 80045ce:	441a      	add	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d8:	b29b      	uxth	r3, r3
 80045da:	61bb      	str	r3, [r7, #24]
        break;
 80045dc:	e00e      	b.n	80045fc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	61bb      	str	r3, [r7, #24]
        break;
 80045f4:	e002      	b.n	80045fc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	75fb      	strb	r3, [r7, #23]
        break;
 80045fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b0f      	cmp	r3, #15
 8004600:	d916      	bls.n	8004630 <UART_SetConfig+0x44c>
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004608:	d212      	bcs.n	8004630 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	b29b      	uxth	r3, r3
 800460e:	f023 030f 	bic.w	r3, r3, #15
 8004612:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	085b      	lsrs	r3, r3, #1
 8004618:	b29b      	uxth	r3, r3
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	b29a      	uxth	r2, r3
 8004620:	89fb      	ldrh	r3, [r7, #14]
 8004622:	4313      	orrs	r3, r2
 8004624:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	89fa      	ldrh	r2, [r7, #14]
 800462c:	60da      	str	r2, [r3, #12]
 800462e:	e06e      	b.n	800470e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	75fb      	strb	r3, [r7, #23]
 8004634:	e06b      	b.n	800470e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004636:	7ffb      	ldrb	r3, [r7, #31]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d857      	bhi.n	80046ec <UART_SetConfig+0x508>
 800463c:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <UART_SetConfig+0x460>)
 800463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	08004669 	.word	0x08004669
 8004648:	08004685 	.word	0x08004685
 800464c:	080046a1 	.word	0x080046a1
 8004650:	080046ed 	.word	0x080046ed
 8004654:	080046b9 	.word	0x080046b9
 8004658:	080046ed 	.word	0x080046ed
 800465c:	080046ed 	.word	0x080046ed
 8004660:	080046ed 	.word	0x080046ed
 8004664:	080046d5 	.word	0x080046d5
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004668:	f7fd fee8 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 800466c:	4602      	mov	r2, r0
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	085b      	lsrs	r3, r3, #1
 8004674:	441a      	add	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	fbb2 f3f3 	udiv	r3, r2, r3
 800467e:	b29b      	uxth	r3, r3
 8004680:	61bb      	str	r3, [r7, #24]
        break;
 8004682:	e036      	b.n	80046f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004684:	f7fd feee 	bl	8002464 <HAL_RCC_GetPCLK2Freq>
 8004688:	4602      	mov	r2, r0
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	085b      	lsrs	r3, r3, #1
 8004690:	441a      	add	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	fbb2 f3f3 	udiv	r3, r2, r3
 800469a:	b29b      	uxth	r3, r3
 800469c:	61bb      	str	r3, [r7, #24]
        break;
 800469e:	e028      	b.n	80046f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	085a      	lsrs	r2, r3, #1
 80046a6:	4b20      	ldr	r3, [pc, #128]	; (8004728 <UART_SetConfig+0x544>)
 80046a8:	4413      	add	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6852      	ldr	r2, [r2, #4]
 80046ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	61bb      	str	r3, [r7, #24]
        break;
 80046b6:	e01c      	b.n	80046f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80046b8:	f7fd fe02 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 80046bc:	4602      	mov	r2, r0
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	085b      	lsrs	r3, r3, #1
 80046c4:	441a      	add	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	61bb      	str	r3, [r7, #24]
        break;
 80046d2:	e00e      	b.n	80046f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	61bb      	str	r3, [r7, #24]
        break;
 80046ea:	e002      	b.n	80046f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	75fb      	strb	r3, [r7, #23]
        break;
 80046f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b0f      	cmp	r3, #15
 80046f6:	d908      	bls.n	800470a <UART_SetConfig+0x526>
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fe:	d204      	bcs.n	800470a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	60da      	str	r2, [r3, #12]
 8004708:	e001      	b.n	800470e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800471a:	7dfb      	ldrb	r3, [r7, #23]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	01e84800 	.word	0x01e84800
 8004728:	00f42400 	.word	0x00f42400

0800472c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01a      	beq.n	8004842 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800482a:	d10a      	bne.n	8004842 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	605a      	str	r2, [r3, #4]
  }
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af02      	add	r7, sp, #8
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800487e:	f7fc fe79 	bl	8001574 <HAL_GetTick>
 8004882:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b08      	cmp	r3, #8
 8004890:	d10e      	bne.n	80048b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004892:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f814 	bl	80048ce <UART_WaitOnFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e00a      	b.n	80048c6 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b084      	sub	sp, #16
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	603b      	str	r3, [r7, #0]
 80048da:	4613      	mov	r3, r2
 80048dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048de:	e02a      	b.n	8004936 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e6:	d026      	beq.n	8004936 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e8:	f7fc fe44 	bl	8001574 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d302      	bcc.n	80048fe <UART_WaitOnFlagUntilTimeout+0x30>
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d11b      	bne.n	8004936 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800490c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0201 	bic.w	r2, r2, #1
 800491c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e00f      	b.n	8004956 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69da      	ldr	r2, [r3, #28]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4013      	ands	r3, r2
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	429a      	cmp	r2, r3
 8004944:	bf0c      	ite	eq
 8004946:	2301      	moveq	r3, #1
 8004948:	2300      	movne	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	461a      	mov	r2, r3
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	429a      	cmp	r2, r3
 8004952:	d0c5      	beq.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004960:	b084      	sub	sp, #16
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	f107 001c 	add.w	r0, r7, #28
 800496e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004976:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004978:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800497a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800497e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004982:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004986:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800498a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <SDMMC_Init+0x54>)
 8004998:	4013      	ands	r3, r2
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	b004      	add	sp, #16
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	ffff8100 	.word	0xffff8100

080049b8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2203      	movs	r2, #3
 8004a00:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0303 	and.w	r3, r3, #3
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a4a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004a50:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004a56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <SDMMC_SendCommand+0x50>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	fffff000 	.word	0xfffff000

08004a80 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	b2db      	uxtb	r3, r3
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3314      	adds	r3, #20
 8004aac:	461a      	mov	r2, r3
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
}  
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004aea:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004af0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004af6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b02:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0

}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004b26:	2300      	movs	r3, #0
 8004b28:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004b2e:	2310      	movs	r3, #16
 8004b30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b32:	2340      	movs	r3, #64	; 0x40
 8004b34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b3e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b40:	f107 0308 	add.w	r3, r7, #8
 8004b44:	4619      	mov	r1, r3
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff ff70 	bl	8004a2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b50:	2110      	movs	r1, #16
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fa1c 	bl	8004f90 <SDMMC_GetCmdResp1>
 8004b58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3720      	adds	r7, #32
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004b76:	2311      	movs	r3, #17
 8004b78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b7a:	2340      	movs	r3, #64	; 0x40
 8004b7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b86:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b88:	f107 0308 	add.w	r3, r7, #8
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff ff4c 	bl	8004a2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b98:	2111      	movs	r1, #17
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f9f8 	bl	8004f90 <SDMMC_GetCmdResp1>
 8004ba0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004bbe:	2312      	movs	r3, #18
 8004bc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004bc2:	2340      	movs	r3, #64	; 0x40
 8004bc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bce:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bd0:	f107 0308 	add.w	r3, r7, #8
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff ff28 	bl	8004a2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be0:	2112      	movs	r1, #18
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f9d4 	bl	8004f90 <SDMMC_GetCmdResp1>
 8004be8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bea:	69fb      	ldr	r3, [r7, #28]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3720      	adds	r7, #32
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004c06:	2318      	movs	r3, #24
 8004c08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c0a:	2340      	movs	r3, #64	; 0x40
 8004c0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c16:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c18:	f107 0308 	add.w	r3, r7, #8
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff ff04 	bl	8004a2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c28:	2118      	movs	r1, #24
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f9b0 	bl	8004f90 <SDMMC_GetCmdResp1>
 8004c30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c32:	69fb      	ldr	r3, [r7, #28]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3720      	adds	r7, #32
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004c4e:	2319      	movs	r3, #25
 8004c50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c52:	2340      	movs	r3, #64	; 0x40
 8004c54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c5e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c60:	f107 0308 	add.w	r3, r7, #8
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7ff fee0 	bl	8004a2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c70:	2119      	movs	r1, #25
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f98c 	bl	8004f90 <SDMMC_GetCmdResp1>
 8004c78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c7a:	69fb      	ldr	r3, [r7, #28]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3720      	adds	r7, #32
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004c94:	230c      	movs	r3, #12
 8004c96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c98:	2340      	movs	r3, #64	; 0x40
 8004c9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ca6:	f107 0308 	add.w	r3, r7, #8
 8004caa:	4619      	mov	r1, r3
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff febd 	bl	8004a2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 8004cb2:	4a05      	ldr	r2, [pc, #20]	; (8004cc8 <SDMMC_CmdStopTransfer+0x44>)
 8004cb4:	210c      	movs	r1, #12
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f96a 	bl	8004f90 <SDMMC_GetCmdResp1>
 8004cbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3720      	adds	r7, #32
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	05f5e100 	.word	0x05f5e100

08004ccc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	; 0x28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004ce0:	2307      	movs	r3, #7
 8004ce2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ce4:	2340      	movs	r3, #64	; 0x40
 8004ce6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cf0:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004cf2:	f107 0310 	add.w	r3, r7, #16
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f7ff fe97 	bl	8004a2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d02:	2107      	movs	r1, #7
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 f943 	bl	8004f90 <SDMMC_GetCmdResp1>
 8004d0a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3728      	adds	r7, #40	; 0x28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b088      	sub	sp, #32
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d36:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d38:	f107 0308 	add.w	r3, r7, #8
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff fe74 	bl	8004a2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f8f9 	bl	8004f3c <SDMMC_GetCmdError>
 8004d4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3720      	adds	r7, #32
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b088      	sub	sp, #32
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004d62:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004d66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004d68:	2308      	movs	r3, #8
 8004d6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004d6c:	2340      	movs	r3, #64	; 0x40
 8004d6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d78:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d7a:	f107 0308 	add.w	r3, r7, #8
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff fe53 	bl	8004a2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 faca 	bl	8005320 <SDMMC_GetCmdResp7>
 8004d8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d8e:	69fb      	ldr	r3, [r7, #28]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3720      	adds	r7, #32
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004daa:	2337      	movs	r3, #55	; 0x37
 8004dac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004dae:	2340      	movs	r3, #64	; 0x40
 8004db0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dba:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004dbc:	f107 0308 	add.w	r3, r7, #8
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff fe32 	bl	8004a2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dcc:	2137      	movs	r1, #55	; 0x37
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f8de 	bl	8004f90 <SDMMC_GetCmdResp1>
 8004dd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3720      	adds	r7, #32
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <SDMMC_CmdAppOperCommand+0x48>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004df6:	2329      	movs	r3, #41	; 0x29
 8004df8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004dfa:	2340      	movs	r3, #64	; 0x40
 8004dfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e06:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e08:	f107 0308 	add.w	r3, r7, #8
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff fe0c 	bl	8004a2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f9e1 	bl	80051dc <SDMMC_GetCmdResp3>
 8004e1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3720      	adds	r7, #32
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	80100000 	.word	0x80100000

08004e2c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004e40:	23c0      	movs	r3, #192	; 0xc0
 8004e42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e44:	2300      	movs	r3, #0
 8004e46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e4c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e4e:	f107 0308 	add.w	r3, r7, #8
 8004e52:	4619      	mov	r1, r3
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7ff fde9 	bl	8004a2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f97e 	bl	800515c <SDMMC_GetCmdResp2>
 8004e60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e62:	69fb      	ldr	r3, [r7, #28]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3720      	adds	r7, #32
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004e76:	2300      	movs	r3, #0
 8004e78:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004e7e:	2309      	movs	r3, #9
 8004e80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004e82:	23c0      	movs	r3, #192	; 0xc0
 8004e84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e8e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e90:	f107 0308 	add.w	r3, r7, #8
 8004e94:	4619      	mov	r1, r3
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff fdc8 	bl	8004a2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f95d 	bl	800515c <SDMMC_GetCmdResp2>
 8004ea2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ea4:	69fb      	ldr	r3, [r7, #28]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3720      	adds	r7, #32
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b088      	sub	sp, #32
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ec4:	2340      	movs	r3, #64	; 0x40
 8004ec6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ed0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ed2:	f107 0308 	add.w	r3, r7, #8
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff fda7 	bl	8004a2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	2103      	movs	r1, #3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f9ae 	bl	8005244 <SDMMC_GetCmdResp6>
 8004ee8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004eea:	69fb      	ldr	r3, [r7, #28]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004f06:	230d      	movs	r3, #13
 8004f08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f0a:	2340      	movs	r3, #64	; 0x40
 8004f0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f16:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f18:	f107 0308 	add.w	r3, r7, #8
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7ff fd84 	bl	8004a2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f28:	210d      	movs	r1, #13
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f830 	bl	8004f90 <SDMMC_GetCmdResp1>
 8004f30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f32:	69fb      	ldr	r3, [r7, #28]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8004f3c:	b490      	push	{r4, r7}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8004f44:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <SDMMC_GetCmdError+0x4c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a10      	ldr	r2, [pc, #64]	; (8004f8c <SDMMC_GetCmdError+0x50>)
 8004f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4e:	0a5b      	lsrs	r3, r3, #9
 8004f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f54:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8004f58:	4623      	mov	r3, r4
 8004f5a:	1e5c      	subs	r4, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d102      	bne.n	8004f66 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f64:	e00a      	b.n	8004f7c <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0f2      	beq.n	8004f58 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004f78:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc90      	pop	{r4, r7}
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	20000000 	.word	0x20000000
 8004f8c:	10624dd3 	.word	0x10624dd3

08004f90 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004f90:	b590      	push	{r4, r7, lr}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8004f9e:	4b6c      	ldr	r3, [pc, #432]	; (8005150 <SDMMC_GetCmdResp1+0x1c0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a6c      	ldr	r2, [pc, #432]	; (8005154 <SDMMC_GetCmdResp1+0x1c4>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	0a5b      	lsrs	r3, r3, #9
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	1e5c      	subs	r4, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d102      	bne.n	8004fbe <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004fb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004fbc:	e0c3      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f2      	beq.n	8004fb0 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d004      	beq.n	8004fe0 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2204      	movs	r2, #4
 8004fda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004fdc:	2304      	movs	r3, #4
 8004fde:	e0b2      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d004      	beq.n	8004ff6 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e0a7      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f7ff fd42 	bl	8004a80 <SDMMC_GetCommandResponse>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	461a      	mov	r2, r3
 8005000:	7afb      	ldrb	r3, [r7, #11]
 8005002:	4293      	cmp	r3, r2
 8005004:	d001      	beq.n	800500a <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005006:	2301      	movs	r3, #1
 8005008:	e09d      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005010:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005012:	2100      	movs	r1, #0
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f7ff fd40 	bl	8004a9a <SDMMC_GetResponse>
 800501a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4b4e      	ldr	r3, [pc, #312]	; (8005158 <SDMMC_GetCmdResp1+0x1c8>)
 8005020:	4013      	ands	r3, r2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8005026:	2300      	movs	r3, #0
 8005028:	e08d      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	da02      	bge.n	8005036 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005030:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005034:	e087      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005040:	2340      	movs	r3, #64	; 0x40
 8005042:	e080      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	e079      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800505c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005060:	e071      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800506c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005070:	e069      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800507c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005080:	e061      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800508c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005090:	e059      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800509c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050a0:	e051      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80050ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050b0:	e049      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80050bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050c0:	e041      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 80050cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050d0:	e039      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80050dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050e0:	e031      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80050ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050f0:	e029      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80050fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005100:	e021      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800510c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005110:	e019      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800511c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005120:	e011      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800512c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005130:	e009      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800513c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005140:	e001      	b.n	8005146 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005142:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005146:	4618      	mov	r0, r3
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	bd90      	pop	{r4, r7, pc}
 800514e:	bf00      	nop
 8005150:	20000000 	.word	0x20000000
 8005154:	10624dd3 	.word	0x10624dd3
 8005158:	fdffe008 	.word	0xfdffe008

0800515c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800515c:	b490      	push	{r4, r7}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005164:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <SDMMC_GetCmdResp2+0x78>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1b      	ldr	r2, [pc, #108]	; (80051d8 <SDMMC_GetCmdResp2+0x7c>)
 800516a:	fba2 2303 	umull	r2, r3, r2, r3
 800516e:	0a5b      	lsrs	r3, r3, #9
 8005170:	f241 3288 	movw	r2, #5000	; 0x1388
 8005174:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005178:	4623      	mov	r3, r4
 800517a:	1e5c      	subs	r4, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d102      	bne.n	8005186 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005180:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005184:	e020      	b.n	80051c8 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0f2      	beq.n	8005178 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d004      	beq.n	80051a8 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2204      	movs	r2, #4
 80051a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80051a4:	2304      	movs	r3, #4
 80051a6:	e00f      	b.n	80051c8 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d004      	beq.n	80051be <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e004      	b.n	80051c8 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80051c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc90      	pop	{r4, r7}
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000000 	.word	0x20000000
 80051d8:	10624dd3 	.word	0x10624dd3

080051dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80051dc:	b490      	push	{r4, r7}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80051e4:	4b15      	ldr	r3, [pc, #84]	; (800523c <SDMMC_GetCmdResp3+0x60>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a15      	ldr	r2, [pc, #84]	; (8005240 <SDMMC_GetCmdResp3+0x64>)
 80051ea:	fba2 2303 	umull	r2, r3, r2, r3
 80051ee:	0a5b      	lsrs	r3, r3, #9
 80051f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80051f8:	4623      	mov	r3, r4
 80051fa:	1e5c      	subs	r4, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005200:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005204:	e015      	b.n	8005232 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0f2      	beq.n	80051f8 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005216:	f003 0304 	and.w	r3, r3, #4
 800521a:	2b00      	cmp	r3, #0
 800521c:	d004      	beq.n	8005228 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2204      	movs	r2, #4
 8005222:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005224:	2304      	movs	r3, #4
 8005226:	e004      	b.n	8005232 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800522e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bc90      	pop	{r4, r7}
 800523a:	4770      	bx	lr
 800523c:	20000000 	.word	0x20000000
 8005240:	10624dd3 	.word	0x10624dd3

08005244 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	460b      	mov	r3, r1
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005252:	4b31      	ldr	r3, [pc, #196]	; (8005318 <SDMMC_GetCmdResp6+0xd4>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a31      	ldr	r2, [pc, #196]	; (800531c <SDMMC_GetCmdResp6+0xd8>)
 8005258:	fba2 2303 	umull	r2, r3, r2, r3
 800525c:	0a5b      	lsrs	r3, r3, #9
 800525e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005262:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005266:	4623      	mov	r3, r4
 8005268:	1e5c      	subs	r4, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d102      	bne.n	8005274 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800526e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005272:	e04c      	b.n	800530e <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005278:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0f2      	beq.n	8005266 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d004      	beq.n	8005296 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2204      	movs	r2, #4
 8005290:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005292:	2304      	movs	r3, #4
 8005294:	e03b      	b.n	800530e <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d004      	beq.n	80052ac <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e030      	b.n	800530e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7ff fbe7 	bl	8004a80 <SDMMC_GetCommandResponse>
 80052b2:	4603      	mov	r3, r0
 80052b4:	461a      	mov	r2, r3
 80052b6:	7afb      	ldrb	r3, [r7, #11]
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d001      	beq.n	80052c0 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052bc:	2301      	movs	r3, #1
 80052be:	e026      	b.n	800530e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80052c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80052c8:	2100      	movs	r1, #0
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7ff fbe5 	bl	8004a9a <SDMMC_GetResponse>
 80052d0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d106      	bne.n	80052ea <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	0c1b      	lsrs	r3, r3, #16
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80052e6:	2300      	movs	r3, #0
 80052e8:	e011      	b.n	800530e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80052f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052f8:	e009      	b.n	800530e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005308:	e001      	b.n	800530e <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800530a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800530e:	4618      	mov	r0, r3
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	bd90      	pop	{r4, r7, pc}
 8005316:	bf00      	nop
 8005318:	20000000 	.word	0x20000000
 800531c:	10624dd3 	.word	0x10624dd3

08005320 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005320:	b490      	push	{r4, r7}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005328:	4b18      	ldr	r3, [pc, #96]	; (800538c <SDMMC_GetCmdResp7+0x6c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a18      	ldr	r2, [pc, #96]	; (8005390 <SDMMC_GetCmdResp7+0x70>)
 800532e:	fba2 2303 	umull	r2, r3, r2, r3
 8005332:	0a5b      	lsrs	r3, r3, #9
 8005334:	f241 3288 	movw	r2, #5000	; 0x1388
 8005338:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800533c:	4623      	mov	r3, r4
 800533e:	1e5c      	subs	r4, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d102      	bne.n	800534a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005344:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005348:	e01a      	b.n	8005380 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f2      	beq.n	800533c <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d004      	beq.n	800536c <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2240      	movs	r2, #64	; 0x40
 8005366:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005368:	2304      	movs	r3, #4
 800536a:	e009      	b.n	8005380 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2240      	movs	r2, #64	; 0x40
 800537c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800537e:	2300      	movs	r3, #0
  
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bc90      	pop	{r4, r7}
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	20000000 	.word	0x20000000
 8005390:	10624dd3 	.word	0x10624dd3

08005394 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005398:	4904      	ldr	r1, [pc, #16]	; (80053ac <MX_FATFS_Init+0x18>)
 800539a:	4805      	ldr	r0, [pc, #20]	; (80053b0 <MX_FATFS_Init+0x1c>)
 800539c:	f003 f834 	bl	8008408 <FATFS_LinkDriver>
 80053a0:	4603      	mov	r3, r0
 80053a2:	461a      	mov	r2, r3
 80053a4:	4b03      	ldr	r3, [pc, #12]	; (80053b4 <MX_FATFS_Init+0x20>)
 80053a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80053a8:	bf00      	nop
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	200001a4 	.word	0x200001a4
 80053b0:	080086c0 	.word	0x080086c0
 80053b4:	200001a0 	.word	0x200001a0

080053b8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80053bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80053be:	4618      	mov	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80053d2:	f000 f86b 	bl	80054ac <BSP_SD_IsDetected>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d001      	beq.n	80053e0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80053dc:	2302      	movs	r3, #2
 80053de:	e005      	b.n	80053ec <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80053e0:	4804      	ldr	r0, [pc, #16]	; (80053f4 <BSP_SD_Init+0x2c>)
 80053e2:	f7fd fcab 	bl	8002d3c <HAL_SD_Init>
 80053e6:	4603      	mov	r3, r0
 80053e8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80053ea:	79fb      	ldrb	r3, [r7, #7]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	20000058 	.word	0x20000058

080053f8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	68f9      	ldr	r1, [r7, #12]
 8005414:	4806      	ldr	r0, [pc, #24]	; (8005430 <BSP_SD_ReadBlocks+0x38>)
 8005416:	f7fd fd20 	bl	8002e5a <HAL_SD_ReadBlocks>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8005424:	7dfb      	ldrb	r3, [r7, #23]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20000058 	.word	0x20000058

08005434 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af02      	add	r7, sp, #8
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	68f9      	ldr	r1, [r7, #12]
 8005450:	4806      	ldr	r0, [pc, #24]	; (800546c <BSP_SD_WriteBlocks+0x38>)
 8005452:	f7fd fe98 	bl	8003186 <HAL_SD_WriteBlocks>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8005460:	7dfb      	ldrb	r3, [r7, #23]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20000058 	.word	0x20000058

08005470 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005474:	4805      	ldr	r0, [pc, #20]	; (800548c <BSP_SD_GetCardState+0x1c>)
 8005476:	f7fe fa41 	bl	80038fc <HAL_SD_GetCardState>
 800547a:	4603      	mov	r3, r0
 800547c:	2b04      	cmp	r3, #4
 800547e:	bf14      	ite	ne
 8005480:	2301      	movne	r3, #1
 8005482:	2300      	moveq	r3, #0
 8005484:	b2db      	uxtb	r3, r3
}
 8005486:	4618      	mov	r0, r3
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000058 	.word	0x20000058

08005490 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	4803      	ldr	r0, [pc, #12]	; (80054a8 <BSP_SD_GetCardInfo+0x18>)
 800549c:	f7fe fa02 	bl	80038a4 <HAL_SD_GetCardInfo>
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20000058 	.word	0x20000058

080054ac <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80054b2:	2301      	movs	r3, #1
 80054b4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80054b6:	f000 f80b 	bl	80054d0 <BSP_PlatformIsDetected>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80054c0:	2300      	movs	r3, #0
 80054c2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	b2db      	uxtb	r3, r3
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80054d6:	2301      	movs	r3, #1
 80054d8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80054da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054de:	4806      	ldr	r0, [pc, #24]	; (80054f8 <BSP_PlatformIsDetected+0x28>)
 80054e0:	f7fc fb02 	bl	8001ae8 <HAL_GPIO_ReadPin>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80054ea:	2300      	movs	r3, #0
 80054ec:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 80054ee:	79fb      	ldrb	r3, [r7, #7]
}  
 80054f0:	4618      	mov	r0, r3
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	40022000 	.word	0x40022000

080054fc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	4603      	mov	r3, r0
 8005504:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005506:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <SD_CheckStatus+0x38>)
 8005508:	2201      	movs	r2, #1
 800550a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800550c:	f7ff ffb0 	bl	8005470 <BSP_SD_GetCardState>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d107      	bne.n	8005526 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005516:	4b07      	ldr	r3, [pc, #28]	; (8005534 <SD_CheckStatus+0x38>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f023 0301 	bic.w	r3, r3, #1
 8005520:	b2da      	uxtb	r2, r3
 8005522:	4b04      	ldr	r3, [pc, #16]	; (8005534 <SD_CheckStatus+0x38>)
 8005524:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005526:	4b03      	ldr	r3, [pc, #12]	; (8005534 <SD_CheckStatus+0x38>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	b2db      	uxtb	r3, r3
}
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20000005 	.word	0x20000005

08005538 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	4603      	mov	r3, r0
 8005540:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8005542:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <SD_initialize+0x38>)
 8005544:	2201      	movs	r2, #1
 8005546:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005548:	f7ff ff3e 	bl	80053c8 <BSP_SD_Init>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d107      	bne.n	8005562 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff ffd1 	bl	80054fc <SD_CheckStatus>
 800555a:	4603      	mov	r3, r0
 800555c:	461a      	mov	r2, r3
 800555e:	4b04      	ldr	r3, [pc, #16]	; (8005570 <SD_initialize+0x38>)
 8005560:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8005562:	4b03      	ldr	r3, [pc, #12]	; (8005570 <SD_initialize+0x38>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	b2db      	uxtb	r3, r3
}
 8005568:	4618      	mov	r0, r3
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20000005 	.word	0x20000005

08005574 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff ffbb 	bl	80054fc <SD_CheckStatus>
 8005586:	4603      	mov	r3, r0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	607a      	str	r2, [r7, #4]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	4603      	mov	r3, r0
 800559e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80055a4:	f04f 33ff 	mov.w	r3, #4294967295
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	68b8      	ldr	r0, [r7, #8]
 80055ae:	f7ff ff23 	bl	80053f8 <BSP_SD_ReadBlocks>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d107      	bne.n	80055c8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80055b8:	bf00      	nop
 80055ba:	f7ff ff59 	bl	8005470 <BSP_SD_GetCardState>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1fa      	bne.n	80055ba <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80055c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b086      	sub	sp, #24
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
 80055de:	4603      	mov	r3, r0
 80055e0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80055e6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	68b8      	ldr	r0, [r7, #8]
 80055f0:	f7ff ff20 	bl	8005434 <BSP_SD_WriteBlocks>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d107      	bne.n	800560a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80055fa:	bf00      	nop
 80055fc:	f7ff ff38 	bl	8005470 <BSP_SD_GetCardState>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1fa      	bne.n	80055fc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800560a:	7dfb      	ldrb	r3, [r7, #23]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b08c      	sub	sp, #48	; 0x30
 8005618:	af00      	add	r7, sp, #0
 800561a:	4603      	mov	r3, r0
 800561c:	603a      	str	r2, [r7, #0]
 800561e:	71fb      	strb	r3, [r7, #7]
 8005620:	460b      	mov	r3, r1
 8005622:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800562a:	4b25      	ldr	r3, [pc, #148]	; (80056c0 <SD_ioctl+0xac>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	b2db      	uxtb	r3, r3
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <SD_ioctl+0x28>
 8005638:	2303      	movs	r3, #3
 800563a:	e03c      	b.n	80056b6 <SD_ioctl+0xa2>

  switch (cmd)
 800563c:	79bb      	ldrb	r3, [r7, #6]
 800563e:	2b03      	cmp	r3, #3
 8005640:	d834      	bhi.n	80056ac <SD_ioctl+0x98>
 8005642:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <SD_ioctl+0x34>)
 8005644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005648:	08005659 	.word	0x08005659
 800564c:	08005661 	.word	0x08005661
 8005650:	08005679 	.word	0x08005679
 8005654:	08005693 	.word	0x08005693
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005658:	2300      	movs	r3, #0
 800565a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800565e:	e028      	b.n	80056b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005660:	f107 030c 	add.w	r3, r7, #12
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff ff13 	bl	8005490 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800566a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005676:	e01c      	b.n	80056b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005678:	f107 030c 	add.w	r3, r7, #12
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff ff07 	bl	8005490 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	b29a      	uxth	r2, r3
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005690:	e00f      	b.n	80056b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005692:	f107 030c 	add.w	r3, r7, #12
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff fefa 	bl	8005490 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	0a5a      	lsrs	r2, r3, #9
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80056aa:	e002      	b.n	80056b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80056ac:	2304      	movs	r3, #4
 80056ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80056b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3730      	adds	r7, #48	; 0x30
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000005 	.word	0x20000005

080056c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80056ce:	79fb      	ldrb	r3, [r7, #7]
 80056d0:	4a08      	ldr	r2, [pc, #32]	; (80056f4 <disk_status+0x30>)
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	79fa      	ldrb	r2, [r7, #7]
 80056dc:	4905      	ldr	r1, [pc, #20]	; (80056f4 <disk_status+0x30>)
 80056de:	440a      	add	r2, r1
 80056e0:	7a12      	ldrb	r2, [r2, #8]
 80056e2:	4610      	mov	r0, r2
 80056e4:	4798      	blx	r3
 80056e6:	4603      	mov	r3, r0
 80056e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	2000004c 	.word	0x2000004c

080056f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	4603      	mov	r3, r0
 8005700:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	4a0d      	ldr	r2, [pc, #52]	; (8005740 <disk_initialize+0x48>)
 800570a:	5cd3      	ldrb	r3, [r2, r3]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d111      	bne.n	8005734 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005710:	79fb      	ldrb	r3, [r7, #7]
 8005712:	4a0b      	ldr	r2, [pc, #44]	; (8005740 <disk_initialize+0x48>)
 8005714:	2101      	movs	r1, #1
 8005716:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	4a09      	ldr	r2, [pc, #36]	; (8005740 <disk_initialize+0x48>)
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	79fa      	ldrb	r2, [r7, #7]
 8005726:	4906      	ldr	r1, [pc, #24]	; (8005740 <disk_initialize+0x48>)
 8005728:	440a      	add	r2, r1
 800572a:	7a12      	ldrb	r2, [r2, #8]
 800572c:	4610      	mov	r0, r2
 800572e:	4798      	blx	r3
 8005730:	4603      	mov	r3, r0
 8005732:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005734:	7bfb      	ldrb	r3, [r7, #15]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	2000004c 	.word	0x2000004c

08005744 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005744:	b590      	push	{r4, r7, lr}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	4603      	mov	r3, r0
 8005752:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	4a0a      	ldr	r2, [pc, #40]	; (8005780 <disk_read+0x3c>)
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	689c      	ldr	r4, [r3, #8]
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	4a07      	ldr	r2, [pc, #28]	; (8005780 <disk_read+0x3c>)
 8005764:	4413      	add	r3, r2
 8005766:	7a18      	ldrb	r0, [r3, #8]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	68b9      	ldr	r1, [r7, #8]
 800576e:	47a0      	blx	r4
 8005770:	4603      	mov	r3, r0
 8005772:	75fb      	strb	r3, [r7, #23]
  return res;
 8005774:	7dfb      	ldrb	r3, [r7, #23]
}
 8005776:	4618      	mov	r0, r3
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	bd90      	pop	{r4, r7, pc}
 800577e:	bf00      	nop
 8005780:	2000004c 	.word	0x2000004c

08005784 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005784:	b590      	push	{r4, r7, lr}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	4603      	mov	r3, r0
 8005792:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	4a0a      	ldr	r2, [pc, #40]	; (80057c0 <disk_write+0x3c>)
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	68dc      	ldr	r4, [r3, #12]
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	4a07      	ldr	r2, [pc, #28]	; (80057c0 <disk_write+0x3c>)
 80057a4:	4413      	add	r3, r2
 80057a6:	7a18      	ldrb	r0, [r3, #8]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	47a0      	blx	r4
 80057b0:	4603      	mov	r3, r0
 80057b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80057b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd90      	pop	{r4, r7, pc}
 80057be:	bf00      	nop
 80057c0:	2000004c 	.word	0x2000004c

080057c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	4603      	mov	r3, r0
 80057cc:	603a      	str	r2, [r7, #0]
 80057ce:	71fb      	strb	r3, [r7, #7]
 80057d0:	460b      	mov	r3, r1
 80057d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80057d4:	79fb      	ldrb	r3, [r7, #7]
 80057d6:	4a09      	ldr	r2, [pc, #36]	; (80057fc <disk_ioctl+0x38>)
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	79fa      	ldrb	r2, [r7, #7]
 80057e2:	4906      	ldr	r1, [pc, #24]	; (80057fc <disk_ioctl+0x38>)
 80057e4:	440a      	add	r2, r1
 80057e6:	7a10      	ldrb	r0, [r2, #8]
 80057e8:	79b9      	ldrb	r1, [r7, #6]
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	4798      	blx	r3
 80057ee:	4603      	mov	r3, r0
 80057f0:	73fb      	strb	r3, [r7, #15]
  return res;
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	2000004c 	.word	0x2000004c

08005800 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3301      	adds	r3, #1
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005810:	89fb      	ldrh	r3, [r7, #14]
 8005812:	021b      	lsls	r3, r3, #8
 8005814:	b21a      	sxth	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	b21b      	sxth	r3, r3
 800581c:	4313      	orrs	r3, r2
 800581e:	b21b      	sxth	r3, r3
 8005820:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005822:	89fb      	ldrh	r3, [r7, #14]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3303      	adds	r3, #3
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	3202      	adds	r2, #2
 8005848:	7812      	ldrb	r2, [r2, #0]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	021b      	lsls	r3, r3, #8
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	3201      	adds	r2, #1
 8005856:	7812      	ldrb	r2, [r2, #0]
 8005858:	4313      	orrs	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	7812      	ldrb	r2, [r2, #0]
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]
	return rv;
 8005868:	68fb      	ldr	r3, [r7, #12]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	460b      	mov	r3, r1
 8005880:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	887a      	ldrh	r2, [r7, #2]
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	887b      	ldrh	r3, [r7, #2]
 8005890:	0a1b      	lsrs	r3, r3, #8
 8005892:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	887a      	ldrh	r2, [r7, #2]
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	701a      	strb	r2, [r3, #0]
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	0a1b      	lsrs	r3, r3, #8
 80058c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	607a      	str	r2, [r7, #4]
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	701a      	strb	r2, [r3, #0]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	0a1b      	lsrs	r3, r3, #8
 80058d8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	0a1b      	lsrs	r3, r3, #8
 80058ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	607a      	str	r2, [r7, #4]
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00d      	beq.n	800593a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	1c53      	adds	r3, r2, #1
 8005922:	613b      	str	r3, [r7, #16]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	1c59      	adds	r1, r3, #1
 8005928:	6179      	str	r1, [r7, #20]
 800592a:	7812      	ldrb	r2, [r2, #0]
 800592c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3b01      	subs	r3, #1
 8005932:	607b      	str	r3, [r7, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1f1      	bne.n	800591e <mem_cpy+0x1a>
	}
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005946:	b480      	push	{r7}
 8005948:	b087      	sub	sp, #28
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	617a      	str	r2, [r7, #20]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3b01      	subs	r3, #1
 8005966:	607b      	str	r3, [r7, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1f3      	bne.n	8005956 <mem_set+0x10>
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800597a:	b480      	push	{r7}
 800597c:	b089      	sub	sp, #36	; 0x24
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	61fb      	str	r3, [r7, #28]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	61fa      	str	r2, [r7, #28]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	4619      	mov	r1, r3
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	61ba      	str	r2, [r7, #24]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	1acb      	subs	r3, r1, r3
 80059a6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	607b      	str	r3, [r7, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <mem_cmp+0x40>
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0eb      	beq.n	8005992 <mem_cmp+0x18>

	return r;
 80059ba:	697b      	ldr	r3, [r7, #20]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3724      	adds	r7, #36	; 0x24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80059d2:	e002      	b.n	80059da <chk_chr+0x12>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3301      	adds	r3, #1
 80059d8:	607b      	str	r3, [r7, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <chk_chr+0x26>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d1f2      	bne.n	80059d4 <chk_chr+0xc>
	return *str;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	781b      	ldrb	r3, [r3, #0]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
	...

08005a00 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60bb      	str	r3, [r7, #8]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	e029      	b.n	8005a68 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005a14:	4a27      	ldr	r2, [pc, #156]	; (8005ab4 <chk_lock+0xb4>)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	4413      	add	r3, r2
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d01d      	beq.n	8005a5e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a22:	4a24      	ldr	r2, [pc, #144]	; (8005ab4 <chk_lock+0xb4>)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	4413      	add	r3, r2
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d116      	bne.n	8005a62 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005a34:	4a1f      	ldr	r2, [pc, #124]	; (8005ab4 <chk_lock+0xb4>)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	4413      	add	r3, r2
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d10c      	bne.n	8005a62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a48:	4a1a      	ldr	r2, [pc, #104]	; (8005ab4 <chk_lock+0xb4>)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	011b      	lsls	r3, r3, #4
 8005a4e:	4413      	add	r3, r2
 8005a50:	3308      	adds	r3, #8
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d102      	bne.n	8005a62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a5c:	e007      	b.n	8005a6e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3301      	adds	r3, #1
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d9d2      	bls.n	8005a14 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d109      	bne.n	8005a88 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d102      	bne.n	8005a80 <chk_lock+0x80>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d101      	bne.n	8005a84 <chk_lock+0x84>
 8005a80:	2300      	movs	r3, #0
 8005a82:	e010      	b.n	8005aa6 <chk_lock+0xa6>
 8005a84:	2312      	movs	r3, #18
 8005a86:	e00e      	b.n	8005aa6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d108      	bne.n	8005aa0 <chk_lock+0xa0>
 8005a8e:	4a09      	ldr	r2, [pc, #36]	; (8005ab4 <chk_lock+0xb4>)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	4413      	add	r3, r2
 8005a96:	330c      	adds	r3, #12
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a9e:	d101      	bne.n	8005aa4 <chk_lock+0xa4>
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	e000      	b.n	8005aa6 <chk_lock+0xa6>
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	2000002c 	.word	0x2000002c

08005ab8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	607b      	str	r3, [r7, #4]
 8005ac2:	e002      	b.n	8005aca <enq_lock+0x12>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	607b      	str	r3, [r7, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d806      	bhi.n	8005ade <enq_lock+0x26>
 8005ad0:	4a09      	ldr	r2, [pc, #36]	; (8005af8 <enq_lock+0x40>)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	4413      	add	r3, r2
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1f2      	bne.n	8005ac4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	bf14      	ite	ne
 8005ae4:	2301      	movne	r3, #1
 8005ae6:	2300      	moveq	r3, #0
 8005ae8:	b2db      	uxtb	r3, r3
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	2000002c 	.word	0x2000002c

08005afc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	e01f      	b.n	8005b4c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005b0c:	4a41      	ldr	r2, [pc, #260]	; (8005c14 <inc_lock+0x118>)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	4413      	add	r3, r2
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d113      	bne.n	8005b46 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005b1e:	4a3d      	ldr	r2, [pc, #244]	; (8005c14 <inc_lock+0x118>)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	4413      	add	r3, r2
 8005b26:	3304      	adds	r3, #4
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d109      	bne.n	8005b46 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005b32:	4a38      	ldr	r2, [pc, #224]	; (8005c14 <inc_lock+0x118>)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	4413      	add	r3, r2
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d006      	beq.n	8005b54 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d9dc      	bls.n	8005b0c <inc_lock+0x10>
 8005b52:	e000      	b.n	8005b56 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005b54:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d132      	bne.n	8005bc2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	e002      	b.n	8005b68 <inc_lock+0x6c>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	3301      	adds	r3, #1
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d806      	bhi.n	8005b7c <inc_lock+0x80>
 8005b6e:	4a29      	ldr	r2, [pc, #164]	; (8005c14 <inc_lock+0x118>)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	4413      	add	r3, r2
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f2      	bne.n	8005b62 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d101      	bne.n	8005b86 <inc_lock+0x8a>
 8005b82:	2300      	movs	r3, #0
 8005b84:	e040      	b.n	8005c08 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4922      	ldr	r1, [pc, #136]	; (8005c14 <inc_lock+0x118>)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	440b      	add	r3, r1
 8005b92:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	491e      	ldr	r1, [pc, #120]	; (8005c14 <inc_lock+0x118>)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	440b      	add	r3, r1
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	695a      	ldr	r2, [r3, #20]
 8005ba8:	491a      	ldr	r1, [pc, #104]	; (8005c14 <inc_lock+0x118>)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	011b      	lsls	r3, r3, #4
 8005bae:	440b      	add	r3, r1
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005bb4:	4a17      	ldr	r2, [pc, #92]	; (8005c14 <inc_lock+0x118>)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	4413      	add	r3, r2
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d009      	beq.n	8005bdc <inc_lock+0xe0>
 8005bc8:	4a12      	ldr	r2, [pc, #72]	; (8005c14 <inc_lock+0x118>)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	4413      	add	r3, r2
 8005bd0:	330c      	adds	r3, #12
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <inc_lock+0xe0>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	e015      	b.n	8005c08 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d108      	bne.n	8005bf4 <inc_lock+0xf8>
 8005be2:	4a0c      	ldr	r2, [pc, #48]	; (8005c14 <inc_lock+0x118>)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	4413      	add	r3, r2
 8005bea:	330c      	adds	r3, #12
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	e001      	b.n	8005bf8 <inc_lock+0xfc>
 8005bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bf8:	4906      	ldr	r1, [pc, #24]	; (8005c14 <inc_lock+0x118>)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	440b      	add	r3, r1
 8005c00:	330c      	adds	r3, #12
 8005c02:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3301      	adds	r3, #1
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	2000002c 	.word	0x2000002c

08005c18 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	607b      	str	r3, [r7, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d825      	bhi.n	8005c78 <dec_lock+0x60>
		n = Files[i].ctr;
 8005c2c:	4a17      	ldr	r2, [pc, #92]	; (8005c8c <dec_lock+0x74>)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	4413      	add	r3, r2
 8005c34:	330c      	adds	r3, #12
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005c3a:	89fb      	ldrh	r3, [r7, #14]
 8005c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c40:	d101      	bne.n	8005c46 <dec_lock+0x2e>
 8005c42:	2300      	movs	r3, #0
 8005c44:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005c46:	89fb      	ldrh	r3, [r7, #14]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <dec_lock+0x3a>
 8005c4c:	89fb      	ldrh	r3, [r7, #14]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005c52:	4a0e      	ldr	r2, [pc, #56]	; (8005c8c <dec_lock+0x74>)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	4413      	add	r3, r2
 8005c5a:	330c      	adds	r3, #12
 8005c5c:	89fa      	ldrh	r2, [r7, #14]
 8005c5e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005c60:	89fb      	ldrh	r3, [r7, #14]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d105      	bne.n	8005c72 <dec_lock+0x5a>
 8005c66:	4a09      	ldr	r2, [pc, #36]	; (8005c8c <dec_lock+0x74>)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	4413      	add	r3, r2
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	737b      	strb	r3, [r7, #13]
 8005c76:	e001      	b.n	8005c7c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005c78:	2302      	movs	r3, #2
 8005c7a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005c7c:	7b7b      	ldrb	r3, [r7, #13]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	2000002c 	.word	0x2000002c

08005c90 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	e010      	b.n	8005cc0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005c9e:	4a0d      	ldr	r2, [pc, #52]	; (8005cd4 <clear_lock+0x44>)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	4413      	add	r3, r2
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d105      	bne.n	8005cba <clear_lock+0x2a>
 8005cae:	4a09      	ldr	r2, [pc, #36]	; (8005cd4 <clear_lock+0x44>)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	4413      	add	r3, r2
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d9eb      	bls.n	8005c9e <clear_lock+0xe>
	}
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	2000002c 	.word	0x2000002c

08005cd8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	78db      	ldrb	r3, [r3, #3]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d034      	beq.n	8005d56 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	7858      	ldrb	r0, [r3, #1]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	f7ff fd40 	bl	8005784 <disk_write>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	73fb      	strb	r3, [r7, #15]
 8005d0e:	e022      	b.n	8005d56 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	1ad2      	subs	r2, r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d217      	bcs.n	8005d56 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	789b      	ldrb	r3, [r3, #2]
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	e010      	b.n	8005d50 <sync_window+0x78>
					wsect += fs->fsize;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4413      	add	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	7858      	ldrb	r0, [r3, #1]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005d42:	2301      	movs	r3, #1
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	f7ff fd1d 	bl	8005784 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	613b      	str	r3, [r7, #16]
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d8eb      	bhi.n	8005d2e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d01b      	beq.n	8005db0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff ffad 	bl	8005cd8 <sync_window>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d113      	bne.n	8005db0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	7858      	ldrb	r0, [r3, #1]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005d92:	2301      	movs	r3, #1
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	f7ff fcd5 	bl	8005744 <disk_read>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d004      	beq.n	8005daa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005da0:	f04f 33ff 	mov.w	r3, #4294967295
 8005da4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff ff87 	bl	8005cd8 <sync_window>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005dce:	7bfb      	ldrb	r3, [r7, #15]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d158      	bne.n	8005e86 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d148      	bne.n	8005e6e <sync_fs+0xb2>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	791b      	ldrb	r3, [r3, #4]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d144      	bne.n	8005e6e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3334      	adds	r3, #52	; 0x34
 8005de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dec:	2100      	movs	r1, #0
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7ff fda9 	bl	8005946 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3334      	adds	r3, #52	; 0x34
 8005df8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005dfc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff fd38 	bl	8005876 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	3334      	adds	r3, #52	; 0x34
 8005e0a:	4921      	ldr	r1, [pc, #132]	; (8005e90 <sync_fs+0xd4>)
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fd4d 	bl	80058ac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	3334      	adds	r3, #52	; 0x34
 8005e16:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005e1a:	491e      	ldr	r1, [pc, #120]	; (8005e94 <sync_fs+0xd8>)
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff fd45 	bl	80058ac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3334      	adds	r3, #52	; 0x34
 8005e26:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4610      	mov	r0, r2
 8005e32:	f7ff fd3b 	bl	80058ac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3334      	adds	r3, #52	; 0x34
 8005e3a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	4619      	mov	r1, r3
 8005e44:	4610      	mov	r0, r2
 8005e46:	f7ff fd31 	bl	80058ac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	7858      	ldrb	r0, [r3, #1]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e62:	2301      	movs	r3, #1
 8005e64:	f7ff fc8e 	bl	8005784 <disk_write>
			fs->fsi_flag = 0;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	785b      	ldrb	r3, [r3, #1]
 8005e72:	2200      	movs	r2, #0
 8005e74:	2100      	movs	r1, #0
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff fca4 	bl	80057c4 <disk_ioctl>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <sync_fs+0xca>
 8005e82:	2301      	movs	r3, #1
 8005e84:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	41615252 	.word	0x41615252
 8005e94:	61417272 	.word	0x61417272

08005e98 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	3b02      	subs	r3, #2
 8005ea6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	3b02      	subs	r3, #2
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d301      	bcc.n	8005eb8 <clust2sect+0x20>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e008      	b.n	8005eca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	895b      	ldrh	r3, [r3, #10]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	fb03 f202 	mul.w	r2, r3, r2
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	4413      	add	r3, r2
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b086      	sub	sp, #24
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d904      	bls.n	8005ef6 <get_fat+0x20>
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d302      	bcc.n	8005efc <get_fat+0x26>
		val = 1;	/* Internal error */
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e08c      	b.n	8006016 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005efc:	f04f 33ff 	mov.w	r3, #4294967295
 8005f00:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d045      	beq.n	8005f96 <get_fat+0xc0>
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d05d      	beq.n	8005fca <get_fat+0xf4>
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d177      	bne.n	8006002 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	085b      	lsrs	r3, r3, #1
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	0a5b      	lsrs	r3, r3, #9
 8005f28:	4413      	add	r3, r2
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6938      	ldr	r0, [r7, #16]
 8005f2e:	f7ff ff17 	bl	8005d60 <move_window>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d167      	bne.n	8006008 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	60fa      	str	r2, [r7, #12]
 8005f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4413      	add	r3, r2
 8005f46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f4a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	0a5b      	lsrs	r3, r3, #9
 8005f54:	4413      	add	r3, r2
 8005f56:	4619      	mov	r1, r3
 8005f58:	6938      	ldr	r0, [r7, #16]
 8005f5a:	f7ff ff01 	bl	8005d60 <move_window>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d153      	bne.n	800600c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	461a      	mov	r2, r3
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <get_fat+0xb6>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	091b      	lsrs	r3, r3, #4
 8005f8a:	e002      	b.n	8005f92 <get_fat+0xbc>
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f92:	617b      	str	r3, [r7, #20]
			break;
 8005f94:	e03f      	b.n	8006016 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	0a1b      	lsrs	r3, r3, #8
 8005f9e:	4413      	add	r3, r2
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6938      	ldr	r0, [r7, #16]
 8005fa4:	f7ff fedc 	bl	8005d60 <move_window>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d130      	bne.n	8006010 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005fbc:	4413      	add	r3, r2
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff fc1e 	bl	8005800 <ld_word>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	617b      	str	r3, [r7, #20]
			break;
 8005fc8:	e025      	b.n	8006016 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	09db      	lsrs	r3, r3, #7
 8005fd2:	4413      	add	r3, r2
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	6938      	ldr	r0, [r7, #16]
 8005fd8:	f7ff fec2 	bl	8005d60 <move_window>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d118      	bne.n	8006014 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005ff0:	4413      	add	r3, r2
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff fc1c 	bl	8005830 <ld_dword>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ffe:	617b      	str	r3, [r7, #20]
			break;
 8006000:	e009      	b.n	8006016 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006002:	2301      	movs	r3, #1
 8006004:	617b      	str	r3, [r7, #20]
 8006006:	e006      	b.n	8006016 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006008:	bf00      	nop
 800600a:	e004      	b.n	8006016 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800600c:	bf00      	nop
 800600e:	e002      	b.n	8006016 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006010:	bf00      	nop
 8006012:	e000      	b.n	8006016 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006014:	bf00      	nop
		}
	}

	return val;
 8006016:	697b      	ldr	r3, [r7, #20]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006020:	b590      	push	{r4, r7, lr}
 8006022:	b089      	sub	sp, #36	; 0x24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800602c:	2302      	movs	r3, #2
 800602e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b01      	cmp	r3, #1
 8006034:	f240 80d6 	bls.w	80061e4 <put_fat+0x1c4>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	429a      	cmp	r2, r3
 8006040:	f080 80d0 	bcs.w	80061e4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b02      	cmp	r3, #2
 800604a:	d073      	beq.n	8006134 <put_fat+0x114>
 800604c:	2b03      	cmp	r3, #3
 800604e:	f000 8091 	beq.w	8006174 <put_fat+0x154>
 8006052:	2b01      	cmp	r3, #1
 8006054:	f040 80c6 	bne.w	80061e4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	085b      	lsrs	r3, r3, #1
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	4413      	add	r3, r2
 8006064:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	0a5b      	lsrs	r3, r3, #9
 800606e:	4413      	add	r3, r2
 8006070:	4619      	mov	r1, r3
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7ff fe74 	bl	8005d60 <move_window>
 8006078:	4603      	mov	r3, r0
 800607a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800607c:	7ffb      	ldrb	r3, [r7, #31]
 800607e:	2b00      	cmp	r3, #0
 8006080:	f040 80a9 	bne.w	80061d6 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	1c59      	adds	r1, r3, #1
 800608e:	61b9      	str	r1, [r7, #24]
 8006090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006094:	4413      	add	r3, r2
 8006096:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00d      	beq.n	80060be <put_fat+0x9e>
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	b25b      	sxtb	r3, r3
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	b25a      	sxtb	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	b25b      	sxtb	r3, r3
 80060b6:	4313      	orrs	r3, r2
 80060b8:	b25b      	sxtb	r3, r3
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	e001      	b.n	80060c2 <put_fat+0xa2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2201      	movs	r2, #1
 80060ca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	0a5b      	lsrs	r3, r3, #9
 80060d4:	4413      	add	r3, r2
 80060d6:	4619      	mov	r1, r3
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7ff fe41 	bl	8005d60 <move_window>
 80060de:	4603      	mov	r3, r0
 80060e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060e2:	7ffb      	ldrb	r3, [r7, #31]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d178      	bne.n	80061da <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f4:	4413      	add	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <put_fat+0xea>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	091b      	lsrs	r3, r3, #4
 8006106:	b2db      	uxtb	r3, r3
 8006108:	e00e      	b.n	8006128 <put_fat+0x108>
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	b25b      	sxtb	r3, r3
 8006110:	f023 030f 	bic.w	r3, r3, #15
 8006114:	b25a      	sxtb	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	0a1b      	lsrs	r3, r3, #8
 800611a:	b25b      	sxtb	r3, r3
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	b25b      	sxtb	r3, r3
 8006122:	4313      	orrs	r3, r2
 8006124:	b25b      	sxtb	r3, r3
 8006126:	b2db      	uxtb	r3, r3
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	70da      	strb	r2, [r3, #3]
			break;
 8006132:	e057      	b.n	80061e4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	0a1b      	lsrs	r3, r3, #8
 800613c:	4413      	add	r3, r2
 800613e:	4619      	mov	r1, r3
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff fe0d 	bl	8005d60 <move_window>
 8006146:	4603      	mov	r3, r0
 8006148:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800614a:	7ffb      	ldrb	r3, [r7, #31]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d146      	bne.n	80061de <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800615e:	4413      	add	r3, r2
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	b292      	uxth	r2, r2
 8006164:	4611      	mov	r1, r2
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff fb85 	bl	8005876 <st_word>
			fs->wflag = 1;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2201      	movs	r2, #1
 8006170:	70da      	strb	r2, [r3, #3]
			break;
 8006172:	e037      	b.n	80061e4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	09db      	lsrs	r3, r3, #7
 800617c:	4413      	add	r3, r2
 800617e:	4619      	mov	r1, r3
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f7ff fded 	bl	8005d60 <move_window>
 8006186:	4603      	mov	r3, r0
 8006188:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800618a:	7ffb      	ldrb	r3, [r7, #31]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d128      	bne.n	80061e2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80061a4:	4413      	add	r3, r2
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff fb42 	bl	8005830 <ld_dword>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80061b2:	4323      	orrs	r3, r4
 80061b4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80061c4:	4413      	add	r3, r2
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff fb6f 	bl	80058ac <st_dword>
			fs->wflag = 1;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	70da      	strb	r2, [r3, #3]
			break;
 80061d4:	e006      	b.n	80061e4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80061d6:	bf00      	nop
 80061d8:	e004      	b.n	80061e4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80061da:	bf00      	nop
 80061dc:	e002      	b.n	80061e4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80061de:	bf00      	nop
 80061e0:	e000      	b.n	80061e4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80061e2:	bf00      	nop
		}
	}
	return res;
 80061e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3724      	adds	r7, #36	; 0x24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd90      	pop	{r4, r7, pc}

080061ee <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b088      	sub	sp, #32
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d904      	bls.n	8006214 <remove_chain+0x26>
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	429a      	cmp	r2, r3
 8006212:	d301      	bcc.n	8006218 <remove_chain+0x2a>
 8006214:	2302      	movs	r3, #2
 8006216:	e04b      	b.n	80062b0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00c      	beq.n	8006238 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800621e:	f04f 32ff 	mov.w	r2, #4294967295
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	69b8      	ldr	r0, [r7, #24]
 8006226:	f7ff fefb 	bl	8006020 <put_fat>
 800622a:	4603      	mov	r3, r0
 800622c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800622e:	7ffb      	ldrb	r3, [r7, #31]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <remove_chain+0x4a>
 8006234:	7ffb      	ldrb	r3, [r7, #31]
 8006236:	e03b      	b.n	80062b0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f7ff fe4b 	bl	8005ed6 <get_fat>
 8006240:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d031      	beq.n	80062ac <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d101      	bne.n	8006252 <remove_chain+0x64>
 800624e:	2302      	movs	r3, #2
 8006250:	e02e      	b.n	80062b0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006258:	d101      	bne.n	800625e <remove_chain+0x70>
 800625a:	2301      	movs	r3, #1
 800625c:	e028      	b.n	80062b0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800625e:	2200      	movs	r2, #0
 8006260:	68b9      	ldr	r1, [r7, #8]
 8006262:	69b8      	ldr	r0, [r7, #24]
 8006264:	f7ff fedc 	bl	8006020 <put_fat>
 8006268:	4603      	mov	r3, r0
 800626a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800626c:	7ffb      	ldrb	r3, [r7, #31]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <remove_chain+0x88>
 8006272:	7ffb      	ldrb	r3, [r7, #31]
 8006274:	e01c      	b.n	80062b0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	695a      	ldr	r2, [r3, #20]
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	3b02      	subs	r3, #2
 8006280:	429a      	cmp	r2, r3
 8006282:	d20b      	bcs.n	800629c <remove_chain+0xae>
			fs->free_clst++;
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	1c5a      	adds	r2, r3, #1
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	791b      	ldrb	r3, [r3, #4]
 8006292:	f043 0301 	orr.w	r3, r3, #1
 8006296:	b2da      	uxtb	r2, r3
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d3c6      	bcc.n	8006238 <remove_chain+0x4a>
 80062aa:	e000      	b.n	80062ae <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80062ac:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3720      	adds	r7, #32
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b088      	sub	sp, #32
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10d      	bne.n	80062ea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d004      	beq.n	80062e4 <create_chain+0x2c>
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d31b      	bcc.n	800631c <create_chain+0x64>
 80062e4:	2301      	movs	r3, #1
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	e018      	b.n	800631c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80062ea:	6839      	ldr	r1, [r7, #0]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff fdf2 	bl	8005ed6 <get_fat>
 80062f2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d801      	bhi.n	80062fe <create_chain+0x46>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e070      	b.n	80063e0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006304:	d101      	bne.n	800630a <create_chain+0x52>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	e06a      	b.n	80063e0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	429a      	cmp	r2, r3
 8006312:	d201      	bcs.n	8006318 <create_chain+0x60>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	e063      	b.n	80063e0 <create_chain+0x128>
		scl = clst;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	3301      	adds	r3, #1
 8006324:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	429a      	cmp	r2, r3
 800632e:	d307      	bcc.n	8006340 <create_chain+0x88>
				ncl = 2;
 8006330:	2302      	movs	r3, #2
 8006332:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006334:	69fa      	ldr	r2, [r7, #28]
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	429a      	cmp	r2, r3
 800633a:	d901      	bls.n	8006340 <create_chain+0x88>
 800633c:	2300      	movs	r3, #0
 800633e:	e04f      	b.n	80063e0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006340:	69f9      	ldr	r1, [r7, #28]
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff fdc7 	bl	8005ed6 <get_fat>
 8006348:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00e      	beq.n	800636e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d003      	beq.n	800635e <create_chain+0xa6>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635c:	d101      	bne.n	8006362 <create_chain+0xaa>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	e03e      	b.n	80063e0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006362:	69fa      	ldr	r2, [r7, #28]
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	429a      	cmp	r2, r3
 8006368:	d1da      	bne.n	8006320 <create_chain+0x68>
 800636a:	2300      	movs	r3, #0
 800636c:	e038      	b.n	80063e0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800636e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006370:	f04f 32ff 	mov.w	r2, #4294967295
 8006374:	69f9      	ldr	r1, [r7, #28]
 8006376:	6938      	ldr	r0, [r7, #16]
 8006378:	f7ff fe52 	bl	8006020 <put_fat>
 800637c:	4603      	mov	r3, r0
 800637e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d109      	bne.n	800639a <create_chain+0xe2>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d006      	beq.n	800639a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6938      	ldr	r0, [r7, #16]
 8006392:	f7ff fe45 	bl	8006020 <put_fat>
 8006396:	4603      	mov	r3, r0
 8006398:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800639a:	7dfb      	ldrb	r3, [r7, #23]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d116      	bne.n	80063ce <create_chain+0x116>
		fs->last_clst = ncl;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	69fa      	ldr	r2, [r7, #28]
 80063a4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	695a      	ldr	r2, [r3, #20]
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	3b02      	subs	r3, #2
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d804      	bhi.n	80063be <create_chain+0x106>
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	1e5a      	subs	r2, r3, #1
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	791b      	ldrb	r3, [r3, #4]
 80063c2:	f043 0301 	orr.w	r3, r3, #1
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	711a      	strb	r2, [r3, #4]
 80063cc:	e007      	b.n	80063de <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d102      	bne.n	80063da <create_chain+0x122>
 80063d4:	f04f 33ff 	mov.w	r3, #4294967295
 80063d8:	e000      	b.n	80063dc <create_chain+0x124>
 80063da:	2301      	movs	r3, #1
 80063dc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80063de:	69fb      	ldr	r3, [r7, #28]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3720      	adds	r7, #32
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	3304      	adds	r3, #4
 80063fe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	0a5b      	lsrs	r3, r3, #9
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	8952      	ldrh	r2, [r2, #10]
 8006408:	fbb3 f3f2 	udiv	r3, r3, r2
 800640c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	1d1a      	adds	r2, r3, #4
 8006412:	613a      	str	r2, [r7, #16]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <clmt_clust+0x3a>
 800641e:	2300      	movs	r3, #0
 8006420:	e010      	b.n	8006444 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	429a      	cmp	r2, r3
 8006428:	d307      	bcc.n	800643a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	3304      	adds	r3, #4
 8006436:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006438:	e7e9      	b.n	800640e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800643a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	4413      	add	r3, r2
}
 8006444:	4618      	mov	r0, r3
 8006446:	371c      	adds	r7, #28
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006466:	d204      	bcs.n	8006472 <dir_sdi+0x22>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	f003 031f 	and.w	r3, r3, #31
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006472:	2302      	movs	r3, #2
 8006474:	e063      	b.n	800653e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d106      	bne.n	8006496 <dir_sdi+0x46>
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b02      	cmp	r3, #2
 800648e:	d902      	bls.n	8006496 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006494:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10c      	bne.n	80064b6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	095b      	lsrs	r3, r3, #5
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	8912      	ldrh	r2, [r2, #8]
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d301      	bcc.n	80064ac <dir_sdi+0x5c>
 80064a8:	2302      	movs	r3, #2
 80064aa:	e048      	b.n	800653e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	61da      	str	r2, [r3, #28]
 80064b4:	e029      	b.n	800650a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	895b      	ldrh	r3, [r3, #10]
 80064ba:	025b      	lsls	r3, r3, #9
 80064bc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80064be:	e019      	b.n	80064f4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6979      	ldr	r1, [r7, #20]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7ff fd06 	bl	8005ed6 <get_fat>
 80064ca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d2:	d101      	bne.n	80064d8 <dir_sdi+0x88>
 80064d4:	2301      	movs	r3, #1
 80064d6:	e032      	b.n	800653e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d904      	bls.n	80064e8 <dir_sdi+0x98>
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d301      	bcc.n	80064ec <dir_sdi+0x9c>
 80064e8:	2302      	movs	r3, #2
 80064ea:	e028      	b.n	800653e <dir_sdi+0xee>
			ofs -= csz;
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d2e1      	bcs.n	80064c0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80064fc:	6979      	ldr	r1, [r7, #20]
 80064fe:	6938      	ldr	r0, [r7, #16]
 8006500:	f7ff fcca 	bl	8005e98 <clust2sect>
 8006504:	4602      	mov	r2, r0
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <dir_sdi+0xcc>
 8006518:	2302      	movs	r3, #2
 800651a:	e010      	b.n	800653e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	69da      	ldr	r2, [r3, #28]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	0a5b      	lsrs	r3, r3, #9
 8006524:	441a      	add	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006536:	441a      	add	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b086      	sub	sp, #24
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	3320      	adds	r3, #32
 800655c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <dir_next+0x28>
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800656c:	d301      	bcc.n	8006572 <dir_next+0x2c>
 800656e:	2304      	movs	r3, #4
 8006570:	e0aa      	b.n	80066c8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006578:	2b00      	cmp	r3, #0
 800657a:	f040 8098 	bne.w	80066ae <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10b      	bne.n	80065a8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	095b      	lsrs	r3, r3, #5
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	8912      	ldrh	r2, [r2, #8]
 8006598:	4293      	cmp	r3, r2
 800659a:	f0c0 8088 	bcc.w	80066ae <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	61da      	str	r2, [r3, #28]
 80065a4:	2304      	movs	r3, #4
 80065a6:	e08f      	b.n	80066c8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	0a5b      	lsrs	r3, r3, #9
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	8952      	ldrh	r2, [r2, #10]
 80065b0:	3a01      	subs	r2, #1
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d17a      	bne.n	80066ae <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	4619      	mov	r1, r3
 80065c0:	4610      	mov	r0, r2
 80065c2:	f7ff fc88 	bl	8005ed6 <get_fat>
 80065c6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d801      	bhi.n	80065d2 <dir_next+0x8c>
 80065ce:	2302      	movs	r3, #2
 80065d0:	e07a      	b.n	80066c8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d8:	d101      	bne.n	80065de <dir_next+0x98>
 80065da:	2301      	movs	r3, #1
 80065dc:	e074      	b.n	80066c8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d358      	bcc.n	800669a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d104      	bne.n	80065f8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	61da      	str	r2, [r3, #28]
 80065f4:	2304      	movs	r3, #4
 80065f6:	e067      	b.n	80066c8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	4619      	mov	r1, r3
 8006600:	4610      	mov	r0, r2
 8006602:	f7ff fe59 	bl	80062b8 <create_chain>
 8006606:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <dir_next+0xcc>
 800660e:	2307      	movs	r3, #7
 8006610:	e05a      	b.n	80066c8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <dir_next+0xd6>
 8006618:	2302      	movs	r3, #2
 800661a:	e055      	b.n	80066c8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006622:	d101      	bne.n	8006628 <dir_next+0xe2>
 8006624:	2301      	movs	r3, #1
 8006626:	e04f      	b.n	80066c8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f7ff fb55 	bl	8005cd8 <sync_window>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <dir_next+0xf2>
 8006634:	2301      	movs	r3, #1
 8006636:	e047      	b.n	80066c8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3334      	adds	r3, #52	; 0x34
 800663c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006640:	2100      	movs	r1, #0
 8006642:	4618      	mov	r0, r3
 8006644:	f7ff f97f 	bl	8005946 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006648:	2300      	movs	r3, #0
 800664a:	613b      	str	r3, [r7, #16]
 800664c:	6979      	ldr	r1, [r7, #20]
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f7ff fc22 	bl	8005e98 <clust2sect>
 8006654:	4602      	mov	r2, r0
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	631a      	str	r2, [r3, #48]	; 0x30
 800665a:	e012      	b.n	8006682 <dir_next+0x13c>
						fs->wflag = 1;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f7ff fb38 	bl	8005cd8 <sync_window>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <dir_next+0x12c>
 800666e:	2301      	movs	r3, #1
 8006670:	e02a      	b.n	80066c8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	3301      	adds	r3, #1
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	631a      	str	r2, [r3, #48]	; 0x30
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	895b      	ldrh	r3, [r3, #10]
 8006686:	461a      	mov	r2, r3
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	4293      	cmp	r3, r2
 800668c:	d3e6      	bcc.n	800665c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad2      	subs	r2, r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80066a0:	6979      	ldr	r1, [r7, #20]
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f7ff fbf8 	bl	8005e98 <clust2sect>
 80066a8:	4602      	mov	r2, r0
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c0:	441a      	add	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80066e0:	2100      	movs	r1, #0
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7ff feb4 	bl	8006450 <dir_sdi>
 80066e8:	4603      	mov	r3, r0
 80066ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80066ec:	7dfb      	ldrb	r3, [r7, #23]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d12b      	bne.n	800674a <dir_alloc+0x7a>
		n = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	4619      	mov	r1, r3
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f7ff fb2f 	bl	8005d60 <move_window>
 8006702:	4603      	mov	r3, r0
 8006704:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006706:	7dfb      	ldrb	r3, [r7, #23]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d11d      	bne.n	8006748 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	2be5      	cmp	r3, #229	; 0xe5
 8006714:	d004      	beq.n	8006720 <dir_alloc+0x50>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d107      	bne.n	8006730 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	3301      	adds	r3, #1
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d102      	bne.n	8006734 <dir_alloc+0x64>
 800672e:	e00c      	b.n	800674a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006730:	2300      	movs	r3, #0
 8006732:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006734:	2101      	movs	r1, #1
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff ff05 	bl	8006546 <dir_next>
 800673c:	4603      	mov	r3, r0
 800673e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006740:	7dfb      	ldrb	r3, [r7, #23]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0d7      	beq.n	80066f6 <dir_alloc+0x26>
 8006746:	e000      	b.n	800674a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006748:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800674a:	7dfb      	ldrb	r3, [r7, #23]
 800674c:	2b04      	cmp	r3, #4
 800674e:	d101      	bne.n	8006754 <dir_alloc+0x84>
 8006750:	2307      	movs	r3, #7
 8006752:	75fb      	strb	r3, [r7, #23]
	return res;
 8006754:	7dfb      	ldrb	r3, [r7, #23]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3718      	adds	r7, #24
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b084      	sub	sp, #16
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
 8006766:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	331a      	adds	r3, #26
 800676c:	4618      	mov	r0, r3
 800676e:	f7ff f847 	bl	8005800 <ld_word>
 8006772:	4603      	mov	r3, r0
 8006774:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2b03      	cmp	r3, #3
 800677c:	d109      	bne.n	8006792 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	3314      	adds	r3, #20
 8006782:	4618      	mov	r0, r3
 8006784:	f7ff f83c 	bl	8005800 <ld_word>
 8006788:	4603      	mov	r3, r0
 800678a:	041b      	lsls	r3, r3, #16
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006792:	68fb      	ldr	r3, [r7, #12]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	331a      	adds	r3, #26
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	b292      	uxth	r2, r2
 80067b0:	4611      	mov	r1, r2
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff f85f 	bl	8005876 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d109      	bne.n	80067d4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f103 0214 	add.w	r2, r3, #20
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	0c1b      	lsrs	r3, r3, #16
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	4619      	mov	r1, r3
 80067ce:	4610      	mov	r0, r2
 80067d0:	f7ff f851 	bl	8005876 <st_word>
	}
}
 80067d4:	bf00      	nop
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80067dc:	b590      	push	{r4, r7, lr}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	331a      	adds	r3, #26
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff f808 	bl	8005800 <ld_word>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <cmp_lfn+0x1e>
 80067f6:	2300      	movs	r3, #0
 80067f8:	e059      	b.n	80068ae <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006802:	1e5a      	subs	r2, r3, #1
 8006804:	4613      	mov	r3, r2
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	4413      	add	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006810:	2301      	movs	r3, #1
 8006812:	81fb      	strh	r3, [r7, #14]
 8006814:	2300      	movs	r3, #0
 8006816:	613b      	str	r3, [r7, #16]
 8006818:	e033      	b.n	8006882 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800681a:	4a27      	ldr	r2, [pc, #156]	; (80068b8 <cmp_lfn+0xdc>)
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	4413      	add	r3, r2
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	4413      	add	r3, r2
 8006828:	4618      	mov	r0, r3
 800682a:	f7fe ffe9 	bl	8005800 <ld_word>
 800682e:	4603      	mov	r3, r0
 8006830:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006832:	89fb      	ldrh	r3, [r7, #14]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01a      	beq.n	800686e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2bfe      	cmp	r3, #254	; 0xfe
 800683c:	d812      	bhi.n	8006864 <cmp_lfn+0x88>
 800683e:	89bb      	ldrh	r3, [r7, #12]
 8006840:	4618      	mov	r0, r3
 8006842:	f001 fe2d 	bl	80084a0 <ff_wtoupper>
 8006846:	4603      	mov	r3, r0
 8006848:	461c      	mov	r4, r3
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	617a      	str	r2, [r7, #20]
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	4413      	add	r3, r2
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	4618      	mov	r0, r3
 800685a:	f001 fe21 	bl	80084a0 <ff_wtoupper>
 800685e:	4603      	mov	r3, r0
 8006860:	429c      	cmp	r4, r3
 8006862:	d001      	beq.n	8006868 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006864:	2300      	movs	r3, #0
 8006866:	e022      	b.n	80068ae <cmp_lfn+0xd2>
			}
			wc = uc;
 8006868:	89bb      	ldrh	r3, [r7, #12]
 800686a:	81fb      	strh	r3, [r7, #14]
 800686c:	e006      	b.n	800687c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800686e:	89bb      	ldrh	r3, [r7, #12]
 8006870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006874:	4293      	cmp	r3, r2
 8006876:	d001      	beq.n	800687c <cmp_lfn+0xa0>
 8006878:	2300      	movs	r3, #0
 800687a:	e018      	b.n	80068ae <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	3301      	adds	r3, #1
 8006880:	613b      	str	r3, [r7, #16]
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	2b0c      	cmp	r3, #12
 8006886:	d9c8      	bls.n	800681a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00b      	beq.n	80068ac <cmp_lfn+0xd0>
 8006894:	89fb      	ldrh	r3, [r7, #14]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d008      	beq.n	80068ac <cmp_lfn+0xd0>
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	4413      	add	r3, r2
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <cmp_lfn+0xd0>
 80068a8:	2300      	movs	r3, #0
 80068aa:	e000      	b.n	80068ae <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80068ac:	2301      	movs	r3, #1
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd90      	pop	{r4, r7, pc}
 80068b6:	bf00      	nop
 80068b8:	08008754 	.word	0x08008754

080068bc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	4611      	mov	r1, r2
 80068c8:	461a      	mov	r2, r3
 80068ca:	460b      	mov	r3, r1
 80068cc:	71fb      	strb	r3, [r7, #7]
 80068ce:	4613      	mov	r3, r2
 80068d0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	330d      	adds	r3, #13
 80068d6:	79ba      	ldrb	r2, [r7, #6]
 80068d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	330b      	adds	r3, #11
 80068de:	220f      	movs	r2, #15
 80068e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	330c      	adds	r3, #12
 80068e6:	2200      	movs	r2, #0
 80068e8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	331a      	adds	r3, #26
 80068ee:	2100      	movs	r1, #0
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7fe ffc0 	bl	8005876 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80068f6:	79fb      	ldrb	r3, [r7, #7]
 80068f8:	1e5a      	subs	r2, r3, #1
 80068fa:	4613      	mov	r3, r2
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	4413      	add	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	82fb      	strh	r3, [r7, #22]
 800690a:	2300      	movs	r3, #0
 800690c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800690e:	8afb      	ldrh	r3, [r7, #22]
 8006910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006914:	4293      	cmp	r3, r2
 8006916:	d007      	beq.n	8006928 <put_lfn+0x6c>
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	61fa      	str	r2, [r7, #28]
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4413      	add	r3, r2
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006928:	4a17      	ldr	r2, [pc, #92]	; (8006988 <put_lfn+0xcc>)
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	4413      	add	r3, r2
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	4413      	add	r3, r2
 8006936:	8afa      	ldrh	r2, [r7, #22]
 8006938:	4611      	mov	r1, r2
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe ff9b 	bl	8005876 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006940:	8afb      	ldrh	r3, [r7, #22]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d102      	bne.n	800694c <put_lfn+0x90>
 8006946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800694a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	3301      	adds	r3, #1
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2b0c      	cmp	r3, #12
 8006956:	d9da      	bls.n	800690e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006958:	8afb      	ldrh	r3, [r7, #22]
 800695a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800695e:	4293      	cmp	r3, r2
 8006960:	d006      	beq.n	8006970 <put_lfn+0xb4>
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	4413      	add	r3, r2
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d103      	bne.n	8006978 <put_lfn+0xbc>
 8006970:	79fb      	ldrb	r3, [r7, #7]
 8006972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006976:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	79fa      	ldrb	r2, [r7, #7]
 800697c:	701a      	strb	r2, [r3, #0]
}
 800697e:	bf00      	nop
 8006980:	3720      	adds	r7, #32
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	08008754 	.word	0x08008754

0800698c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08c      	sub	sp, #48	; 0x30
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800699a:	220b      	movs	r2, #11
 800699c:	68b9      	ldr	r1, [r7, #8]
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7fe ffb0 	bl	8005904 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	2b05      	cmp	r3, #5
 80069a8:	d929      	bls.n	80069fe <gen_numname+0x72>
		sr = seq;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80069ae:	e020      	b.n	80069f2 <gen_numname+0x66>
			wc = *lfn++;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	1c9a      	adds	r2, r3, #2
 80069b4:	607a      	str	r2, [r7, #4]
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80069ba:	2300      	movs	r3, #0
 80069bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80069be:	e015      	b.n	80069ec <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	005a      	lsls	r2, r3, #1
 80069c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	4413      	add	r3, r2
 80069cc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80069ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069d0:	085b      	lsrs	r3, r3, #1
 80069d2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <gen_numname+0x5a>
 80069de:	69fa      	ldr	r2, [r7, #28]
 80069e0:	4b31      	ldr	r3, [pc, #196]	; (8006aa8 <gen_numname+0x11c>)
 80069e2:	4053      	eors	r3, r2
 80069e4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	3301      	adds	r3, #1
 80069ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	2b0f      	cmp	r3, #15
 80069f0:	d9e6      	bls.n	80069c0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1da      	bne.n	80069b0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80069fe:	2307      	movs	r3, #7
 8006a00:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	3330      	adds	r3, #48	; 0x30
 8006a0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006a12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a16:	2b39      	cmp	r3, #57	; 0x39
 8006a18:	d904      	bls.n	8006a24 <gen_numname+0x98>
 8006a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a1e:	3307      	adds	r3, #7
 8006a20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	1e5a      	subs	r2, r3, #1
 8006a28:	62ba      	str	r2, [r7, #40]	; 0x28
 8006a2a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006a2e:	4413      	add	r3, r2
 8006a30:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006a34:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	091b      	lsrs	r3, r3, #4
 8006a3c:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1de      	bne.n	8006a02 <gen_numname+0x76>
	ns[i] = '~';
 8006a44:	f107 0214 	add.w	r2, r7, #20
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	4413      	add	r3, r2
 8006a4c:	227e      	movs	r2, #126	; 0x7e
 8006a4e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006a50:	2300      	movs	r3, #0
 8006a52:	627b      	str	r3, [r7, #36]	; 0x24
 8006a54:	e002      	b.n	8006a5c <gen_numname+0xd0>
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	3301      	adds	r3, #1
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d205      	bcs.n	8006a70 <gen_numname+0xe4>
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	4413      	add	r3, r2
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b20      	cmp	r3, #32
 8006a6e:	d1f2      	bne.n	8006a56 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	2b07      	cmp	r3, #7
 8006a74:	d808      	bhi.n	8006a88 <gen_numname+0xfc>
 8006a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8006a7c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006a80:	4413      	add	r3, r2
 8006a82:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006a86:	e000      	b.n	8006a8a <gen_numname+0xfe>
 8006a88:	2120      	movs	r1, #32
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	627a      	str	r2, [r7, #36]	; 0x24
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	460a      	mov	r2, r1
 8006a96:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	2b07      	cmp	r3, #7
 8006a9c:	d9e8      	bls.n	8006a70 <gen_numname+0xe4>
}
 8006a9e:	bf00      	nop
 8006aa0:	3730      	adds	r7, #48	; 0x30
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	00011021 	.word	0x00011021

08006aac <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006ab8:	230b      	movs	r3, #11
 8006aba:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	0852      	lsrs	r2, r2, #1
 8006ac2:	01db      	lsls	r3, r3, #7
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	1c59      	adds	r1, r3, #1
 8006acc:	6079      	str	r1, [r7, #4]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	60bb      	str	r3, [r7, #8]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1ed      	bne.n	8006abc <sum_sfn+0x10>
	return sum;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b086      	sub	sp, #24
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006afc:	2100      	movs	r1, #0
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7ff fca6 	bl	8006450 <dir_sdi>
 8006b04:	4603      	mov	r3, r0
 8006b06:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006b08:	7dfb      	ldrb	r3, [r7, #23]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <dir_find+0x24>
 8006b0e:	7dfb      	ldrb	r3, [r7, #23]
 8006b10:	e0a9      	b.n	8006c66 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006b12:	23ff      	movs	r3, #255	; 0xff
 8006b14:	753b      	strb	r3, [r7, #20]
 8006b16:	7d3b      	ldrb	r3, [r7, #20]
 8006b18:	757b      	strb	r3, [r7, #21]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b20:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	4619      	mov	r1, r3
 8006b28:	6938      	ldr	r0, [r7, #16]
 8006b2a:	f7ff f919 	bl	8005d60 <move_window>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f040 8090 	bne.w	8006c5a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006b42:	7dbb      	ldrb	r3, [r7, #22]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d102      	bne.n	8006b4e <dir_find+0x60>
 8006b48:	2304      	movs	r3, #4
 8006b4a:	75fb      	strb	r3, [r7, #23]
 8006b4c:	e08a      	b.n	8006c64 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	330b      	adds	r3, #11
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b5a:	73fb      	strb	r3, [r7, #15]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	7bfa      	ldrb	r2, [r7, #15]
 8006b60:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006b62:	7dbb      	ldrb	r3, [r7, #22]
 8006b64:	2be5      	cmp	r3, #229	; 0xe5
 8006b66:	d007      	beq.n	8006b78 <dir_find+0x8a>
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	f003 0308 	and.w	r3, r3, #8
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d009      	beq.n	8006b86 <dir_find+0x98>
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	2b0f      	cmp	r3, #15
 8006b76:	d006      	beq.n	8006b86 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006b78:	23ff      	movs	r3, #255	; 0xff
 8006b7a:	757b      	strb	r3, [r7, #21]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b82:	631a      	str	r2, [r3, #48]	; 0x30
 8006b84:	e05e      	b.n	8006c44 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	2b0f      	cmp	r3, #15
 8006b8a:	d136      	bne.n	8006bfa <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d154      	bne.n	8006c44 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006b9a:	7dbb      	ldrb	r3, [r7, #22]
 8006b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00d      	beq.n	8006bc0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	7b5b      	ldrb	r3, [r3, #13]
 8006baa:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006bac:	7dbb      	ldrb	r3, [r7, #22]
 8006bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb2:	75bb      	strb	r3, [r7, #22]
 8006bb4:	7dbb      	ldrb	r3, [r7, #22]
 8006bb6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	695a      	ldr	r2, [r3, #20]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006bc0:	7dba      	ldrb	r2, [r7, #22]
 8006bc2:	7d7b      	ldrb	r3, [r7, #21]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d115      	bne.n	8006bf4 <dir_find+0x106>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	330d      	adds	r3, #13
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	7d3a      	ldrb	r2, [r7, #20]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d10e      	bne.n	8006bf4 <dir_find+0x106>
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	68da      	ldr	r2, [r3, #12]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	4619      	mov	r1, r3
 8006be0:	4610      	mov	r0, r2
 8006be2:	f7ff fdfb 	bl	80067dc <cmp_lfn>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <dir_find+0x106>
 8006bec:	7d7b      	ldrb	r3, [r7, #21]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	e000      	b.n	8006bf6 <dir_find+0x108>
 8006bf4:	23ff      	movs	r3, #255	; 0xff
 8006bf6:	757b      	strb	r3, [r7, #21]
 8006bf8:	e024      	b.n	8006c44 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006bfa:	7d7b      	ldrb	r3, [r7, #21]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d109      	bne.n	8006c14 <dir_find+0x126>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7ff ff51 	bl	8006aac <sum_sfn>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	7d3b      	ldrb	r3, [r7, #20]
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d024      	beq.n	8006c5e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <dir_find+0x14a>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a18      	ldr	r0, [r3, #32]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	3324      	adds	r3, #36	; 0x24
 8006c2a:	220b      	movs	r2, #11
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	f7fe fea4 	bl	800597a <mem_cmp>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d014      	beq.n	8006c62 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006c38:	23ff      	movs	r3, #255	; 0xff
 8006c3a:	757b      	strb	r3, [r7, #21]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c42:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006c44:	2100      	movs	r1, #0
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7ff fc7d 	bl	8006546 <dir_next>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f43f af65 	beq.w	8006b22 <dir_find+0x34>
 8006c58:	e004      	b.n	8006c64 <dir_find+0x176>
		if (res != FR_OK) break;
 8006c5a:	bf00      	nop
 8006c5c:	e002      	b.n	8006c64 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006c5e:	bf00      	nop
 8006c60:	e000      	b.n	8006c64 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006c62:	bf00      	nop

	return res;
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b08c      	sub	sp, #48	; 0x30
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006c84:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <dir_register+0x20>
 8006c8c:	2306      	movs	r3, #6
 8006c8e:	e0e0      	b.n	8006e52 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006c90:	2300      	movs	r3, #0
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
 8006c94:	e002      	b.n	8006c9c <dir_register+0x2c>
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	3301      	adds	r3, #1
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	4413      	add	r3, r2
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1f4      	bne.n	8006c96 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006cb2:	f107 030c 	add.w	r3, r7, #12
 8006cb6:	220c      	movs	r2, #12
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fe fe23 	bl	8005904 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006cbe:	7dfb      	ldrb	r3, [r7, #23]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d032      	beq.n	8006d2e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2240      	movs	r2, #64	; 0x40
 8006ccc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cd4:	e016      	b.n	8006d04 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	f107 010c 	add.w	r1, r7, #12
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	f7ff fe51 	bl	800698c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff feff 	bl	8006aee <dir_find>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d106      	bne.n	8006d0c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d00:	3301      	adds	r3, #1
 8006d02:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	2b63      	cmp	r3, #99	; 0x63
 8006d08:	d9e5      	bls.n	8006cd6 <dir_register+0x66>
 8006d0a:	e000      	b.n	8006d0e <dir_register+0x9e>
			if (res != FR_OK) break;
 8006d0c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	2b64      	cmp	r3, #100	; 0x64
 8006d12:	d101      	bne.n	8006d18 <dir_register+0xa8>
 8006d14:	2307      	movs	r3, #7
 8006d16:	e09c      	b.n	8006e52 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006d18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d1c:	2b04      	cmp	r3, #4
 8006d1e:	d002      	beq.n	8006d26 <dir_register+0xb6>
 8006d20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d24:	e095      	b.n	8006e52 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006d26:	7dfa      	ldrb	r2, [r7, #23]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
 8006d30:	f003 0302 	and.w	r3, r3, #2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d007      	beq.n	8006d48 <dir_register+0xd8>
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	330c      	adds	r3, #12
 8006d3c:	4a47      	ldr	r2, [pc, #284]	; (8006e5c <dir_register+0x1ec>)
 8006d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d42:	089b      	lsrs	r3, r3, #2
 8006d44:	3301      	adds	r3, #1
 8006d46:	e000      	b.n	8006d4a <dir_register+0xda>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006d4c:	6a39      	ldr	r1, [r7, #32]
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7ff fcbe 	bl	80066d0 <dir_alloc>
 8006d54:	4603      	mov	r3, r0
 8006d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d148      	bne.n	8006df4 <dir_register+0x184>
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	623b      	str	r3, [r7, #32]
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d042      	beq.n	8006df4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695a      	ldr	r2, [r3, #20]
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	015b      	lsls	r3, r3, #5
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7ff fb68 	bl	8006450 <dir_sdi>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006d86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d132      	bne.n	8006df4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3324      	adds	r3, #36	; 0x24
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff fe8a 	bl	8006aac <sum_sfn>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	4619      	mov	r1, r3
 8006da2:	69f8      	ldr	r0, [r7, #28]
 8006da4:	f7fe ffdc 	bl	8005d60 <move_window>
 8006da8:	4603      	mov	r3, r0
 8006daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006dae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d11d      	bne.n	8006df2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	68d8      	ldr	r0, [r3, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a19      	ldr	r1, [r3, #32]
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	7efb      	ldrb	r3, [r7, #27]
 8006dc4:	f7ff fd7a 	bl	80068bc <put_lfn>
				fs->wflag = 1;
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006dce:	2100      	movs	r1, #0
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7ff fbb8 	bl	8006546 <dir_next>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006ddc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d107      	bne.n	8006df4 <dir_register+0x184>
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	623b      	str	r3, [r7, #32]
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1d5      	bne.n	8006d9c <dir_register+0x12c>
 8006df0:	e000      	b.n	8006df4 <dir_register+0x184>
				if (res != FR_OK) break;
 8006df2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006df4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d128      	bne.n	8006e4e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	4619      	mov	r1, r3
 8006e02:	69f8      	ldr	r0, [r7, #28]
 8006e04:	f7fe ffac 	bl	8005d60 <move_window>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d11b      	bne.n	8006e4e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fe fd91 	bl	8005946 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a18      	ldr	r0, [r3, #32]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3324      	adds	r3, #36	; 0x24
 8006e2c:	220b      	movs	r2, #11
 8006e2e:	4619      	mov	r1, r3
 8006e30:	f7fe fd68 	bl	8005904 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	330c      	adds	r3, #12
 8006e40:	f002 0218 	and.w	r2, r2, #24
 8006e44:	b2d2      	uxtb	r2, r2
 8006e46:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006e4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3730      	adds	r7, #48	; 0x30
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	4ec4ec4f 	.word	0x4ec4ec4f

08006e60 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08a      	sub	sp, #40	; 0x28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	613b      	str	r3, [r7, #16]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	2300      	movs	r3, #0
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	61ba      	str	r2, [r7, #24]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4413      	add	r3, r2
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006e8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e90:	2b1f      	cmp	r3, #31
 8006e92:	d940      	bls.n	8006f16 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006e94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e96:	2b2f      	cmp	r3, #47	; 0x2f
 8006e98:	d006      	beq.n	8006ea8 <create_name+0x48>
 8006e9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e9c:	2b5c      	cmp	r3, #92	; 0x5c
 8006e9e:	d110      	bne.n	8006ec2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006ea0:	e002      	b.n	8006ea8 <create_name+0x48>
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	61bb      	str	r3, [r7, #24]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	4413      	add	r3, r2
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	2b2f      	cmp	r3, #47	; 0x2f
 8006eb2:	d0f6      	beq.n	8006ea2 <create_name+0x42>
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	4413      	add	r3, r2
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	2b5c      	cmp	r3, #92	; 0x5c
 8006ebe:	d0f0      	beq.n	8006ea2 <create_name+0x42>
			break;
 8006ec0:	e02a      	b.n	8006f18 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2bfe      	cmp	r3, #254	; 0xfe
 8006ec6:	d901      	bls.n	8006ecc <create_name+0x6c>
 8006ec8:	2306      	movs	r3, #6
 8006eca:	e177      	b.n	80071bc <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006ed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f001 faa6 	bl	8008428 <ff_convert>
 8006edc:	4603      	mov	r3, r0
 8006ede:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006ee0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <create_name+0x8a>
 8006ee6:	2306      	movs	r3, #6
 8006ee8:	e168      	b.n	80071bc <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006eea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006eec:	2b7f      	cmp	r3, #127	; 0x7f
 8006eee:	d809      	bhi.n	8006f04 <create_name+0xa4>
 8006ef0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	48b3      	ldr	r0, [pc, #716]	; (80071c4 <create_name+0x364>)
 8006ef6:	f7fe fd67 	bl	80059c8 <chk_chr>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <create_name+0xa4>
 8006f00:	2306      	movs	r3, #6
 8006f02:	e15b      	b.n	80071bc <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	617a      	str	r2, [r7, #20]
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4413      	add	r3, r2
 8006f10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f12:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006f14:	e7b4      	b.n	8006e80 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006f16:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	441a      	add	r2, r3
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006f22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f24:	2b1f      	cmp	r3, #31
 8006f26:	d801      	bhi.n	8006f2c <create_name+0xcc>
 8006f28:	2304      	movs	r3, #4
 8006f2a:	e000      	b.n	8006f2e <create_name+0xce>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006f32:	e011      	b.n	8006f58 <create_name+0xf8>
		w = lfn[di - 1];
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006f3a:	4413      	add	r3, r2
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006f46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f48:	2b20      	cmp	r3, #32
 8006f4a:	d002      	beq.n	8006f52 <create_name+0xf2>
 8006f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f4e:	2b2e      	cmp	r3, #46	; 0x2e
 8006f50:	d106      	bne.n	8006f60 <create_name+0x100>
		di--;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1ea      	bne.n	8006f34 <create_name+0xd4>
 8006f5e:	e000      	b.n	8006f62 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006f60:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4413      	add	r3, r2
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <create_name+0x118>
 8006f74:	2306      	movs	r3, #6
 8006f76:	e121      	b.n	80071bc <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3324      	adds	r3, #36	; 0x24
 8006f7c:	220b      	movs	r2, #11
 8006f7e:	2120      	movs	r1, #32
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fe fce0 	bl	8005946 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006f86:	2300      	movs	r3, #0
 8006f88:	61bb      	str	r3, [r7, #24]
 8006f8a:	e002      	b.n	8006f92 <create_name+0x132>
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	61bb      	str	r3, [r7, #24]
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4413      	add	r3, r2
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	2b20      	cmp	r3, #32
 8006f9e:	d0f5      	beq.n	8006f8c <create_name+0x12c>
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	2b2e      	cmp	r3, #46	; 0x2e
 8006fac:	d0ee      	beq.n	8006f8c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d009      	beq.n	8006fc8 <create_name+0x168>
 8006fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fb8:	f043 0303 	orr.w	r3, r3, #3
 8006fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006fc0:	e002      	b.n	8006fc8 <create_name+0x168>
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d009      	beq.n	8006fe2 <create_name+0x182>
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006fd4:	4413      	add	r3, r2
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	4413      	add	r3, r2
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	2b2e      	cmp	r3, #46	; 0x2e
 8006fe0:	d1ef      	bne.n	8006fc2 <create_name+0x162>

	i = b = 0; ni = 8;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006fe8:	2300      	movs	r3, #0
 8006fea:	623b      	str	r3, [r7, #32]
 8006fec:	2308      	movs	r3, #8
 8006fee:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	61ba      	str	r2, [r7, #24]
 8006ff6:	005b      	lsls	r3, r3, #1
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007000:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 8090 	beq.w	8007128 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007008:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800700a:	2b20      	cmp	r3, #32
 800700c:	d006      	beq.n	800701c <create_name+0x1bc>
 800700e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007010:	2b2e      	cmp	r3, #46	; 0x2e
 8007012:	d10a      	bne.n	800702a <create_name+0x1ca>
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	429a      	cmp	r2, r3
 800701a:	d006      	beq.n	800702a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800701c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007020:	f043 0303 	orr.w	r3, r3, #3
 8007024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007028:	e07d      	b.n	8007126 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800702a:	6a3a      	ldr	r2, [r7, #32]
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	429a      	cmp	r2, r3
 8007030:	d203      	bcs.n	800703a <create_name+0x1da>
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	429a      	cmp	r2, r3
 8007038:	d123      	bne.n	8007082 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	2b0b      	cmp	r3, #11
 800703e:	d106      	bne.n	800704e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007044:	f043 0303 	orr.w	r3, r3, #3
 8007048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800704c:	e06f      	b.n	800712e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	429a      	cmp	r2, r3
 8007054:	d005      	beq.n	8007062 <create_name+0x202>
 8007056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800705a:	f043 0303 	orr.w	r3, r3, #3
 800705e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	429a      	cmp	r2, r3
 8007068:	d860      	bhi.n	800712c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	61bb      	str	r3, [r7, #24]
 800706e:	2308      	movs	r3, #8
 8007070:	623b      	str	r3, [r7, #32]
 8007072:	230b      	movs	r3, #11
 8007074:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007076:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007080:	e051      	b.n	8007126 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007084:	2b7f      	cmp	r3, #127	; 0x7f
 8007086:	d914      	bls.n	80070b2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007088:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800708a:	2100      	movs	r1, #0
 800708c:	4618      	mov	r0, r3
 800708e:	f001 f9cb 	bl	8008428 <ff_convert>
 8007092:	4603      	mov	r3, r0
 8007094:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007096:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007098:	2b00      	cmp	r3, #0
 800709a:	d004      	beq.n	80070a6 <create_name+0x246>
 800709c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800709e:	3b80      	subs	r3, #128	; 0x80
 80070a0:	4a49      	ldr	r2, [pc, #292]	; (80071c8 <create_name+0x368>)
 80070a2:	5cd3      	ldrb	r3, [r2, r3]
 80070a4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80070a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070aa:	f043 0302 	orr.w	r3, r3, #2
 80070ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80070b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d007      	beq.n	80070c8 <create_name+0x268>
 80070b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070ba:	4619      	mov	r1, r3
 80070bc:	4843      	ldr	r0, [pc, #268]	; (80071cc <create_name+0x36c>)
 80070be:	f7fe fc83 	bl	80059c8 <chk_chr>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80070c8:	235f      	movs	r3, #95	; 0x5f
 80070ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80070cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070d0:	f043 0303 	orr.w	r3, r3, #3
 80070d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070d8:	e01b      	b.n	8007112 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80070da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070dc:	2b40      	cmp	r3, #64	; 0x40
 80070de:	d909      	bls.n	80070f4 <create_name+0x294>
 80070e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070e2:	2b5a      	cmp	r3, #90	; 0x5a
 80070e4:	d806      	bhi.n	80070f4 <create_name+0x294>
					b |= 2;
 80070e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070ea:	f043 0302 	orr.w	r3, r3, #2
 80070ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80070f2:	e00e      	b.n	8007112 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80070f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070f6:	2b60      	cmp	r3, #96	; 0x60
 80070f8:	d90b      	bls.n	8007112 <create_name+0x2b2>
 80070fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070fc:	2b7a      	cmp	r3, #122	; 0x7a
 80070fe:	d808      	bhi.n	8007112 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007100:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007104:	f043 0301 	orr.w	r3, r3, #1
 8007108:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800710c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800710e:	3b20      	subs	r3, #32
 8007110:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	623a      	str	r2, [r7, #32]
 8007118:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800711a:	b2d1      	uxtb	r1, r2
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	4413      	add	r3, r2
 8007120:	460a      	mov	r2, r1
 8007122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007126:	e763      	b.n	8006ff0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007128:	bf00      	nop
 800712a:	e000      	b.n	800712e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800712c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007134:	2be5      	cmp	r3, #229	; 0xe5
 8007136:	d103      	bne.n	8007140 <create_name+0x2e0>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2205      	movs	r2, #5
 800713c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	2b08      	cmp	r3, #8
 8007144:	d104      	bne.n	8007150 <create_name+0x2f0>
 8007146:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007150:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007154:	f003 030c 	and.w	r3, r3, #12
 8007158:	2b0c      	cmp	r3, #12
 800715a:	d005      	beq.n	8007168 <create_name+0x308>
 800715c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007160:	f003 0303 	and.w	r3, r3, #3
 8007164:	2b03      	cmp	r3, #3
 8007166:	d105      	bne.n	8007174 <create_name+0x314>
 8007168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800716c:	f043 0302 	orr.w	r3, r3, #2
 8007170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	2b00      	cmp	r3, #0
 800717e:	d117      	bne.n	80071b0 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007180:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007184:	f003 0303 	and.w	r3, r3, #3
 8007188:	2b01      	cmp	r3, #1
 800718a:	d105      	bne.n	8007198 <create_name+0x338>
 800718c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007190:	f043 0310 	orr.w	r3, r3, #16
 8007194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007198:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800719c:	f003 030c 	and.w	r3, r3, #12
 80071a0:	2b04      	cmp	r3, #4
 80071a2:	d105      	bne.n	80071b0 <create_name+0x350>
 80071a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071a8:	f043 0308 	orr.w	r3, r3, #8
 80071ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80071b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80071ba:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3728      	adds	r7, #40	; 0x28
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	08008660 	.word	0x08008660
 80071c8:	080086d4 	.word	0x080086d4
 80071cc:	0800866c 	.word	0x0800866c

080071d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80071e4:	e002      	b.n	80071ec <follow_path+0x1c>
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	3301      	adds	r3, #1
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2b2f      	cmp	r3, #47	; 0x2f
 80071f2:	d0f8      	beq.n	80071e6 <follow_path+0x16>
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	2b5c      	cmp	r3, #92	; 0x5c
 80071fa:	d0f4      	beq.n	80071e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	2200      	movs	r2, #0
 8007200:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b1f      	cmp	r3, #31
 8007208:	d80a      	bhi.n	8007220 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2280      	movs	r2, #128	; 0x80
 800720e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007212:	2100      	movs	r1, #0
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff f91b 	bl	8006450 <dir_sdi>
 800721a:	4603      	mov	r3, r0
 800721c:	75fb      	strb	r3, [r7, #23]
 800721e:	e043      	b.n	80072a8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007220:	463b      	mov	r3, r7
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7ff fe1b 	bl	8006e60 <create_name>
 800722a:	4603      	mov	r3, r0
 800722c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800722e:	7dfb      	ldrb	r3, [r7, #23]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d134      	bne.n	800729e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff fc5a 	bl	8006aee <dir_find>
 800723a:	4603      	mov	r3, r0
 800723c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007244:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00a      	beq.n	8007262 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800724c:	7dfb      	ldrb	r3, [r7, #23]
 800724e:	2b04      	cmp	r3, #4
 8007250:	d127      	bne.n	80072a2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007252:	7afb      	ldrb	r3, [r7, #11]
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b00      	cmp	r3, #0
 800725a:	d122      	bne.n	80072a2 <follow_path+0xd2>
 800725c:	2305      	movs	r3, #5
 800725e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007260:	e01f      	b.n	80072a2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007262:	7afb      	ldrb	r3, [r7, #11]
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b00      	cmp	r3, #0
 800726a:	d11c      	bne.n	80072a6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	799b      	ldrb	r3, [r3, #6]
 8007270:	f003 0310 	and.w	r3, r3, #16
 8007274:	2b00      	cmp	r3, #0
 8007276:	d102      	bne.n	800727e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007278:	2305      	movs	r3, #5
 800727a:	75fb      	strb	r3, [r7, #23]
 800727c:	e014      	b.n	80072a8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728c:	4413      	add	r3, r2
 800728e:	4619      	mov	r1, r3
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f7ff fa64 	bl	800675e <ld_clust>
 8007296:	4602      	mov	r2, r0
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800729c:	e7c0      	b.n	8007220 <follow_path+0x50>
			if (res != FR_OK) break;
 800729e:	bf00      	nop
 80072a0:	e002      	b.n	80072a8 <follow_path+0xd8>
				break;
 80072a2:	bf00      	nop
 80072a4:	e000      	b.n	80072a8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80072a6:	bf00      	nop
			}
		}
	}

	return res;
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b087      	sub	sp, #28
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80072ba:	f04f 33ff 	mov.w	r3, #4294967295
 80072be:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d031      	beq.n	800732c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	617b      	str	r3, [r7, #20]
 80072ce:	e002      	b.n	80072d6 <get_ldnumber+0x24>
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	3301      	adds	r3, #1
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	2b1f      	cmp	r3, #31
 80072dc:	d903      	bls.n	80072e6 <get_ldnumber+0x34>
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b3a      	cmp	r3, #58	; 0x3a
 80072e4:	d1f4      	bne.n	80072d0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	2b3a      	cmp	r3, #58	; 0x3a
 80072ec:	d11c      	bne.n	8007328 <get_ldnumber+0x76>
			tp = *path;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	60fa      	str	r2, [r7, #12]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	3b30      	subs	r3, #48	; 0x30
 80072fe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2b09      	cmp	r3, #9
 8007304:	d80e      	bhi.n	8007324 <get_ldnumber+0x72>
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	429a      	cmp	r2, r3
 800730c:	d10a      	bne.n	8007324 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d107      	bne.n	8007324 <get_ldnumber+0x72>
					vol = (int)i;
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	3301      	adds	r3, #1
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	e002      	b.n	800732e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007328:	2300      	movs	r3, #0
 800732a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800732c:	693b      	ldr	r3, [r7, #16]
}
 800732e:	4618      	mov	r0, r3
 8007330:	371c      	adds	r7, #28
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
	...

0800733c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	70da      	strb	r2, [r3, #3]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f04f 32ff 	mov.w	r2, #4294967295
 8007352:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7fe fd02 	bl	8005d60 <move_window>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <check_fs+0x2a>
 8007362:	2304      	movs	r3, #4
 8007364:	e038      	b.n	80073d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	3334      	adds	r3, #52	; 0x34
 800736a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe fa46 	bl	8005800 <ld_word>
 8007374:	4603      	mov	r3, r0
 8007376:	461a      	mov	r2, r3
 8007378:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800737c:	429a      	cmp	r2, r3
 800737e:	d001      	beq.n	8007384 <check_fs+0x48>
 8007380:	2303      	movs	r3, #3
 8007382:	e029      	b.n	80073d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800738a:	2be9      	cmp	r3, #233	; 0xe9
 800738c:	d009      	beq.n	80073a2 <check_fs+0x66>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007394:	2beb      	cmp	r3, #235	; 0xeb
 8007396:	d11e      	bne.n	80073d6 <check_fs+0x9a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800739e:	2b90      	cmp	r3, #144	; 0x90
 80073a0:	d119      	bne.n	80073d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	3334      	adds	r3, #52	; 0x34
 80073a6:	3336      	adds	r3, #54	; 0x36
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7fe fa41 	bl	8005830 <ld_dword>
 80073ae:	4603      	mov	r3, r0
 80073b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073b4:	4a0a      	ldr	r2, [pc, #40]	; (80073e0 <check_fs+0xa4>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d101      	bne.n	80073be <check_fs+0x82>
 80073ba:	2300      	movs	r3, #0
 80073bc:	e00c      	b.n	80073d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3334      	adds	r3, #52	; 0x34
 80073c2:	3352      	adds	r3, #82	; 0x52
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe fa33 	bl	8005830 <ld_dword>
 80073ca:	4602      	mov	r2, r0
 80073cc:	4b05      	ldr	r3, [pc, #20]	; (80073e4 <check_fs+0xa8>)
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d101      	bne.n	80073d6 <check_fs+0x9a>
 80073d2:	2300      	movs	r3, #0
 80073d4:	e000      	b.n	80073d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80073d6:	2302      	movs	r3, #2
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	00544146 	.word	0x00544146
 80073e4:	33544146 	.word	0x33544146

080073e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b096      	sub	sp, #88	; 0x58
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	4613      	mov	r3, r2
 80073f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f7ff ff58 	bl	80072b2 <get_ldnumber>
 8007402:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007406:	2b00      	cmp	r3, #0
 8007408:	da01      	bge.n	800740e <find_volume+0x26>
 800740a:	230b      	movs	r3, #11
 800740c:	e22e      	b.n	800786c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800740e:	4aa8      	ldr	r2, [pc, #672]	; (80076b0 <find_volume+0x2c8>)
 8007410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007416:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <find_volume+0x3a>
 800741e:	230c      	movs	r3, #12
 8007420:	e224      	b.n	800786c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007426:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	f023 0301 	bic.w	r3, r3, #1
 800742e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d01a      	beq.n	800746e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	785b      	ldrb	r3, [r3, #1]
 800743c:	4618      	mov	r0, r3
 800743e:	f7fe f941 	bl	80056c4 <disk_status>
 8007442:	4603      	mov	r3, r0
 8007444:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007448:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10c      	bne.n	800746e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d007      	beq.n	800746a <find_volume+0x82>
 800745a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800745e:	f003 0304 	and.w	r3, r3, #4
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007466:	230a      	movs	r3, #10
 8007468:	e200      	b.n	800786c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800746a:	2300      	movs	r3, #0
 800746c:	e1fe      	b.n	800786c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800746e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007470:	2200      	movs	r2, #0
 8007472:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007476:	b2da      	uxtb	r2, r3
 8007478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800747c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747e:	785b      	ldrb	r3, [r3, #1]
 8007480:	4618      	mov	r0, r3
 8007482:	f7fe f939 	bl	80056f8 <disk_initialize>
 8007486:	4603      	mov	r3, r0
 8007488:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800748c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007498:	2303      	movs	r3, #3
 800749a:	e1e7      	b.n	800786c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d007      	beq.n	80074b2 <find_volume+0xca>
 80074a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074a6:	f003 0304 	and.w	r3, r3, #4
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80074ae:	230a      	movs	r3, #10
 80074b0:	e1dc      	b.n	800786c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80074b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80074b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074ba:	f7ff ff3f 	bl	800733c <check_fs>
 80074be:	4603      	mov	r3, r0
 80074c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80074c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d14b      	bne.n	8007564 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80074cc:	2300      	movs	r3, #0
 80074ce:	643b      	str	r3, [r7, #64]	; 0x40
 80074d0:	e01f      	b.n	8007512 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80074d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80074d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074da:	011b      	lsls	r3, r3, #4
 80074dc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80074e0:	4413      	add	r3, r2
 80074e2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	3304      	adds	r3, #4
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d006      	beq.n	80074fc <find_volume+0x114>
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	3308      	adds	r3, #8
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe f99c 	bl	8005830 <ld_dword>
 80074f8:	4602      	mov	r2, r0
 80074fa:	e000      	b.n	80074fe <find_volume+0x116>
 80074fc:	2200      	movs	r2, #0
 80074fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007506:	440b      	add	r3, r1
 8007508:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800750c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800750e:	3301      	adds	r3, #1
 8007510:	643b      	str	r3, [r7, #64]	; 0x40
 8007512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007514:	2b03      	cmp	r3, #3
 8007516:	d9dc      	bls.n	80074d2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007518:	2300      	movs	r3, #0
 800751a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800751c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <find_volume+0x140>
 8007522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007524:	3b01      	subs	r3, #1
 8007526:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007530:	4413      	add	r3, r2
 8007532:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007536:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800753a:	2b00      	cmp	r3, #0
 800753c:	d005      	beq.n	800754a <find_volume+0x162>
 800753e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007540:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007542:	f7ff fefb 	bl	800733c <check_fs>
 8007546:	4603      	mov	r3, r0
 8007548:	e000      	b.n	800754c <find_volume+0x164>
 800754a:	2303      	movs	r3, #3
 800754c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007550:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007554:	2b01      	cmp	r3, #1
 8007556:	d905      	bls.n	8007564 <find_volume+0x17c>
 8007558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800755a:	3301      	adds	r3, #1
 800755c:	643b      	str	r3, [r7, #64]	; 0x40
 800755e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007560:	2b03      	cmp	r3, #3
 8007562:	d9e1      	bls.n	8007528 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007564:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007568:	2b04      	cmp	r3, #4
 800756a:	d101      	bne.n	8007570 <find_volume+0x188>
 800756c:	2301      	movs	r3, #1
 800756e:	e17d      	b.n	800786c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007570:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007574:	2b01      	cmp	r3, #1
 8007576:	d901      	bls.n	800757c <find_volume+0x194>
 8007578:	230d      	movs	r3, #13
 800757a:	e177      	b.n	800786c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800757c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757e:	3334      	adds	r3, #52	; 0x34
 8007580:	330b      	adds	r3, #11
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe f93c 	bl	8005800 <ld_word>
 8007588:	4603      	mov	r3, r0
 800758a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800758e:	d001      	beq.n	8007594 <find_volume+0x1ac>
 8007590:	230d      	movs	r3, #13
 8007592:	e16b      	b.n	800786c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	3334      	adds	r3, #52	; 0x34
 8007598:	3316      	adds	r3, #22
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe f930 	bl	8005800 <ld_word>
 80075a0:	4603      	mov	r3, r0
 80075a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80075a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d106      	bne.n	80075b8 <find_volume+0x1d0>
 80075aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ac:	3334      	adds	r3, #52	; 0x34
 80075ae:	3324      	adds	r3, #36	; 0x24
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fe f93d 	bl	8005830 <ld_dword>
 80075b6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80075b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075bc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80075c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ca:	789b      	ldrb	r3, [r3, #2]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d005      	beq.n	80075dc <find_volume+0x1f4>
 80075d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d2:	789b      	ldrb	r3, [r3, #2]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d001      	beq.n	80075dc <find_volume+0x1f4>
 80075d8:	230d      	movs	r3, #13
 80075da:	e147      	b.n	800786c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80075dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075de:	789b      	ldrb	r3, [r3, #2]
 80075e0:	461a      	mov	r2, r3
 80075e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075e4:	fb02 f303 	mul.w	r3, r2, r3
 80075e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80075ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80075f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f8:	895b      	ldrh	r3, [r3, #10]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d008      	beq.n	8007610 <find_volume+0x228>
 80075fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007600:	895b      	ldrh	r3, [r3, #10]
 8007602:	461a      	mov	r2, r3
 8007604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007606:	895b      	ldrh	r3, [r3, #10]
 8007608:	3b01      	subs	r3, #1
 800760a:	4013      	ands	r3, r2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <find_volume+0x22c>
 8007610:	230d      	movs	r3, #13
 8007612:	e12b      	b.n	800786c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007616:	3334      	adds	r3, #52	; 0x34
 8007618:	3311      	adds	r3, #17
 800761a:	4618      	mov	r0, r3
 800761c:	f7fe f8f0 	bl	8005800 <ld_word>
 8007620:	4603      	mov	r3, r0
 8007622:	461a      	mov	r2, r3
 8007624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007626:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	891b      	ldrh	r3, [r3, #8]
 800762c:	f003 030f 	and.w	r3, r3, #15
 8007630:	b29b      	uxth	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <find_volume+0x252>
 8007636:	230d      	movs	r3, #13
 8007638:	e118      	b.n	800786c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800763a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763c:	3334      	adds	r3, #52	; 0x34
 800763e:	3313      	adds	r3, #19
 8007640:	4618      	mov	r0, r3
 8007642:	f7fe f8dd 	bl	8005800 <ld_word>
 8007646:	4603      	mov	r3, r0
 8007648:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800764a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800764c:	2b00      	cmp	r3, #0
 800764e:	d106      	bne.n	800765e <find_volume+0x276>
 8007650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007652:	3334      	adds	r3, #52	; 0x34
 8007654:	3320      	adds	r3, #32
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe f8ea 	bl	8005830 <ld_dword>
 800765c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800765e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007660:	3334      	adds	r3, #52	; 0x34
 8007662:	330e      	adds	r3, #14
 8007664:	4618      	mov	r0, r3
 8007666:	f7fe f8cb 	bl	8005800 <ld_word>
 800766a:	4603      	mov	r3, r0
 800766c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800766e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007670:	2b00      	cmp	r3, #0
 8007672:	d101      	bne.n	8007678 <find_volume+0x290>
 8007674:	230d      	movs	r3, #13
 8007676:	e0f9      	b.n	800786c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007678:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800767a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800767c:	4413      	add	r3, r2
 800767e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007680:	8912      	ldrh	r2, [r2, #8]
 8007682:	0912      	lsrs	r2, r2, #4
 8007684:	b292      	uxth	r2, r2
 8007686:	4413      	add	r3, r2
 8007688:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800768a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800768c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768e:	429a      	cmp	r2, r3
 8007690:	d201      	bcs.n	8007696 <find_volume+0x2ae>
 8007692:	230d      	movs	r3, #13
 8007694:	e0ea      	b.n	800786c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007696:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800769e:	8952      	ldrh	r2, [r2, #10]
 80076a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80076a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d103      	bne.n	80076b4 <find_volume+0x2cc>
 80076ac:	230d      	movs	r3, #13
 80076ae:	e0dd      	b.n	800786c <find_volume+0x484>
 80076b0:	20000024 	.word	0x20000024
		fmt = FS_FAT32;
 80076b4:	2303      	movs	r3, #3
 80076b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d802      	bhi.n	80076ca <find_volume+0x2e2>
 80076c4:	2302      	movs	r3, #2
 80076c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d802      	bhi.n	80076da <find_volume+0x2f2>
 80076d4:	2301      	movs	r3, #1
 80076d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	1c9a      	adds	r2, r3, #2
 80076de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80076e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80076e6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80076e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80076ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ec:	441a      	add	r2, r3
 80076ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80076f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	441a      	add	r2, r3
 80076f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fa:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80076fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007700:	2b03      	cmp	r3, #3
 8007702:	d11e      	bne.n	8007742 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007706:	3334      	adds	r3, #52	; 0x34
 8007708:	332a      	adds	r3, #42	; 0x2a
 800770a:	4618      	mov	r0, r3
 800770c:	f7fe f878 	bl	8005800 <ld_word>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <find_volume+0x332>
 8007716:	230d      	movs	r3, #13
 8007718:	e0a8      	b.n	800786c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800771a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771c:	891b      	ldrh	r3, [r3, #8]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <find_volume+0x33e>
 8007722:	230d      	movs	r3, #13
 8007724:	e0a2      	b.n	800786c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007728:	3334      	adds	r3, #52	; 0x34
 800772a:	332c      	adds	r3, #44	; 0x2c
 800772c:	4618      	mov	r0, r3
 800772e:	f7fe f87f 	bl	8005830 <ld_dword>
 8007732:	4602      	mov	r2, r0
 8007734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007736:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	647b      	str	r3, [r7, #68]	; 0x44
 8007740:	e01f      	b.n	8007782 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	891b      	ldrh	r3, [r3, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <find_volume+0x366>
 800774a:	230d      	movs	r3, #13
 800774c:	e08e      	b.n	800786c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800774e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007754:	441a      	add	r2, r3
 8007756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007758:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800775a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800775e:	2b02      	cmp	r3, #2
 8007760:	d103      	bne.n	800776a <find_volume+0x382>
 8007762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	005b      	lsls	r3, r3, #1
 8007768:	e00a      	b.n	8007780 <find_volume+0x398>
 800776a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776c:	699a      	ldr	r2, [r3, #24]
 800776e:	4613      	mov	r3, r2
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	4413      	add	r3, r2
 8007774:	085a      	lsrs	r2, r3, #1
 8007776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007780:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	69da      	ldr	r2, [r3, #28]
 8007786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007788:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800778c:	0a5b      	lsrs	r3, r3, #9
 800778e:	429a      	cmp	r2, r3
 8007790:	d201      	bcs.n	8007796 <find_volume+0x3ae>
 8007792:	230d      	movs	r3, #13
 8007794:	e06a      	b.n	800786c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007798:	f04f 32ff 	mov.w	r2, #4294967295
 800779c:	615a      	str	r2, [r3, #20]
 800779e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a0:	695a      	ldr	r2, [r3, #20]
 80077a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	2280      	movs	r2, #128	; 0x80
 80077aa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80077ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d149      	bne.n	8007848 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80077b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b6:	3334      	adds	r3, #52	; 0x34
 80077b8:	3330      	adds	r3, #48	; 0x30
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fe f820 	bl	8005800 <ld_word>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d140      	bne.n	8007848 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80077c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077c8:	3301      	adds	r3, #1
 80077ca:	4619      	mov	r1, r3
 80077cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077ce:	f7fe fac7 	bl	8005d60 <move_window>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d137      	bne.n	8007848 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80077d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077da:	2200      	movs	r2, #0
 80077dc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80077de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e0:	3334      	adds	r3, #52	; 0x34
 80077e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fe f80a 	bl	8005800 <ld_word>
 80077ec:	4603      	mov	r3, r0
 80077ee:	461a      	mov	r2, r3
 80077f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d127      	bne.n	8007848 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80077f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fa:	3334      	adds	r3, #52	; 0x34
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7fe f817 	bl	8005830 <ld_dword>
 8007802:	4602      	mov	r2, r0
 8007804:	4b1b      	ldr	r3, [pc, #108]	; (8007874 <find_volume+0x48c>)
 8007806:	429a      	cmp	r2, r3
 8007808:	d11e      	bne.n	8007848 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780c:	3334      	adds	r3, #52	; 0x34
 800780e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe f80c 	bl	8005830 <ld_dword>
 8007818:	4602      	mov	r2, r0
 800781a:	4b17      	ldr	r3, [pc, #92]	; (8007878 <find_volume+0x490>)
 800781c:	429a      	cmp	r2, r3
 800781e:	d113      	bne.n	8007848 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007822:	3334      	adds	r3, #52	; 0x34
 8007824:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007828:	4618      	mov	r0, r3
 800782a:	f7fe f801 	bl	8005830 <ld_dword>
 800782e:	4602      	mov	r2, r0
 8007830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007832:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007836:	3334      	adds	r3, #52	; 0x34
 8007838:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800783c:	4618      	mov	r0, r3
 800783e:	f7fd fff7 	bl	8005830 <ld_dword>
 8007842:	4602      	mov	r2, r0
 8007844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007846:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800784e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007850:	4b0a      	ldr	r3, [pc, #40]	; (800787c <find_volume+0x494>)
 8007852:	881b      	ldrh	r3, [r3, #0]
 8007854:	3301      	adds	r3, #1
 8007856:	b29a      	uxth	r2, r3
 8007858:	4b08      	ldr	r3, [pc, #32]	; (800787c <find_volume+0x494>)
 800785a:	801a      	strh	r2, [r3, #0]
 800785c:	4b07      	ldr	r3, [pc, #28]	; (800787c <find_volume+0x494>)
 800785e:	881a      	ldrh	r2, [r3, #0]
 8007860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007862:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007864:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007866:	f7fe fa13 	bl	8005c90 <clear_lock>
#endif
	return FR_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3758      	adds	r7, #88	; 0x58
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	41615252 	.word	0x41615252
 8007878:	61417272 	.word	0x61417272
 800787c:	20000028 	.word	0x20000028

08007880 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800788a:	2309      	movs	r3, #9
 800788c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d01c      	beq.n	80078ce <validate+0x4e>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d018      	beq.n	80078ce <validate+0x4e>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d013      	beq.n	80078ce <validate+0x4e>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	889a      	ldrh	r2, [r3, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	88db      	ldrh	r3, [r3, #6]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d10c      	bne.n	80078ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fd ff02 	bl	80056c4 <disk_status>
 80078c0:	4603      	mov	r3, r0
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <validate+0x4e>
			res = FR_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d102      	bne.n	80078da <validate+0x5a>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	e000      	b.n	80078dc <validate+0x5c>
 80078da:	2300      	movs	r3, #0
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	6013      	str	r3, [r2, #0]
	return res;
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
	...

080078ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b088      	sub	sp, #32
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	4613      	mov	r3, r2
 80078f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80078fe:	f107 0310 	add.w	r3, r7, #16
 8007902:	4618      	mov	r0, r3
 8007904:	f7ff fcd5 	bl	80072b2 <get_ldnumber>
 8007908:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	2b00      	cmp	r3, #0
 800790e:	da01      	bge.n	8007914 <f_mount+0x28>
 8007910:	230b      	movs	r3, #11
 8007912:	e02b      	b.n	800796c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007914:	4a17      	ldr	r2, [pc, #92]	; (8007974 <f_mount+0x88>)
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800791c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d005      	beq.n	8007930 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007924:	69b8      	ldr	r0, [r7, #24]
 8007926:	f7fe f9b3 	bl	8005c90 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	2200      	movs	r2, #0
 800792e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d002      	beq.n	800793c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	490d      	ldr	r1, [pc, #52]	; (8007974 <f_mount+0x88>)
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d002      	beq.n	8007952 <f_mount+0x66>
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d001      	beq.n	8007956 <f_mount+0x6a>
 8007952:	2300      	movs	r3, #0
 8007954:	e00a      	b.n	800796c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007956:	f107 010c 	add.w	r1, r7, #12
 800795a:	f107 0308 	add.w	r3, r7, #8
 800795e:	2200      	movs	r2, #0
 8007960:	4618      	mov	r0, r3
 8007962:	f7ff fd41 	bl	80073e8 <find_volume>
 8007966:	4603      	mov	r3, r0
 8007968:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800796a:	7dfb      	ldrb	r3, [r7, #23]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3720      	adds	r7, #32
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	20000024 	.word	0x20000024

08007978 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800797e:	af00      	add	r7, sp, #0
 8007980:	f107 030c 	add.w	r3, r7, #12
 8007984:	6018      	str	r0, [r3, #0]
 8007986:	f107 0308 	add.w	r3, r7, #8
 800798a:	6019      	str	r1, [r3, #0]
 800798c:	1dfb      	adds	r3, r7, #7
 800798e:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007990:	f107 030c 	add.w	r3, r7, #12
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <f_open+0x26>
 800799a:	2309      	movs	r3, #9
 800799c:	e231      	b.n	8007e02 <f_open+0x48a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800799e:	1dfb      	adds	r3, r7, #7
 80079a0:	1dfa      	adds	r2, r7, #7
 80079a2:	7812      	ldrb	r2, [r2, #0]
 80079a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80079a8:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80079aa:	1dfb      	adds	r3, r7, #7
 80079ac:	781a      	ldrb	r2, [r3, #0]
 80079ae:	f507 7105 	add.w	r1, r7, #532	; 0x214
 80079b2:	f107 0308 	add.w	r3, r7, #8
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff fd16 	bl	80073e8 <find_volume>
 80079bc:	4603      	mov	r3, r0
 80079be:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 80079c2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f040 8210 	bne.w	8007dec <f_open+0x474>
		dj.obj.fs = fs;
 80079cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80079d0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 80079d4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80079d8:	f107 0214 	add.w	r2, r7, #20
 80079dc:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80079de:	f107 0308 	add.w	r3, r7, #8
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80079e8:	4611      	mov	r1, r2
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7ff fbf0 	bl	80071d0 <follow_path>
 80079f0:	4603      	mov	r3, r0
 80079f2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80079f6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d11b      	bne.n	8007a36 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80079fe:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8007a02:	b25b      	sxtb	r3, r3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	da03      	bge.n	8007a10 <f_open+0x98>
				res = FR_INVALID_NAME;
 8007a08:	2306      	movs	r3, #6
 8007a0a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007a0e:	e012      	b.n	8007a36 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a10:	1dfb      	adds	r3, r7, #7
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	f023 0301 	bic.w	r3, r3, #1
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	bf14      	ite	ne
 8007a1c:	2301      	movne	r3, #1
 8007a1e:	2300      	moveq	r3, #0
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007a28:	4611      	mov	r1, r2
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fd ffe8 	bl	8005a00 <chk_lock>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007a36:	1dfb      	adds	r3, r7, #7
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	f003 031c 	and.w	r3, r3, #28
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f000 809b 	beq.w	8007b7a <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8007a44:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d019      	beq.n	8007a80 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007a4c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	d10e      	bne.n	8007a72 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007a54:	f7fe f830 	bl	8005ab8 <enq_lock>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d006      	beq.n	8007a6c <f_open+0xf4>
 8007a5e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff f904 	bl	8006c70 <dir_register>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	e000      	b.n	8007a6e <f_open+0xf6>
 8007a6c:	2312      	movs	r3, #18
 8007a6e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007a72:	1dfb      	adds	r3, r7, #7
 8007a74:	1dfa      	adds	r2, r7, #7
 8007a76:	7812      	ldrb	r2, [r2, #0]
 8007a78:	f042 0208 	orr.w	r2, r2, #8
 8007a7c:	701a      	strb	r2, [r3, #0]
 8007a7e:	e012      	b.n	8007aa6 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007a80:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007a84:	f003 0311 	and.w	r3, r3, #17
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <f_open+0x11c>
					res = FR_DENIED;
 8007a8c:	2307      	movs	r3, #7
 8007a8e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007a92:	e008      	b.n	8007aa6 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007a94:	1dfb      	adds	r3, r7, #7
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	f003 0304 	and.w	r3, r3, #4
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d002      	beq.n	8007aa6 <f_open+0x12e>
 8007aa0:	2308      	movs	r3, #8
 8007aa2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007aa6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f040 8082 	bne.w	8007bb4 <f_open+0x23c>
 8007ab0:	1dfb      	adds	r3, r7, #7
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	f003 0308 	and.w	r3, r3, #8
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d07b      	beq.n	8007bb4 <f_open+0x23c>
				dw = GET_FATTIME();
 8007abc:	f7fd fc7c 	bl	80053b8 <get_fattime>
 8007ac0:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007ac4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007ac8:	330e      	adds	r3, #14
 8007aca:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fd feec 	bl	80058ac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007ad4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007ad8:	3316      	adds	r3, #22
 8007ada:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fd fee4 	bl	80058ac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007ae4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007ae8:	330b      	adds	r3, #11
 8007aea:	2220      	movs	r2, #32
 8007aec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007aee:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007af2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8007af6:	4611      	mov	r1, r2
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fe fe30 	bl	800675e <ld_clust>
 8007afe:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007b02:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007b06:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fe fe45 	bl	800679c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007b12:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007b16:	331c      	adds	r3, #28
 8007b18:	2100      	movs	r1, #0
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fd fec6 	bl	80058ac <st_dword>
					fs->wflag = 1;
 8007b20:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007b24:	2201      	movs	r2, #1
 8007b26:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007b28:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d041      	beq.n	8007bb4 <f_open+0x23c>
						dw = fs->winsect;
 8007b30:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b36:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8007b3a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fe fb52 	bl	80061ee <remove_chain>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8007b50:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d12d      	bne.n	8007bb4 <f_open+0x23c>
							res = move_window(fs, dw);
 8007b58:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007b5c:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fe f8fd 	bl	8005d60 <move_window>
 8007b66:	4603      	mov	r3, r0
 8007b68:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007b6c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007b70:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007b74:	3a01      	subs	r2, #1
 8007b76:	611a      	str	r2, [r3, #16]
 8007b78:	e01c      	b.n	8007bb4 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007b7a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d118      	bne.n	8007bb4 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007b82:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007b86:	f003 0310 	and.w	r3, r3, #16
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <f_open+0x21e>
					res = FR_NO_FILE;
 8007b8e:	2304      	movs	r3, #4
 8007b90:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007b94:	e00e      	b.n	8007bb4 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007b96:	1dfb      	adds	r3, r7, #7
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d008      	beq.n	8007bb4 <f_open+0x23c>
 8007ba2:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <f_open+0x23c>
						res = FR_DENIED;
 8007bae:	2307      	movs	r3, #7
 8007bb0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8007bb4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d136      	bne.n	8007c2a <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007bbc:	1dfb      	adds	r3, r7, #7
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d005      	beq.n	8007bd4 <f_open+0x25c>
				mode |= FA_MODIFIED;
 8007bc8:	1dfb      	adds	r3, r7, #7
 8007bca:	1dfa      	adds	r2, r7, #7
 8007bcc:	7812      	ldrb	r2, [r2, #0]
 8007bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bd2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007bd4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bda:	f107 030c 	add.w	r3, r7, #12
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007be2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8007be6:	f107 030c 	add.w	r3, r7, #12
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007bee:	1dfb      	adds	r3, r7, #7
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	f023 0301 	bic.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	bf14      	ite	ne
 8007bfa:	2301      	movne	r3, #1
 8007bfc:	2300      	moveq	r3, #0
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007c06:	4611      	mov	r1, r2
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fd ff77 	bl	8005afc <inc_lock>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	f107 030c 	add.w	r3, r7, #12
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007c18:	f107 030c 	add.w	r3, r7, #12
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d102      	bne.n	8007c2a <f_open+0x2b2>
 8007c24:	2302      	movs	r3, #2
 8007c26:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007c2a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f040 80dc 	bne.w	8007dec <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007c34:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007c38:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fe fd8d 	bl	800675e <ld_clust>
 8007c44:	4602      	mov	r2, r0
 8007c46:	f107 030c 	add.w	r3, r7, #12
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007c4e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007c52:	331c      	adds	r3, #28
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fd fdeb 	bl	8005830 <ld_dword>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	f107 030c 	add.w	r3, r7, #12
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007c64:	f107 030c 	add.w	r3, r7, #12
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007c6e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8007c72:	f107 030c 	add.w	r3, r7, #12
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007c7a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007c7e:	88da      	ldrh	r2, [r3, #6]
 8007c80:	f107 030c 	add.w	r3, r7, #12
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007c88:	f107 030c 	add.w	r3, r7, #12
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	1dfa      	adds	r2, r7, #7
 8007c90:	7812      	ldrb	r2, [r2, #0]
 8007c92:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007c94:	f107 030c 	add.w	r3, r7, #12
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007c9e:	f107 030c 	add.w	r3, r7, #12
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007ca8:	f107 030c 	add.w	r3, r7, #12
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007cb2:	f107 030c 	add.w	r3, r7, #12
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3330      	adds	r3, #48	; 0x30
 8007cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fd fe40 	bl	8005946 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007cc6:	1dfb      	adds	r3, r7, #7
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	f003 0320 	and.w	r3, r3, #32
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 808c 	beq.w	8007dec <f_open+0x474>
 8007cd4:	f107 030c 	add.w	r3, r7, #12
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 8085 	beq.w	8007dec <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007ce2:	f107 030c 	add.w	r3, r7, #12
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68da      	ldr	r2, [r3, #12]
 8007cea:	f107 030c 	add.w	r3, r7, #12
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007cf2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007cf6:	895b      	ldrh	r3, [r3, #10]
 8007cf8:	025b      	lsls	r3, r3, #9
 8007cfa:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007cfe:	f107 030c 	add.w	r3, r7, #12
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007d0a:	f107 030c 	add.w	r3, r7, #12
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8007d16:	e01f      	b.n	8007d58 <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 8007d18:	f107 030c 	add.w	r3, r7, #12
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe f8d7 	bl	8005ed6 <get_fat>
 8007d28:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8007d2c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d802      	bhi.n	8007d3a <f_open+0x3c2>
 8007d34:	2302      	movs	r3, #2
 8007d36:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007d3a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8007d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d42:	d102      	bne.n	8007d4a <f_open+0x3d2>
 8007d44:	2301      	movs	r3, #1
 8007d46:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007d4a:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8007d4e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8007d58:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d105      	bne.n	8007d6c <f_open+0x3f4>
 8007d60:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8007d64:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d8d5      	bhi.n	8007d18 <f_open+0x3a0>
				}
				fp->clust = clst;
 8007d6c:	f107 030c 	add.w	r3, r7, #12
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8007d76:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007d78:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d135      	bne.n	8007dec <f_open+0x474>
 8007d80:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d02f      	beq.n	8007dec <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007d8c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007d90:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7fe f87f 	bl	8005e98 <clust2sect>
 8007d9a:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8007d9e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d103      	bne.n	8007dae <f_open+0x436>
						res = FR_INT_ERR;
 8007da6:	2302      	movs	r3, #2
 8007da8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007dac:	e01e      	b.n	8007dec <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007dae:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007db2:	0a5a      	lsrs	r2, r3, #9
 8007db4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007db8:	441a      	add	r2, r3
 8007dba:	f107 030c 	add.w	r3, r7, #12
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007dc2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007dc6:	7858      	ldrb	r0, [r3, #1]
 8007dc8:	f107 030c 	add.w	r3, r7, #12
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007dd2:	f107 030c 	add.w	r3, r7, #12
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6a1a      	ldr	r2, [r3, #32]
 8007dda:	2301      	movs	r3, #1
 8007ddc:	f7fd fcb2 	bl	8005744 <disk_read>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <f_open+0x474>
 8007de6:	2301      	movs	r3, #1
 8007de8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007dec:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d004      	beq.n	8007dfe <f_open+0x486>
 8007df4:	f107 030c 	add.w	r3, r7, #12
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007dfe:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f107 0208 	add.w	r2, r7, #8
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7ff fd2f 	bl	8007880 <validate>
 8007e22:	4603      	mov	r3, r0
 8007e24:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d168      	bne.n	8007efe <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	7d1b      	ldrb	r3, [r3, #20]
 8007e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d062      	beq.n	8007efe <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	7d1b      	ldrb	r3, [r3, #20]
 8007e3c:	b25b      	sxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	da15      	bge.n	8007e6e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	7858      	ldrb	r0, [r3, #1]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a1a      	ldr	r2, [r3, #32]
 8007e50:	2301      	movs	r3, #1
 8007e52:	f7fd fc97 	bl	8005784 <disk_write>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <f_sync+0x54>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e04f      	b.n	8007f00 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	7d1b      	ldrb	r3, [r3, #20]
 8007e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007e6e:	f7fd faa3 	bl	80053b8 <get_fattime>
 8007e72:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	4610      	mov	r0, r2
 8007e7e:	f7fd ff6f 	bl	8005d60 <move_window>
 8007e82:	4603      	mov	r3, r0
 8007e84:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007e86:	7dfb      	ldrb	r3, [r7, #23]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d138      	bne.n	8007efe <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e90:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	330b      	adds	r3, #11
 8007e96:	781a      	ldrb	r2, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	330b      	adds	r3, #11
 8007e9c:	f042 0220 	orr.w	r2, r2, #32
 8007ea0:	b2d2      	uxtb	r2, r2
 8007ea2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6818      	ldr	r0, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	461a      	mov	r2, r3
 8007eae:	68f9      	ldr	r1, [r7, #12]
 8007eb0:	f7fe fc74 	bl	800679c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f103 021c 	add.w	r2, r3, #28
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	f7fd fcf3 	bl	80058ac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3316      	adds	r3, #22
 8007eca:	6939      	ldr	r1, [r7, #16]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fd fced 	bl	80058ac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3312      	adds	r3, #18
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fd fccc 	bl	8005876 <st_word>
					fs->wflag = 1;
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fd ff68 	bl	8005dbc <sync_fs>
 8007eec:	4603      	mov	r3, r0
 8007eee:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	7d1b      	ldrb	r3, [r3, #20]
 8007ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3718      	adds	r7, #24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff ff7b 	bl	8007e0c <f_sync>
 8007f16:	4603      	mov	r3, r0
 8007f18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d118      	bne.n	8007f52 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f107 0208 	add.w	r2, r7, #8
 8007f26:	4611      	mov	r1, r2
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7ff fca9 	bl	8007880 <validate>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10c      	bne.n	8007f52 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fd fe6b 	bl	8005c18 <dec_lock>
 8007f42:	4603      	mov	r3, r0
 8007f44:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d102      	bne.n	8007f52 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b090      	sub	sp, #64	; 0x40
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f107 0208 	add.w	r2, r7, #8
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7ff fc86 	bl	8007880 <validate>
 8007f74:	4603      	mov	r3, r0
 8007f76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007f7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d103      	bne.n	8007f8a <f_lseek+0x2e>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	7d5b      	ldrb	r3, [r3, #21]
 8007f86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007f8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d002      	beq.n	8007f98 <f_lseek+0x3c>
 8007f92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f96:	e1e6      	b.n	8008366 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 80d1 	beq.w	8008144 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa8:	d15a      	bne.n	8008060 <f_lseek+0x104>
			tbl = fp->cltbl;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fae:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	1d1a      	adds	r2, r3, #4
 8007fb4:	627a      	str	r2, [r7, #36]	; 0x24
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	617b      	str	r3, [r7, #20]
 8007fba:	2302      	movs	r3, #2
 8007fbc:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d03a      	beq.n	8008040 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	613b      	str	r3, [r7, #16]
 8007fce:	2300      	movs	r3, #0
 8007fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd4:	3302      	adds	r3, #2
 8007fd6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fde:	3301      	adds	r3, #1
 8007fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fd ff75 	bl	8005ed6 <get_fat>
 8007fec:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d804      	bhi.n	8007ffe <f_lseek+0xa2>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	755a      	strb	r2, [r3, #21]
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	e1b3      	b.n	8008366 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008004:	d104      	bne.n	8008010 <f_lseek+0xb4>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	755a      	strb	r2, [r3, #21]
 800800c:	2301      	movs	r3, #1
 800800e:	e1aa      	b.n	8008366 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	3301      	adds	r3, #1
 8008014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008016:	429a      	cmp	r2, r3
 8008018:	d0de      	beq.n	8007fd8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800801a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	429a      	cmp	r2, r3
 8008020:	d809      	bhi.n	8008036 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	1d1a      	adds	r2, r3, #4
 8008026:	627a      	str	r2, [r7, #36]	; 0x24
 8008028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	1d1a      	adds	r2, r3, #4
 8008030:	627a      	str	r2, [r7, #36]	; 0x24
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800803c:	429a      	cmp	r2, r3
 800803e:	d3c4      	bcc.n	8007fca <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008046:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	429a      	cmp	r2, r3
 800804e:	d803      	bhi.n	8008058 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	e184      	b.n	8008362 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008058:	2311      	movs	r3, #17
 800805a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800805e:	e180      	b.n	8008362 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	429a      	cmp	r2, r3
 8008068:	d902      	bls.n	8008070 <f_lseek+0x114>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 8172 	beq.w	8008362 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	3b01      	subs	r3, #1
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7fe f9af 	bl	80063e8 <clmt_clust>
 800808a:	4602      	mov	r2, r0
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	4619      	mov	r1, r3
 8008098:	4610      	mov	r0, r2
 800809a:	f7fd fefd 	bl	8005e98 <clust2sect>
 800809e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d104      	bne.n	80080b0 <f_lseek+0x154>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2202      	movs	r2, #2
 80080aa:	755a      	strb	r2, [r3, #21]
 80080ac:	2302      	movs	r3, #2
 80080ae:	e15a      	b.n	8008366 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	3b01      	subs	r3, #1
 80080b4:	0a5b      	lsrs	r3, r3, #9
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	8952      	ldrh	r2, [r2, #10]
 80080ba:	3a01      	subs	r2, #1
 80080bc:	4013      	ands	r3, r2
 80080be:	69ba      	ldr	r2, [r7, #24]
 80080c0:	4413      	add	r3, r2
 80080c2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 8148 	beq.w	8008362 <f_lseek+0x406>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	69ba      	ldr	r2, [r7, #24]
 80080d8:	429a      	cmp	r2, r3
 80080da:	f000 8142 	beq.w	8008362 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	7d1b      	ldrb	r3, [r3, #20]
 80080e2:	b25b      	sxtb	r3, r3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	da18      	bge.n	800811a <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	7858      	ldrb	r0, [r3, #1]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a1a      	ldr	r2, [r3, #32]
 80080f6:	2301      	movs	r3, #1
 80080f8:	f7fd fb44 	bl	8005784 <disk_write>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d004      	beq.n	800810c <f_lseek+0x1b0>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	755a      	strb	r2, [r3, #21]
 8008108:	2301      	movs	r3, #1
 800810a:	e12c      	b.n	8008366 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	7d1b      	ldrb	r3, [r3, #20]
 8008110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008114:	b2da      	uxtb	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	7858      	ldrb	r0, [r3, #1]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008124:	2301      	movs	r3, #1
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	f7fd fb0c 	bl	8005744 <disk_read>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d004      	beq.n	800813c <f_lseek+0x1e0>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	755a      	strb	r2, [r3, #21]
 8008138:	2301      	movs	r3, #1
 800813a:	e114      	b.n	8008366 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	69ba      	ldr	r2, [r7, #24]
 8008140:	621a      	str	r2, [r3, #32]
 8008142:	e10e      	b.n	8008362 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	683a      	ldr	r2, [r7, #0]
 800814a:	429a      	cmp	r2, r3
 800814c:	d908      	bls.n	8008160 <f_lseek+0x204>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	7d1b      	ldrb	r3, [r3, #20]
 8008152:	f003 0302 	and.w	r3, r3, #2
 8008156:	2b00      	cmp	r3, #0
 8008158:	d102      	bne.n	8008160 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008166:	2300      	movs	r3, #0
 8008168:	637b      	str	r3, [r7, #52]	; 0x34
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800816e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 80a7 	beq.w	80082c6 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	895b      	ldrh	r3, [r3, #10]
 800817c:	025b      	lsls	r3, r3, #9
 800817e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d01b      	beq.n	80081be <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	1e5a      	subs	r2, r3, #1
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008190:	6a3b      	ldr	r3, [r7, #32]
 8008192:	1e59      	subs	r1, r3, #1
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800819a:	429a      	cmp	r2, r3
 800819c:	d30f      	bcc.n	80081be <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	1e5a      	subs	r2, r3, #1
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	425b      	negs	r3, r3
 80081a6:	401a      	ands	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80081bc:	e022      	b.n	8008204 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80081c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d119      	bne.n	80081fe <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2100      	movs	r1, #0
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fe f872 	bl	80062b8 <create_chain>
 80081d4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80081d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d104      	bne.n	80081e6 <f_lseek+0x28a>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	755a      	strb	r2, [r3, #21]
 80081e2:	2302      	movs	r3, #2
 80081e4:	e0bf      	b.n	8008366 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80081e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ec:	d104      	bne.n	80081f8 <f_lseek+0x29c>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	755a      	strb	r2, [r3, #21]
 80081f4:	2301      	movs	r3, #1
 80081f6:	e0b6      	b.n	8008366 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081fc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008202:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008206:	2b00      	cmp	r3, #0
 8008208:	d05d      	beq.n	80082c6 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800820a:	e03a      	b.n	8008282 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800820c:	683a      	ldr	r2, [r7, #0]
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	603b      	str	r3, [r7, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	699a      	ldr	r2, [r3, #24]
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	441a      	add	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	7d1b      	ldrb	r3, [r3, #20]
 8008224:	f003 0302 	and.w	r3, r3, #2
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00b      	beq.n	8008244 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008230:	4618      	mov	r0, r3
 8008232:	f7fe f841 	bl	80062b8 <create_chain>
 8008236:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823a:	2b00      	cmp	r3, #0
 800823c:	d108      	bne.n	8008250 <f_lseek+0x2f4>
							ofs = 0; break;
 800823e:	2300      	movs	r3, #0
 8008240:	603b      	str	r3, [r7, #0]
 8008242:	e022      	b.n	800828a <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008248:	4618      	mov	r0, r3
 800824a:	f7fd fe44 	bl	8005ed6 <get_fat>
 800824e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008256:	d104      	bne.n	8008262 <f_lseek+0x306>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	755a      	strb	r2, [r3, #21]
 800825e:	2301      	movs	r3, #1
 8008260:	e081      	b.n	8008366 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008264:	2b01      	cmp	r3, #1
 8008266:	d904      	bls.n	8008272 <f_lseek+0x316>
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800826e:	429a      	cmp	r2, r3
 8008270:	d304      	bcc.n	800827c <f_lseek+0x320>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2202      	movs	r2, #2
 8008276:	755a      	strb	r2, [r3, #21]
 8008278:	2302      	movs	r3, #2
 800827a:	e074      	b.n	8008366 <f_lseek+0x40a>
					fp->clust = clst;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008280:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	429a      	cmp	r2, r3
 8008288:	d8c0      	bhi.n	800820c <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	699a      	ldr	r2, [r3, #24]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	441a      	add	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829c:	2b00      	cmp	r3, #0
 800829e:	d012      	beq.n	80082c6 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fd fdf7 	bl	8005e98 <clust2sect>
 80082aa:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80082ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d104      	bne.n	80082bc <f_lseek+0x360>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2202      	movs	r2, #2
 80082b6:	755a      	strb	r2, [r3, #21]
 80082b8:	2302      	movs	r3, #2
 80082ba:	e054      	b.n	8008366 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	0a5b      	lsrs	r3, r3, #9
 80082c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082c2:	4413      	add	r3, r2
 80082c4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	699a      	ldr	r2, [r3, #24]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d90a      	bls.n	80082e8 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	699a      	ldr	r2, [r3, #24]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	7d1b      	ldrb	r3, [r3, #20]
 80082de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d036      	beq.n	8008362 <f_lseek+0x406>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d031      	beq.n	8008362 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	7d1b      	ldrb	r3, [r3, #20]
 8008302:	b25b      	sxtb	r3, r3
 8008304:	2b00      	cmp	r3, #0
 8008306:	da18      	bge.n	800833a <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	7858      	ldrb	r0, [r3, #1]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a1a      	ldr	r2, [r3, #32]
 8008316:	2301      	movs	r3, #1
 8008318:	f7fd fa34 	bl	8005784 <disk_write>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d004      	beq.n	800832c <f_lseek+0x3d0>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	755a      	strb	r2, [r3, #21]
 8008328:	2301      	movs	r3, #1
 800832a:	e01c      	b.n	8008366 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	7d1b      	ldrb	r3, [r3, #20]
 8008330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008334:	b2da      	uxtb	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	7858      	ldrb	r0, [r3, #1]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008344:	2301      	movs	r3, #1
 8008346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008348:	f7fd f9fc 	bl	8005744 <disk_read>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d004      	beq.n	800835c <f_lseek+0x400>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	755a      	strb	r2, [r3, #21]
 8008358:	2301      	movs	r3, #1
 800835a:	e004      	b.n	8008366 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008360:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008362:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008366:	4618      	mov	r0, r3
 8008368:	3740      	adds	r7, #64	; 0x40
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008370:	b480      	push	{r7}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	4613      	mov	r3, r2
 800837c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800837e:	2301      	movs	r3, #1
 8008380:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008382:	2300      	movs	r3, #0
 8008384:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008386:	4b1f      	ldr	r3, [pc, #124]	; (8008404 <FATFS_LinkDriverEx+0x94>)
 8008388:	7a5b      	ldrb	r3, [r3, #9]
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	d131      	bne.n	80083f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008390:	4b1c      	ldr	r3, [pc, #112]	; (8008404 <FATFS_LinkDriverEx+0x94>)
 8008392:	7a5b      	ldrb	r3, [r3, #9]
 8008394:	b2db      	uxtb	r3, r3
 8008396:	461a      	mov	r2, r3
 8008398:	4b1a      	ldr	r3, [pc, #104]	; (8008404 <FATFS_LinkDriverEx+0x94>)
 800839a:	2100      	movs	r1, #0
 800839c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800839e:	4b19      	ldr	r3, [pc, #100]	; (8008404 <FATFS_LinkDriverEx+0x94>)
 80083a0:	7a5b      	ldrb	r3, [r3, #9]
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	4a17      	ldr	r2, [pc, #92]	; (8008404 <FATFS_LinkDriverEx+0x94>)
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80083ae:	4b15      	ldr	r3, [pc, #84]	; (8008404 <FATFS_LinkDriverEx+0x94>)
 80083b0:	7a5b      	ldrb	r3, [r3, #9]
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	461a      	mov	r2, r3
 80083b6:	4b13      	ldr	r3, [pc, #76]	; (8008404 <FATFS_LinkDriverEx+0x94>)
 80083b8:	4413      	add	r3, r2
 80083ba:	79fa      	ldrb	r2, [r7, #7]
 80083bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80083be:	4b11      	ldr	r3, [pc, #68]	; (8008404 <FATFS_LinkDriverEx+0x94>)
 80083c0:	7a5b      	ldrb	r3, [r3, #9]
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	b2d1      	uxtb	r1, r2
 80083c8:	4a0e      	ldr	r2, [pc, #56]	; (8008404 <FATFS_LinkDriverEx+0x94>)
 80083ca:	7251      	strb	r1, [r2, #9]
 80083cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80083ce:	7dbb      	ldrb	r3, [r7, #22]
 80083d0:	3330      	adds	r3, #48	; 0x30
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	3301      	adds	r3, #1
 80083dc:	223a      	movs	r2, #58	; 0x3a
 80083de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	3302      	adds	r3, #2
 80083e4:	222f      	movs	r2, #47	; 0x2f
 80083e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	3303      	adds	r3, #3
 80083ec:	2200      	movs	r2, #0
 80083ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80083f0:	2300      	movs	r3, #0
 80083f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80083f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	371c      	adds	r7, #28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	2000004c 	.word	0x2000004c

08008408 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008412:	2200      	movs	r2, #0
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7ff ffaa 	bl	8008370 <FATFS_LinkDriverEx>
 800841c:	4603      	mov	r3, r0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
	...

08008428 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	4603      	mov	r3, r0
 8008430:	6039      	str	r1, [r7, #0]
 8008432:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008434:	88fb      	ldrh	r3, [r7, #6]
 8008436:	2b7f      	cmp	r3, #127	; 0x7f
 8008438:	d802      	bhi.n	8008440 <ff_convert+0x18>
		c = chr;
 800843a:	88fb      	ldrh	r3, [r7, #6]
 800843c:	81fb      	strh	r3, [r7, #14]
 800843e:	e025      	b.n	800848c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00b      	beq.n	800845e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008446:	88fb      	ldrh	r3, [r7, #6]
 8008448:	2bff      	cmp	r3, #255	; 0xff
 800844a:	d805      	bhi.n	8008458 <ff_convert+0x30>
 800844c:	88fb      	ldrh	r3, [r7, #6]
 800844e:	3b80      	subs	r3, #128	; 0x80
 8008450:	4a12      	ldr	r2, [pc, #72]	; (800849c <ff_convert+0x74>)
 8008452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008456:	e000      	b.n	800845a <ff_convert+0x32>
 8008458:	2300      	movs	r3, #0
 800845a:	81fb      	strh	r3, [r7, #14]
 800845c:	e016      	b.n	800848c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800845e:	2300      	movs	r3, #0
 8008460:	81fb      	strh	r3, [r7, #14]
 8008462:	e009      	b.n	8008478 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008464:	89fb      	ldrh	r3, [r7, #14]
 8008466:	4a0d      	ldr	r2, [pc, #52]	; (800849c <ff_convert+0x74>)
 8008468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800846c:	88fa      	ldrh	r2, [r7, #6]
 800846e:	429a      	cmp	r2, r3
 8008470:	d006      	beq.n	8008480 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008472:	89fb      	ldrh	r3, [r7, #14]
 8008474:	3301      	adds	r3, #1
 8008476:	81fb      	strh	r3, [r7, #14]
 8008478:	89fb      	ldrh	r3, [r7, #14]
 800847a:	2b7f      	cmp	r3, #127	; 0x7f
 800847c:	d9f2      	bls.n	8008464 <ff_convert+0x3c>
 800847e:	e000      	b.n	8008482 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008480:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008482:	89fb      	ldrh	r3, [r7, #14]
 8008484:	3380      	adds	r3, #128	; 0x80
 8008486:	b29b      	uxth	r3, r3
 8008488:	b2db      	uxtb	r3, r3
 800848a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800848c:	89fb      	ldrh	r3, [r7, #14]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	08008764 	.word	0x08008764

080084a0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	4603      	mov	r3, r0
 80084a8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80084aa:	88fb      	ldrh	r3, [r7, #6]
 80084ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b0:	d201      	bcs.n	80084b6 <ff_wtoupper+0x16>
 80084b2:	4b3e      	ldr	r3, [pc, #248]	; (80085ac <ff_wtoupper+0x10c>)
 80084b4:	e000      	b.n	80084b8 <ff_wtoupper+0x18>
 80084b6:	4b3e      	ldr	r3, [pc, #248]	; (80085b0 <ff_wtoupper+0x110>)
 80084b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	1c9a      	adds	r2, r3, #2
 80084be:	617a      	str	r2, [r7, #20]
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80084c4:	8a7b      	ldrh	r3, [r7, #18]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d068      	beq.n	800859c <ff_wtoupper+0xfc>
 80084ca:	88fa      	ldrh	r2, [r7, #6]
 80084cc:	8a7b      	ldrh	r3, [r7, #18]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d364      	bcc.n	800859c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	1c9a      	adds	r2, r3, #2
 80084d6:	617a      	str	r2, [r7, #20]
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	823b      	strh	r3, [r7, #16]
 80084dc:	8a3b      	ldrh	r3, [r7, #16]
 80084de:	0a1b      	lsrs	r3, r3, #8
 80084e0:	81fb      	strh	r3, [r7, #14]
 80084e2:	8a3b      	ldrh	r3, [r7, #16]
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80084e8:	88fa      	ldrh	r2, [r7, #6]
 80084ea:	8a79      	ldrh	r1, [r7, #18]
 80084ec:	8a3b      	ldrh	r3, [r7, #16]
 80084ee:	440b      	add	r3, r1
 80084f0:	429a      	cmp	r2, r3
 80084f2:	da49      	bge.n	8008588 <ff_wtoupper+0xe8>
			switch (cmd) {
 80084f4:	89fb      	ldrh	r3, [r7, #14]
 80084f6:	2b08      	cmp	r3, #8
 80084f8:	d84f      	bhi.n	800859a <ff_wtoupper+0xfa>
 80084fa:	a201      	add	r2, pc, #4	; (adr r2, 8008500 <ff_wtoupper+0x60>)
 80084fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008500:	08008525 	.word	0x08008525
 8008504:	08008537 	.word	0x08008537
 8008508:	0800854d 	.word	0x0800854d
 800850c:	08008555 	.word	0x08008555
 8008510:	0800855d 	.word	0x0800855d
 8008514:	08008565 	.word	0x08008565
 8008518:	0800856d 	.word	0x0800856d
 800851c:	08008575 	.word	0x08008575
 8008520:	0800857d 	.word	0x0800857d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008524:	88fa      	ldrh	r2, [r7, #6]
 8008526:	8a7b      	ldrh	r3, [r7, #18]
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	005b      	lsls	r3, r3, #1
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	4413      	add	r3, r2
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	80fb      	strh	r3, [r7, #6]
 8008534:	e027      	b.n	8008586 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008536:	88fa      	ldrh	r2, [r7, #6]
 8008538:	8a7b      	ldrh	r3, [r7, #18]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	b29b      	uxth	r3, r3
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	b29b      	uxth	r3, r3
 8008544:	88fa      	ldrh	r2, [r7, #6]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	80fb      	strh	r3, [r7, #6]
 800854a:	e01c      	b.n	8008586 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800854c:	88fb      	ldrh	r3, [r7, #6]
 800854e:	3b10      	subs	r3, #16
 8008550:	80fb      	strh	r3, [r7, #6]
 8008552:	e018      	b.n	8008586 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008554:	88fb      	ldrh	r3, [r7, #6]
 8008556:	3b20      	subs	r3, #32
 8008558:	80fb      	strh	r3, [r7, #6]
 800855a:	e014      	b.n	8008586 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800855c:	88fb      	ldrh	r3, [r7, #6]
 800855e:	3b30      	subs	r3, #48	; 0x30
 8008560:	80fb      	strh	r3, [r7, #6]
 8008562:	e010      	b.n	8008586 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008564:	88fb      	ldrh	r3, [r7, #6]
 8008566:	3b1a      	subs	r3, #26
 8008568:	80fb      	strh	r3, [r7, #6]
 800856a:	e00c      	b.n	8008586 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800856c:	88fb      	ldrh	r3, [r7, #6]
 800856e:	3308      	adds	r3, #8
 8008570:	80fb      	strh	r3, [r7, #6]
 8008572:	e008      	b.n	8008586 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008574:	88fb      	ldrh	r3, [r7, #6]
 8008576:	3b50      	subs	r3, #80	; 0x50
 8008578:	80fb      	strh	r3, [r7, #6]
 800857a:	e004      	b.n	8008586 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800857c:	88fb      	ldrh	r3, [r7, #6]
 800857e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008582:	80fb      	strh	r3, [r7, #6]
 8008584:	bf00      	nop
			}
			break;
 8008586:	e008      	b.n	800859a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008588:	89fb      	ldrh	r3, [r7, #14]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d195      	bne.n	80084ba <ff_wtoupper+0x1a>
 800858e:	8a3b      	ldrh	r3, [r7, #16]
 8008590:	005b      	lsls	r3, r3, #1
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	4413      	add	r3, r2
 8008596:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008598:	e78f      	b.n	80084ba <ff_wtoupper+0x1a>
			break;
 800859a:	bf00      	nop
	}

	return chr;
 800859c:	88fb      	ldrh	r3, [r7, #6]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	371c      	adds	r7, #28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	08008864 	.word	0x08008864
 80085b0:	08008a58 	.word	0x08008a58

080085b4 <__libc_init_array>:
 80085b4:	b570      	push	{r4, r5, r6, lr}
 80085b6:	4e0d      	ldr	r6, [pc, #52]	; (80085ec <__libc_init_array+0x38>)
 80085b8:	4c0d      	ldr	r4, [pc, #52]	; (80085f0 <__libc_init_array+0x3c>)
 80085ba:	1ba4      	subs	r4, r4, r6
 80085bc:	10a4      	asrs	r4, r4, #2
 80085be:	2500      	movs	r5, #0
 80085c0:	42a5      	cmp	r5, r4
 80085c2:	d109      	bne.n	80085d8 <__libc_init_array+0x24>
 80085c4:	4e0b      	ldr	r6, [pc, #44]	; (80085f4 <__libc_init_array+0x40>)
 80085c6:	4c0c      	ldr	r4, [pc, #48]	; (80085f8 <__libc_init_array+0x44>)
 80085c8:	f000 f820 	bl	800860c <_init>
 80085cc:	1ba4      	subs	r4, r4, r6
 80085ce:	10a4      	asrs	r4, r4, #2
 80085d0:	2500      	movs	r5, #0
 80085d2:	42a5      	cmp	r5, r4
 80085d4:	d105      	bne.n	80085e2 <__libc_init_array+0x2e>
 80085d6:	bd70      	pop	{r4, r5, r6, pc}
 80085d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085dc:	4798      	blx	r3
 80085de:	3501      	adds	r5, #1
 80085e0:	e7ee      	b.n	80085c0 <__libc_init_array+0xc>
 80085e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085e6:	4798      	blx	r3
 80085e8:	3501      	adds	r5, #1
 80085ea:	e7f2      	b.n	80085d2 <__libc_init_array+0x1e>
 80085ec:	08008b1c 	.word	0x08008b1c
 80085f0:	08008b1c 	.word	0x08008b1c
 80085f4:	08008b1c 	.word	0x08008b1c
 80085f8:	08008b20 	.word	0x08008b20

080085fc <memset>:
 80085fc:	4402      	add	r2, r0
 80085fe:	4603      	mov	r3, r0
 8008600:	4293      	cmp	r3, r2
 8008602:	d100      	bne.n	8008606 <memset+0xa>
 8008604:	4770      	bx	lr
 8008606:	f803 1b01 	strb.w	r1, [r3], #1
 800860a:	e7f9      	b.n	8008600 <memset+0x4>

0800860c <_init>:
 800860c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860e:	bf00      	nop
 8008610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008612:	bc08      	pop	{r3}
 8008614:	469e      	mov	lr, r3
 8008616:	4770      	bx	lr

08008618 <_fini>:
 8008618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800861a:	bf00      	nop
 800861c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800861e:	bc08      	pop	{r3}
 8008620:	469e      	mov	lr, r3
 8008622:	4770      	bx	lr
