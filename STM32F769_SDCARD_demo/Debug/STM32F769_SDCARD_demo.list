
STM32F769_SDCARD_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006aac  08006aac  00016aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b0c  08006b0c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b0c  08006b0c  00016b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b14  08006b14  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b14  08006b14  00016b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b18  08006b18  00016b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  2000006c  08006b88  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  08006b88  000206b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bb0  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003476  00000000  00000000  00039c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001578  00000000  00000000  0003d0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013c0  00000000  00000000  0003e638  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000308bf  00000000  00000000  0003f9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012f4c  00000000  00000000  000702b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011ebd2  00000000  00000000  00083203  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a1dd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a50  00000000  00000000  001a1e50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000006c 	.word	0x2000006c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006a94 	.word	0x08006a94

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000070 	.word	0x20000070
 8000234:	08006a94 	.word	0x08006a94

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08a      	sub	sp, #40	; 0x28
 800053c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f001 f818 	bl	8001572 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f84f 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f99d 	bl	8000884 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800054a:	f000 f91d 	bl	8000788 <MX_USART1_UART_Init>
  MX_SDMMC2_SD_Init();
 800054e:	f000 f8fb 	bl	8000748 <MX_SDMMC2_SD_Init>
  MX_FATFS_Init();
 8000552:	f005 fb81 	bl	8005c58 <MX_FATFS_Init>
  MX_FMC_Init();
 8000556:	f000 f947 	bl	80007e8 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
  if(BSP_SD_IsDetected() == SD_PRESENT) {
 800055a:	f005 fc0f 	bl	8005d7c <BSP_SD_IsDetected>
 800055e:	4603      	mov	r3, r0
 8000560:	2b01      	cmp	r3, #1
 8000562:	d107      	bne.n	8000574 <main+0x3c>
	  HAL_UART_Transmit(&huart1, (uint8_t *)"SDCARD OK", 9, HAL_MAX_DELAY);
 8000564:	f04f 33ff 	mov.w	r3, #4294967295
 8000568:	2209      	movs	r2, #9
 800056a:	4918      	ldr	r1, [pc, #96]	; (80005cc <main+0x94>)
 800056c:	4818      	ldr	r0, [pc, #96]	; (80005d0 <main+0x98>)
 800056e:	f004 f8cf 	bl	8004710 <HAL_UART_Transmit>
 8000572:	e006      	b.n	8000582 <main+0x4a>
  } else {
	  HAL_UART_Transmit(&huart1, (uint8_t *)"SDCARD NOK", 10, HAL_MAX_DELAY);
 8000574:	f04f 33ff 	mov.w	r3, #4294967295
 8000578:	220a      	movs	r2, #10
 800057a:	4916      	ldr	r1, [pc, #88]	; (80005d4 <main+0x9c>)
 800057c:	4814      	ldr	r0, [pc, #80]	; (80005d0 <main+0x98>)
 800057e:	f004 f8c7 	bl	8004710 <HAL_UART_Transmit>
  }

  BSP_SD_Init();
 8000582:	f005 fb7b 	bl	8005c7c <BSP_SD_Init>
  BSP_SD_GetCardInfo(&info);
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	4618      	mov	r0, r3
 800058a:	f005 fbe9 	bl	8005d60 <BSP_SD_GetCardInfo>
  fs = malloc(sizeof(FATFS));
 800058e:	f44f 700c 	mov.w	r0, #560	; 0x230
 8000592:	f006 fa03 	bl	800699c <malloc>
 8000596:	4603      	mov	r3, r0
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  if(f_mount(fs, "", 1) == FR_OK) {
 800059a:	2201      	movs	r2, #1
 800059c:	490e      	ldr	r1, [pc, #56]	; (80005d8 <main+0xa0>)
 800059e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80005a0:	f006 f930 	bl	8006804 <f_mount>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d107      	bne.n	80005ba <main+0x82>
	  HAL_UART_Transmit(&huart1, (uint8_t *)"MOUNT OK", 8, HAL_MAX_DELAY);
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	2208      	movs	r2, #8
 80005b0:	490a      	ldr	r1, [pc, #40]	; (80005dc <main+0xa4>)
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <main+0x98>)
 80005b4:	f004 f8ac 	bl	8004710 <HAL_UART_Transmit>
 80005b8:	e006      	b.n	80005c8 <main+0x90>
  } else {
	  HAL_UART_Transmit(&huart1, (uint8_t *)"MOUNT NOK", 9, HAL_MAX_DELAY);
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	2209      	movs	r2, #9
 80005c0:	4907      	ldr	r1, [pc, #28]	; (80005e0 <main+0xa8>)
 80005c2:	4803      	ldr	r0, [pc, #12]	; (80005d0 <main+0x98>)
 80005c4:	f004 f8a4 	bl	8004710 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <main+0x90>
 80005ca:	bf00      	nop
 80005cc:	08006aac 	.word	0x08006aac
 80005d0:	20000184 	.word	0x20000184
 80005d4:	08006ab8 	.word	0x08006ab8
 80005d8:	08006ac4 	.word	0x08006ac4
 80005dc:	08006ac8 	.word	0x08006ac8
 80005e0:	08006ad4 	.word	0x08006ad4

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b0b8      	sub	sp, #224	; 0xe0
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005ee:	2234      	movs	r2, #52	; 0x34
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f006 f9da 	bl	80069ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	2290      	movs	r2, #144	; 0x90
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f006 f9cb 	bl	80069ac <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000616:	f001 fab9 	bl	8001b8c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	4b48      	ldr	r3, [pc, #288]	; (800073c <SystemClock_Config+0x158>)
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	4a47      	ldr	r2, [pc, #284]	; (800073c <SystemClock_Config+0x158>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	6413      	str	r3, [r2, #64]	; 0x40
 8000626:	4b45      	ldr	r3, [pc, #276]	; (800073c <SystemClock_Config+0x158>)
 8000628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000632:	4b43      	ldr	r3, [pc, #268]	; (8000740 <SystemClock_Config+0x15c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a42      	ldr	r2, [pc, #264]	; (8000740 <SystemClock_Config+0x15c>)
 8000638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063c:	6013      	str	r3, [r2, #0]
 800063e:	4b40      	ldr	r3, [pc, #256]	; (8000740 <SystemClock_Config+0x15c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800064a:	2303      	movs	r3, #3
 800064c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065e:	2310      	movs	r3, #16
 8000660:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000672:	2319      	movs	r3, #25
 8000674:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000678:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800067c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000686:	2304      	movs	r3, #4
 8000688:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fadb 	bl	8001c4c <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800069c:	f000 fcb6 	bl	800100c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a0:	f001 fa84 	bl	8001bac <HAL_PWREx_EnableOverDrive>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006aa:	f000 fcaf 	bl	800100c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006d4:	2107      	movs	r1, #7
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fd2a 	bl	8002130 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x102>
  {
    Error_Handler();
 80006e2:	f000 fc93 	bl	800100c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SDMMC2
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <SystemClock_Config+0x160>)
 80006e8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80006ea:	23c0      	movs	r3, #192	; 0xc0
 80006ec:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 80006f2:	2303      	movs	r3, #3
 80006f4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80006f6:	2301      	movs	r3, #1
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80006fe:	2300      	movs	r3, #0
 8000700:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000702:	2300      	movs	r3, #0
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000706:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800070a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 800070e:	2300      	movs	r3, #0
 8000710:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	4618      	mov	r0, r3
 800071a:	f001 ff6d 	bl	80025f8 <HAL_RCCEx_PeriphCLKConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x144>
  {
    Error_Handler();
 8000724:	f000 fc72 	bl	800100c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000728:	2200      	movs	r2, #0
 800072a:	2100      	movs	r1, #0
 800072c:	2000      	movs	r0, #0
 800072e:	f001 fde7 	bl	8002300 <HAL_RCC_MCOConfig>
}
 8000732:	bf00      	nop
 8000734:	37e0      	adds	r7, #224	; 0xe0
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000
 8000744:	04200040 	.word	0x04200040

08000748 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_SDMMC2_SD_Init+0x38>)
 800074e:	4a0d      	ldr	r2, [pc, #52]	; (8000784 <MX_SDMMC2_SD_Init+0x3c>)
 8000750:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_SDMMC2_SD_Init+0x38>)
 8000754:	2200      	movs	r2, #0
 8000756:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_SDMMC2_SD_Init+0x38>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_SDMMC2_SD_Init+0x38>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_SDMMC2_SD_Init+0x38>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <MX_SDMMC2_SD_Init+0x38>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 8000770:	4b03      	ldr	r3, [pc, #12]	; (8000780 <MX_SDMMC2_SD_Init+0x38>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	200000cc 	.word	0x200000cc
 8000784:	40011c00 	.word	0x40011c00

08000788 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 800078e:	4a15      	ldr	r2, [pc, #84]	; (80007e4 <MX_USART1_UART_Init+0x5c>)
 8000790:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 80007cc:	f003 ff52 	bl	8004674 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007d6:	f000 fc19 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000184 	.word	0x20000184
 80007e4:	40011000 	.word	0x40011000

080007e8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
 80007fc:	615a      	str	r2, [r3, #20]
 80007fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000800:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_FMC_Init+0x94>)
 8000802:	4a1f      	ldr	r2, [pc, #124]	; (8000880 <MX_FMC_Init+0x98>)
 8000804:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK1;
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_FMC_Init+0x94>)
 8000808:	2200      	movs	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_FMC_Init+0x94>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_FMC_Init+0x94>)
 8000814:	2204      	movs	r2, #4
 8000816:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_FMC_Init+0x94>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_FMC_Init+0x94>)
 8000820:	2240      	movs	r2, #64	; 0x40
 8000822:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_FMC_Init+0x94>)
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_FMC_Init+0x94>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_FMC_Init+0x94>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_FMC_Init+0x94>)
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_FMC_Init+0x94>)
 800083e:	2200      	movs	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000842:	2310      	movs	r3, #16
 8000844:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000846:	2310      	movs	r3, #16
 8000848:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800084a:	2310      	movs	r3, #16
 800084c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800084e:	2310      	movs	r3, #16
 8000850:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000852:	2310      	movs	r3, #16
 8000854:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000856:	2310      	movs	r3, #16
 8000858:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800085a:	2310      	movs	r3, #16
 800085c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <MX_FMC_Init+0x94>)
 8000864:	f003 fc6d 	bl	8004142 <HAL_SDRAM_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800086e:	f000 fbcd 	bl	800100c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000872:	bf00      	nop
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000150 	.word	0x20000150
 8000880:	a0000140 	.word	0xa0000140

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b090      	sub	sp, #64	; 0x40
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089a:	4bac      	ldr	r3, [pc, #688]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4aab      	ldr	r2, [pc, #684]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 80008a0:	f043 0310 	orr.w	r3, r3, #16
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4ba9      	ldr	r3, [pc, #676]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0310 	and.w	r3, r3, #16
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80008b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b2:	4ba6      	ldr	r3, [pc, #664]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4aa5      	ldr	r2, [pc, #660]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 80008b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4ba3      	ldr	r3, [pc, #652]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
 80008c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4ba0      	ldr	r3, [pc, #640]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a9f      	ldr	r2, [pc, #636]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b9d      	ldr	r3, [pc, #628]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	623b      	str	r3, [r7, #32]
 80008e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e2:	4b9a      	ldr	r3, [pc, #616]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a99      	ldr	r2, [pc, #612]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 80008e8:	f043 0308 	orr.w	r3, r3, #8
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b97      	ldr	r3, [pc, #604]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0308 	and.w	r3, r3, #8
 80008f6:	61fb      	str	r3, [r7, #28]
 80008f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b94      	ldr	r3, [pc, #592]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a93      	ldr	r2, [pc, #588]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b91      	ldr	r3, [pc, #580]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	61bb      	str	r3, [r7, #24]
 8000910:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b8e      	ldr	r3, [pc, #568]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a8d      	ldr	r2, [pc, #564]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b8b      	ldr	r3, [pc, #556]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800092a:	4b88      	ldr	r3, [pc, #544]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a87      	ldr	r2, [pc, #540]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 8000930:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b85      	ldr	r3, [pc, #532]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000942:	4b82      	ldr	r3, [pc, #520]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a81      	ldr	r2, [pc, #516]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 8000948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b7f      	ldr	r3, [pc, #508]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800095a:	4b7c      	ldr	r3, [pc, #496]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a7b      	ldr	r2, [pc, #492]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 8000960:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b79      	ldr	r3, [pc, #484]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000972:	4b76      	ldr	r3, [pc, #472]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a75      	ldr	r2, [pc, #468]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b73      	ldr	r3, [pc, #460]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0320 	and.w	r3, r3, #32
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	4b70      	ldr	r3, [pc, #448]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a6f      	ldr	r2, [pc, #444]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 8000990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b6d      	ldr	r3, [pc, #436]	; (8000b4c <MX_GPIO_Init+0x2c8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a8:	4869      	ldr	r0, [pc, #420]	; (8000b50 <MX_GPIO_Init+0x2cc>)
 80009aa:	f001 f8d5 	bl	8001b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_SCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 80009ae:	2378      	movs	r3, #120	; 0x78
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80009be:	2306      	movs	r3, #6
 80009c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c6:	4619      	mov	r1, r3
 80009c8:	4862      	ldr	r0, [pc, #392]	; (8000b54 <MX_GPIO_Init+0x2d0>)
 80009ca:	f000 ff03 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80009ce:	2304      	movs	r3, #4
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80009de:	2309      	movs	r3, #9
 80009e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e6:	4619      	mov	r1, r3
 80009e8:	485a      	ldr	r0, [pc, #360]	; (8000b54 <MX_GPIO_Init+0x2d0>)
 80009ea:	f000 fef3 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80009ee:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a00:	230b      	movs	r3, #11
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4853      	ldr	r0, [pc, #332]	; (8000b58 <MX_GPIO_Init+0x2d4>)
 8000a0c:	f000 fee2 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000a10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a16:	2312      	movs	r3, #18
 8000a18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a22:	2304      	movs	r3, #4
 8000a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	484b      	ldr	r0, [pc, #300]	; (8000b5c <MX_GPIO_Init+0x2d8>)
 8000a2e:	f000 fed1 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8000a32:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000a44:	230a      	movs	r3, #10
 8000a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4843      	ldr	r0, [pc, #268]	; (8000b5c <MX_GPIO_Init+0x2d8>)
 8000a50:	f000 fec0 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RX_Pin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8000a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000a66:	2308      	movs	r3, #8
 8000a68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a6e:	4619      	mov	r1, r3
 8000a70:	483b      	ldr	r0, [pc, #236]	; (8000b60 <MX_GPIO_Init+0x2dc>)
 8000a72:	f000 feaf 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_Pin */
  GPIO_InitStruct.Pin = CEC_Pin;
 8000a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7c:	2312      	movs	r3, #18
 8000a7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a90:	4619      	mov	r1, r3
 8000a92:	4834      	ldr	r0, [pc, #208]	; (8000b64 <MX_GPIO_Init+0x2e0>)
 8000a94:	f000 fe9e 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SDA_Pin */
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9c:	2312      	movs	r3, #18
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8000aa8:	230b      	movs	r3, #11
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	482a      	ldr	r0, [pc, #168]	; (8000b5c <MX_GPIO_Init+0x2d8>)
 8000ab4:	f000 fe8e 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000ab8:	2340      	movs	r3, #64	; 0x40
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ac8:	230a      	movs	r3, #10
 8000aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4822      	ldr	r0, [pc, #136]	; (8000b5c <MX_GPIO_Init+0x2d8>)
 8000ad4:	f000 fe7e 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_USER1_Pin Audio_INT_Pin WIFI_RST_Pin ARD_D8_Pin 
                           LD_USER2_Pin ARD_D7_Pin ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin 
 8000ad8:	f247 033b 	movw	r3, #28731	; 0x703b
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aea:	4619      	mov	r1, r3
 8000aec:	4818      	ldr	r0, [pc, #96]	; (8000b50 <MX_GPIO_Init+0x2cc>)
 8000aee:	f000 fe71 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN5_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 8000af2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000b04:	2303      	movs	r3, #3
 8000b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4814      	ldr	r0, [pc, #80]	; (8000b60 <MX_GPIO_Init+0x2dc>)
 8000b10:	f000 fe60 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8000b14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b26:	2309      	movs	r3, #9
 8000b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480b      	ldr	r0, [pc, #44]	; (8000b60 <MX_GPIO_Init+0x2dc>)
 8000b32:	f000 fe4f 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_SCK_Pin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8000b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b48:	2305      	movs	r3, #5
 8000b4a:	e00d      	b.n	8000b68 <MX_GPIO_Init+0x2e4>
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40022400 	.word	0x40022400
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40021800 	.word	0x40021800
 8000b5c:	40020400 	.word	0x40020400
 8000b60:	40020800 	.word	0x40020800
 8000b64:	40020000 	.word	0x40020000
 8000b68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6e:	4619      	mov	r1, r3
 8000b70:	48bb      	ldr	r0, [pc, #748]	; (8000e60 <MX_GPIO_Init+0x5dc>)
 8000b72:	f000 fe2f 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|LCD_BL_CTRL_Pin;
 8000b76:	f44f 43a2 	mov.w	r3, #20736	; 0x5100
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b88:	4619      	mov	r1, r3
 8000b8a:	48b6      	ldr	r0, [pc, #728]	; (8000e64 <MX_GPIO_Init+0x5e0>)
 8000b8c:	f000 fe22 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin 
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin 
 8000b90:	23f8      	movs	r3, #248	; 0xf8
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b94:	2300      	movs	r3, #0
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000b9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	48b1      	ldr	r0, [pc, #708]	; (8000e68 <MX_GPIO_Init+0x5e4>)
 8000ba4:	f000 fe16 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8000ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8000bba:	2307      	movs	r3, #7
 8000bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	48a9      	ldr	r0, [pc, #676]	; (8000e6c <MX_GPIO_Init+0x5e8>)
 8000bc6:	f000 fe05 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8000bca:	2330      	movs	r3, #48	; 0x30
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bda:	4619      	mov	r1, r3
 8000bdc:	48a4      	ldr	r0, [pc, #656]	; (8000e70 <MX_GPIO_Init+0x5ec>)
 8000bde:	f000 fdf9 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8000be2:	2308      	movs	r3, #8
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	489c      	ldr	r0, [pc, #624]	; (8000e70 <MX_GPIO_Init+0x5ec>)
 8000bfe:	f000 fde9 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8000c02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c14:	2305      	movs	r3, #5
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4890      	ldr	r0, [pc, #576]	; (8000e60 <MX_GPIO_Init+0x5dc>)
 8000c20:	f000 fdd8 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_RESET_Pin */
  GPIO_InitStruct.Pin = DSI_RESET_Pin;
 8000c24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	488d      	ldr	r0, [pc, #564]	; (8000e74 <MX_GPIO_Init+0x5f0>)
 8000c3e:	f000 fdc9 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_TX_Pin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8000c42:	2304      	movs	r3, #4
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c52:	2308      	movs	r3, #8
 8000c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4884      	ldr	r0, [pc, #528]	; (8000e70 <MX_GPIO_Init+0x5ec>)
 8000c5e:	f000 fdb9 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8000c62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c74:	230a      	movs	r3, #10
 8000c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4879      	ldr	r0, [pc, #484]	; (8000e64 <MX_GPIO_Init+0x5e0>)
 8000c80:	f000 fda8 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CLK_Pin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8000c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c96:	2300      	movs	r3, #0
 8000c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	486f      	ldr	r0, [pc, #444]	; (8000e60 <MX_GPIO_Init+0x5dc>)
 8000ca2:	f000 fd97 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cac:	4b72      	ldr	r3, [pc, #456]	; (8000e78 <MX_GPIO_Init+0x5f4>)
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb8:	4619      	mov	r1, r3
 8000cba:	486a      	ldr	r0, [pc, #424]	; (8000e64 <MX_GPIO_Init+0x5e0>)
 8000cbc:	f000 fd8a 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000cc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4863      	ldr	r0, [pc, #396]	; (8000e64 <MX_GPIO_Init+0x5e0>)
 8000cd6:	f000 fd7d 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8000cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cec:	2302      	movs	r3, #2
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4861      	ldr	r0, [pc, #388]	; (8000e7c <MX_GPIO_Init+0x5f8>)
 8000cf8:	f000 fd6c 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_RX_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8000cfc:	23c0      	movs	r3, #192	; 0xc0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d14:	4619      	mov	r1, r3
 8000d16:	4859      	ldr	r0, [pc, #356]	; (8000e7c <MX_GPIO_Init+0x5f8>)
 8000d18:	f000 fd5c 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000d1c:	2310      	movs	r3, #16
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d34:	4619      	mov	r1, r3
 8000d36:	4852      	ldr	r0, [pc, #328]	; (8000e80 <MX_GPIO_Init+0x5fc>)
 8000d38:	f000 fd4c 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_MCLKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000d4c:	2306      	movs	r3, #6
 8000d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d54:	4619      	mov	r1, r3
 8000d56:	4845      	ldr	r0, [pc, #276]	; (8000e6c <MX_GPIO_Init+0x5e8>)
 8000d58:	f000 fd3c 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8000d5c:	2348      	movs	r3, #72	; 0x48
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d60:	2300      	movs	r3, #0
 8000d62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	483f      	ldr	r0, [pc, #252]	; (8000e6c <MX_GPIO_Init+0x5e8>)
 8000d70:	f000 fd30 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8000d84:	2303      	movs	r3, #3
 8000d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	483d      	ldr	r0, [pc, #244]	; (8000e84 <MX_GPIO_Init+0x600>)
 8000d90:	f000 fd20 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8000d94:	2340      	movs	r3, #64	; 0x40
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000da4:	2303      	movs	r3, #3
 8000da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dac:	4619      	mov	r1, r3
 8000dae:	4835      	ldr	r0, [pc, #212]	; (8000e84 <MX_GPIO_Init+0x600>)
 8000db0:	f000 fd10 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8000db4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	482e      	ldr	r0, [pc, #184]	; (8000e84 <MX_GPIO_Init+0x600>)
 8000dca:	f000 fd03 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_STP_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000dde:	230a      	movs	r3, #10
 8000de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de6:	4619      	mov	r1, r3
 8000de8:	4824      	ldr	r0, [pc, #144]	; (8000e7c <MX_GPIO_Init+0x5f8>)
 8000dea:	f000 fcf3 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dee:	2332      	movs	r3, #50	; 0x32
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dfe:	230b      	movs	r3, #11
 8000e00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e06:	4619      	mov	r1, r3
 8000e08:	481c      	ldr	r0, [pc, #112]	; (8000e7c <MX_GPIO_Init+0x5f8>)
 8000e0a:	f000 fce3 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e12:	2303      	movs	r3, #3
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4816      	ldr	r0, [pc, #88]	; (8000e7c <MX_GPIO_Init+0x5f8>)
 8000e22:	f000 fcd7 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e26:	2304      	movs	r3, #4
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e36:	2309      	movs	r3, #9
 8000e38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4811      	ldr	r0, [pc, #68]	; (8000e88 <MX_GPIO_Init+0x604>)
 8000e42:	f000 fcc7 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SCL_Pin */
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8000e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4c:	2312      	movs	r3, #18
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e5c:	e016      	b.n	8000e8c <MX_GPIO_Init+0x608>
 8000e5e:	bf00      	nop
 8000e60:	40020000 	.word	0x40020000
 8000e64:	40022000 	.word	0x40022000
 8000e68:	40022800 	.word	0x40022800
 8000e6c:	40021800 	.word	0x40021800
 8000e70:	40020c00 	.word	0x40020c00
 8000e74:	40022400 	.word	0x40022400
 8000e78:	10120000 	.word	0x10120000
 8000e7c:	40020800 	.word	0x40020800
 8000e80:	40021c00 	.word	0x40021c00
 8000e84:	40021400 	.word	0x40021400
 8000e88:	40020400 	.word	0x40020400
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e90:	4619      	mov	r1, r3
 8000e92:	484f      	ldr	r0, [pc, #316]	; (8000fd0 <MX_GPIO_Init+0x74c>)
 8000e94:	f000 fc9e 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8000e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000eaa:	2309      	movs	r3, #9
 8000eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4846      	ldr	r0, [pc, #280]	; (8000fd0 <MX_GPIO_Init+0x74c>)
 8000eb6:	f000 fc8d 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000eba:	2386      	movs	r3, #134	; 0x86
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eca:	230b      	movs	r3, #11
 8000ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	483f      	ldr	r0, [pc, #252]	; (8000fd4 <MX_GPIO_Init+0x750>)
 8000ed6:	f000 fc7d 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000eda:	2301      	movs	r3, #1
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ede:	4b3e      	ldr	r3, [pc, #248]	; (8000fd8 <MX_GPIO_Init+0x754>)
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eea:	4619      	mov	r1, r3
 8000eec:	4839      	ldr	r0, [pc, #228]	; (8000fd4 <MX_GPIO_Init+0x750>)
 8000eee:	f000 fc71 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8000ef2:	2350      	movs	r3, #80	; 0x50
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f02:	4619      	mov	r1, r3
 8000f04:	4833      	ldr	r0, [pc, #204]	; (8000fd4 <MX_GPIO_Init+0x750>)
 8000f06:	f000 fc65 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_TX_Pin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8000f0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f1c:	230a      	movs	r3, #10
 8000f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f24:	4619      	mov	r1, r3
 8000f26:	482a      	ldr	r0, [pc, #168]	; (8000fd0 <MX_GPIO_Init+0x74c>)
 8000f28:	f000 fc54 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f30:	2300      	movs	r3, #0
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4827      	ldr	r0, [pc, #156]	; (8000fdc <MX_GPIO_Init+0x758>)
 8000f40:	f000 fc48 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000f44:	2328      	movs	r3, #40	; 0x28
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f54:	230a      	movs	r3, #10
 8000f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	481d      	ldr	r0, [pc, #116]	; (8000fd4 <MX_GPIO_Init+0x750>)
 8000f60:	f000 fc38 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSIHOST_TE_Pin */
  GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 8000f64:	2304      	movs	r3, #4
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000f74:	230d      	movs	r3, #13
 8000f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4818      	ldr	r0, [pc, #96]	; (8000fe0 <MX_GPIO_Init+0x75c>)
 8000f80:	f000 fc28 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000f84:	2340      	movs	r3, #64	; 0x40
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000f94:	2309      	movs	r3, #9
 8000f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480f      	ldr	r0, [pc, #60]	; (8000fdc <MX_GPIO_Init+0x758>)
 8000fa0:	f000 fc18 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000fa4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <MX_GPIO_Init+0x760>)
 8000fc2:	f000 fc07 	bl	80017d4 <HAL_GPIO_Init>

}
 8000fc6:	bf00      	nop
 8000fc8:	3740      	adds	r7, #64	; 0x40
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40020c00 	.word	0x40020c00
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	10110000 	.word	0x10110000
 8000fdc:	40021c00 	.word	0x40021c00
 8000fe0:	40022400 	.word	0x40022400
 8000fe4:	40020400 	.word	0x40020400

08000fe8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d101      	bne.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ffa:	f000 fac7 	bl	800158c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40001000 	.word	0x40001000

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_MspInit+0x44>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_MspInit+0x44>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_MspInit+0x44>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_MspInit+0x44>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_MspInit+0x44>)
 8001040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001044:	6453      	str	r3, [r2, #68]	; 0x44
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_MspInit+0x44>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800

08001064 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a33      	ldr	r2, [pc, #204]	; (8001150 <HAL_SD_MspInit+0xec>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d160      	bne.n	8001148 <HAL_SD_MspInit+0xe4>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8001086:	4b33      	ldr	r3, [pc, #204]	; (8001154 <HAL_SD_MspInit+0xf0>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a32      	ldr	r2, [pc, #200]	; (8001154 <HAL_SD_MspInit+0xf0>)
 800108c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b30      	ldr	r3, [pc, #192]	; (8001154 <HAL_SD_MspInit+0xf0>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109a:	61bb      	str	r3, [r7, #24]
 800109c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <HAL_SD_MspInit+0xf0>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a2c      	ldr	r2, [pc, #176]	; (8001154 <HAL_SD_MspInit+0xf0>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <HAL_SD_MspInit+0xf0>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b6:	4b27      	ldr	r3, [pc, #156]	; (8001154 <HAL_SD_MspInit+0xf0>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a26      	ldr	r2, [pc, #152]	; (8001154 <HAL_SD_MspInit+0xf0>)
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b24      	ldr	r3, [pc, #144]	; (8001154 <HAL_SD_MspInit+0xf0>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <HAL_SD_MspInit+0xf0>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a20      	ldr	r2, [pc, #128]	; (8001154 <HAL_SD_MspInit+0xf0>)
 80010d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <HAL_SD_MspInit+0xf0>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0 
    */
    GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 80010e6:	2318      	movs	r3, #24
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80010f6:	230a      	movs	r3, #10
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	4815      	ldr	r0, [pc, #84]	; (8001158 <HAL_SD_MspInit+0xf4>)
 8001102:	f000 fb67 	bl	80017d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8001106:	23c0      	movs	r3, #192	; 0xc0
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001116:	230b      	movs	r3, #11
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	480e      	ldr	r0, [pc, #56]	; (800115c <HAL_SD_MspInit+0xf8>)
 8001122:	f000 fb57 	bl	80017d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8001126:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800112a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001138:	230b      	movs	r3, #11
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	4807      	ldr	r0, [pc, #28]	; (8001160 <HAL_SD_MspInit+0xfc>)
 8001144:	f000 fb46 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8001148:	bf00      	nop
 800114a:	3730      	adds	r7, #48	; 0x30
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40011c00 	.word	0x40011c00
 8001154:	40023800 	.word	0x40023800
 8001158:	40020400 	.word	0x40020400
 800115c:	40020c00 	.word	0x40020c00
 8001160:	40021800 	.word	0x40021800

08001164 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a20      	ldr	r2, [pc, #128]	; (8001204 <HAL_UART_MspInit+0xa0>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d139      	bne.n	80011fa <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001186:	4b20      	ldr	r3, [pc, #128]	; (8001208 <HAL_UART_MspInit+0xa4>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a1f      	ldr	r2, [pc, #124]	; (8001208 <HAL_UART_MspInit+0xa4>)
 800118c:	f043 0310 	orr.w	r3, r3, #16
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HAL_UART_MspInit+0xa4>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <HAL_UART_MspInit+0xa4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a19      	ldr	r2, [pc, #100]	; (8001208 <HAL_UART_MspInit+0xa4>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_UART_MspInit+0xa4>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80011b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011c8:	2307      	movs	r3, #7
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	480e      	ldr	r0, [pc, #56]	; (800120c <HAL_UART_MspInit+0xa8>)
 80011d4:	f000 fafe 	bl	80017d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80011d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ea:	2307      	movs	r3, #7
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <HAL_UART_MspInit+0xa8>)
 80011f6:	f000 faed 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	; 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40011000 	.word	0x40011000
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000

08001210 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001224:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <HAL_FMC_MspInit+0x104>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d16f      	bne.n	800130c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800122c:	4b39      	ldr	r3, [pc, #228]	; (8001314 <HAL_FMC_MspInit+0x104>)
 800122e:	2201      	movs	r2, #1
 8001230:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001232:	4b39      	ldr	r3, [pc, #228]	; (8001318 <HAL_FMC_MspInit+0x108>)
 8001234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001236:	4a38      	ldr	r2, [pc, #224]	; (8001318 <HAL_FMC_MspInit+0x108>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6393      	str	r3, [r2, #56]	; 0x38
 800123e:	4b36      	ldr	r3, [pc, #216]	; (8001318 <HAL_FMC_MspInit+0x108>)
 8001240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800124a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800124e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800125c:	230c      	movs	r3, #12
 800125e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	4619      	mov	r1, r3
 8001264:	482d      	ldr	r0, [pc, #180]	; (800131c <HAL_FMC_MspInit+0x10c>)
 8001266:	f000 fab5 	bl	80017d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin 
 800126a:	f248 1337 	movw	r3, #33079	; 0x8137
 800126e:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800127c:	230c      	movs	r3, #12
 800127e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4826      	ldr	r0, [pc, #152]	; (8001320 <HAL_FMC_MspInit+0x110>)
 8001286:	f000 faa5 	bl	80017d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800128a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800128e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800129c:	230c      	movs	r3, #12
 800129e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	481f      	ldr	r0, [pc, #124]	; (8001324 <HAL_FMC_MspInit+0x114>)
 80012a6:	f000 fa95 	bl	80017d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 80012aa:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80012ae:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin 
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012bc:	230c      	movs	r3, #12
 80012be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	4818      	ldr	r0, [pc, #96]	; (8001328 <HAL_FMC_MspInit+0x118>)
 80012c6:	f000 fa85 	bl	80017d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80012ca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80012ce:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012dc:	230c      	movs	r3, #12
 80012de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	4811      	ldr	r0, [pc, #68]	; (800132c <HAL_FMC_MspInit+0x11c>)
 80012e6:	f000 fa75 	bl	80017d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin 
 80012ea:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80012ee:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin 
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012fc:	230c      	movs	r3, #12
 80012fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	4619      	mov	r1, r3
 8001304:	480a      	ldr	r0, [pc, #40]	; (8001330 <HAL_FMC_MspInit+0x120>)
 8001306:	f000 fa65 	bl	80017d4 <HAL_GPIO_Init>
 800130a:	e000      	b.n	800130e <HAL_FMC_MspInit+0xfe>
    return;
 800130c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000088 	.word	0x20000088
 8001318:	40023800 	.word	0x40023800
 800131c:	40021000 	.word	0x40021000
 8001320:	40021800 	.word	0x40021800
 8001324:	40020c00 	.word	0x40020c00
 8001328:	40022000 	.word	0x40022000
 800132c:	40021400 	.word	0x40021400
 8001330:	40021c00 	.word	0x40021c00

08001334 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800133c:	f7ff ff68 	bl	8001210 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	; 0x30
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	2036      	movs	r0, #54	; 0x36
 800135e:	f000 fa0f 	bl	8001780 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001362:	2036      	movs	r0, #54	; 0x36
 8001364:	f000 fa28 	bl	80017b8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001368:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <HAL_InitTick+0xa0>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	4a1e      	ldr	r2, [pc, #120]	; (80013e8 <HAL_InitTick+0xa0>)
 800136e:	f043 0310 	orr.w	r3, r3, #16
 8001372:	6413      	str	r3, [r2, #64]	; 0x40
 8001374:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <HAL_InitTick+0xa0>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f003 0310 	and.w	r3, r3, #16
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001380:	f107 0210 	add.w	r2, r7, #16
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f001 f902 	bl	8002594 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001390:	f001 f8d8 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 8001394:	4603      	mov	r3, r0
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800139a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139c:	4a13      	ldr	r2, [pc, #76]	; (80013ec <HAL_InitTick+0xa4>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	0c9b      	lsrs	r3, r3, #18
 80013a4:	3b01      	subs	r3, #1
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <HAL_InitTick+0xa8>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <HAL_InitTick+0xac>)
 80013ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <HAL_InitTick+0xa8>)
 80013b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <HAL_InitTick+0xa8>)
 80013b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_InitTick+0xa8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_InitTick+0xa8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013c8:	4809      	ldr	r0, [pc, #36]	; (80013f0 <HAL_InitTick+0xa8>)
 80013ca:	f002 feee 	bl	80041aa <HAL_TIM_Base_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d104      	bne.n	80013de <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013d4:	4806      	ldr	r0, [pc, #24]	; (80013f0 <HAL_InitTick+0xa8>)
 80013d6:	f002 ff1d 	bl	8004214 <HAL_TIM_Base_Start_IT>
 80013da:	4603      	mov	r3, r0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3730      	adds	r7, #48	; 0x30
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	431bde83 	.word	0x431bde83
 80013f0:	20000204 	.word	0x20000204
 80013f4:	40001000 	.word	0x40001000

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <TIM6_DAC_IRQHandler+0x10>)
 800144e:	f002 ff0b 	bl	8004268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000204 	.word	0x20000204

0800145c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <_sbrk+0x50>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d102      	bne.n	8001472 <_sbrk+0x16>
		heap_end = &end;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <_sbrk+0x50>)
 800146e:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <_sbrk+0x54>)
 8001470:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <_sbrk+0x50>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <_sbrk+0x50>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	466a      	mov	r2, sp
 8001482:	4293      	cmp	r3, r2
 8001484:	d907      	bls.n	8001496 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001486:	f005 fa5f 	bl	8006948 <__errno>
 800148a:	4602      	mov	r2, r0
 800148c:	230c      	movs	r3, #12
 800148e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
 8001494:	e006      	b.n	80014a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <_sbrk+0x50>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	4a03      	ldr	r2, [pc, #12]	; (80014ac <_sbrk+0x50>)
 80014a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014a2:	68fb      	ldr	r3, [r7, #12]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000008c 	.word	0x2000008c
 80014b0:	200006b8 	.word	0x200006b8

080014b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <SystemInit+0x5c>)
 80014ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014be:	4a14      	ldr	r2, [pc, #80]	; (8001510 <SystemInit+0x5c>)
 80014c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <SystemInit+0x60>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a11      	ldr	r2, [pc, #68]	; (8001514 <SystemInit+0x60>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <SystemInit+0x60>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <SystemInit+0x60>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	490d      	ldr	r1, [pc, #52]	; (8001514 <SystemInit+0x60>)
 80014e0:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <SystemInit+0x64>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <SystemInit+0x60>)
 80014e8:	4a0c      	ldr	r2, [pc, #48]	; (800151c <SystemInit+0x68>)
 80014ea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <SystemInit+0x60>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a08      	ldr	r2, [pc, #32]	; (8001514 <SystemInit+0x60>)
 80014f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <SystemInit+0x60>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <SystemInit+0x5c>)
 8001500:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001504:	609a      	str	r2, [r3, #8]
#endif
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00
 8001514:	40023800 	.word	0x40023800
 8001518:	fef6ffff 	.word	0xfef6ffff
 800151c:	24003010 	.word	0x24003010

08001520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001558 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001524:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001526:	e003      	b.n	8001530 <LoopCopyDataInit>

08001528 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800152a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800152c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800152e:	3104      	adds	r1, #4

08001530 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001530:	480b      	ldr	r0, [pc, #44]	; (8001560 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001534:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001536:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001538:	d3f6      	bcc.n	8001528 <CopyDataInit>
  ldr  r2, =_sbss
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800153c:	e002      	b.n	8001544 <LoopFillZerobss>

0800153e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800153e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001540:	f842 3b04 	str.w	r3, [r2], #4

08001544 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001546:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001548:	d3f9      	bcc.n	800153e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800154a:	f7ff ffb3 	bl	80014b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154e:	f005 fa01 	bl	8006954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001552:	f7fe fff1 	bl	8000538 <main>
  bx  lr    
 8001556:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001558:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800155c:	08006b1c 	.word	0x08006b1c
  ldr  r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001564:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8001568:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 800156c:	200006b4 	.word	0x200006b4

08001570 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001570:	e7fe      	b.n	8001570 <ADC_IRQHandler>

08001572 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001576:	2003      	movs	r0, #3
 8001578:	f000 f8f7 	bl	800176a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157c:	2000      	movs	r0, #0
 800157e:	f7ff fee3 	bl	8001348 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001582:	f7ff fd4b 	bl	800101c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_IncTick+0x20>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_IncTick+0x24>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4413      	add	r3, r2
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <HAL_IncTick+0x24>)
 800159e:	6013      	str	r3, [r2, #0]
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000004 	.word	0x20000004
 80015b0:	20000244 	.word	0x20000244

080015b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return uwTick;
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <HAL_GetTick+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000244 	.word	0x20000244

080015cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d4:	f7ff ffee 	bl	80015b4 <HAL_GetTick>
 80015d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e4:	d005      	beq.n	80015f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_Delay+0x40>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4413      	add	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015f2:	bf00      	nop
 80015f4:	f7ff ffde 	bl	80015b4 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	429a      	cmp	r2, r3
 8001602:	d8f7      	bhi.n	80015f4 <HAL_Delay+0x28>
  {
  }
}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000004 	.word	0x20000004

08001610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <__NVIC_SetPriorityGrouping+0x40>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800162c:	4013      	ands	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 800163a:	4313      	orrs	r3, r2
 800163c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163e:	4a04      	ldr	r2, [pc, #16]	; (8001650 <__NVIC_SetPriorityGrouping+0x40>)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	60d3      	str	r3, [r2, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00
 8001654:	05fa0000 	.word	0x05fa0000

08001658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <__NVIC_GetPriorityGrouping+0x18>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0307 	and.w	r3, r3, #7
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	2b00      	cmp	r3, #0
 8001684:	db0b      	blt.n	800169e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	f003 021f 	and.w	r2, r3, #31
 800168c:	4907      	ldr	r1, [pc, #28]	; (80016ac <__NVIC_EnableIRQ+0x38>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	2001      	movs	r0, #1
 8001696:	fa00 f202 	lsl.w	r2, r0, r2
 800169a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000e100 	.word	0xe000e100

080016b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	db0a      	blt.n	80016da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	490c      	ldr	r1, [pc, #48]	; (80016fc <__NVIC_SetPriority+0x4c>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	0112      	lsls	r2, r2, #4
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	440b      	add	r3, r1
 80016d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d8:	e00a      	b.n	80016f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4908      	ldr	r1, [pc, #32]	; (8001700 <__NVIC_SetPriority+0x50>)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	3b04      	subs	r3, #4
 80016e8:	0112      	lsls	r2, r2, #4
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	440b      	add	r3, r1
 80016ee:	761a      	strb	r2, [r3, #24]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000e100 	.word	0xe000e100
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001704:	b480      	push	{r7}
 8001706:	b089      	sub	sp, #36	; 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f1c3 0307 	rsb	r3, r3, #7
 800171e:	2b04      	cmp	r3, #4
 8001720:	bf28      	it	cs
 8001722:	2304      	movcs	r3, #4
 8001724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3304      	adds	r3, #4
 800172a:	2b06      	cmp	r3, #6
 800172c:	d902      	bls.n	8001734 <NVIC_EncodePriority+0x30>
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3b03      	subs	r3, #3
 8001732:	e000      	b.n	8001736 <NVIC_EncodePriority+0x32>
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	f04f 32ff 	mov.w	r2, #4294967295
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43da      	mvns	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	401a      	ands	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800174c:	f04f 31ff 	mov.w	r1, #4294967295
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
 8001756:	43d9      	mvns	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	4313      	orrs	r3, r2
         );
}
 800175e:	4618      	mov	r0, r3
 8001760:	3724      	adds	r7, #36	; 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ff4c 	bl	8001610 <__NVIC_SetPriorityGrouping>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001792:	f7ff ff61 	bl	8001658 <__NVIC_GetPriorityGrouping>
 8001796:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	68b9      	ldr	r1, [r7, #8]
 800179c:	6978      	ldr	r0, [r7, #20]
 800179e:	f7ff ffb1 	bl	8001704 <NVIC_EncodePriority>
 80017a2:	4602      	mov	r2, r0
 80017a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff80 	bl	80016b0 <__NVIC_SetPriority>
}
 80017b0:	bf00      	nop
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff54 	bl	8001674 <__NVIC_EnableIRQ>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	e175      	b.n	8001ae0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	f040 8164 	bne.w	8001ada <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x4e>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b12      	cmp	r3, #18
 8001820:	d123      	bne.n	800186a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	08da      	lsrs	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3208      	adds	r2, #8
 800182a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	220f      	movs	r2, #15
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	691a      	ldr	r2, [r3, #16]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	08da      	lsrs	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3208      	adds	r2, #8
 8001864:	69b9      	ldr	r1, [r7, #24]
 8001866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0203 	and.w	r2, r3, #3
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d00b      	beq.n	80018be <HAL_GPIO_Init+0xea>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d007      	beq.n	80018be <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b2:	2b11      	cmp	r3, #17
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d130      	bne.n	8001920 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2203      	movs	r2, #3
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f4:	2201      	movs	r2, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 0201 	and.w	r2, r3, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80be 	beq.w	8001ada <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	4b65      	ldr	r3, [pc, #404]	; (8001af4 <HAL_GPIO_Init+0x320>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a64      	ldr	r2, [pc, #400]	; (8001af4 <HAL_GPIO_Init+0x320>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b62      	ldr	r3, [pc, #392]	; (8001af4 <HAL_GPIO_Init+0x320>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001976:	4a60      	ldr	r2, [pc, #384]	; (8001af8 <HAL_GPIO_Init+0x324>)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	3302      	adds	r3, #2
 800197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	220f      	movs	r2, #15
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a57      	ldr	r2, [pc, #348]	; (8001afc <HAL_GPIO_Init+0x328>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d037      	beq.n	8001a12 <HAL_GPIO_Init+0x23e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a56      	ldr	r2, [pc, #344]	; (8001b00 <HAL_GPIO_Init+0x32c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d031      	beq.n	8001a0e <HAL_GPIO_Init+0x23a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a55      	ldr	r2, [pc, #340]	; (8001b04 <HAL_GPIO_Init+0x330>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d02b      	beq.n	8001a0a <HAL_GPIO_Init+0x236>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a54      	ldr	r2, [pc, #336]	; (8001b08 <HAL_GPIO_Init+0x334>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d025      	beq.n	8001a06 <HAL_GPIO_Init+0x232>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a53      	ldr	r2, [pc, #332]	; (8001b0c <HAL_GPIO_Init+0x338>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d01f      	beq.n	8001a02 <HAL_GPIO_Init+0x22e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a52      	ldr	r2, [pc, #328]	; (8001b10 <HAL_GPIO_Init+0x33c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d019      	beq.n	80019fe <HAL_GPIO_Init+0x22a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a51      	ldr	r2, [pc, #324]	; (8001b14 <HAL_GPIO_Init+0x340>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d013      	beq.n	80019fa <HAL_GPIO_Init+0x226>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a50      	ldr	r2, [pc, #320]	; (8001b18 <HAL_GPIO_Init+0x344>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00d      	beq.n	80019f6 <HAL_GPIO_Init+0x222>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4f      	ldr	r2, [pc, #316]	; (8001b1c <HAL_GPIO_Init+0x348>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d007      	beq.n	80019f2 <HAL_GPIO_Init+0x21e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4e      	ldr	r2, [pc, #312]	; (8001b20 <HAL_GPIO_Init+0x34c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d101      	bne.n	80019ee <HAL_GPIO_Init+0x21a>
 80019ea:	2309      	movs	r3, #9
 80019ec:	e012      	b.n	8001a14 <HAL_GPIO_Init+0x240>
 80019ee:	230a      	movs	r3, #10
 80019f0:	e010      	b.n	8001a14 <HAL_GPIO_Init+0x240>
 80019f2:	2308      	movs	r3, #8
 80019f4:	e00e      	b.n	8001a14 <HAL_GPIO_Init+0x240>
 80019f6:	2307      	movs	r3, #7
 80019f8:	e00c      	b.n	8001a14 <HAL_GPIO_Init+0x240>
 80019fa:	2306      	movs	r3, #6
 80019fc:	e00a      	b.n	8001a14 <HAL_GPIO_Init+0x240>
 80019fe:	2305      	movs	r3, #5
 8001a00:	e008      	b.n	8001a14 <HAL_GPIO_Init+0x240>
 8001a02:	2304      	movs	r3, #4
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x240>
 8001a06:	2303      	movs	r3, #3
 8001a08:	e004      	b.n	8001a14 <HAL_GPIO_Init+0x240>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e002      	b.n	8001a14 <HAL_GPIO_Init+0x240>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <HAL_GPIO_Init+0x240>
 8001a12:	2300      	movs	r3, #0
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	f002 0203 	and.w	r2, r2, #3
 8001a1a:	0092      	lsls	r2, r2, #2
 8001a1c:	4093      	lsls	r3, r2
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a24:	4934      	ldr	r1, [pc, #208]	; (8001af8 <HAL_GPIO_Init+0x324>)
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a32:	4b3c      	ldr	r3, [pc, #240]	; (8001b24 <HAL_GPIO_Init+0x350>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a56:	4a33      	ldr	r2, [pc, #204]	; (8001b24 <HAL_GPIO_Init+0x350>)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a5c:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <HAL_GPIO_Init+0x350>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a80:	4a28      	ldr	r2, [pc, #160]	; (8001b24 <HAL_GPIO_Init+0x350>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a86:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <HAL_GPIO_Init+0x350>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aaa:	4a1e      	ldr	r2, [pc, #120]	; (8001b24 <HAL_GPIO_Init+0x350>)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <HAL_GPIO_Init+0x350>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ad4:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <HAL_GPIO_Init+0x350>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3301      	adds	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	2b0f      	cmp	r3, #15
 8001ae4:	f67f ae86 	bls.w	80017f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ae8:	bf00      	nop
 8001aea:	3724      	adds	r7, #36	; 0x24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40013800 	.word	0x40013800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40021400 	.word	0x40021400
 8001b14:	40021800 	.word	0x40021800
 8001b18:	40021c00 	.word	0x40021c00
 8001b1c:	40022000 	.word	0x40022000
 8001b20:	40022400 	.word	0x40022400
 8001b24:	40013c00 	.word	0x40013c00

08001b28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	887b      	ldrh	r3, [r7, #2]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b40:	2301      	movs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	e001      	b.n	8001b4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]
 8001b64:	4613      	mov	r3, r2
 8001b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b68:	787b      	ldrb	r3, [r7, #1]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b6e:	887a      	ldrh	r2, [r7, #2]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b74:	e003      	b.n	8001b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b76:	887b      	ldrh	r3, [r7, #2]
 8001b78:	041a      	lsls	r2, r3, #16
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	619a      	str	r2, [r3, #24]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40007000 	.word	0x40007000

08001bac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <HAL_PWREx_EnableOverDrive+0x98>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a22      	ldr	r2, [pc, #136]	; (8001c44 <HAL_PWREx_EnableOverDrive+0x98>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_PWREx_EnableOverDrive+0x98>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bce:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1d      	ldr	r2, [pc, #116]	; (8001c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bda:	f7ff fceb 	bl	80015b4 <HAL_GetTick>
 8001bde:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001be0:	e009      	b.n	8001bf6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001be2:	f7ff fce7 	bl	80015b4 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bf0:	d901      	bls.n	8001bf6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e022      	b.n	8001c3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c02:	d1ee      	bne.n	8001be2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c04:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c10:	f7ff fcd0 	bl	80015b4 <HAL_GetTick>
 8001c14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c16:	e009      	b.n	8001c2c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c18:	f7ff fccc 	bl	80015b4 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c26:	d901      	bls.n	8001c2c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e007      	b.n	8001c3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c38:	d1ee      	bne.n	8001c18 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40007000 	.word	0x40007000

08001c4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e25e      	b.n	8002120 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8087 	beq.w	8001d7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c70:	4b96      	ldr	r3, [pc, #600]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d00c      	beq.n	8001c96 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7c:	4b93      	ldr	r3, [pc, #588]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d112      	bne.n	8001cae <HAL_RCC_OscConfig+0x62>
 8001c88:	4b90      	ldr	r3, [pc, #576]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c94:	d10b      	bne.n	8001cae <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c96:	4b8d      	ldr	r3, [pc, #564]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d06c      	beq.n	8001d7c <HAL_RCC_OscConfig+0x130>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d168      	bne.n	8001d7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e238      	b.n	8002120 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x7a>
 8001cb8:	4b84      	ldr	r3, [pc, #528]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a83      	ldr	r2, [pc, #524]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	e02e      	b.n	8001d24 <HAL_RCC_OscConfig+0xd8>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x9c>
 8001cce:	4b7f      	ldr	r3, [pc, #508]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a7e      	ldr	r2, [pc, #504]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4b7c      	ldr	r3, [pc, #496]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a7b      	ldr	r2, [pc, #492]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e01d      	b.n	8001d24 <HAL_RCC_OscConfig+0xd8>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0xc0>
 8001cf2:	4b76      	ldr	r3, [pc, #472]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a75      	ldr	r2, [pc, #468]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b73      	ldr	r3, [pc, #460]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a72      	ldr	r2, [pc, #456]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e00b      	b.n	8001d24 <HAL_RCC_OscConfig+0xd8>
 8001d0c:	4b6f      	ldr	r3, [pc, #444]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a6e      	ldr	r2, [pc, #440]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b6c      	ldr	r3, [pc, #432]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a6b      	ldr	r2, [pc, #428]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d013      	beq.n	8001d54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fc42 	bl	80015b4 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d34:	f7ff fc3e 	bl	80015b4 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e1ec      	b.n	8002120 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	4b61      	ldr	r3, [pc, #388]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0xe8>
 8001d52:	e014      	b.n	8001d7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff fc2e 	bl	80015b4 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fc2a 	bl	80015b4 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e1d8      	b.n	8002120 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6e:	4b57      	ldr	r3, [pc, #348]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x110>
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d069      	beq.n	8001e5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d8a:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d96:	4b4d      	ldr	r3, [pc, #308]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d11c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x190>
 8001da2:	4b4a      	ldr	r3, [pc, #296]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d116      	bne.n	8001ddc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dae:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x17a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e1ac      	b.n	8002120 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc6:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	493d      	ldr	r1, [pc, #244]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dda:	e040      	b.n	8001e5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d023      	beq.n	8001e2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de4:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a38      	ldr	r2, [pc, #224]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7ff fbe0 	bl	80015b4 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df8:	f7ff fbdc 	bl	80015b4 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e18a      	b.n	8002120 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0a:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e16:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4929      	ldr	r1, [pc, #164]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]
 8001e2a:	e018      	b.n	8001e5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e2c:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a26      	ldr	r2, [pc, #152]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff fbbc 	bl	80015b4 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e40:	f7ff fbb8 	bl	80015b4 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e166      	b.n	8002120 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d038      	beq.n	8001edc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d019      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e76:	4a15      	ldr	r2, [pc, #84]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fb99 	bl	80015b4 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e86:	f7ff fb95 	bl	80015b4 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e143      	b.n	8002120 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x23a>
 8001ea4:	e01a      	b.n	8001edc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eaa:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fb7f 	bl	80015b4 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eba:	f7ff fb7b 	bl	80015b4 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d903      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e129      	b.n	8002120 <HAL_RCC_OscConfig+0x4d4>
 8001ecc:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed0:	4b95      	ldr	r3, [pc, #596]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1ee      	bne.n	8001eba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80a4 	beq.w	8002032 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eea:	4b8f      	ldr	r3, [pc, #572]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10d      	bne.n	8001f12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	4b8c      	ldr	r3, [pc, #560]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a8b      	ldr	r2, [pc, #556]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	4b89      	ldr	r3, [pc, #548]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f12:	4b86      	ldr	r3, [pc, #536]	; (800212c <HAL_RCC_OscConfig+0x4e0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d118      	bne.n	8001f50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f1e:	4b83      	ldr	r3, [pc, #524]	; (800212c <HAL_RCC_OscConfig+0x4e0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a82      	ldr	r2, [pc, #520]	; (800212c <HAL_RCC_OscConfig+0x4e0>)
 8001f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f2a:	f7ff fb43 	bl	80015b4 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f32:	f7ff fb3f 	bl	80015b4 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b64      	cmp	r3, #100	; 0x64
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e0ed      	b.n	8002120 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f44:	4b79      	ldr	r3, [pc, #484]	; (800212c <HAL_RCC_OscConfig+0x4e0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d106      	bne.n	8001f66 <HAL_RCC_OscConfig+0x31a>
 8001f58:	4b73      	ldr	r3, [pc, #460]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	4a72      	ldr	r2, [pc, #456]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6713      	str	r3, [r2, #112]	; 0x70
 8001f64:	e02d      	b.n	8001fc2 <HAL_RCC_OscConfig+0x376>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x33c>
 8001f6e:	4b6e      	ldr	r3, [pc, #440]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f72:	4a6d      	ldr	r2, [pc, #436]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7a:	4b6b      	ldr	r3, [pc, #428]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	4a6a      	ldr	r2, [pc, #424]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001f80:	f023 0304 	bic.w	r3, r3, #4
 8001f84:	6713      	str	r3, [r2, #112]	; 0x70
 8001f86:	e01c      	b.n	8001fc2 <HAL_RCC_OscConfig+0x376>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b05      	cmp	r3, #5
 8001f8e:	d10c      	bne.n	8001faa <HAL_RCC_OscConfig+0x35e>
 8001f90:	4b65      	ldr	r3, [pc, #404]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f94:	4a64      	ldr	r2, [pc, #400]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9c:	4b62      	ldr	r3, [pc, #392]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa0:	4a61      	ldr	r2, [pc, #388]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa8:	e00b      	b.n	8001fc2 <HAL_RCC_OscConfig+0x376>
 8001faa:	4b5f      	ldr	r3, [pc, #380]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fae:	4a5e      	ldr	r2, [pc, #376]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb6:	4b5c      	ldr	r3, [pc, #368]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fba:	4a5b      	ldr	r2, [pc, #364]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001fbc:	f023 0304 	bic.w	r3, r3, #4
 8001fc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d015      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fca:	f7ff faf3 	bl	80015b4 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7ff faef 	bl	80015b4 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e09b      	b.n	8002120 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	4b4f      	ldr	r3, [pc, #316]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0ee      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x386>
 8001ff4:	e014      	b.n	8002020 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff6:	f7ff fadd 	bl	80015b4 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7ff fad9 	bl	80015b4 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	; 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e085      	b.n	8002120 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002014:	4b44      	ldr	r3, [pc, #272]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1ee      	bne.n	8001ffe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002020:	7dfb      	ldrb	r3, [r7, #23]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d105      	bne.n	8002032 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002026:	4b40      	ldr	r3, [pc, #256]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a3f      	ldr	r2, [pc, #252]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 800202c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d071      	beq.n	800211e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800203a:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b08      	cmp	r3, #8
 8002044:	d069      	beq.n	800211a <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d14b      	bne.n	80020e6 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204e:	4b36      	ldr	r3, [pc, #216]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a35      	ldr	r2, [pc, #212]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8002054:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205a:	f7ff faab 	bl	80015b4 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002062:	f7ff faa7 	bl	80015b4 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e055      	b.n	8002120 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002074:	4b2c      	ldr	r3, [pc, #176]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f0      	bne.n	8002062 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69da      	ldr	r2, [r3, #28]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	019b      	lsls	r3, r3, #6
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	085b      	lsrs	r3, r3, #1
 8002098:	3b01      	subs	r3, #1
 800209a:	041b      	lsls	r3, r3, #16
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	061b      	lsls	r3, r3, #24
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	071b      	lsls	r3, r3, #28
 80020ac:	491e      	ldr	r1, [pc, #120]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 80020b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7ff fa79 	bl	80015b4 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c6:	f7ff fa75 	bl	80015b4 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e023      	b.n	8002120 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x47a>
 80020e4:	e01b      	b.n	800211e <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a0f      	ldr	r2, [pc, #60]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 80020ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7ff fa5f 	bl	80015b4 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fa:	f7ff fa5b 	bl	80015b4 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e009      	b.n	8002120 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_RCC_OscConfig+0x4dc>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f0      	bne.n	80020fa <HAL_RCC_OscConfig+0x4ae>
 8002118:	e001      	b.n	800211e <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40023800 	.word	0x40023800
 800212c:	40007000 	.word	0x40007000

08002130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0ce      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002148:	4b69      	ldr	r3, [pc, #420]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d910      	bls.n	8002178 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b66      	ldr	r3, [pc, #408]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 020f 	bic.w	r2, r3, #15
 800215e:	4964      	ldr	r1, [pc, #400]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b62      	ldr	r3, [pc, #392]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0b6      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d020      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002190:	4b58      	ldr	r3, [pc, #352]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	4a57      	ldr	r2, [pc, #348]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800219a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a8:	4b52      	ldr	r3, [pc, #328]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	4a51      	ldr	r2, [pc, #324]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b4:	4b4f      	ldr	r3, [pc, #316]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	494c      	ldr	r1, [pc, #304]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d040      	beq.n	8002254 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d107      	bne.n	80021ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	4b46      	ldr	r3, [pc, #280]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d115      	bne.n	8002212 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e07d      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f2:	4b40      	ldr	r3, [pc, #256]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e071      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002202:	4b3c      	ldr	r3, [pc, #240]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e069      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002212:	4b38      	ldr	r3, [pc, #224]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f023 0203 	bic.w	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4935      	ldr	r1, [pc, #212]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	4313      	orrs	r3, r2
 8002222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002224:	f7ff f9c6 	bl	80015b4 <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222a:	e00a      	b.n	8002242 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222c:	f7ff f9c2 	bl	80015b4 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	; 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e051      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002242:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 020c 	and.w	r2, r3, #12
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	429a      	cmp	r2, r3
 8002252:	d1eb      	bne.n	800222c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002254:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d210      	bcs.n	8002284 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 020f 	bic.w	r2, r3, #15
 800226a:	4921      	ldr	r1, [pc, #132]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e030      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002290:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4915      	ldr	r1, [pc, #84]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	490d      	ldr	r1, [pc, #52]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022c2:	f000 f881 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 80022c6:	4601      	mov	r1, r0
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 80022d4:	5cd3      	ldrb	r3, [r2, r3]
 80022d6:	fa21 f303 	lsr.w	r3, r1, r3
 80022da:	4a08      	ldr	r2, [pc, #32]	; (80022fc <HAL_RCC_ClockConfig+0x1cc>)
 80022dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80022de:	2000      	movs	r0, #0
 80022e0:	f7ff f832 	bl	8001348 <HAL_InitTick>

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023c00 	.word	0x40023c00
 80022f4:	40023800 	.word	0x40023800
 80022f8:	08006ae0 	.word	0x08006ae0
 80022fc:	20000000 	.word	0x20000000

08002300 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08c      	sub	sp, #48	; 0x30
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d127      	bne.n	8002362 <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <HAL_RCC_MCOConfig+0xbc>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a29      	ldr	r2, [pc, #164]	; (80023bc <HAL_RCC_MCOConfig+0xbc>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b27      	ldr	r3, [pc, #156]	; (80023bc <HAL_RCC_MCOConfig+0xbc>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	61bb      	str	r3, [r7, #24]
 8002328:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800232a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800232e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002334:	2303      	movs	r3, #3
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800233c:	2300      	movs	r3, #0
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002340:	f107 031c 	add.w	r3, r7, #28
 8002344:	4619      	mov	r1, r3
 8002346:	481e      	ldr	r0, [pc, #120]	; (80023c0 <HAL_RCC_MCOConfig+0xc0>)
 8002348:	f7ff fa44 	bl	80017d4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800234c:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <HAL_RCC_MCOConfig+0xbc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	430b      	orrs	r3, r1
 800235a:	4918      	ldr	r1, [pc, #96]	; (80023bc <HAL_RCC_MCOConfig+0xbc>)
 800235c:	4313      	orrs	r3, r2
 800235e:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 8002360:	e027      	b.n	80023b2 <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_RCC_MCOConfig+0xbc>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a15      	ldr	r2, [pc, #84]	; (80023bc <HAL_RCC_MCOConfig+0xbc>)
 8002368:	f043 0304 	orr.w	r3, r3, #4
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_RCC_MCOConfig+0xbc>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800237a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800238c:	2300      	movs	r3, #0
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002390:	f107 031c 	add.w	r3, r7, #28
 8002394:	4619      	mov	r1, r3
 8002396:	480b      	ldr	r0, [pc, #44]	; (80023c4 <HAL_RCC_MCOConfig+0xc4>)
 8002398:	f7ff fa1c 	bl	80017d4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <HAL_RCC_MCOConfig+0xbc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	00d9      	lsls	r1, r3, #3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	430b      	orrs	r3, r1
 80023ac:	4903      	ldr	r1, [pc, #12]	; (80023bc <HAL_RCC_MCOConfig+0xbc>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]
}
 80023b2:	bf00      	nop
 80023b4:	3730      	adds	r7, #48	; 0x30
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40020000 	.word	0x40020000
 80023c4:	40020800 	.word	0x40020800

080023c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	2300      	movs	r3, #0
 80023d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023de:	4b50      	ldr	r3, [pc, #320]	; (8002520 <HAL_RCC_GetSysClockFreq+0x158>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d007      	beq.n	80023fa <HAL_RCC_GetSysClockFreq+0x32>
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d008      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0x38>
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f040 808d 	bne.w	800250e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023f4:	4b4b      	ldr	r3, [pc, #300]	; (8002524 <HAL_RCC_GetSysClockFreq+0x15c>)
 80023f6:	60bb      	str	r3, [r7, #8]
       break;
 80023f8:	e08c      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023fa:	4b4b      	ldr	r3, [pc, #300]	; (8002528 <HAL_RCC_GetSysClockFreq+0x160>)
 80023fc:	60bb      	str	r3, [r7, #8]
      break;
 80023fe:	e089      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002400:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_GetSysClockFreq+0x158>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002408:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800240a:	4b45      	ldr	r3, [pc, #276]	; (8002520 <HAL_RCC_GetSysClockFreq+0x158>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d023      	beq.n	800245e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002416:	4b42      	ldr	r3, [pc, #264]	; (8002520 <HAL_RCC_GetSysClockFreq+0x158>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	099b      	lsrs	r3, r3, #6
 800241c:	f04f 0400 	mov.w	r4, #0
 8002420:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	ea03 0501 	and.w	r5, r3, r1
 800242c:	ea04 0602 	and.w	r6, r4, r2
 8002430:	4a3d      	ldr	r2, [pc, #244]	; (8002528 <HAL_RCC_GetSysClockFreq+0x160>)
 8002432:	fb02 f106 	mul.w	r1, r2, r6
 8002436:	2200      	movs	r2, #0
 8002438:	fb02 f205 	mul.w	r2, r2, r5
 800243c:	440a      	add	r2, r1
 800243e:	493a      	ldr	r1, [pc, #232]	; (8002528 <HAL_RCC_GetSysClockFreq+0x160>)
 8002440:	fba5 0101 	umull	r0, r1, r5, r1
 8002444:	1853      	adds	r3, r2, r1
 8002446:	4619      	mov	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f04f 0400 	mov.w	r4, #0
 800244e:	461a      	mov	r2, r3
 8002450:	4623      	mov	r3, r4
 8002452:	f7fd fef1 	bl	8000238 <__aeabi_uldivmod>
 8002456:	4603      	mov	r3, r0
 8002458:	460c      	mov	r4, r1
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	e049      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245e:	4b30      	ldr	r3, [pc, #192]	; (8002520 <HAL_RCC_GetSysClockFreq+0x158>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	099b      	lsrs	r3, r3, #6
 8002464:	f04f 0400 	mov.w	r4, #0
 8002468:	f240 11ff 	movw	r1, #511	; 0x1ff
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	ea03 0501 	and.w	r5, r3, r1
 8002474:	ea04 0602 	and.w	r6, r4, r2
 8002478:	4629      	mov	r1, r5
 800247a:	4632      	mov	r2, r6
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	f04f 0400 	mov.w	r4, #0
 8002484:	0154      	lsls	r4, r2, #5
 8002486:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800248a:	014b      	lsls	r3, r1, #5
 800248c:	4619      	mov	r1, r3
 800248e:	4622      	mov	r2, r4
 8002490:	1b49      	subs	r1, r1, r5
 8002492:	eb62 0206 	sbc.w	r2, r2, r6
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	f04f 0400 	mov.w	r4, #0
 800249e:	0194      	lsls	r4, r2, #6
 80024a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024a4:	018b      	lsls	r3, r1, #6
 80024a6:	1a5b      	subs	r3, r3, r1
 80024a8:	eb64 0402 	sbc.w	r4, r4, r2
 80024ac:	f04f 0100 	mov.w	r1, #0
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	00e2      	lsls	r2, r4, #3
 80024b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024ba:	00d9      	lsls	r1, r3, #3
 80024bc:	460b      	mov	r3, r1
 80024be:	4614      	mov	r4, r2
 80024c0:	195b      	adds	r3, r3, r5
 80024c2:	eb44 0406 	adc.w	r4, r4, r6
 80024c6:	f04f 0100 	mov.w	r1, #0
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	02a2      	lsls	r2, r4, #10
 80024d0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024d4:	0299      	lsls	r1, r3, #10
 80024d6:	460b      	mov	r3, r1
 80024d8:	4614      	mov	r4, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	4621      	mov	r1, r4
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f04f 0400 	mov.w	r4, #0
 80024e4:	461a      	mov	r2, r3
 80024e6:	4623      	mov	r3, r4
 80024e8:	f7fd fea6 	bl	8000238 <__aeabi_uldivmod>
 80024ec:	4603      	mov	r3, r0
 80024ee:	460c      	mov	r4, r1
 80024f0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_GetSysClockFreq+0x158>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	0c1b      	lsrs	r3, r3, #16
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	3301      	adds	r3, #1
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	fbb2 f3f3 	udiv	r3, r2, r3
 800250a:	60bb      	str	r3, [r7, #8]
      break;
 800250c:	e002      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002510:	60bb      	str	r3, [r7, #8]
      break;
 8002512:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002514:	68bb      	ldr	r3, [r7, #8]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800
 8002524:	00f42400 	.word	0x00f42400
 8002528:	017d7840 	.word	0x017d7840

0800252c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002530:	4b03      	ldr	r3, [pc, #12]	; (8002540 <HAL_RCC_GetHCLKFreq+0x14>)
 8002532:	681b      	ldr	r3, [r3, #0]
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000000 	.word	0x20000000

08002544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002548:	f7ff fff0 	bl	800252c <HAL_RCC_GetHCLKFreq>
 800254c:	4601      	mov	r1, r0
 800254e:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	0a9b      	lsrs	r3, r3, #10
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	4a03      	ldr	r2, [pc, #12]	; (8002568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800255a:	5cd3      	ldrb	r3, [r2, r3]
 800255c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002560:	4618      	mov	r0, r3
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40023800 	.word	0x40023800
 8002568:	08006af0 	.word	0x08006af0

0800256c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002570:	f7ff ffdc 	bl	800252c <HAL_RCC_GetHCLKFreq>
 8002574:	4601      	mov	r1, r0
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	0b5b      	lsrs	r3, r3, #13
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	4a03      	ldr	r2, [pc, #12]	; (8002590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002582:	5cd3      	ldrb	r3, [r2, r3]
 8002584:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002588:	4618      	mov	r0, r3
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40023800 	.word	0x40023800
 8002590:	08006af0 	.word	0x08006af0

08002594 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	220f      	movs	r2, #15
 80025a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 0203 	and.w	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	08db      	lsrs	r3, r3, #3
 80025ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_RCC_GetClockConfig+0x60>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 020f 	and.w	r2, r3, #15
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	601a      	str	r2, [r3, #0]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40023c00 	.word	0x40023c00

080025f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d012      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002620:	4b69      	ldr	r3, [pc, #420]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a68      	ldr	r2, [pc, #416]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002626:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800262a:	6093      	str	r3, [r2, #8]
 800262c:	4b66      	ldr	r3, [pc, #408]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002634:	4964      	ldr	r1, [pc, #400]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002642:	2301      	movs	r3, #1
 8002644:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d017      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002652:	4b5d      	ldr	r3, [pc, #372]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002658:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002660:	4959      	ldr	r1, [pc, #356]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002670:	d101      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002672:	2301      	movs	r3, #1
 8002674:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800267e:	2301      	movs	r3, #1
 8002680:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d017      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800268e:	4b4e      	ldr	r3, [pc, #312]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002694:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	494a      	ldr	r1, [pc, #296]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ac:	d101      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026ae:	2301      	movs	r3, #1
 80026b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 808b 	beq.w	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026dc:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	4a39      	ldr	r2, [pc, #228]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e6:	6413      	str	r3, [r2, #64]	; 0x40
 80026e8:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026f4:	4b35      	ldr	r3, [pc, #212]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a34      	ldr	r2, [pc, #208]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002700:	f7fe ff58 	bl	80015b4 <HAL_GetTick>
 8002704:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002708:	f7fe ff54 	bl	80015b4 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e38d      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800271a:	4b2c      	ldr	r3, [pc, #176]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002726:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d035      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	429a      	cmp	r2, r3
 8002742:	d02e      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002744:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800274c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800274e:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800275a:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	4a1a      	ldr	r2, [pc, #104]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002764:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002766:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	d114      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7fe ff1c 	bl	80015b4 <HAL_GetTick>
 800277c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277e:	e00a      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002780:	f7fe ff18 	bl	80015b4 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e34f      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002796:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0ee      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027ae:	d111      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027be:	400b      	ands	r3, r1
 80027c0:	4901      	ldr	r1, [pc, #4]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
 80027c6:	e00b      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40007000 	.word	0x40007000
 80027d0:	0ffffcff 	.word	0x0ffffcff
 80027d4:	4bb3      	ldr	r3, [pc, #716]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4ab2      	ldr	r2, [pc, #712]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027de:	6093      	str	r3, [r2, #8]
 80027e0:	4bb0      	ldr	r3, [pc, #704]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ec:	49ad      	ldr	r1, [pc, #692]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d010      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027fe:	4ba9      	ldr	r3, [pc, #676]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002804:	4aa7      	ldr	r2, [pc, #668]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800280a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800280e:	4ba5      	ldr	r3, [pc, #660]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002810:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002818:	49a2      	ldr	r1, [pc, #648]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800282c:	4b9d      	ldr	r3, [pc, #628]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800283a:	499a      	ldr	r1, [pc, #616]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800284e:	4b95      	ldr	r3, [pc, #596]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002854:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800285c:	4991      	ldr	r1, [pc, #580]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002870:	4b8c      	ldr	r3, [pc, #560]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800287e:	4989      	ldr	r1, [pc, #548]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002892:	4b84      	ldr	r3, [pc, #528]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002898:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	4980      	ldr	r1, [pc, #512]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028b4:	4b7b      	ldr	r3, [pc, #492]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ba:	f023 0203 	bic.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	4978      	ldr	r1, [pc, #480]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028d6:	4b73      	ldr	r3, [pc, #460]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028dc:	f023 020c 	bic.w	r2, r3, #12
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e4:	496f      	ldr	r1, [pc, #444]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028f8:	4b6a      	ldr	r3, [pc, #424]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002906:	4967      	ldr	r1, [pc, #412]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800291a:	4b62      	ldr	r3, [pc, #392]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800291c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002920:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002928:	495e      	ldr	r1, [pc, #376]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800293c:	4b59      	ldr	r3, [pc, #356]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002942:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294a:	4956      	ldr	r1, [pc, #344]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800295e:	4b51      	ldr	r3, [pc, #324]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002964:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296c:	494d      	ldr	r1, [pc, #308]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002980:	4b48      	ldr	r3, [pc, #288]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002986:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298e:	4945      	ldr	r1, [pc, #276]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029a2:	4b40      	ldr	r3, [pc, #256]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b0:	493c      	ldr	r1, [pc, #240]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029c4:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029d2:	4934      	ldr	r1, [pc, #208]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d011      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029e6:	4b2f      	ldr	r3, [pc, #188]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029f4:	492b      	ldr	r1, [pc, #172]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a04:	d101      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a06:	2301      	movs	r3, #1
 8002a08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a26:	4b1f      	ldr	r3, [pc, #124]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a34:	491b      	ldr	r1, [pc, #108]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00b      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a48:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a58:	4912      	ldr	r1, [pc, #72]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00b      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a7c:	4909      	ldr	r1, [pc, #36]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00f      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa0:	e002      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	4985      	ldr	r1, [pc, #532]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00b      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002abc:	4b80      	ldr	r3, [pc, #512]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ac2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002acc:	497c      	ldr	r1, [pc, #496]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d005      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ae2:	f040 80d6 	bne.w	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ae6:	4b76      	ldr	r3, [pc, #472]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a75      	ldr	r2, [pc, #468]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002aec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af2:	f7fe fd5f 	bl	80015b4 <HAL_GetTick>
 8002af6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002afa:	f7fe fd5b 	bl	80015b4 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b64      	cmp	r3, #100	; 0x64
 8002b06:	d901      	bls.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e194      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b0c:	4b6c      	ldr	r3, [pc, #432]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f0      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d021      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d11d      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b2c:	4b64      	ldr	r3, [pc, #400]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b32:	0c1b      	lsrs	r3, r3, #16
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b3a:	4b61      	ldr	r3, [pc, #388]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b40:	0e1b      	lsrs	r3, r3, #24
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	019a      	lsls	r2, r3, #6
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	041b      	lsls	r3, r3, #16
 8002b52:	431a      	orrs	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	061b      	lsls	r3, r3, #24
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	071b      	lsls	r3, r3, #28
 8002b60:	4957      	ldr	r1, [pc, #348]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d02e      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b92:	d129      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b94:	4b4a      	ldr	r3, [pc, #296]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9a:	0c1b      	lsrs	r3, r3, #16
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ba2:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba8:	0f1b      	lsrs	r3, r3, #28
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	019a      	lsls	r2, r3, #6
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	041b      	lsls	r3, r3, #16
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	071b      	lsls	r3, r3, #28
 8002bc8:	493d      	ldr	r1, [pc, #244]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bd0:	4b3b      	ldr	r3, [pc, #236]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bd6:	f023 021f 	bic.w	r2, r3, #31
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	3b01      	subs	r3, #1
 8002be0:	4937      	ldr	r1, [pc, #220]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01d      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bf4:	4b32      	ldr	r3, [pc, #200]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bfa:	0e1b      	lsrs	r3, r3, #24
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c02:	4b2f      	ldr	r3, [pc, #188]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c08:	0f1b      	lsrs	r3, r3, #28
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	019a      	lsls	r2, r3, #6
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	041b      	lsls	r3, r3, #16
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	061b      	lsls	r3, r3, #24
 8002c22:	431a      	orrs	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	071b      	lsls	r3, r3, #28
 8002c28:	4925      	ldr	r1, [pc, #148]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d011      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	019a      	lsls	r2, r3, #6
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	041b      	lsls	r3, r3, #16
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	061b      	lsls	r3, r3, #24
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	071b      	lsls	r3, r3, #28
 8002c58:	4919      	ldr	r1, [pc, #100]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c60:	4b17      	ldr	r3, [pc, #92]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a16      	ldr	r2, [pc, #88]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c6c:	f7fe fca2 	bl	80015b4 <HAL_GetTick>
 8002c70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c74:	f7fe fc9e 	bl	80015b4 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	; 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e0d7      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	f040 80cd 	bne.w	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a08      	ldr	r2, [pc, #32]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca6:	f7fe fc85 	bl	80015b4 <HAL_GetTick>
 8002caa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cae:	f7fe fc81 	bl	80015b4 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b64      	cmp	r3, #100	; 0x64
 8002cba:	d903      	bls.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0ba      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002cc0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cc4:	4b5e      	ldr	r3, [pc, #376]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd0:	d0ed      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d02e      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d12a      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cfa:	4b51      	ldr	r3, [pc, #324]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d00:	0c1b      	lsrs	r3, r3, #16
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d08:	4b4d      	ldr	r3, [pc, #308]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	0f1b      	lsrs	r3, r3, #28
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	019a      	lsls	r2, r3, #6
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	041b      	lsls	r3, r3, #16
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	061b      	lsls	r3, r3, #24
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	071b      	lsls	r3, r3, #28
 8002d2e:	4944      	ldr	r1, [pc, #272]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d36:	4b42      	ldr	r3, [pc, #264]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d3c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	3b01      	subs	r3, #1
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	493d      	ldr	r1, [pc, #244]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d022      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d64:	d11d      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d66:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6c:	0e1b      	lsrs	r3, r3, #24
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d74:	4b32      	ldr	r3, [pc, #200]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	0f1b      	lsrs	r3, r3, #28
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	019a      	lsls	r2, r3, #6
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	041b      	lsls	r3, r3, #16
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	061b      	lsls	r3, r3, #24
 8002d94:	431a      	orrs	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	071b      	lsls	r3, r3, #28
 8002d9a:	4929      	ldr	r1, [pc, #164]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d028      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dae:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db4:	0e1b      	lsrs	r3, r3, #24
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002dbc:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	019a      	lsls	r2, r3, #6
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	041b      	lsls	r3, r3, #16
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	061b      	lsls	r3, r3, #24
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	071b      	lsls	r3, r3, #28
 8002de2:	4917      	ldr	r1, [pc, #92]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002dea:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	4911      	ldr	r1, [pc, #68]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a0e      	ldr	r2, [pc, #56]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e0c:	f7fe fbd2 	bl	80015b4 <HAL_GetTick>
 8002e10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e14:	f7fe fbce 	bl	80015b4 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	; 0x64
 8002e20:	d901      	bls.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e007      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e32:	d1ef      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023800 	.word	0x40023800

08002e44 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e01d      	b.n	8002e92 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d105      	bne.n	8002e6e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fe f8fb 	bl	8001064 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2203      	movs	r2, #3
 8002e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f80f 	bl	8002e9a <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002e9a:	b5b0      	push	{r4, r5, r7, lr}
 8002e9c:	b08e      	sub	sp, #56	; 0x38
 8002e9e:	af04      	add	r7, sp, #16
 8002ea0:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002eba:	2376      	movs	r3, #118	; 0x76
 8002ebc:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681d      	ldr	r5, [r3, #0]
 8002ec2:	466c      	mov	r4, sp
 8002ec4:	f107 0318 	add.w	r3, r7, #24
 8002ec8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ecc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002ed0:	f107 030c 	add.w	r3, r7, #12
 8002ed4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	f002 f95c 	bl	8005194 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eea:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f002 f999 	bl	8005228 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f04:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 8002f06:	2002      	movs	r0, #2
 8002f08:	f7fe fb60 	bl	80015cc <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fee3 	bl	8003cd8 <SD_PowerON>
 8002f12:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e013      	b.n	8002f5a <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fe07 	bl	8003b46 <SD_InitCard>
 8002f38:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00b      	beq.n	8002f58 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3728      	adds	r7, #40	; 0x28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bdb0      	pop	{r4, r5, r7, pc}

08002f62 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002f62:	b590      	push	{r4, r7, lr}
 8002f64:	b08f      	sub	sp, #60	; 0x3c
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002f70:	2300      	movs	r3, #0
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8002f74:	f7fe fb1e 	bl	80015b4 <HAL_GetTick>
 8002f78:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d107      	bne.n	8002f98 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e176      	b.n	8003286 <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	f040 8169 	bne.w	8003278 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	441a      	add	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d907      	bls.n	8002fca <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e15d      	b.n	8003286 <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2203      	movs	r2, #3
 8002fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d002      	beq.n	8002fe8 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	025b      	lsls	r3, r3, #9
 8002fe6:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f002 f9ad 	bl	8005350 <SDMMC_CmdBlockLength>
 8002ff6:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d010      	beq.n	8003020 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003006:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800300c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300e:	431a      	orrs	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e132      	b.n	8003286 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003020:	f04f 33ff 	mov.w	r3, #4294967295
 8003024:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	025b      	lsls	r3, r3, #9
 800302a:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800302c:	2390      	movs	r3, #144	; 0x90
 800302e:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003030:	2302      	movs	r3, #2
 8003032:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003034:	2300      	movs	r3, #0
 8003036:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003038:	2301      	movs	r3, #1
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f107 0210 	add.w	r2, r7, #16
 8003044:	4611      	mov	r1, r2
 8003046:	4618      	mov	r0, r3
 8003048:	f002 f956 	bl	80052f8 <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d90a      	bls.n	8003068 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2202      	movs	r2, #2
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4618      	mov	r0, r3
 8003060:	f002 f9be 	bl	80053e0 <SDMMC_CmdReadMultiBlock>
 8003064:	6378      	str	r0, [r7, #52]	; 0x34
 8003066:	e009      	b.n	800307c <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4618      	mov	r0, r3
 8003076:	f002 f98f 	bl	8005398 <SDMMC_CmdReadSingleBlock>
 800307a:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800307c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307e:	2b00      	cmp	r3, #0
 8003080:	d04a      	beq.n	8003118 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003092:	431a      	orrs	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0f0      	b.n	8003286 <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d016      	beq.n	80030e0 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80030b2:	2300      	movs	r3, #0
 80030b4:	633b      	str	r3, [r7, #48]	; 0x30
 80030b6:	e00d      	b.n	80030d4 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6819      	ldr	r1, [r3, #0]
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c2:	18d4      	adds	r4, r2, r3
 80030c4:	4608      	mov	r0, r1
 80030c6:	f002 f891 	bl	80051ec <SDMMC_ReadFIFO>
 80030ca:	4603      	mov	r3, r0
 80030cc:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d0:	3301      	adds	r3, #1
 80030d2:	633b      	str	r3, [r7, #48]	; 0x30
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	2b07      	cmp	r3, #7
 80030d8:	d9ee      	bls.n	80030b8 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 80030da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030dc:	3320      	adds	r3, #32
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80030e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <HAL_SD_ReadBlocks+0x194>
 80030e6:	f7fe fa65 	bl	80015b4 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d810      	bhi.n	8003118 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80030fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e0b6      	b.n	8003286 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0be      	beq.n	80030a4 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d020      	beq.n	8003176 <HAL_SD_ReadBlocks+0x214>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d91d      	bls.n	8003176 <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	2b03      	cmp	r3, #3
 8003140:	d019      	beq.n	8003176 <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f002 f9b6 	bl	80054b8 <SDMMC_CmdStopTransfer>
 800314c:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 800314e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003150:	2b00      	cmp	r3, #0
 8003152:	d010      	beq.n	8003176 <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800315c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003164:	431a      	orrs	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e087      	b.n	8003286 <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d010      	beq.n	80031a6 <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800318c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	f043 0208 	orr.w	r2, r3, #8
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e06f      	b.n	8003286 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d010      	beq.n	80031d6 <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80031bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	f043 0202 	orr.w	r2, r3, #2
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e057      	b.n	8003286 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d037      	beq.n	8003254 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80031ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	f043 0220 	orr.w	r2, r3, #32
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e03f      	b.n	8003286 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f001 ffee 	bl	80051ec <SDMMC_ReadFIFO>
 8003210:	4602      	mov	r2, r0
 8003212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003214:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	3304      	adds	r3, #4
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 800321c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800321e:	2b00      	cmp	r3, #0
 8003220:	d007      	beq.n	8003232 <HAL_SD_ReadBlocks+0x2d0>
 8003222:	f7fe f9c7 	bl	80015b4 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800322e:	429a      	cmp	r2, r3
 8003230:	d810      	bhi.n	8003254 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800323a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e018      	b.n	8003286 <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1d1      	bne.n	8003206 <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800326a:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	e006      	b.n	8003286 <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
  }
}
 8003286:	4618      	mov	r0, r3
 8003288:	373c      	adds	r7, #60	; 0x3c
 800328a:	46bd      	mov	sp, r7
 800328c:	bd90      	pop	{r4, r7, pc}

0800328e <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b08e      	sub	sp, #56	; 0x38
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800329c:	2300      	movs	r3, #0
 800329e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80032a0:	f7fe f988 	bl	80015b4 <HAL_GetTick>
 80032a4:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d107      	bne.n	80032c4 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e147      	b.n	8003554 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	f040 813a 	bne.w	8003546 <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	441a      	add	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d907      	bls.n	80032f6 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e12e      	b.n	8003554 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2203      	movs	r2, #3
 80032fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2200      	movs	r2, #0
 8003304:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	2b01      	cmp	r3, #1
 800330c:	d002      	beq.n	8003314 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	025b      	lsls	r3, r3, #9
 8003312:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f44f 7100 	mov.w	r1, #512	; 0x200
 800331c:	4618      	mov	r0, r3
 800331e:	f002 f817 	bl	8005350 <SDMMC_CmdBlockLength>
 8003322:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8003324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003326:	2b00      	cmp	r3, #0
 8003328:	d010      	beq.n	800334c <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003332:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333a:	431a      	orrs	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e103      	b.n	8003554 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d90a      	bls.n	8003368 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4618      	mov	r0, r3
 8003360:	f002 f886 	bl	8005470 <SDMMC_CmdWriteMultiBlock>
 8003364:	6378      	str	r0, [r7, #52]	; 0x34
 8003366:	e009      	b.n	800337c <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2210      	movs	r2, #16
 800336c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4618      	mov	r0, r3
 8003376:	f002 f857 	bl	8005428 <SDMMC_CmdWriteSingleBlock>
 800337a:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800337c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800337e:	2b00      	cmp	r3, #0
 8003380:	d010      	beq.n	80033a4 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800338a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003392:	431a      	orrs	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0d7      	b.n	8003554 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80033a4:	f04f 33ff 	mov.w	r3, #4294967295
 80033a8:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	025b      	lsls	r3, r3, #9
 80033ae:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80033b0:	2390      	movs	r3, #144	; 0x90
 80033b2:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80033b4:	2300      	movs	r3, #0
 80033b6:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80033bc:	2301      	movs	r3, #1
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f107 0210 	add.w	r2, r7, #16
 80033c8:	4611      	mov	r1, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f001 ff94 	bl	80052f8 <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80033d0:	e037      	b.n	8003442 <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d014      	beq.n	800340a <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80033e0:	2300      	movs	r3, #0
 80033e2:	633b      	str	r3, [r7, #48]	; 0x30
 80033e4:	e00b      	b.n	80033fe <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f0:	4413      	add	r3, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	f001 ff07 	bl	8005206 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	3301      	adds	r3, #1
 80033fc:	633b      	str	r3, [r7, #48]	; 0x30
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	2b07      	cmp	r3, #7
 8003402:	d9f0      	bls.n	80033e6 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	3320      	adds	r3, #32
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 800340a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_SD_WriteBlocks+0x192>
 8003410:	f7fe f8d0 	bl	80015b4 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800341c:	429a      	cmp	r2, r3
 800341e:	d810      	bhi.n	8003442 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003428:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800342e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003430:	431a      	orrs	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e088      	b.n	8003554 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003448:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0c0      	beq.n	80033d2 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d020      	beq.n	80034a0 <HAL_SD_WriteBlocks+0x212>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d91d      	bls.n	80034a0 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003468:	2b03      	cmp	r3, #3
 800346a:	d019      	beq.n	80034a0 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f002 f821 	bl	80054b8 <SDMMC_CmdStopTransfer>
 8003476:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8003478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347a:	2b00      	cmp	r3, #0
 800347c:	d010      	beq.n	80034a0 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003486:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800348c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348e:	431a      	orrs	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e059      	b.n	8003554 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d010      	beq.n	80034d0 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034bc:	f043 0208 	orr.w	r2, r3, #8
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e041      	b.n	8003554 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d010      	beq.n	8003500 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	f043 0202 	orr.w	r2, r3, #2
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e029      	b.n	8003554 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b00      	cmp	r3, #0
 800350c:	d010      	beq.n	8003530 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003516:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	f043 0210 	orr.w	r2, r3, #16
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e011      	b.n	8003554 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003538:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	e006      	b.n	8003554 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
  }
}
 8003554:	4618      	mov	r0, r3
 8003556:	3738      	adds	r7, #56	; 0x38
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800356e:	0e1b      	lsrs	r3, r3, #24
 8003570:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	099b      	lsrs	r3, r3, #6
 8003576:	b2db      	uxtb	r3, r3
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	b2da      	uxtb	r2, r3
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	b2da      	uxtb	r2, r3
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	b2da      	uxtb	r2, r3
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035d8:	0e1b      	lsrs	r3, r3, #24
 80035da:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	88db      	ldrh	r3, [r3, #6]
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	091b      	lsrs	r3, r3, #4
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	b29b      	uxth	r3, r3
 8003604:	4313      	orrs	r3, r2
 8003606:	b29a      	uxth	r2, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	b2da      	uxtb	r2, r3
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	b2db      	uxtb	r3, r3
 8003622:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	09db      	lsrs	r3, r3, #7
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	b2da      	uxtb	r2, r3
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	099b      	lsrs	r3, r3, #6
 8003638:	b2db      	uxtb	r3, r3
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	b2da      	uxtb	r2, r3
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	b2da      	uxtb	r2, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	b2db      	uxtb	r3, r3
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	b2da      	uxtb	r2, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2200      	movs	r2, #0
 8003668:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	2b00      	cmp	r3, #0
 8003670:	f040 8086 	bne.w	8003780 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	029b      	lsls	r3, r3, #10
 8003678:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003684:	b2db      	uxtb	r3, r3
 8003686:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	431a      	orrs	r2, r3
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800369a:	0e1b      	lsrs	r3, r3, #24
 800369c:	b2db      	uxtb	r3, r3
 800369e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	099b      	lsrs	r3, r3, #6
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	431a      	orrs	r2, r3
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	08db      	lsrs	r3, r3, #3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	089b      	lsrs	r3, r3, #2
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	f003 0306 	and.w	r3, r3, #6
 8003706:	b2da      	uxtb	r2, r3
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003710:	0a1b      	lsrs	r3, r3, #8
 8003712:	b2db      	uxtb	r3, r3
 8003714:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	7e1b      	ldrb	r3, [r3, #24]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	09db      	lsrs	r3, r3, #7
 8003720:	b2db      	uxtb	r3, r3
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	b2db      	uxtb	r3, r3
 8003728:	4313      	orrs	r3, r2
 800372a:	b2da      	uxtb	r2, r3
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	7e1b      	ldrb	r3, [r3, #24]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	3302      	adds	r3, #2
 8003742:	2201      	movs	r2, #1
 8003744:	409a      	lsls	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374a:	fb02 f203 	mul.w	r2, r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	7a1b      	ldrb	r3, [r3, #8]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	2301      	movs	r3, #1
 800375c:	4093      	lsls	r3, r2
 800375e:	461a      	mov	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800376c:	0a52      	lsrs	r2, r2, #9
 800376e:	fb02 f203 	mul.w	r2, r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800377c:	661a      	str	r2, [r3, #96]	; 0x60
 800377e:	e04d      	b.n	800381c <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003784:	2b01      	cmp	r3, #1
 8003786:	d138      	bne.n	80037fa <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800378c:	b2db      	uxtb	r3, r3
 800378e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	041b      	lsls	r3, r3, #16
 8003794:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a0:	0e1b      	lsrs	r3, r3, #24
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	431a      	orrs	r2, r3
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	431a      	orrs	r2, r3
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ce:	0a1b      	lsrs	r3, r3, #8
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	3301      	adds	r3, #1
 80037da:	029a      	lsls	r2, r3, #10
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ee:	659a      	str	r2, [r3, #88]	; 0x58
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	661a      	str	r2, [r3, #96]	; 0x60
 80037f8:	e010      	b.n	800381c <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003802:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0c1      	b.n	80039a0 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	099b      	lsrs	r3, r3, #6
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	b2da      	uxtb	r2, r3
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	b2db      	uxtb	r3, r3
 8003834:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003838:	b2da      	uxtb	r2, r3
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003842:	b2db      	uxtb	r3, r3
 8003844:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	7e9b      	ldrb	r3, [r3, #26]
 800384a:	b2da      	uxtb	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	09db      	lsrs	r3, r3, #7
 8003850:	b2db      	uxtb	r3, r3
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	b2db      	uxtb	r3, r3
 8003858:	4313      	orrs	r3, r2
 800385a:	b2da      	uxtb	r2, r3
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003868:	b2da      	uxtb	r2, r3
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	0e1b      	lsrs	r3, r3, #24
 8003874:	b2db      	uxtb	r3, r3
 8003876:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	09db      	lsrs	r3, r3, #7
 800387c:	b2db      	uxtb	r3, r3
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	b2da      	uxtb	r2, r3
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	b2db      	uxtb	r3, r3
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	b2da      	uxtb	r2, r3
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	089b      	lsrs	r3, r3, #2
 800389c:	b2db      	uxtb	r3, r3
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038be:	0c1b      	lsrs	r3, r3, #16
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	7fdb      	ldrb	r3, [r3, #31]
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	099b      	lsrs	r3, r3, #6
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	4313      	orrs	r3, r2
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	095b      	lsrs	r3, r3, #5
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	b2da      	uxtb	r2, r3
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	0a1b      	lsrs	r3, r3, #8
 800390e:	b2db      	uxtb	r3, r3
 8003910:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	09db      	lsrs	r3, r3, #7
 8003916:	b2db      	uxtb	r3, r3
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	b2da      	uxtb	r2, r3
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	099b      	lsrs	r3, r3, #6
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	b2da      	uxtb	r2, r3
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	b2da      	uxtb	r2, r3
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	b2db      	uxtb	r3, r3
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	b2da      	uxtb	r2, r3
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	089b      	lsrs	r3, r3, #2
 800395e:	b2db      	uxtb	r3, r3
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	b2da      	uxtb	r2, r3
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	b2da      	uxtb	r2, r3
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003980:	b2db      	uxtb	r3, r3
 8003982:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	085b      	lsrs	r3, r3, #1
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800398e:	b2da      	uxtb	r2, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003a04:	b5b0      	push	{r4, r5, r7, lr}
 8003a06:	b08e      	sub	sp, #56	; 0x38
 8003a08:	af04      	add	r7, sp, #16
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2203      	movs	r2, #3
 8003a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d02e      	beq.n	8003a80 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a28:	d106      	bne.n	8003a38 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	639a      	str	r2, [r3, #56]	; 0x38
 8003a36:	e029      	b.n	8003a8c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a3e:	d10a      	bne.n	8003a56 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fa1b 	bl	8003e7c <SD_WideBus_Enable>
 8003a46:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	639a      	str	r2, [r3, #56]	; 0x38
 8003a54:	e01a      	b.n	8003a8c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10a      	bne.n	8003a72 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fa5a 	bl	8003f16 <SD_WideBus_Disable>
 8003a62:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38
 8003a70:	e00c      	b.n	8003a8c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	639a      	str	r2, [r3, #56]	; 0x38
 8003a7e:	e005      	b.n	8003a8c <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a9c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e024      	b.n	8003af4 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681d      	ldr	r5, [r3, #0]
 8003ad0:	466c      	mov	r4, sp
 8003ad2:	f107 0318 	add.w	r3, r7, #24
 8003ad6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ada:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ade:	f107 030c 	add.w	r3, r7, #12
 8003ae2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	f001 fb55 	bl	8005194 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3728      	adds	r7, #40	; 0x28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bdb0      	pop	{r4, r5, r7, pc}

08003afc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8003b04:	2304      	movs	r3, #4
 8003b06:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8003b10:	f107 030c 	add.w	r3, r7, #12
 8003b14:	4619      	mov	r1, r3
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f986 	bl	8003e28 <SD_SendStatus>
 8003b1c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	0a5b      	lsrs	r3, r3, #9
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003b46:	b5b0      	push	{r4, r5, r7, lr}
 8003b48:	b094      	sub	sp, #80	; 0x50
 8003b4a:	af04      	add	r7, sp, #16
 8003b4c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8003b52:	2301      	movs	r3, #1
 8003b54:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f001 fb72 	bl	8005244 <SDMMC_GetPowerState>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d102      	bne.n	8003b6c <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003b66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b6a:	e0b1      	b.n	8003cd0 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d02f      	beq.n	8003bd4 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f001 fdb8 	bl	80056ee <SDMMC_CmdSendCID>
 8003b7e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <SD_InitCard+0x44>
    {
      return errorstate;
 8003b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b88:	e0a2      	b.n	8003cd0 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f001 fb9c 	bl	80052ce <SDMMC_GetResponse>
 8003b96:	4602      	mov	r2, r0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2104      	movs	r1, #4
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f001 fb93 	bl	80052ce <SDMMC_GetResponse>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2108      	movs	r1, #8
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f001 fb8a 	bl	80052ce <SDMMC_GetResponse>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	210c      	movs	r1, #12
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 fb81 	bl	80052ce <SDMMC_GetResponse>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d00d      	beq.n	8003bf8 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f107 020e 	add.w	r2, r7, #14
 8003be4:	4611      	mov	r1, r2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f001 fdc2 	bl	8005770 <SDMMC_CmdSetRelAdd>
 8003bec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <SD_InitCard+0xb2>
    {
      return errorstate;
 8003bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf6:	e06b      	b.n	8003cd0 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d036      	beq.n	8003c6e <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003c00:	89fb      	ldrh	r3, [r7, #14]
 8003c02:	461a      	mov	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c10:	041b      	lsls	r3, r3, #16
 8003c12:	4619      	mov	r1, r3
 8003c14:	4610      	mov	r0, r2
 8003c16:	f001 fd8a 	bl	800572e <SDMMC_CmdSendCSD>
 8003c1a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <SD_InitCard+0xe0>
    {
      return errorstate;
 8003c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c24:	e054      	b.n	8003cd0 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f001 fb4e 	bl	80052ce <SDMMC_GetResponse>
 8003c32:	4602      	mov	r2, r0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2104      	movs	r1, #4
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f001 fb45 	bl	80052ce <SDMMC_GetResponse>
 8003c44:	4602      	mov	r2, r0
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2108      	movs	r1, #8
 8003c50:	4618      	mov	r0, r3
 8003c52:	f001 fb3c 	bl	80052ce <SDMMC_GetResponse>
 8003c56:	4602      	mov	r2, r0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	210c      	movs	r1, #12
 8003c62:	4618      	mov	r0, r3
 8003c64:	f001 fb33 	bl	80052ce <SDMMC_GetResponse>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2104      	movs	r1, #4
 8003c74:	4618      	mov	r0, r3
 8003c76:	f001 fb2a 	bl	80052ce <SDMMC_GetResponse>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	0d1a      	lsrs	r2, r3, #20
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8003c82:	f107 0310 	add.w	r3, r7, #16
 8003c86:	4619      	mov	r1, r3
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff fc67 	bl	800355c <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6819      	ldr	r1, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c96:	041b      	lsls	r3, r3, #16
 8003c98:	f04f 0400 	mov.w	r4, #0
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4623      	mov	r3, r4
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	f001 fc2d 	bl	8005500 <SDMMC_CmdSelDesel>
 8003ca6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <SD_InitCard+0x16c>
  {
    return errorstate;
 8003cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb0:	e00e      	b.n	8003cd0 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681d      	ldr	r5, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	466c      	mov	r4, sp
 8003cba:	f103 0210 	add.w	r2, r3, #16
 8003cbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cc8:	4628      	mov	r0, r5
 8003cca:	f001 fa63 	bl	8005194 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3740      	adds	r7, #64	; 0x40
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bdb0      	pop	{r4, r5, r7, pc}

08003cd8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	2300      	movs	r3, #0
 8003cea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f001 fc28 	bl	800554a <SDMMC_CmdGoIdleState>
 8003cfa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <SD_PowerON+0x2e>
  {
    return errorstate;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	e08c      	b.n	8003e20 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f001 fc3d 	bl	800558a <SDMMC_CmdOperCond>
 8003d10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d03d      	beq.n	8003d94 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8003d1e:	e032      	b.n	8003d86 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	60ba      	str	r2, [r7, #8]
 8003d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d102      	bne.n	8003d34 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003d2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d32:	e075      	b.n	8003e20 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f001 fc46 	bl	80055cc <SDMMC_CmdAppCommand>
 8003d40:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d4c:	e068      	b.n	8003e20 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2100      	movs	r1, #0
 8003d54:	4618      	mov	r0, r3
 8003d56:	f001 fc5d 	bl	8005614 <SDMMC_CmdAppOperCommand>
 8003d5a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d66:	e05b      	b.n	8003e20 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f001 faad 	bl	80052ce <SDMMC_GetResponse>
 8003d74:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	0fdb      	lsrs	r3, r3, #31
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	bf0c      	ite	eq
 8003d7e:	2301      	moveq	r3, #1
 8003d80:	2300      	movne	r3, #0
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0c9      	beq.n	8003d20 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	645a      	str	r2, [r3, #68]	; 0x44
 8003d92:	e044      	b.n	8003e1e <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8003d9a:	e031      	b.n	8003e00 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	60ba      	str	r2, [r7, #8]
 8003da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d102      	bne.n	8003db0 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003daa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dae:	e037      	b.n	8003e20 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2100      	movs	r1, #0
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 fc08 	bl	80055cc <SDMMC_CmdAppCommand>
 8003dbc:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <SD_PowerON+0xf0>
      {
        return errorstate;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	e02b      	b.n	8003e20 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 fc1f 	bl	8005614 <SDMMC_CmdAppOperCommand>
 8003dd6:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <SD_PowerON+0x10a>
      {
        return errorstate;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	e01e      	b.n	8003e20 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2100      	movs	r1, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 fa70 	bl	80052ce <SDMMC_GetResponse>
 8003dee:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	0fdb      	lsrs	r3, r3, #31
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	bf0c      	ite	eq
 8003df8:	2301      	moveq	r3, #1
 8003dfa:	2300      	movne	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0ca      	beq.n	8003d9c <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
 8003e16:	e002      	b.n	8003e1e <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d102      	bne.n	8003e42 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8003e3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e40:	e018      	b.n	8003e74 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4a:	041b      	lsls	r3, r3, #16
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4610      	mov	r0, r2
 8003e50:	f001 fcb1 	bl	80057b6 <SDMMC_CmdSendStatus>
 8003e54:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <SD_SendStatus+0x38>
  {
    return errorstate;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	e009      	b.n	8003e74 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 fa31 	bl	80052ce <SDMMC_GetResponse>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2100      	movs	r1, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f001 fa19 	bl	80052ce <SDMMC_GetResponse>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ea6:	d102      	bne.n	8003eae <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003ea8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003eac:	e02f      	b.n	8003f0e <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003eae:	f107 030c 	add.w	r3, r7, #12
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f87b 	bl	8003fb0 <SD_FindSCR>
 8003eba:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	e023      	b.n	8003f0e <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d01c      	beq.n	8003f0a <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed8:	041b      	lsls	r3, r3, #16
 8003eda:	4619      	mov	r1, r3
 8003edc:	4610      	mov	r0, r2
 8003ede:	f001 fb75 	bl	80055cc <SDMMC_CmdAppCommand>
 8003ee2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	e00f      	b.n	8003f0e <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 fbb3 	bl	8005660 <SDMMC_CmdBusWidth>
 8003efa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	e003      	b.n	8003f0e <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8003f06:	2300      	movs	r3, #0
 8003f08:	e001      	b.n	8003f0e <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003f0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b086      	sub	sp, #24
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	2300      	movs	r3, #0
 8003f24:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 f9cc 	bl	80052ce <SDMMC_GetResponse>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f40:	d102      	bne.n	8003f48 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003f42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f46:	e02f      	b.n	8003fa8 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003f48:	f107 030c 	add.w	r3, r7, #12
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f82e 	bl	8003fb0 <SD_FindSCR>
 8003f54:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	e023      	b.n	8003fa8 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d01c      	beq.n	8003fa4 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f72:	041b      	lsls	r3, r3, #16
 8003f74:	4619      	mov	r1, r3
 8003f76:	4610      	mov	r0, r2
 8003f78:	f001 fb28 	bl	80055cc <SDMMC_CmdAppCommand>
 8003f7c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	e00f      	b.n	8003fa8 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 fb66 	bl	8005660 <SDMMC_CmdBusWidth>
 8003f94:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	e003      	b.n	8003fa8 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e001      	b.n	8003fa8 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003fa4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003fb0:	b590      	push	{r4, r7, lr}
 8003fb2:	b08f      	sub	sp, #60	; 0x3c
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003fbe:	f7fd faf9 	bl	80015b4 <HAL_GetTick>
 8003fc2:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2108      	movs	r1, #8
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f001 f9ba 	bl	8005350 <SDMMC_CmdBlockLength>
 8003fdc:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	e0a8      	b.n	800413a <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff0:	041b      	lsls	r3, r3, #16
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f001 fae9 	bl	80055cc <SDMMC_CmdAppCommand>
 8003ffa:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004004:	e099      	b.n	800413a <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004006:	f04f 33ff 	mov.w	r3, #4294967295
 800400a:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 800400c:	2308      	movs	r3, #8
 800400e:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004010:	2330      	movs	r3, #48	; 0x30
 8004012:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004014:	2302      	movs	r3, #2
 8004016:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004018:	2300      	movs	r3, #0
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800401c:	2301      	movs	r3, #1
 800401e:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f107 0214 	add.w	r2, r7, #20
 8004028:	4611      	mov	r1, r2
 800402a:	4618      	mov	r0, r3
 800402c:	f001 f964 	bl	80052f8 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f001 fb37 	bl	80056a8 <SDMMC_CmdSendSCR>
 800403a:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403e:	2b00      	cmp	r3, #0
 8004040:	d022      	beq.n	8004088 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	e079      	b.n	800413a <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00e      	beq.n	8004072 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6819      	ldr	r1, [r3, #0]
 8004058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	f107 020c 	add.w	r2, r7, #12
 8004060:	18d4      	adds	r4, r2, r3
 8004062:	4608      	mov	r0, r1
 8004064:	f001 f8c2 	bl	80051ec <SDMMC_ReadFIFO>
 8004068:	4603      	mov	r3, r0
 800406a:	6023      	str	r3, [r4, #0]
      index++;
 800406c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406e:	3301      	adds	r3, #1
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004072:	f7fd fa9f 	bl	80015b4 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d102      	bne.n	8004088 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004082:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004086:	e058      	b.n	800413a <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800408e:	f240 432a 	movw	r3, #1066	; 0x42a
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0d6      	beq.n	8004046 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2208      	movs	r2, #8
 80040ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80040ae:	2308      	movs	r3, #8
 80040b0:	e043      	b.n	800413a <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2202      	movs	r2, #2
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80040c8:	2302      	movs	r3, #2
 80040ca:	e036      	b.n	800413a <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2220      	movs	r2, #32
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 80040e2:	2320      	movs	r3, #32
 80040e4:	e029      	b.n	800413a <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80040ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	061a      	lsls	r2, r3, #24
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	021b      	lsls	r3, r3, #8
 80040f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040fc:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	0a1b      	lsrs	r3, r3, #8
 8004102:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004106:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8004112:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004114:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	061a      	lsls	r2, r3, #24
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004122:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800412c:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	0e1b      	lsrs	r3, r3, #24
 8004132:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	373c      	adds	r7, #60	; 0x3c
 800413e:	46bd      	mov	sp, r7
 8004140:	bd90      	pop	{r4, r7, pc}

08004142 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004142:	b580      	push	{r7, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e025      	b.n	80041a2 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fd f8e2 	bl	8001334 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	4619      	mov	r1, r3
 8004182:	4610      	mov	r0, r2
 8004184:	f000 ff14 	bl	8004fb0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	461a      	mov	r2, r3
 8004192:	6839      	ldr	r1, [r7, #0]
 8004194:	f000 ff7e 	bl	8005094 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e01d      	b.n	80041f8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f815 	bl	8004200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3304      	adds	r3, #4
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f000 f985 	bl	80044f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <HAL_TIM_Base_Start_IT+0x50>)
 8004234:	4013      	ands	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b06      	cmp	r3, #6
 800423c:	d00b      	beq.n	8004256 <HAL_TIM_Base_Start_IT+0x42>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004244:	d007      	beq.n	8004256 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 0201 	orr.w	r2, r2, #1
 8004254:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	00010007 	.word	0x00010007

08004268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b02      	cmp	r3, #2
 800427c:	d122      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b02      	cmp	r3, #2
 800428a:	d11b      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0202 	mvn.w	r2, #2
 8004294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f905 	bl	80044ba <HAL_TIM_IC_CaptureCallback>
 80042b0:	e005      	b.n	80042be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f8f7 	bl	80044a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f908 	bl	80044ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d122      	bne.n	8004318 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d11b      	bne.n	8004318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0204 	mvn.w	r2, #4
 80042e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2202      	movs	r2, #2
 80042ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f8db 	bl	80044ba <HAL_TIM_IC_CaptureCallback>
 8004304:	e005      	b.n	8004312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f8cd 	bl	80044a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f8de 	bl	80044ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b08      	cmp	r3, #8
 8004324:	d122      	bne.n	800436c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b08      	cmp	r3, #8
 8004332:	d11b      	bne.n	800436c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0208 	mvn.w	r2, #8
 800433c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2204      	movs	r2, #4
 8004342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f8b1 	bl	80044ba <HAL_TIM_IC_CaptureCallback>
 8004358:	e005      	b.n	8004366 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f8a3 	bl	80044a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f8b4 	bl	80044ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b10      	cmp	r3, #16
 8004378:	d122      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b10      	cmp	r3, #16
 8004386:	d11b      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f06f 0210 	mvn.w	r2, #16
 8004390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2208      	movs	r2, #8
 8004396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f887 	bl	80044ba <HAL_TIM_IC_CaptureCallback>
 80043ac:	e005      	b.n	80043ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f879 	bl	80044a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f88a 	bl	80044ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d10e      	bne.n	80043ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d107      	bne.n	80043ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0201 	mvn.w	r2, #1
 80043e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fc fdfe 	bl	8000fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f6:	2b80      	cmp	r3, #128	; 0x80
 80043f8:	d10e      	bne.n	8004418 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004404:	2b80      	cmp	r3, #128	; 0x80
 8004406:	d107      	bne.n	8004418 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f91a 	bl	800464c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004426:	d10e      	bne.n	8004446 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004432:	2b80      	cmp	r3, #128	; 0x80
 8004434:	d107      	bne.n	8004446 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800443e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f90d 	bl	8004660 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004450:	2b40      	cmp	r3, #64	; 0x40
 8004452:	d10e      	bne.n	8004472 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445e:	2b40      	cmp	r3, #64	; 0x40
 8004460:	d107      	bne.n	8004472 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800446a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f838 	bl	80044e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b20      	cmp	r3, #32
 800447e:	d10e      	bne.n	800449e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f003 0320 	and.w	r3, r3, #32
 800448a:	2b20      	cmp	r3, #32
 800448c:	d107      	bne.n	800449e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f06f 0220 	mvn.w	r2, #32
 8004496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f8cd 	bl	8004638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
	...

080044f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a40      	ldr	r2, [pc, #256]	; (800460c <TIM_Base_SetConfig+0x114>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d013      	beq.n	8004538 <TIM_Base_SetConfig+0x40>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004516:	d00f      	beq.n	8004538 <TIM_Base_SetConfig+0x40>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a3d      	ldr	r2, [pc, #244]	; (8004610 <TIM_Base_SetConfig+0x118>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00b      	beq.n	8004538 <TIM_Base_SetConfig+0x40>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a3c      	ldr	r2, [pc, #240]	; (8004614 <TIM_Base_SetConfig+0x11c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d007      	beq.n	8004538 <TIM_Base_SetConfig+0x40>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a3b      	ldr	r2, [pc, #236]	; (8004618 <TIM_Base_SetConfig+0x120>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d003      	beq.n	8004538 <TIM_Base_SetConfig+0x40>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a3a      	ldr	r2, [pc, #232]	; (800461c <TIM_Base_SetConfig+0x124>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d108      	bne.n	800454a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a2f      	ldr	r2, [pc, #188]	; (800460c <TIM_Base_SetConfig+0x114>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d02b      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004558:	d027      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a2c      	ldr	r2, [pc, #176]	; (8004610 <TIM_Base_SetConfig+0x118>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d023      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a2b      	ldr	r2, [pc, #172]	; (8004614 <TIM_Base_SetConfig+0x11c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d01f      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a2a      	ldr	r2, [pc, #168]	; (8004618 <TIM_Base_SetConfig+0x120>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d01b      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a29      	ldr	r2, [pc, #164]	; (800461c <TIM_Base_SetConfig+0x124>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d017      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a28      	ldr	r2, [pc, #160]	; (8004620 <TIM_Base_SetConfig+0x128>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d013      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a27      	ldr	r2, [pc, #156]	; (8004624 <TIM_Base_SetConfig+0x12c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00f      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a26      	ldr	r2, [pc, #152]	; (8004628 <TIM_Base_SetConfig+0x130>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00b      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a25      	ldr	r2, [pc, #148]	; (800462c <TIM_Base_SetConfig+0x134>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d007      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a24      	ldr	r2, [pc, #144]	; (8004630 <TIM_Base_SetConfig+0x138>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d003      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a23      	ldr	r2, [pc, #140]	; (8004634 <TIM_Base_SetConfig+0x13c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d108      	bne.n	80045bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a0a      	ldr	r2, [pc, #40]	; (800460c <TIM_Base_SetConfig+0x114>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d003      	beq.n	80045f0 <TIM_Base_SetConfig+0xf8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a0c      	ldr	r2, [pc, #48]	; (800461c <TIM_Base_SetConfig+0x124>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d103      	bne.n	80045f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	615a      	str	r2, [r3, #20]
}
 80045fe:	bf00      	nop
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40010000 	.word	0x40010000
 8004610:	40000400 	.word	0x40000400
 8004614:	40000800 	.word	0x40000800
 8004618:	40000c00 	.word	0x40000c00
 800461c:	40010400 	.word	0x40010400
 8004620:	40014000 	.word	0x40014000
 8004624:	40014400 	.word	0x40014400
 8004628:	40014800 	.word	0x40014800
 800462c:	40001800 	.word	0x40001800
 8004630:	40001c00 	.word	0x40001c00
 8004634:	40002000 	.word	0x40002000

08004638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e040      	b.n	8004708 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fc fd64 	bl	8001164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2224      	movs	r2, #36	; 0x24
 80046a0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f8be 	bl	8004834 <UART_SetConfig>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e022      	b.n	8004708 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fb56 	bl	8004d7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046ee:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fbdd 	bl	8004ec0 <UART_CheckIdleState>
 8004706:	4603      	mov	r3, r0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08a      	sub	sp, #40	; 0x28
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004724:	2b20      	cmp	r3, #32
 8004726:	d17f      	bne.n	8004828 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <HAL_UART_Transmit+0x24>
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e078      	b.n	800482a <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_UART_Transmit+0x36>
 8004742:	2302      	movs	r3, #2
 8004744:	e071      	b.n	800482a <HAL_UART_Transmit+0x11a>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2221      	movs	r2, #33	; 0x21
 8004758:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800475a:	f7fc ff2b 	bl	80015b4 <HAL_GetTick>
 800475e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	88fa      	ldrh	r2, [r7, #6]
 8004764:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	88fa      	ldrh	r2, [r7, #6]
 800476c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004778:	d108      	bne.n	800478c <HAL_UART_Transmit+0x7c>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d104      	bne.n	800478c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	61bb      	str	r3, [r7, #24]
 800478a:	e003      	b.n	8004794 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004790:	2300      	movs	r3, #0
 8004792:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004794:	e02c      	b.n	80047f0 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2200      	movs	r2, #0
 800479e:	2180      	movs	r1, #128	; 0x80
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fbbc 	bl	8004f1e <UART_WaitOnFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e03c      	b.n	800482a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10b      	bne.n	80047ce <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	3302      	adds	r3, #2
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	e007      	b.n	80047de <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	781a      	ldrb	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	3301      	adds	r3, #1
 80047dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1cc      	bne.n	8004796 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2200      	movs	r2, #0
 8004804:	2140      	movs	r1, #64	; 0x40
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 fb89 	bl	8004f1e <UART_WaitOnFlagUntilTimeout>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e009      	b.n	800482a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	e000      	b.n	800482a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004828:	2302      	movs	r3, #2
  }
}
 800482a:	4618      	mov	r0, r3
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800483c:	2300      	movs	r3, #0
 800483e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4bb1      	ldr	r3, [pc, #708]	; (8004b28 <UART_SetConfig+0x2f4>)
 8004864:	4013      	ands	r3, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	6939      	ldr	r1, [r7, #16]
 800486c:	430b      	orrs	r3, r1
 800486e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a9f      	ldr	r2, [pc, #636]	; (8004b2c <UART_SetConfig+0x2f8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d121      	bne.n	80048f8 <UART_SetConfig+0xc4>
 80048b4:	4b9e      	ldr	r3, [pc, #632]	; (8004b30 <UART_SetConfig+0x2fc>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d816      	bhi.n	80048f0 <UART_SetConfig+0xbc>
 80048c2:	a201      	add	r2, pc, #4	; (adr r2, 80048c8 <UART_SetConfig+0x94>)
 80048c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c8:	080048d9 	.word	0x080048d9
 80048cc:	080048e5 	.word	0x080048e5
 80048d0:	080048df 	.word	0x080048df
 80048d4:	080048eb 	.word	0x080048eb
 80048d8:	2301      	movs	r3, #1
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e151      	b.n	8004b82 <UART_SetConfig+0x34e>
 80048de:	2302      	movs	r3, #2
 80048e0:	77fb      	strb	r3, [r7, #31]
 80048e2:	e14e      	b.n	8004b82 <UART_SetConfig+0x34e>
 80048e4:	2304      	movs	r3, #4
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	e14b      	b.n	8004b82 <UART_SetConfig+0x34e>
 80048ea:	2308      	movs	r3, #8
 80048ec:	77fb      	strb	r3, [r7, #31]
 80048ee:	e148      	b.n	8004b82 <UART_SetConfig+0x34e>
 80048f0:	2310      	movs	r3, #16
 80048f2:	77fb      	strb	r3, [r7, #31]
 80048f4:	bf00      	nop
 80048f6:	e144      	b.n	8004b82 <UART_SetConfig+0x34e>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a8d      	ldr	r2, [pc, #564]	; (8004b34 <UART_SetConfig+0x300>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d134      	bne.n	800496c <UART_SetConfig+0x138>
 8004902:	4b8b      	ldr	r3, [pc, #556]	; (8004b30 <UART_SetConfig+0x2fc>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004908:	f003 030c 	and.w	r3, r3, #12
 800490c:	2b0c      	cmp	r3, #12
 800490e:	d829      	bhi.n	8004964 <UART_SetConfig+0x130>
 8004910:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <UART_SetConfig+0xe4>)
 8004912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004916:	bf00      	nop
 8004918:	0800494d 	.word	0x0800494d
 800491c:	08004965 	.word	0x08004965
 8004920:	08004965 	.word	0x08004965
 8004924:	08004965 	.word	0x08004965
 8004928:	08004959 	.word	0x08004959
 800492c:	08004965 	.word	0x08004965
 8004930:	08004965 	.word	0x08004965
 8004934:	08004965 	.word	0x08004965
 8004938:	08004953 	.word	0x08004953
 800493c:	08004965 	.word	0x08004965
 8004940:	08004965 	.word	0x08004965
 8004944:	08004965 	.word	0x08004965
 8004948:	0800495f 	.word	0x0800495f
 800494c:	2300      	movs	r3, #0
 800494e:	77fb      	strb	r3, [r7, #31]
 8004950:	e117      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004952:	2302      	movs	r3, #2
 8004954:	77fb      	strb	r3, [r7, #31]
 8004956:	e114      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004958:	2304      	movs	r3, #4
 800495a:	77fb      	strb	r3, [r7, #31]
 800495c:	e111      	b.n	8004b82 <UART_SetConfig+0x34e>
 800495e:	2308      	movs	r3, #8
 8004960:	77fb      	strb	r3, [r7, #31]
 8004962:	e10e      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004964:	2310      	movs	r3, #16
 8004966:	77fb      	strb	r3, [r7, #31]
 8004968:	bf00      	nop
 800496a:	e10a      	b.n	8004b82 <UART_SetConfig+0x34e>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a71      	ldr	r2, [pc, #452]	; (8004b38 <UART_SetConfig+0x304>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d120      	bne.n	80049b8 <UART_SetConfig+0x184>
 8004976:	4b6e      	ldr	r3, [pc, #440]	; (8004b30 <UART_SetConfig+0x2fc>)
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004980:	2b10      	cmp	r3, #16
 8004982:	d00f      	beq.n	80049a4 <UART_SetConfig+0x170>
 8004984:	2b10      	cmp	r3, #16
 8004986:	d802      	bhi.n	800498e <UART_SetConfig+0x15a>
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <UART_SetConfig+0x164>
 800498c:	e010      	b.n	80049b0 <UART_SetConfig+0x17c>
 800498e:	2b20      	cmp	r3, #32
 8004990:	d005      	beq.n	800499e <UART_SetConfig+0x16a>
 8004992:	2b30      	cmp	r3, #48	; 0x30
 8004994:	d009      	beq.n	80049aa <UART_SetConfig+0x176>
 8004996:	e00b      	b.n	80049b0 <UART_SetConfig+0x17c>
 8004998:	2300      	movs	r3, #0
 800499a:	77fb      	strb	r3, [r7, #31]
 800499c:	e0f1      	b.n	8004b82 <UART_SetConfig+0x34e>
 800499e:	2302      	movs	r3, #2
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e0ee      	b.n	8004b82 <UART_SetConfig+0x34e>
 80049a4:	2304      	movs	r3, #4
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e0eb      	b.n	8004b82 <UART_SetConfig+0x34e>
 80049aa:	2308      	movs	r3, #8
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e0e8      	b.n	8004b82 <UART_SetConfig+0x34e>
 80049b0:	2310      	movs	r3, #16
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	bf00      	nop
 80049b6:	e0e4      	b.n	8004b82 <UART_SetConfig+0x34e>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a5f      	ldr	r2, [pc, #380]	; (8004b3c <UART_SetConfig+0x308>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d120      	bne.n	8004a04 <UART_SetConfig+0x1d0>
 80049c2:	4b5b      	ldr	r3, [pc, #364]	; (8004b30 <UART_SetConfig+0x2fc>)
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049cc:	2b40      	cmp	r3, #64	; 0x40
 80049ce:	d00f      	beq.n	80049f0 <UART_SetConfig+0x1bc>
 80049d0:	2b40      	cmp	r3, #64	; 0x40
 80049d2:	d802      	bhi.n	80049da <UART_SetConfig+0x1a6>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <UART_SetConfig+0x1b0>
 80049d8:	e010      	b.n	80049fc <UART_SetConfig+0x1c8>
 80049da:	2b80      	cmp	r3, #128	; 0x80
 80049dc:	d005      	beq.n	80049ea <UART_SetConfig+0x1b6>
 80049de:	2bc0      	cmp	r3, #192	; 0xc0
 80049e0:	d009      	beq.n	80049f6 <UART_SetConfig+0x1c2>
 80049e2:	e00b      	b.n	80049fc <UART_SetConfig+0x1c8>
 80049e4:	2300      	movs	r3, #0
 80049e6:	77fb      	strb	r3, [r7, #31]
 80049e8:	e0cb      	b.n	8004b82 <UART_SetConfig+0x34e>
 80049ea:	2302      	movs	r3, #2
 80049ec:	77fb      	strb	r3, [r7, #31]
 80049ee:	e0c8      	b.n	8004b82 <UART_SetConfig+0x34e>
 80049f0:	2304      	movs	r3, #4
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	e0c5      	b.n	8004b82 <UART_SetConfig+0x34e>
 80049f6:	2308      	movs	r3, #8
 80049f8:	77fb      	strb	r3, [r7, #31]
 80049fa:	e0c2      	b.n	8004b82 <UART_SetConfig+0x34e>
 80049fc:	2310      	movs	r3, #16
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	bf00      	nop
 8004a02:	e0be      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a4d      	ldr	r2, [pc, #308]	; (8004b40 <UART_SetConfig+0x30c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d124      	bne.n	8004a58 <UART_SetConfig+0x224>
 8004a0e:	4b48      	ldr	r3, [pc, #288]	; (8004b30 <UART_SetConfig+0x2fc>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a1c:	d012      	beq.n	8004a44 <UART_SetConfig+0x210>
 8004a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a22:	d802      	bhi.n	8004a2a <UART_SetConfig+0x1f6>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <UART_SetConfig+0x204>
 8004a28:	e012      	b.n	8004a50 <UART_SetConfig+0x21c>
 8004a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a2e:	d006      	beq.n	8004a3e <UART_SetConfig+0x20a>
 8004a30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a34:	d009      	beq.n	8004a4a <UART_SetConfig+0x216>
 8004a36:	e00b      	b.n	8004a50 <UART_SetConfig+0x21c>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	77fb      	strb	r3, [r7, #31]
 8004a3c:	e0a1      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	77fb      	strb	r3, [r7, #31]
 8004a42:	e09e      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004a44:	2304      	movs	r3, #4
 8004a46:	77fb      	strb	r3, [r7, #31]
 8004a48:	e09b      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004a4a:	2308      	movs	r3, #8
 8004a4c:	77fb      	strb	r3, [r7, #31]
 8004a4e:	e098      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004a50:	2310      	movs	r3, #16
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	bf00      	nop
 8004a56:	e094      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a39      	ldr	r2, [pc, #228]	; (8004b44 <UART_SetConfig+0x310>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d124      	bne.n	8004aac <UART_SetConfig+0x278>
 8004a62:	4b33      	ldr	r3, [pc, #204]	; (8004b30 <UART_SetConfig+0x2fc>)
 8004a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a70:	d012      	beq.n	8004a98 <UART_SetConfig+0x264>
 8004a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a76:	d802      	bhi.n	8004a7e <UART_SetConfig+0x24a>
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d007      	beq.n	8004a8c <UART_SetConfig+0x258>
 8004a7c:	e012      	b.n	8004aa4 <UART_SetConfig+0x270>
 8004a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a82:	d006      	beq.n	8004a92 <UART_SetConfig+0x25e>
 8004a84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a88:	d009      	beq.n	8004a9e <UART_SetConfig+0x26a>
 8004a8a:	e00b      	b.n	8004aa4 <UART_SetConfig+0x270>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	e077      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004a92:	2302      	movs	r3, #2
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e074      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004a98:	2304      	movs	r3, #4
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e071      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004a9e:	2308      	movs	r3, #8
 8004aa0:	77fb      	strb	r3, [r7, #31]
 8004aa2:	e06e      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004aa4:	2310      	movs	r3, #16
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	bf00      	nop
 8004aaa:	e06a      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a25      	ldr	r2, [pc, #148]	; (8004b48 <UART_SetConfig+0x314>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d124      	bne.n	8004b00 <UART_SetConfig+0x2cc>
 8004ab6:	4b1e      	ldr	r3, [pc, #120]	; (8004b30 <UART_SetConfig+0x2fc>)
 8004ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac4:	d012      	beq.n	8004aec <UART_SetConfig+0x2b8>
 8004ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aca:	d802      	bhi.n	8004ad2 <UART_SetConfig+0x29e>
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d007      	beq.n	8004ae0 <UART_SetConfig+0x2ac>
 8004ad0:	e012      	b.n	8004af8 <UART_SetConfig+0x2c4>
 8004ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad6:	d006      	beq.n	8004ae6 <UART_SetConfig+0x2b2>
 8004ad8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004adc:	d009      	beq.n	8004af2 <UART_SetConfig+0x2be>
 8004ade:	e00b      	b.n	8004af8 <UART_SetConfig+0x2c4>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	77fb      	strb	r3, [r7, #31]
 8004ae4:	e04d      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	77fb      	strb	r3, [r7, #31]
 8004aea:	e04a      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004aec:	2304      	movs	r3, #4
 8004aee:	77fb      	strb	r3, [r7, #31]
 8004af0:	e047      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004af2:	2308      	movs	r3, #8
 8004af4:	77fb      	strb	r3, [r7, #31]
 8004af6:	e044      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004af8:	2310      	movs	r3, #16
 8004afa:	77fb      	strb	r3, [r7, #31]
 8004afc:	bf00      	nop
 8004afe:	e040      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a11      	ldr	r2, [pc, #68]	; (8004b4c <UART_SetConfig+0x318>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d139      	bne.n	8004b7e <UART_SetConfig+0x34a>
 8004b0a:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <UART_SetConfig+0x2fc>)
 8004b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b18:	d027      	beq.n	8004b6a <UART_SetConfig+0x336>
 8004b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b1e:	d817      	bhi.n	8004b50 <UART_SetConfig+0x31c>
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01c      	beq.n	8004b5e <UART_SetConfig+0x32a>
 8004b24:	e027      	b.n	8004b76 <UART_SetConfig+0x342>
 8004b26:	bf00      	nop
 8004b28:	efff69f3 	.word	0xefff69f3
 8004b2c:	40011000 	.word	0x40011000
 8004b30:	40023800 	.word	0x40023800
 8004b34:	40004400 	.word	0x40004400
 8004b38:	40004800 	.word	0x40004800
 8004b3c:	40004c00 	.word	0x40004c00
 8004b40:	40005000 	.word	0x40005000
 8004b44:	40011400 	.word	0x40011400
 8004b48:	40007800 	.word	0x40007800
 8004b4c:	40007c00 	.word	0x40007c00
 8004b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b54:	d006      	beq.n	8004b64 <UART_SetConfig+0x330>
 8004b56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b5a:	d009      	beq.n	8004b70 <UART_SetConfig+0x33c>
 8004b5c:	e00b      	b.n	8004b76 <UART_SetConfig+0x342>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	77fb      	strb	r3, [r7, #31]
 8004b62:	e00e      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004b64:	2302      	movs	r3, #2
 8004b66:	77fb      	strb	r3, [r7, #31]
 8004b68:	e00b      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004b6a:	2304      	movs	r3, #4
 8004b6c:	77fb      	strb	r3, [r7, #31]
 8004b6e:	e008      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004b70:	2308      	movs	r3, #8
 8004b72:	77fb      	strb	r3, [r7, #31]
 8004b74:	e005      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004b76:	2310      	movs	r3, #16
 8004b78:	77fb      	strb	r3, [r7, #31]
 8004b7a:	bf00      	nop
 8004b7c:	e001      	b.n	8004b82 <UART_SetConfig+0x34e>
 8004b7e:	2310      	movs	r3, #16
 8004b80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b8a:	d17c      	bne.n	8004c86 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8004b8c:	7ffb      	ldrb	r3, [r7, #31]
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d859      	bhi.n	8004c46 <UART_SetConfig+0x412>
 8004b92:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <UART_SetConfig+0x364>)
 8004b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b98:	08004bbd 	.word	0x08004bbd
 8004b9c:	08004bdb 	.word	0x08004bdb
 8004ba0:	08004bf9 	.word	0x08004bf9
 8004ba4:	08004c47 	.word	0x08004c47
 8004ba8:	08004c11 	.word	0x08004c11
 8004bac:	08004c47 	.word	0x08004c47
 8004bb0:	08004c47 	.word	0x08004c47
 8004bb4:	08004c47 	.word	0x08004c47
 8004bb8:	08004c2f 	.word	0x08004c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004bbc:	f7fd fcc2 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	005a      	lsls	r2, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	085b      	lsrs	r3, r3, #1
 8004bca:	441a      	add	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	61bb      	str	r3, [r7, #24]
        break;
 8004bd8:	e038      	b.n	8004c4c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004bda:	f7fd fcc7 	bl	800256c <HAL_RCC_GetPCLK2Freq>
 8004bde:	4603      	mov	r3, r0
 8004be0:	005a      	lsls	r2, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	085b      	lsrs	r3, r3, #1
 8004be8:	441a      	add	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	61bb      	str	r3, [r7, #24]
        break;
 8004bf6:	e029      	b.n	8004c4c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	085a      	lsrs	r2, r3, #1
 8004bfe:	4b5d      	ldr	r3, [pc, #372]	; (8004d74 <UART_SetConfig+0x540>)
 8004c00:	4413      	add	r3, r2
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6852      	ldr	r2, [r2, #4]
 8004c06:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	61bb      	str	r3, [r7, #24]
        break;
 8004c0e:	e01d      	b.n	8004c4c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004c10:	f7fd fbda 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 8004c14:	4603      	mov	r3, r0
 8004c16:	005a      	lsls	r2, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	441a      	add	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	61bb      	str	r3, [r7, #24]
        break;
 8004c2c:	e00e      	b.n	8004c4c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	085b      	lsrs	r3, r3, #1
 8004c34:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	61bb      	str	r3, [r7, #24]
        break;
 8004c44:	e002      	b.n	8004c4c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	75fb      	strb	r3, [r7, #23]
        break;
 8004c4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b0f      	cmp	r3, #15
 8004c50:	d916      	bls.n	8004c80 <UART_SetConfig+0x44c>
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c58:	d212      	bcs.n	8004c80 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	f023 030f 	bic.w	r3, r3, #15
 8004c62:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	085b      	lsrs	r3, r3, #1
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	89fb      	ldrh	r3, [r7, #14]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	89fa      	ldrh	r2, [r7, #14]
 8004c7c:	60da      	str	r2, [r3, #12]
 8004c7e:	e06e      	b.n	8004d5e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	75fb      	strb	r3, [r7, #23]
 8004c84:	e06b      	b.n	8004d5e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004c86:	7ffb      	ldrb	r3, [r7, #31]
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d857      	bhi.n	8004d3c <UART_SetConfig+0x508>
 8004c8c:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <UART_SetConfig+0x460>)
 8004c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c92:	bf00      	nop
 8004c94:	08004cb9 	.word	0x08004cb9
 8004c98:	08004cd5 	.word	0x08004cd5
 8004c9c:	08004cf1 	.word	0x08004cf1
 8004ca0:	08004d3d 	.word	0x08004d3d
 8004ca4:	08004d09 	.word	0x08004d09
 8004ca8:	08004d3d 	.word	0x08004d3d
 8004cac:	08004d3d 	.word	0x08004d3d
 8004cb0:	08004d3d 	.word	0x08004d3d
 8004cb4:	08004d25 	.word	0x08004d25
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004cb8:	f7fd fc44 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	085b      	lsrs	r3, r3, #1
 8004cc4:	441a      	add	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	61bb      	str	r3, [r7, #24]
        break;
 8004cd2:	e036      	b.n	8004d42 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004cd4:	f7fd fc4a 	bl	800256c <HAL_RCC_GetPCLK2Freq>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	085b      	lsrs	r3, r3, #1
 8004ce0:	441a      	add	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	61bb      	str	r3, [r7, #24]
        break;
 8004cee:	e028      	b.n	8004d42 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	085a      	lsrs	r2, r3, #1
 8004cf6:	4b20      	ldr	r3, [pc, #128]	; (8004d78 <UART_SetConfig+0x544>)
 8004cf8:	4413      	add	r3, r2
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6852      	ldr	r2, [r2, #4]
 8004cfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	61bb      	str	r3, [r7, #24]
        break;
 8004d06:	e01c      	b.n	8004d42 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004d08:	f7fd fb5e 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	085b      	lsrs	r3, r3, #1
 8004d14:	441a      	add	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	61bb      	str	r3, [r7, #24]
        break;
 8004d22:	e00e      	b.n	8004d42 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	085b      	lsrs	r3, r3, #1
 8004d2a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	61bb      	str	r3, [r7, #24]
        break;
 8004d3a:	e002      	b.n	8004d42 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	75fb      	strb	r3, [r7, #23]
        break;
 8004d40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	2b0f      	cmp	r3, #15
 8004d46:	d908      	bls.n	8004d5a <UART_SetConfig+0x526>
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4e:	d204      	bcs.n	8004d5a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	60da      	str	r2, [r3, #12]
 8004d58:	e001      	b.n	8004d5e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3720      	adds	r7, #32
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	01e84800 	.word	0x01e84800
 8004d78:	00f42400 	.word	0x00f42400

08004d7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01a      	beq.n	8004e92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e7a:	d10a      	bne.n	8004e92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	605a      	str	r2, [r3, #4]
  }
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004ece:	f7fc fb71 	bl	80015b4 <HAL_GetTick>
 8004ed2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d10e      	bne.n	8004f00 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f814 	bl	8004f1e <UART_WaitOnFlagUntilTimeout>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e00a      	b.n	8004f16 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2220      	movs	r2, #32
 8004f04:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b084      	sub	sp, #16
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	603b      	str	r3, [r7, #0]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f2e:	e02a      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f36:	d026      	beq.n	8004f86 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f38:	f7fc fb3c 	bl	80015b4 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d302      	bcc.n	8004f4e <UART_WaitOnFlagUntilTimeout+0x30>
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d11b      	bne.n	8004f86 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f5c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0201 	bic.w	r2, r2, #1
 8004f6c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e00f      	b.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69da      	ldr	r2, [r3, #28]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	bf0c      	ite	eq
 8004f96:	2301      	moveq	r3, #1
 8004f98:	2300      	movne	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d0c5      	beq.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d027      	beq.n	800501a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4b2f      	ldr	r3, [pc, #188]	; (8005090 <FMC_SDRAM_Init+0xe0>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004fe0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8004fe6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8004fec:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8004ff2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8004ff8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8004ffe:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8005004:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800500a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	e032      	b.n	8005080 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005026:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005030:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005036:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	4b12      	ldr	r3, [pc, #72]	; (8005090 <FMC_SDRAM_Init+0xe0>)
 8005048:	4013      	ands	r3, r2
 800504a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005054:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800505a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8005060:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8005066:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800506c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	4313      	orrs	r3, r2
 8005072:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	ffff8000 	.word	0xffff8000

08005094 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d02e      	beq.n	800510c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80050ba:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80050ca:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80050d4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	3b01      	subs	r3, #1
 80050dc:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80050de:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80050e8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80050f2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	3b01      	subs	r3, #1
 80050fa:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80050fc:	4313      	orrs	r3, r2
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	609a      	str	r2, [r3, #8]
 800510a:	e039      	b.n	8005180 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4b1e      	ldr	r3, [pc, #120]	; (8005190 <FMC_SDRAM_Timing_Init+0xfc>)
 8005116:	4013      	ands	r3, r2
 8005118:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	3b01      	subs	r3, #1
 8005120:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	3b01      	subs	r3, #1
 8005128:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800512a:	4313      	orrs	r3, r2
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800513e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	3b01      	subs	r3, #1
 800514c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800514e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	3b01      	subs	r3, #1
 8005156:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005158:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	3b01      	subs	r3, #1
 8005160:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005162:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	3b01      	subs	r3, #1
 800516a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800516c:	4313      	orrs	r3, r2
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	371c      	adds	r7, #28
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	ff0f0fff 	.word	0xff0f0fff

08005194 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005194:	b084      	sub	sp, #16
 8005196:	b480      	push	{r7}
 8005198:	b085      	sub	sp, #20
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	f107 001c 	add.w	r0, r7, #28
 80051a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80051aa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80051ac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80051ae:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80051b2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80051b6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80051b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80051ba:	431a      	orrs	r2, r3
             Init.ClockDiv
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80051be:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <SDMMC_Init+0x54>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	b004      	add	sp, #16
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	ffff8100 	.word	0xffff8100

080051ec <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2203      	movs	r2, #3
 8005234:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0303 	and.w	r3, r3, #3
}
 8005254:	4618      	mov	r0, r3
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800527e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005284:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800528a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <SDMMC_SendCommand+0x50>)
 8005298:	4013      	ands	r3, r2
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	fffff000 	.word	0xfffff000

080052b4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	b2db      	uxtb	r3, r3
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b085      	sub	sp, #20
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3314      	adds	r3, #20
 80052e0:	461a      	mov	r2, r3
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	4413      	add	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
}  
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800531e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005324:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800532a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005342:	2300      	movs	r3, #0

}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800535a:	2300      	movs	r3, #0
 800535c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005362:	2310      	movs	r3, #16
 8005364:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005366:	2340      	movs	r3, #64	; 0x40
 8005368:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800536e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005372:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005374:	f107 0308 	add.w	r3, r7, #8
 8005378:	4619      	mov	r1, r3
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff ff70 	bl	8005260 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005380:	f241 3288 	movw	r2, #5000	; 0x1388
 8005384:	2110      	movs	r1, #16
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fa64 	bl	8005854 <SDMMC_GetCmdResp1>
 800538c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800538e:	69fb      	ldr	r3, [r7, #28]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3720      	adds	r7, #32
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80053aa:	2311      	movs	r3, #17
 80053ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053ae:	2340      	movs	r3, #64	; 0x40
 80053b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053ba:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80053bc:	f107 0308 	add.w	r3, r7, #8
 80053c0:	4619      	mov	r1, r3
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff ff4c 	bl	8005260 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80053c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053cc:	2111      	movs	r1, #17
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fa40 	bl	8005854 <SDMMC_GetCmdResp1>
 80053d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053d6:	69fb      	ldr	r3, [r7, #28]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3720      	adds	r7, #32
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80053f2:	2312      	movs	r3, #18
 80053f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053f6:	2340      	movs	r3, #64	; 0x40
 80053f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005402:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005404:	f107 0308 	add.w	r3, r7, #8
 8005408:	4619      	mov	r1, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff ff28 	bl	8005260 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005410:	f241 3288 	movw	r2, #5000	; 0x1388
 8005414:	2112      	movs	r1, #18
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa1c 	bl	8005854 <SDMMC_GetCmdResp1>
 800541c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800541e:	69fb      	ldr	r3, [r7, #28]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3720      	adds	r7, #32
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005432:	2300      	movs	r3, #0
 8005434:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800543a:	2318      	movs	r3, #24
 800543c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800543e:	2340      	movs	r3, #64	; 0x40
 8005440:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005442:	2300      	movs	r3, #0
 8005444:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800544a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800544c:	f107 0308 	add.w	r3, r7, #8
 8005450:	4619      	mov	r1, r3
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff ff04 	bl	8005260 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005458:	f241 3288 	movw	r2, #5000	; 0x1388
 800545c:	2118      	movs	r1, #24
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f9f8 	bl	8005854 <SDMMC_GetCmdResp1>
 8005464:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005466:	69fb      	ldr	r3, [r7, #28]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3720      	adds	r7, #32
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800547a:	2300      	movs	r3, #0
 800547c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005482:	2319      	movs	r3, #25
 8005484:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005486:	2340      	movs	r3, #64	; 0x40
 8005488:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800548e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005492:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005494:	f107 0308 	add.w	r3, r7, #8
 8005498:	4619      	mov	r1, r3
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff fee0 	bl	8005260 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80054a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a4:	2119      	movs	r1, #25
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f9d4 	bl	8005854 <SDMMC_GetCmdResp1>
 80054ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054ae:	69fb      	ldr	r3, [r7, #28]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3720      	adds	r7, #32
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80054c8:	230c      	movs	r3, #12
 80054ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80054cc:	2340      	movs	r3, #64	; 0x40
 80054ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80054d0:	2300      	movs	r3, #0
 80054d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80054d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054d8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054da:	f107 0308 	add.w	r3, r7, #8
 80054de:	4619      	mov	r1, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff febd 	bl	8005260 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 80054e6:	4a05      	ldr	r2, [pc, #20]	; (80054fc <SDMMC_CmdStopTransfer+0x44>)
 80054e8:	210c      	movs	r1, #12
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f9b2 	bl	8005854 <SDMMC_GetCmdResp1>
 80054f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054f2:	69fb      	ldr	r3, [r7, #28]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3720      	adds	r7, #32
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	05f5e100 	.word	0x05f5e100

08005500 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08a      	sub	sp, #40	; 0x28
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800550c:	2300      	movs	r3, #0
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005514:	2307      	movs	r3, #7
 8005516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005518:	2340      	movs	r3, #64	; 0x40
 800551a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800551c:	2300      	movs	r3, #0
 800551e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005524:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005526:	f107 0310 	add.w	r3, r7, #16
 800552a:	4619      	mov	r1, r3
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f7ff fe97 	bl	8005260 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005532:	f241 3288 	movw	r2, #5000	; 0x1388
 8005536:	2107      	movs	r1, #7
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f98b 	bl	8005854 <SDMMC_GetCmdResp1>
 800553e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005542:	4618      	mov	r0, r3
 8005544:	3728      	adds	r7, #40	; 0x28
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b088      	sub	sp, #32
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005552:	2300      	movs	r3, #0
 8005554:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8005556:	2300      	movs	r3, #0
 8005558:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800555e:	2300      	movs	r3, #0
 8005560:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005562:	2300      	movs	r3, #0
 8005564:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800556a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800556c:	f107 0308 	add.w	r3, r7, #8
 8005570:	4619      	mov	r1, r3
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff fe74 	bl	8005260 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f941 	bl	8005800 <SDMMC_GetCmdError>
 800557e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005580:	69fb      	ldr	r3, [r7, #28]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3720      	adds	r7, #32
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b088      	sub	sp, #32
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005596:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800559a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800559c:	2308      	movs	r3, #8
 800559e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80055a0:	2340      	movs	r3, #64	; 0x40
 80055a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ac:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055ae:	f107 0308 	add.w	r3, r7, #8
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff fe53 	bl	8005260 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fb12 	bl	8005be4 <SDMMC_GetCmdResp7>
 80055c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055c2:	69fb      	ldr	r3, [r7, #28]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3720      	adds	r7, #32
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80055d6:	2300      	movs	r3, #0
 80055d8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80055de:	2337      	movs	r3, #55	; 0x37
 80055e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80055e2:	2340      	movs	r3, #64	; 0x40
 80055e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ee:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055f0:	f107 0308 	add.w	r3, r7, #8
 80055f4:	4619      	mov	r1, r3
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff fe32 	bl	8005260 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80055fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005600:	2137      	movs	r1, #55	; 0x37
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f926 	bl	8005854 <SDMMC_GetCmdResp1>
 8005608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800560a:	69fb      	ldr	r3, [r7, #28]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3720      	adds	r7, #32
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800561e:	2300      	movs	r3, #0
 8005620:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	4b0d      	ldr	r3, [pc, #52]	; (800565c <SDMMC_CmdAppOperCommand+0x48>)
 8005626:	4313      	orrs	r3, r2
 8005628:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800562a:	2329      	movs	r3, #41	; 0x29
 800562c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800562e:	2340      	movs	r3, #64	; 0x40
 8005630:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800563a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800563c:	f107 0308 	add.w	r3, r7, #8
 8005640:	4619      	mov	r1, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff fe0c 	bl	8005260 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fa29 	bl	8005aa0 <SDMMC_GetCmdResp3>
 800564e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005650:	69fb      	ldr	r3, [r7, #28]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3720      	adds	r7, #32
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	80100000 	.word	0x80100000

08005660 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800566a:	2300      	movs	r3, #0
 800566c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005672:	2306      	movs	r3, #6
 8005674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005676:	2340      	movs	r3, #64	; 0x40
 8005678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800567e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005682:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005684:	f107 0308 	add.w	r3, r7, #8
 8005688:	4619      	mov	r1, r3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff fde8 	bl	8005260 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005690:	f241 3288 	movw	r2, #5000	; 0x1388
 8005694:	2106      	movs	r1, #6
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f8dc 	bl	8005854 <SDMMC_GetCmdResp1>
 800569c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800569e:	69fb      	ldr	r3, [r7, #28]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3720      	adds	r7, #32
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80056b8:	2333      	movs	r3, #51	; 0x33
 80056ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80056bc:	2340      	movs	r3, #64	; 0x40
 80056be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80056c0:	2300      	movs	r3, #0
 80056c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056c8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056ca:	f107 0308 	add.w	r3, r7, #8
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7ff fdc5 	bl	8005260 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80056d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056da:	2133      	movs	r1, #51	; 0x33
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f8b9 	bl	8005854 <SDMMC_GetCmdResp1>
 80056e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056e4:	69fb      	ldr	r3, [r7, #28]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3720      	adds	r7, #32
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b088      	sub	sp, #32
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80056fe:	2302      	movs	r3, #2
 8005700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005702:	23c0      	movs	r3, #192	; 0xc0
 8005704:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005706:	2300      	movs	r3, #0
 8005708:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800570a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800570e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005710:	f107 0308 	add.w	r3, r7, #8
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff fda2 	bl	8005260 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f97f 	bl	8005a20 <SDMMC_GetCmdResp2>
 8005722:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005724:	69fb      	ldr	r3, [r7, #28]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3720      	adds	r7, #32
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b088      	sub	sp, #32
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005738:	2300      	movs	r3, #0
 800573a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005740:	2309      	movs	r3, #9
 8005742:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005744:	23c0      	movs	r3, #192	; 0xc0
 8005746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800574c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005750:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005752:	f107 0308 	add.w	r3, r7, #8
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff fd81 	bl	8005260 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f95e 	bl	8005a20 <SDMMC_GetCmdResp2>
 8005764:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005766:	69fb      	ldr	r3, [r7, #28]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3720      	adds	r7, #32
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800577a:	2300      	movs	r3, #0
 800577c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800577e:	2300      	movs	r3, #0
 8005780:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005782:	2303      	movs	r3, #3
 8005784:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005786:	2340      	movs	r3, #64	; 0x40
 8005788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800578e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005792:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005794:	f107 0308 	add.w	r3, r7, #8
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7ff fd60 	bl	8005260 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	2103      	movs	r1, #3
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f9af 	bl	8005b08 <SDMMC_GetCmdResp6>
 80057aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057ac:	69fb      	ldr	r3, [r7, #28]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3720      	adds	r7, #32
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b088      	sub	sp, #32
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80057c0:	2300      	movs	r3, #0
 80057c2:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80057c8:	230d      	movs	r3, #13
 80057ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80057cc:	2340      	movs	r3, #64	; 0x40
 80057ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80057d0:	2300      	movs	r3, #0
 80057d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80057d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057d8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80057da:	f107 0308 	add.w	r3, r7, #8
 80057de:	4619      	mov	r1, r3
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff fd3d 	bl	8005260 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80057e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ea:	210d      	movs	r1, #13
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f831 	bl	8005854 <SDMMC_GetCmdResp1>
 80057f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057f4:	69fb      	ldr	r3, [r7, #28]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005800:	b490      	push	{r4, r7}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005808:	4b10      	ldr	r3, [pc, #64]	; (800584c <SDMMC_GetCmdError+0x4c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a10      	ldr	r2, [pc, #64]	; (8005850 <SDMMC_GetCmdError+0x50>)
 800580e:	fba2 2303 	umull	r2, r3, r2, r3
 8005812:	0a5b      	lsrs	r3, r3, #9
 8005814:	f241 3288 	movw	r2, #5000	; 0x1388
 8005818:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800581c:	4623      	mov	r3, r4
 800581e:	1e5c      	subs	r4, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d102      	bne.n	800582a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005824:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005828:	e00a      	b.n	8005840 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800582e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0f2      	beq.n	800581c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800583c:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bc90      	pop	{r4, r7}
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	20000000 	.word	0x20000000
 8005850:	10624dd3 	.word	0x10624dd3

08005854 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005854:	b590      	push	{r4, r7, lr}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	460b      	mov	r3, r1
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005862:	4b6c      	ldr	r3, [pc, #432]	; (8005a14 <SDMMC_GetCmdResp1+0x1c0>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a6c      	ldr	r2, [pc, #432]	; (8005a18 <SDMMC_GetCmdResp1+0x1c4>)
 8005868:	fba2 2303 	umull	r2, r3, r2, r3
 800586c:	0a5b      	lsrs	r3, r3, #9
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005874:	4623      	mov	r3, r4
 8005876:	1e5c      	subs	r4, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d102      	bne.n	8005882 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800587c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005880:	e0c3      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005886:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f2      	beq.n	8005874 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	2b00      	cmp	r3, #0
 8005898:	d004      	beq.n	80058a4 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2204      	movs	r2, #4
 800589e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80058a0:	2304      	movs	r3, #4
 80058a2:	e0b2      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d004      	beq.n	80058ba <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2201      	movs	r2, #1
 80058b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e0a7      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f7ff fcfa 	bl	80052b4 <SDMMC_GetCommandResponse>
 80058c0:	4603      	mov	r3, r0
 80058c2:	461a      	mov	r2, r3
 80058c4:	7afb      	ldrb	r3, [r7, #11]
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d001      	beq.n	80058ce <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e09d      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80058d4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80058d6:	2100      	movs	r1, #0
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f7ff fcf8 	bl	80052ce <SDMMC_GetResponse>
 80058de:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	4b4e      	ldr	r3, [pc, #312]	; (8005a1c <SDMMC_GetCmdResp1+0x1c8>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 80058ea:	2300      	movs	r3, #0
 80058ec:	e08d      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	da02      	bge.n	80058fa <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80058f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058f8:	e087      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005904:	2340      	movs	r3, #64	; 0x40
 8005906:	e080      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005912:	2380      	movs	r3, #128	; 0x80
 8005914:	e079      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005924:	e071      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005934:	e069      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005944:	e061      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005950:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005954:	e059      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005964:	e051      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005974:	e049      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005980:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005984:	e041      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8005990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005994:	e039      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80059a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059a4:	e031      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80059b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80059b4:	e029      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80059c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80059c4:	e021      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80059d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80059d4:	e019      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80059e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80059e4:	e011      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80059f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80059f4:	e009      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005a00:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005a04:	e001      	b.n	8005a0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005a06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	371c      	adds	r7, #28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd90      	pop	{r4, r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000000 	.word	0x20000000
 8005a18:	10624dd3 	.word	0x10624dd3
 8005a1c:	fdffe008 	.word	0xfdffe008

08005a20 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005a20:	b490      	push	{r4, r7}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005a28:	4b1b      	ldr	r3, [pc, #108]	; (8005a98 <SDMMC_GetCmdResp2+0x78>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a1b      	ldr	r2, [pc, #108]	; (8005a9c <SDMMC_GetCmdResp2+0x7c>)
 8005a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a32:	0a5b      	lsrs	r3, r3, #9
 8005a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a38:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005a3c:	4623      	mov	r3, r4
 8005a3e:	1e5c      	subs	r4, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a48:	e020      	b.n	8005a8c <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0f2      	beq.n	8005a3c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d004      	beq.n	8005a6c <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2204      	movs	r2, #4
 8005a66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a68:	2304      	movs	r3, #4
 8005a6a:	e00f      	b.n	8005a8c <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d004      	beq.n	8005a82 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e004      	b.n	8005a8c <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc90      	pop	{r4, r7}
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	20000000 	.word	0x20000000
 8005a9c:	10624dd3 	.word	0x10624dd3

08005aa0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005aa0:	b490      	push	{r4, r7}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005aa8:	4b15      	ldr	r3, [pc, #84]	; (8005b00 <SDMMC_GetCmdResp3+0x60>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a15      	ldr	r2, [pc, #84]	; (8005b04 <SDMMC_GetCmdResp3+0x64>)
 8005aae:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab2:	0a5b      	lsrs	r3, r3, #9
 8005ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005abc:	4623      	mov	r3, r4
 8005abe:	1e5c      	subs	r4, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d102      	bne.n	8005aca <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ac4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ac8:	e015      	b.n	8005af6 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ace:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0f2      	beq.n	8005abc <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d004      	beq.n	8005aec <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2204      	movs	r2, #4
 8005ae6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ae8:	2304      	movs	r3, #4
 8005aea:	e004      	b.n	8005af6 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bc90      	pop	{r4, r7}
 8005afe:	4770      	bx	lr
 8005b00:	20000000 	.word	0x20000000
 8005b04:	10624dd3 	.word	0x10624dd3

08005b08 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005b08:	b590      	push	{r4, r7, lr}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	460b      	mov	r3, r1
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005b16:	4b31      	ldr	r3, [pc, #196]	; (8005bdc <SDMMC_GetCmdResp6+0xd4>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a31      	ldr	r2, [pc, #196]	; (8005be0 <SDMMC_GetCmdResp6+0xd8>)
 8005b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b20:	0a5b      	lsrs	r3, r3, #9
 8005b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b26:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005b2a:	4623      	mov	r3, r4
 8005b2c:	1e5c      	subs	r4, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d102      	bne.n	8005b38 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b36:	e04c      	b.n	8005bd2 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0f2      	beq.n	8005b2a <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d004      	beq.n	8005b5a <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2204      	movs	r2, #4
 8005b54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b56:	2304      	movs	r3, #4
 8005b58:	e03b      	b.n	8005bd2 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d004      	beq.n	8005b70 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e030      	b.n	8005bd2 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f7ff fb9f 	bl	80052b4 <SDMMC_GetCommandResponse>
 8005b76:	4603      	mov	r3, r0
 8005b78:	461a      	mov	r2, r3
 8005b7a:	7afb      	ldrb	r3, [r7, #11]
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d001      	beq.n	8005b84 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e026      	b.n	8005bd2 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005b8a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f7ff fb9d 	bl	80052ce <SDMMC_GetResponse>
 8005b94:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d106      	bne.n	8005bae <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	0c1b      	lsrs	r3, r3, #16
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005baa:	2300      	movs	r3, #0
 8005bac:	e011      	b.n	8005bd2 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bbc:	e009      	b.n	8005bd2 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bcc:	e001      	b.n	8005bd2 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005bce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd90      	pop	{r4, r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000000 	.word	0x20000000
 8005be0:	10624dd3 	.word	0x10624dd3

08005be4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005be4:	b490      	push	{r4, r7}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005bec:	4b18      	ldr	r3, [pc, #96]	; (8005c50 <SDMMC_GetCmdResp7+0x6c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a18      	ldr	r2, [pc, #96]	; (8005c54 <SDMMC_GetCmdResp7+0x70>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	0a5b      	lsrs	r3, r3, #9
 8005bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bfc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005c00:	4623      	mov	r3, r4
 8005c02:	1e5c      	subs	r4, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d102      	bne.n	8005c0e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c0c:	e01a      	b.n	8005c44 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c12:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0f2      	beq.n	8005c00 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d004      	beq.n	8005c30 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2240      	movs	r2, #64	; 0x40
 8005c2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	e009      	b.n	8005c44 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2240      	movs	r2, #64	; 0x40
 8005c40:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005c42:	2300      	movs	r3, #0
  
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc90      	pop	{r4, r7}
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	20000000 	.word	0x20000000
 8005c54:	10624dd3 	.word	0x10624dd3

08005c58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005c5c:	4904      	ldr	r1, [pc, #16]	; (8005c70 <MX_FATFS_Init+0x18>)
 8005c5e:	4805      	ldr	r0, [pc, #20]	; (8005c74 <MX_FATFS_Init+0x1c>)
 8005c60:	f000 fe62 	bl	8006928 <FATFS_LinkDriver>
 8005c64:	4603      	mov	r3, r0
 8005c66:	461a      	mov	r2, r3
 8005c68:	4b03      	ldr	r3, [pc, #12]	; (8005c78 <MX_FATFS_Init+0x20>)
 8005c6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005c6c:	bf00      	nop
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	2000024c 	.word	0x2000024c
 8005c74:	08006af8 	.word	0x08006af8
 8005c78:	20000248 	.word	0x20000248

08005c7c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005c86:	f000 f879 	bl	8005d7c <BSP_SD_IsDetected>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d001      	beq.n	8005c94 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005c90:	2302      	movs	r3, #2
 8005c92:	e012      	b.n	8005cba <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8005c94:	480b      	ldr	r0, [pc, #44]	; (8005cc4 <BSP_SD_Init+0x48>)
 8005c96:	f7fd f8d5 	bl	8002e44 <HAL_SD_Init>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005c9e:	79fb      	ldrb	r3, [r7, #7]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d109      	bne.n	8005cb8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8005ca4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ca8:	4806      	ldr	r0, [pc, #24]	; (8005cc4 <BSP_SD_Init+0x48>)
 8005caa:	f7fd feab 	bl	8003a04 <HAL_SD_ConfigWideBusOperation>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005cb8:	79fb      	ldrb	r3, [r7, #7]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	200000cc 	.word	0x200000cc

08005cc8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	68f9      	ldr	r1, [r7, #12]
 8005ce4:	4806      	ldr	r0, [pc, #24]	; (8005d00 <BSP_SD_ReadBlocks+0x38>)
 8005ce6:	f7fd f93c 	bl	8002f62 <HAL_SD_ReadBlocks>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	200000cc 	.word	0x200000cc

08005d04 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af02      	add	r7, sp, #8
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	68f9      	ldr	r1, [r7, #12]
 8005d20:	4806      	ldr	r0, [pc, #24]	; (8005d3c <BSP_SD_WriteBlocks+0x38>)
 8005d22:	f7fd fab4 	bl	800328e <HAL_SD_WriteBlocks>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	200000cc 	.word	0x200000cc

08005d40 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005d44:	4805      	ldr	r0, [pc, #20]	; (8005d5c <BSP_SD_GetCardState+0x1c>)
 8005d46:	f7fd fed9 	bl	8003afc <HAL_SD_GetCardState>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b04      	cmp	r3, #4
 8005d4e:	bf14      	ite	ne
 8005d50:	2301      	movne	r3, #1
 8005d52:	2300      	moveq	r3, #0
 8005d54:	b2db      	uxtb	r3, r3
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	200000cc 	.word	0x200000cc

08005d60 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8005d68:	6879      	ldr	r1, [r7, #4]
 8005d6a:	4803      	ldr	r0, [pc, #12]	; (8005d78 <BSP_SD_GetCardInfo+0x18>)
 8005d6c:	f7fd fe1e 	bl	80039ac <HAL_SD_GetCardInfo>
}
 8005d70:	bf00      	nop
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	200000cc 	.word	0x200000cc

08005d7c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005d82:	2301      	movs	r3, #1
 8005d84:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8005d86:	f000 f80b 	bl	8005da0 <BSP_PlatformIsDetected>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005d90:	2300      	movs	r3, #0
 8005d92:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005d94:	79fb      	ldrb	r3, [r7, #7]
 8005d96:	b2db      	uxtb	r3, r3
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005da6:	2301      	movs	r3, #1
 8005da8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005daa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dae:	4806      	ldr	r0, [pc, #24]	; (8005dc8 <BSP_PlatformIsDetected+0x28>)
 8005db0:	f7fb feba 	bl	8001b28 <HAL_GPIO_ReadPin>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8005dbe:	79fb      	ldrb	r3, [r7, #7]
}  
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	40022000 	.word	0x40022000

08005dcc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <SD_CheckStatus+0x38>)
 8005dd8:	2201      	movs	r2, #1
 8005dda:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005ddc:	f7ff ffb0 	bl	8005d40 <BSP_SD_GetCardState>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d107      	bne.n	8005df6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005de6:	4b07      	ldr	r3, [pc, #28]	; (8005e04 <SD_CheckStatus+0x38>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	f023 0301 	bic.w	r3, r3, #1
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	4b04      	ldr	r3, [pc, #16]	; (8005e04 <SD_CheckStatus+0x38>)
 8005df4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005df6:	4b03      	ldr	r3, [pc, #12]	; (8005e04 <SD_CheckStatus+0x38>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	b2db      	uxtb	r3, r3
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20000005 	.word	0x20000005

08005e08 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	4603      	mov	r3, r0
 8005e10:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8005e12:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <SD_initialize+0x38>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005e18:	f7ff ff30 	bl	8005c7c <BSP_SD_Init>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d107      	bne.n	8005e32 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005e22:	79fb      	ldrb	r3, [r7, #7]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff ffd1 	bl	8005dcc <SD_CheckStatus>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4b04      	ldr	r3, [pc, #16]	; (8005e40 <SD_initialize+0x38>)
 8005e30:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8005e32:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <SD_initialize+0x38>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	b2db      	uxtb	r3, r3
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	20000005 	.word	0x20000005

08005e44 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005e4e:	79fb      	ldrb	r3, [r7, #7]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7ff ffbb 	bl	8005dcc <SD_CheckStatus>
 8005e56:	4603      	mov	r3, r0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
 8005e6a:	603b      	str	r3, [r7, #0]
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005e74:	f04f 33ff 	mov.w	r3, #4294967295
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	6879      	ldr	r1, [r7, #4]
 8005e7c:	68b8      	ldr	r0, [r7, #8]
 8005e7e:	f7ff ff23 	bl	8005cc8 <BSP_SD_ReadBlocks>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d107      	bne.n	8005e98 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005e88:	bf00      	nop
 8005e8a:	f7ff ff59 	bl	8005d40 <BSP_SD_GetCardState>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1fa      	bne.n	8005e8a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b086      	sub	sp, #24
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
 8005eac:	603b      	str	r3, [r7, #0]
 8005eae:	4603      	mov	r3, r0
 8005eb0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	68b8      	ldr	r0, [r7, #8]
 8005ec0:	f7ff ff20 	bl	8005d04 <BSP_SD_WriteBlocks>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d107      	bne.n	8005eda <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005eca:	bf00      	nop
 8005ecc:	f7ff ff38 	bl	8005d40 <BSP_SD_GetCardState>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1fa      	bne.n	8005ecc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08c      	sub	sp, #48	; 0x30
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4603      	mov	r3, r0
 8005eec:	603a      	str	r2, [r7, #0]
 8005eee:	71fb      	strb	r3, [r7, #7]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005efa:	4b25      	ldr	r3, [pc, #148]	; (8005f90 <SD_ioctl+0xac>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <SD_ioctl+0x28>
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e03c      	b.n	8005f86 <SD_ioctl+0xa2>

  switch (cmd)
 8005f0c:	79bb      	ldrb	r3, [r7, #6]
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	d834      	bhi.n	8005f7c <SD_ioctl+0x98>
 8005f12:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <SD_ioctl+0x34>)
 8005f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f18:	08005f29 	.word	0x08005f29
 8005f1c:	08005f31 	.word	0x08005f31
 8005f20:	08005f49 	.word	0x08005f49
 8005f24:	08005f63 	.word	0x08005f63
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005f2e:	e028      	b.n	8005f82 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005f30:	f107 030c 	add.w	r3, r7, #12
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff ff13 	bl	8005d60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005f46:	e01c      	b.n	8005f82 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005f48:	f107 030c 	add.w	r3, r7, #12
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff ff07 	bl	8005d60 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005f60:	e00f      	b.n	8005f82 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005f62:	f107 030c 	add.w	r3, r7, #12
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff fefa 	bl	8005d60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6e:	0a5a      	lsrs	r2, r3, #9
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005f7a:	e002      	b.n	8005f82 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005f7c:	2304      	movs	r3, #4
 8005f7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005f82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3730      	adds	r7, #48	; 0x30
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000005 	.word	0x20000005

08005f94 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
 8005fa0:	4a08      	ldr	r2, [pc, #32]	; (8005fc4 <disk_status+0x30>)
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	79fa      	ldrb	r2, [r7, #7]
 8005fac:	4905      	ldr	r1, [pc, #20]	; (8005fc4 <disk_status+0x30>)
 8005fae:	440a      	add	r2, r1
 8005fb0:	7a12      	ldrb	r2, [r2, #8]
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	4798      	blx	r3
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	200000b8 	.word	0x200000b8

08005fc8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	4a0d      	ldr	r2, [pc, #52]	; (8006010 <disk_initialize+0x48>)
 8005fda:	5cd3      	ldrb	r3, [r2, r3]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d111      	bne.n	8006004 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005fe0:	79fb      	ldrb	r3, [r7, #7]
 8005fe2:	4a0b      	ldr	r2, [pc, #44]	; (8006010 <disk_initialize+0x48>)
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005fe8:	79fb      	ldrb	r3, [r7, #7]
 8005fea:	4a09      	ldr	r2, [pc, #36]	; (8006010 <disk_initialize+0x48>)
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	79fa      	ldrb	r2, [r7, #7]
 8005ff6:	4906      	ldr	r1, [pc, #24]	; (8006010 <disk_initialize+0x48>)
 8005ff8:	440a      	add	r2, r1
 8005ffa:	7a12      	ldrb	r2, [r2, #8]
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	4798      	blx	r3
 8006000:	4603      	mov	r3, r0
 8006002:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006004:	7bfb      	ldrb	r3, [r7, #15]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	200000b8 	.word	0x200000b8

08006014 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006014:	b590      	push	{r4, r7, lr}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	603b      	str	r3, [r7, #0]
 8006020:	4603      	mov	r3, r0
 8006022:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	4a0a      	ldr	r2, [pc, #40]	; (8006050 <disk_read+0x3c>)
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	689c      	ldr	r4, [r3, #8]
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	4a07      	ldr	r2, [pc, #28]	; (8006050 <disk_read+0x3c>)
 8006034:	4413      	add	r3, r2
 8006036:	7a18      	ldrb	r0, [r3, #8]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	47a0      	blx	r4
 8006040:	4603      	mov	r3, r0
 8006042:	75fb      	strb	r3, [r7, #23]
  return res;
 8006044:	7dfb      	ldrb	r3, [r7, #23]
}
 8006046:	4618      	mov	r0, r3
 8006048:	371c      	adds	r7, #28
 800604a:	46bd      	mov	sp, r7
 800604c:	bd90      	pop	{r4, r7, pc}
 800604e:	bf00      	nop
 8006050:	200000b8 	.word	0x200000b8

08006054 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006054:	b590      	push	{r4, r7, lr}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	607a      	str	r2, [r7, #4]
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	4603      	mov	r3, r0
 8006062:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	4a0a      	ldr	r2, [pc, #40]	; (8006090 <disk_write+0x3c>)
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	68dc      	ldr	r4, [r3, #12]
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	4a07      	ldr	r2, [pc, #28]	; (8006090 <disk_write+0x3c>)
 8006074:	4413      	add	r3, r2
 8006076:	7a18      	ldrb	r0, [r3, #8]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	68b9      	ldr	r1, [r7, #8]
 800607e:	47a0      	blx	r4
 8006080:	4603      	mov	r3, r0
 8006082:	75fb      	strb	r3, [r7, #23]
  return res;
 8006084:	7dfb      	ldrb	r3, [r7, #23]
}
 8006086:	4618      	mov	r0, r3
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	bd90      	pop	{r4, r7, pc}
 800608e:	bf00      	nop
 8006090:	200000b8 	.word	0x200000b8

08006094 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3301      	adds	r3, #1
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80060a4:	89fb      	ldrh	r3, [r7, #14]
 80060a6:	021b      	lsls	r3, r3, #8
 80060a8:	b21a      	sxth	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	b21b      	sxth	r3, r3
 80060b0:	4313      	orrs	r3, r2
 80060b2:	b21b      	sxth	r3, r3
 80060b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80060b6:	89fb      	ldrh	r3, [r7, #14]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3303      	adds	r3, #3
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	021b      	lsls	r3, r3, #8
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	3202      	adds	r2, #2
 80060dc:	7812      	ldrb	r2, [r2, #0]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	021b      	lsls	r3, r3, #8
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	3201      	adds	r2, #1
 80060ea:	7812      	ldrb	r2, [r2, #0]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	021b      	lsls	r3, r3, #8
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	7812      	ldrb	r2, [r2, #0]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80060fc:	68fb      	ldr	r3, [r7, #12]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
	...

0800610c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006114:	2300      	movs	r3, #0
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	e010      	b.n	800613c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800611a:	4a0d      	ldr	r2, [pc, #52]	; (8006150 <clear_lock+0x44>)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	4413      	add	r3, r2
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	429a      	cmp	r2, r3
 8006128:	d105      	bne.n	8006136 <clear_lock+0x2a>
 800612a:	4a09      	ldr	r2, [pc, #36]	; (8006150 <clear_lock+0x44>)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	4413      	add	r3, r2
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	3301      	adds	r3, #1
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d9eb      	bls.n	800611a <clear_lock+0xe>
	}
}
 8006142:	bf00      	nop
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	20000098 	.word	0x20000098

08006154 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800615c:	2300      	movs	r3, #0
 800615e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	78db      	ldrb	r3, [r3, #3]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d034      	beq.n	80061d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	7858      	ldrb	r0, [r3, #1]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006178:	2301      	movs	r3, #1
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	f7ff ff6a 	bl	8006054 <disk_write>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006186:	2301      	movs	r3, #1
 8006188:	73fb      	strb	r3, [r7, #15]
 800618a:	e022      	b.n	80061d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	1ad2      	subs	r2, r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d217      	bcs.n	80061d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	789b      	ldrb	r3, [r3, #2]
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	e010      	b.n	80061cc <sync_window+0x78>
					wsect += fs->fsize;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4413      	add	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	7858      	ldrb	r0, [r3, #1]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80061be:	2301      	movs	r3, #1
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	f7ff ff47 	bl	8006054 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	613b      	str	r3, [r7, #16]
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d8eb      	bhi.n	80061aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80061d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d01b      	beq.n	800622c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff ffad 	bl	8006154 <sync_window>
 80061fa:	4603      	mov	r3, r0
 80061fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d113      	bne.n	800622c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	7858      	ldrb	r0, [r3, #1]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800620e:	2301      	movs	r3, #1
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	f7ff feff 	bl	8006014 <disk_read>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d004      	beq.n	8006226 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800621c:	f04f 33ff 	mov.w	r3, #4294967295
 8006220:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006222:	2301      	movs	r3, #1
 8006224:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800622c:	7bfb      	ldrb	r3, [r7, #15]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006236:	b480      	push	{r7}
 8006238:	b087      	sub	sp, #28
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800623e:	f04f 33ff 	mov.w	r3, #4294967295
 8006242:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d031      	beq.n	80062b0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	e002      	b.n	800625a <get_ldnumber+0x24>
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	3301      	adds	r3, #1
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b20      	cmp	r3, #32
 8006260:	d903      	bls.n	800626a <get_ldnumber+0x34>
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b3a      	cmp	r3, #58	; 0x3a
 8006268:	d1f4      	bne.n	8006254 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b3a      	cmp	r3, #58	; 0x3a
 8006270:	d11c      	bne.n	80062ac <get_ldnumber+0x76>
			tp = *path;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	1c5a      	adds	r2, r3, #1
 800627c:	60fa      	str	r2, [r7, #12]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	3b30      	subs	r3, #48	; 0x30
 8006282:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b09      	cmp	r3, #9
 8006288:	d80e      	bhi.n	80062a8 <get_ldnumber+0x72>
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	429a      	cmp	r2, r3
 8006290:	d10a      	bne.n	80062a8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d107      	bne.n	80062a8 <get_ldnumber+0x72>
					vol = (int)i;
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	3301      	adds	r3, #1
 80062a0:	617b      	str	r3, [r7, #20]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	e002      	b.n	80062b2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80062ac:	2300      	movs	r3, #0
 80062ae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80062b0:	693b      	ldr	r3, [r7, #16]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
	...

080062c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	70da      	strb	r2, [r3, #3]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f04f 32ff 	mov.w	r2, #4294967295
 80062d6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7ff ff7e 	bl	80061dc <move_window>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <check_fs+0x2a>
 80062e6:	2304      	movs	r3, #4
 80062e8:	e038      	b.n	800635c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3330      	adds	r3, #48	; 0x30
 80062ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff fece 	bl	8006094 <ld_word>
 80062f8:	4603      	mov	r3, r0
 80062fa:	461a      	mov	r2, r3
 80062fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006300:	429a      	cmp	r2, r3
 8006302:	d001      	beq.n	8006308 <check_fs+0x48>
 8006304:	2303      	movs	r3, #3
 8006306:	e029      	b.n	800635c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800630e:	2be9      	cmp	r3, #233	; 0xe9
 8006310:	d009      	beq.n	8006326 <check_fs+0x66>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006318:	2beb      	cmp	r3, #235	; 0xeb
 800631a:	d11e      	bne.n	800635a <check_fs+0x9a>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006322:	2b90      	cmp	r3, #144	; 0x90
 8006324:	d119      	bne.n	800635a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	3330      	adds	r3, #48	; 0x30
 800632a:	3336      	adds	r3, #54	; 0x36
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff fec9 	bl	80060c4 <ld_dword>
 8006332:	4603      	mov	r3, r0
 8006334:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006338:	4a0a      	ldr	r2, [pc, #40]	; (8006364 <check_fs+0xa4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d101      	bne.n	8006342 <check_fs+0x82>
 800633e:	2300      	movs	r3, #0
 8006340:	e00c      	b.n	800635c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	3330      	adds	r3, #48	; 0x30
 8006346:	3352      	adds	r3, #82	; 0x52
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff febb 	bl	80060c4 <ld_dword>
 800634e:	4602      	mov	r2, r0
 8006350:	4b05      	ldr	r3, [pc, #20]	; (8006368 <check_fs+0xa8>)
 8006352:	429a      	cmp	r2, r3
 8006354:	d101      	bne.n	800635a <check_fs+0x9a>
 8006356:	2300      	movs	r3, #0
 8006358:	e000      	b.n	800635c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800635a:	2302      	movs	r3, #2
}
 800635c:	4618      	mov	r0, r3
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	00544146 	.word	0x00544146
 8006368:	33544146 	.word	0x33544146

0800636c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b096      	sub	sp, #88	; 0x58
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	4613      	mov	r3, r2
 8006378:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2200      	movs	r2, #0
 800637e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f7ff ff58 	bl	8006236 <get_ldnumber>
 8006386:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638a:	2b00      	cmp	r3, #0
 800638c:	da01      	bge.n	8006392 <find_volume+0x26>
 800638e:	230b      	movs	r3, #11
 8006390:	e22e      	b.n	80067f0 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006392:	4aa8      	ldr	r2, [pc, #672]	; (8006634 <find_volume+0x2c8>)
 8006394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800639a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800639c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <find_volume+0x3a>
 80063a2:	230c      	movs	r3, #12
 80063a4:	e224      	b.n	80067f0 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80063ac:	79fb      	ldrb	r3, [r7, #7]
 80063ae:	f023 0301 	bic.w	r3, r3, #1
 80063b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d01a      	beq.n	80063f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80063bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063be:	785b      	ldrb	r3, [r3, #1]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7ff fde7 	bl	8005f94 <disk_status>
 80063c6:	4603      	mov	r3, r0
 80063c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80063cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10c      	bne.n	80063f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d007      	beq.n	80063ee <find_volume+0x82>
 80063de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063e2:	f003 0304 	and.w	r3, r3, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80063ea:	230a      	movs	r3, #10
 80063ec:	e200      	b.n	80067f0 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80063ee:	2300      	movs	r3, #0
 80063f0:	e1fe      	b.n	80067f0 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80063f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f4:	2200      	movs	r2, #0
 80063f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80063f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	785b      	ldrb	r3, [r3, #1]
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fddf 	bl	8005fc8 <disk_initialize>
 800640a:	4603      	mov	r3, r0
 800640c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006410:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800641c:	2303      	movs	r3, #3
 800641e:	e1e7      	b.n	80067f0 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006420:	79fb      	ldrb	r3, [r7, #7]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d007      	beq.n	8006436 <find_volume+0xca>
 8006426:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800642a:	f003 0304 	and.w	r3, r3, #4
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006432:	230a      	movs	r3, #10
 8006434:	e1dc      	b.n	80067f0 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800643a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800643c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800643e:	f7ff ff3f 	bl	80062c0 <check_fs>
 8006442:	4603      	mov	r3, r0
 8006444:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006448:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800644c:	2b02      	cmp	r3, #2
 800644e:	d14b      	bne.n	80064e8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006450:	2300      	movs	r3, #0
 8006452:	643b      	str	r3, [r7, #64]	; 0x40
 8006454:	e01f      	b.n	8006496 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006458:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800645c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006464:	4413      	add	r3, r2
 8006466:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	3304      	adds	r3, #4
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d006      	beq.n	8006480 <find_volume+0x114>
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	3308      	adds	r3, #8
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff fe24 	bl	80060c4 <ld_dword>
 800647c:	4602      	mov	r2, r0
 800647e:	e000      	b.n	8006482 <find_volume+0x116>
 8006480:	2200      	movs	r2, #0
 8006482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800648a:	440b      	add	r3, r1
 800648c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006492:	3301      	adds	r3, #1
 8006494:	643b      	str	r3, [r7, #64]	; 0x40
 8006496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006498:	2b03      	cmp	r3, #3
 800649a:	d9dc      	bls.n	8006456 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800649c:	2300      	movs	r3, #0
 800649e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80064a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <find_volume+0x140>
 80064a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064a8:	3b01      	subs	r3, #1
 80064aa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80064ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80064b4:	4413      	add	r3, r2
 80064b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80064ba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80064bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d005      	beq.n	80064ce <find_volume+0x162>
 80064c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80064c6:	f7ff fefb 	bl	80062c0 <check_fs>
 80064ca:	4603      	mov	r3, r0
 80064cc:	e000      	b.n	80064d0 <find_volume+0x164>
 80064ce:	2303      	movs	r3, #3
 80064d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80064d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d905      	bls.n	80064e8 <find_volume+0x17c>
 80064dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064de:	3301      	adds	r3, #1
 80064e0:	643b      	str	r3, [r7, #64]	; 0x40
 80064e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d9e1      	bls.n	80064ac <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80064e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064ec:	2b04      	cmp	r3, #4
 80064ee:	d101      	bne.n	80064f4 <find_volume+0x188>
 80064f0:	2301      	movs	r3, #1
 80064f2:	e17d      	b.n	80067f0 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80064f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d901      	bls.n	8006500 <find_volume+0x194>
 80064fc:	230d      	movs	r3, #13
 80064fe:	e177      	b.n	80067f0 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006502:	3330      	adds	r3, #48	; 0x30
 8006504:	330b      	adds	r3, #11
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff fdc4 	bl	8006094 <ld_word>
 800650c:	4603      	mov	r3, r0
 800650e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006512:	d001      	beq.n	8006518 <find_volume+0x1ac>
 8006514:	230d      	movs	r3, #13
 8006516:	e16b      	b.n	80067f0 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651a:	3330      	adds	r3, #48	; 0x30
 800651c:	3316      	adds	r3, #22
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff fdb8 	bl	8006094 <ld_word>
 8006524:	4603      	mov	r3, r0
 8006526:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <find_volume+0x1d0>
 800652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006530:	3330      	adds	r3, #48	; 0x30
 8006532:	3324      	adds	r3, #36	; 0x24
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff fdc5 	bl	80060c4 <ld_dword>
 800653a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800653c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006540:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006544:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800654c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654e:	789b      	ldrb	r3, [r3, #2]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d005      	beq.n	8006560 <find_volume+0x1f4>
 8006554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006556:	789b      	ldrb	r3, [r3, #2]
 8006558:	2b02      	cmp	r3, #2
 800655a:	d001      	beq.n	8006560 <find_volume+0x1f4>
 800655c:	230d      	movs	r3, #13
 800655e:	e147      	b.n	80067f0 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006562:	789b      	ldrb	r3, [r3, #2]
 8006564:	461a      	mov	r2, r3
 8006566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006568:	fb02 f303 	mul.w	r3, r2, r3
 800656c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006574:	b29a      	uxth	r2, r3
 8006576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006578:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800657a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657c:	895b      	ldrh	r3, [r3, #10]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d008      	beq.n	8006594 <find_volume+0x228>
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	895b      	ldrh	r3, [r3, #10]
 8006586:	461a      	mov	r2, r3
 8006588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658a:	895b      	ldrh	r3, [r3, #10]
 800658c:	3b01      	subs	r3, #1
 800658e:	4013      	ands	r3, r2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <find_volume+0x22c>
 8006594:	230d      	movs	r3, #13
 8006596:	e12b      	b.n	80067f0 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659a:	3330      	adds	r3, #48	; 0x30
 800659c:	3311      	adds	r3, #17
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff fd78 	bl	8006094 <ld_word>
 80065a4:	4603      	mov	r3, r0
 80065a6:	461a      	mov	r2, r3
 80065a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80065ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ae:	891b      	ldrh	r3, [r3, #8]
 80065b0:	f003 030f 	and.w	r3, r3, #15
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <find_volume+0x252>
 80065ba:	230d      	movs	r3, #13
 80065bc:	e118      	b.n	80067f0 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	3330      	adds	r3, #48	; 0x30
 80065c2:	3313      	adds	r3, #19
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff fd65 	bl	8006094 <ld_word>
 80065ca:	4603      	mov	r3, r0
 80065cc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80065ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d106      	bne.n	80065e2 <find_volume+0x276>
 80065d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d6:	3330      	adds	r3, #48	; 0x30
 80065d8:	3320      	adds	r3, #32
 80065da:	4618      	mov	r0, r3
 80065dc:	f7ff fd72 	bl	80060c4 <ld_dword>
 80065e0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	3330      	adds	r3, #48	; 0x30
 80065e6:	330e      	adds	r3, #14
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7ff fd53 	bl	8006094 <ld_word>
 80065ee:	4603      	mov	r3, r0
 80065f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80065f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <find_volume+0x290>
 80065f8:	230d      	movs	r3, #13
 80065fa:	e0f9      	b.n	80067f0 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80065fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80065fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006600:	4413      	add	r3, r2
 8006602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006604:	8912      	ldrh	r2, [r2, #8]
 8006606:	0912      	lsrs	r2, r2, #4
 8006608:	b292      	uxth	r2, r2
 800660a:	4413      	add	r3, r2
 800660c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800660e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	429a      	cmp	r2, r3
 8006614:	d201      	bcs.n	800661a <find_volume+0x2ae>
 8006616:	230d      	movs	r3, #13
 8006618:	e0ea      	b.n	80067f0 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800661a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006622:	8952      	ldrh	r2, [r2, #10]
 8006624:	fbb3 f3f2 	udiv	r3, r3, r2
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	2b00      	cmp	r3, #0
 800662e:	d103      	bne.n	8006638 <find_volume+0x2cc>
 8006630:	230d      	movs	r3, #13
 8006632:	e0dd      	b.n	80067f0 <find_volume+0x484>
 8006634:	20000090 	.word	0x20000090
		fmt = FS_FAT32;
 8006638:	2303      	movs	r3, #3
 800663a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006644:	4293      	cmp	r3, r2
 8006646:	d802      	bhi.n	800664e <find_volume+0x2e2>
 8006648:	2302      	movs	r3, #2
 800664a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006654:	4293      	cmp	r3, r2
 8006656:	d802      	bhi.n	800665e <find_volume+0x2f2>
 8006658:	2301      	movs	r3, #1
 800665a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	1c9a      	adds	r2, r3, #2
 8006662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006664:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800666a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800666c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800666e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006670:	441a      	add	r2, r3
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006676:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	441a      	add	r2, r3
 800667c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006680:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006684:	2b03      	cmp	r3, #3
 8006686:	d11e      	bne.n	80066c6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668a:	3330      	adds	r3, #48	; 0x30
 800668c:	332a      	adds	r3, #42	; 0x2a
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff fd00 	bl	8006094 <ld_word>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <find_volume+0x332>
 800669a:	230d      	movs	r3, #13
 800669c:	e0a8      	b.n	80067f0 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	891b      	ldrh	r3, [r3, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <find_volume+0x33e>
 80066a6:	230d      	movs	r3, #13
 80066a8:	e0a2      	b.n	80067f0 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80066aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ac:	3330      	adds	r3, #48	; 0x30
 80066ae:	332c      	adds	r3, #44	; 0x2c
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7ff fd07 	bl	80060c4 <ld_dword>
 80066b6:	4602      	mov	r2, r0
 80066b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ba:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80066bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	647b      	str	r3, [r7, #68]	; 0x44
 80066c4:	e01f      	b.n	8006706 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80066c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c8:	891b      	ldrh	r3, [r3, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <find_volume+0x366>
 80066ce:	230d      	movs	r3, #13
 80066d0:	e08e      	b.n	80067f0 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80066d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d4:	6a1a      	ldr	r2, [r3, #32]
 80066d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066d8:	441a      	add	r2, r3
 80066da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066dc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80066de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d103      	bne.n	80066ee <find_volume+0x382>
 80066e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	e00a      	b.n	8006704 <find_volume+0x398>
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	695a      	ldr	r2, [r3, #20]
 80066f2:	4613      	mov	r3, r2
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	4413      	add	r3, r2
 80066f8:	085a      	lsrs	r2, r3, #1
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006704:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006708:	699a      	ldr	r2, [r3, #24]
 800670a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800670c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006710:	0a5b      	lsrs	r3, r3, #9
 8006712:	429a      	cmp	r2, r3
 8006714:	d201      	bcs.n	800671a <find_volume+0x3ae>
 8006716:	230d      	movs	r3, #13
 8006718:	e06a      	b.n	80067f0 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800671a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671c:	f04f 32ff 	mov.w	r2, #4294967295
 8006720:	611a      	str	r2, [r3, #16]
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	691a      	ldr	r2, [r3, #16]
 8006726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006728:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672c:	2280      	movs	r2, #128	; 0x80
 800672e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006730:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006734:	2b03      	cmp	r3, #3
 8006736:	d149      	bne.n	80067cc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673a:	3330      	adds	r3, #48	; 0x30
 800673c:	3330      	adds	r3, #48	; 0x30
 800673e:	4618      	mov	r0, r3
 8006740:	f7ff fca8 	bl	8006094 <ld_word>
 8006744:	4603      	mov	r3, r0
 8006746:	2b01      	cmp	r3, #1
 8006748:	d140      	bne.n	80067cc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800674a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800674c:	3301      	adds	r3, #1
 800674e:	4619      	mov	r1, r3
 8006750:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006752:	f7ff fd43 	bl	80061dc <move_window>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d137      	bne.n	80067cc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675e:	2200      	movs	r2, #0
 8006760:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	3330      	adds	r3, #48	; 0x30
 8006766:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800676a:	4618      	mov	r0, r3
 800676c:	f7ff fc92 	bl	8006094 <ld_word>
 8006770:	4603      	mov	r3, r0
 8006772:	461a      	mov	r2, r3
 8006774:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006778:	429a      	cmp	r2, r3
 800677a:	d127      	bne.n	80067cc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677e:	3330      	adds	r3, #48	; 0x30
 8006780:	4618      	mov	r0, r3
 8006782:	f7ff fc9f 	bl	80060c4 <ld_dword>
 8006786:	4602      	mov	r2, r0
 8006788:	4b1b      	ldr	r3, [pc, #108]	; (80067f8 <find_volume+0x48c>)
 800678a:	429a      	cmp	r2, r3
 800678c:	d11e      	bne.n	80067cc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800678e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006790:	3330      	adds	r3, #48	; 0x30
 8006792:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff fc94 	bl	80060c4 <ld_dword>
 800679c:	4602      	mov	r2, r0
 800679e:	4b17      	ldr	r3, [pc, #92]	; (80067fc <find_volume+0x490>)
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d113      	bne.n	80067cc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80067a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a6:	3330      	adds	r3, #48	; 0x30
 80067a8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7ff fc89 	bl	80060c4 <ld_dword>
 80067b2:	4602      	mov	r2, r0
 80067b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80067b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ba:	3330      	adds	r3, #48	; 0x30
 80067bc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff fc7f 	bl	80060c4 <ld_dword>
 80067c6:	4602      	mov	r2, r0
 80067c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ca:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80067cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ce:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80067d2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80067d4:	4b0a      	ldr	r3, [pc, #40]	; (8006800 <find_volume+0x494>)
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	3301      	adds	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	4b08      	ldr	r3, [pc, #32]	; (8006800 <find_volume+0x494>)
 80067de:	801a      	strh	r2, [r3, #0]
 80067e0:	4b07      	ldr	r3, [pc, #28]	; (8006800 <find_volume+0x494>)
 80067e2:	881a      	ldrh	r2, [r3, #0]
 80067e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80067e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067ea:	f7ff fc8f 	bl	800610c <clear_lock>
#endif
	return FR_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3758      	adds	r7, #88	; 0x58
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	41615252 	.word	0x41615252
 80067fc:	61417272 	.word	0x61417272
 8006800:	20000094 	.word	0x20000094

08006804 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	4613      	mov	r3, r2
 8006810:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006816:	f107 0310 	add.w	r3, r7, #16
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff fd0b 	bl	8006236 <get_ldnumber>
 8006820:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	2b00      	cmp	r3, #0
 8006826:	da01      	bge.n	800682c <f_mount+0x28>
 8006828:	230b      	movs	r3, #11
 800682a:	e02b      	b.n	8006884 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800682c:	4a17      	ldr	r2, [pc, #92]	; (800688c <f_mount+0x88>)
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006834:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d005      	beq.n	8006848 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800683c:	69b8      	ldr	r0, [r7, #24]
 800683e:	f7ff fc65 	bl	800610c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2200      	movs	r2, #0
 8006846:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	490d      	ldr	r1, [pc, #52]	; (800688c <f_mount+0x88>)
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <f_mount+0x66>
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d001      	beq.n	800686e <f_mount+0x6a>
 800686a:	2300      	movs	r3, #0
 800686c:	e00a      	b.n	8006884 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800686e:	f107 010c 	add.w	r1, r7, #12
 8006872:	f107 0308 	add.w	r3, r7, #8
 8006876:	2200      	movs	r2, #0
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff fd77 	bl	800636c <find_volume>
 800687e:	4603      	mov	r3, r0
 8006880:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006882:	7dfb      	ldrb	r3, [r7, #23]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3720      	adds	r7, #32
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20000090 	.word	0x20000090

08006890 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	4613      	mov	r3, r2
 800689c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800689e:	2301      	movs	r3, #1
 80068a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80068a2:	2300      	movs	r3, #0
 80068a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80068a6:	4b1f      	ldr	r3, [pc, #124]	; (8006924 <FATFS_LinkDriverEx+0x94>)
 80068a8:	7a5b      	ldrb	r3, [r3, #9]
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d131      	bne.n	8006914 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80068b0:	4b1c      	ldr	r3, [pc, #112]	; (8006924 <FATFS_LinkDriverEx+0x94>)
 80068b2:	7a5b      	ldrb	r3, [r3, #9]
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	4b1a      	ldr	r3, [pc, #104]	; (8006924 <FATFS_LinkDriverEx+0x94>)
 80068ba:	2100      	movs	r1, #0
 80068bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80068be:	4b19      	ldr	r3, [pc, #100]	; (8006924 <FATFS_LinkDriverEx+0x94>)
 80068c0:	7a5b      	ldrb	r3, [r3, #9]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	4a17      	ldr	r2, [pc, #92]	; (8006924 <FATFS_LinkDriverEx+0x94>)
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80068ce:	4b15      	ldr	r3, [pc, #84]	; (8006924 <FATFS_LinkDriverEx+0x94>)
 80068d0:	7a5b      	ldrb	r3, [r3, #9]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	461a      	mov	r2, r3
 80068d6:	4b13      	ldr	r3, [pc, #76]	; (8006924 <FATFS_LinkDriverEx+0x94>)
 80068d8:	4413      	add	r3, r2
 80068da:	79fa      	ldrb	r2, [r7, #7]
 80068dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80068de:	4b11      	ldr	r3, [pc, #68]	; (8006924 <FATFS_LinkDriverEx+0x94>)
 80068e0:	7a5b      	ldrb	r3, [r3, #9]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	b2d1      	uxtb	r1, r2
 80068e8:	4a0e      	ldr	r2, [pc, #56]	; (8006924 <FATFS_LinkDriverEx+0x94>)
 80068ea:	7251      	strb	r1, [r2, #9]
 80068ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80068ee:	7dbb      	ldrb	r3, [r7, #22]
 80068f0:	3330      	adds	r3, #48	; 0x30
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	3301      	adds	r3, #1
 80068fc:	223a      	movs	r2, #58	; 0x3a
 80068fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	3302      	adds	r3, #2
 8006904:	222f      	movs	r2, #47	; 0x2f
 8006906:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	3303      	adds	r3, #3
 800690c:	2200      	movs	r2, #0
 800690e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006914:	7dfb      	ldrb	r3, [r7, #23]
}
 8006916:	4618      	mov	r0, r3
 8006918:	371c      	adds	r7, #28
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	200000b8 	.word	0x200000b8

08006928 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006932:	2200      	movs	r2, #0
 8006934:	6839      	ldr	r1, [r7, #0]
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff ffaa 	bl	8006890 <FATFS_LinkDriverEx>
 800693c:	4603      	mov	r3, r0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <__errno>:
 8006948:	4b01      	ldr	r3, [pc, #4]	; (8006950 <__errno+0x8>)
 800694a:	6818      	ldr	r0, [r3, #0]
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	20000008 	.word	0x20000008

08006954 <__libc_init_array>:
 8006954:	b570      	push	{r4, r5, r6, lr}
 8006956:	4e0d      	ldr	r6, [pc, #52]	; (800698c <__libc_init_array+0x38>)
 8006958:	4c0d      	ldr	r4, [pc, #52]	; (8006990 <__libc_init_array+0x3c>)
 800695a:	1ba4      	subs	r4, r4, r6
 800695c:	10a4      	asrs	r4, r4, #2
 800695e:	2500      	movs	r5, #0
 8006960:	42a5      	cmp	r5, r4
 8006962:	d109      	bne.n	8006978 <__libc_init_array+0x24>
 8006964:	4e0b      	ldr	r6, [pc, #44]	; (8006994 <__libc_init_array+0x40>)
 8006966:	4c0c      	ldr	r4, [pc, #48]	; (8006998 <__libc_init_array+0x44>)
 8006968:	f000 f894 	bl	8006a94 <_init>
 800696c:	1ba4      	subs	r4, r4, r6
 800696e:	10a4      	asrs	r4, r4, #2
 8006970:	2500      	movs	r5, #0
 8006972:	42a5      	cmp	r5, r4
 8006974:	d105      	bne.n	8006982 <__libc_init_array+0x2e>
 8006976:	bd70      	pop	{r4, r5, r6, pc}
 8006978:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800697c:	4798      	blx	r3
 800697e:	3501      	adds	r5, #1
 8006980:	e7ee      	b.n	8006960 <__libc_init_array+0xc>
 8006982:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006986:	4798      	blx	r3
 8006988:	3501      	adds	r5, #1
 800698a:	e7f2      	b.n	8006972 <__libc_init_array+0x1e>
 800698c:	08006b14 	.word	0x08006b14
 8006990:	08006b14 	.word	0x08006b14
 8006994:	08006b14 	.word	0x08006b14
 8006998:	08006b18 	.word	0x08006b18

0800699c <malloc>:
 800699c:	4b02      	ldr	r3, [pc, #8]	; (80069a8 <malloc+0xc>)
 800699e:	4601      	mov	r1, r0
 80069a0:	6818      	ldr	r0, [r3, #0]
 80069a2:	f000 b80b 	b.w	80069bc <_malloc_r>
 80069a6:	bf00      	nop
 80069a8:	20000008 	.word	0x20000008

080069ac <memset>:
 80069ac:	4402      	add	r2, r0
 80069ae:	4603      	mov	r3, r0
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d100      	bne.n	80069b6 <memset+0xa>
 80069b4:	4770      	bx	lr
 80069b6:	f803 1b01 	strb.w	r1, [r3], #1
 80069ba:	e7f9      	b.n	80069b0 <memset+0x4>

080069bc <_malloc_r>:
 80069bc:	b570      	push	{r4, r5, r6, lr}
 80069be:	1ccd      	adds	r5, r1, #3
 80069c0:	f025 0503 	bic.w	r5, r5, #3
 80069c4:	3508      	adds	r5, #8
 80069c6:	2d0c      	cmp	r5, #12
 80069c8:	bf38      	it	cc
 80069ca:	250c      	movcc	r5, #12
 80069cc:	2d00      	cmp	r5, #0
 80069ce:	4606      	mov	r6, r0
 80069d0:	db01      	blt.n	80069d6 <_malloc_r+0x1a>
 80069d2:	42a9      	cmp	r1, r5
 80069d4:	d903      	bls.n	80069de <_malloc_r+0x22>
 80069d6:	230c      	movs	r3, #12
 80069d8:	6033      	str	r3, [r6, #0]
 80069da:	2000      	movs	r0, #0
 80069dc:	bd70      	pop	{r4, r5, r6, pc}
 80069de:	f000 f857 	bl	8006a90 <__malloc_lock>
 80069e2:	4a21      	ldr	r2, [pc, #132]	; (8006a68 <_malloc_r+0xac>)
 80069e4:	6814      	ldr	r4, [r2, #0]
 80069e6:	4621      	mov	r1, r4
 80069e8:	b991      	cbnz	r1, 8006a10 <_malloc_r+0x54>
 80069ea:	4c20      	ldr	r4, [pc, #128]	; (8006a6c <_malloc_r+0xb0>)
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	b91b      	cbnz	r3, 80069f8 <_malloc_r+0x3c>
 80069f0:	4630      	mov	r0, r6
 80069f2:	f000 f83d 	bl	8006a70 <_sbrk_r>
 80069f6:	6020      	str	r0, [r4, #0]
 80069f8:	4629      	mov	r1, r5
 80069fa:	4630      	mov	r0, r6
 80069fc:	f000 f838 	bl	8006a70 <_sbrk_r>
 8006a00:	1c43      	adds	r3, r0, #1
 8006a02:	d124      	bne.n	8006a4e <_malloc_r+0x92>
 8006a04:	230c      	movs	r3, #12
 8006a06:	6033      	str	r3, [r6, #0]
 8006a08:	4630      	mov	r0, r6
 8006a0a:	f000 f842 	bl	8006a92 <__malloc_unlock>
 8006a0e:	e7e4      	b.n	80069da <_malloc_r+0x1e>
 8006a10:	680b      	ldr	r3, [r1, #0]
 8006a12:	1b5b      	subs	r3, r3, r5
 8006a14:	d418      	bmi.n	8006a48 <_malloc_r+0x8c>
 8006a16:	2b0b      	cmp	r3, #11
 8006a18:	d90f      	bls.n	8006a3a <_malloc_r+0x7e>
 8006a1a:	600b      	str	r3, [r1, #0]
 8006a1c:	50cd      	str	r5, [r1, r3]
 8006a1e:	18cc      	adds	r4, r1, r3
 8006a20:	4630      	mov	r0, r6
 8006a22:	f000 f836 	bl	8006a92 <__malloc_unlock>
 8006a26:	f104 000b 	add.w	r0, r4, #11
 8006a2a:	1d23      	adds	r3, r4, #4
 8006a2c:	f020 0007 	bic.w	r0, r0, #7
 8006a30:	1ac3      	subs	r3, r0, r3
 8006a32:	d0d3      	beq.n	80069dc <_malloc_r+0x20>
 8006a34:	425a      	negs	r2, r3
 8006a36:	50e2      	str	r2, [r4, r3]
 8006a38:	e7d0      	b.n	80069dc <_malloc_r+0x20>
 8006a3a:	428c      	cmp	r4, r1
 8006a3c:	684b      	ldr	r3, [r1, #4]
 8006a3e:	bf16      	itet	ne
 8006a40:	6063      	strne	r3, [r4, #4]
 8006a42:	6013      	streq	r3, [r2, #0]
 8006a44:	460c      	movne	r4, r1
 8006a46:	e7eb      	b.n	8006a20 <_malloc_r+0x64>
 8006a48:	460c      	mov	r4, r1
 8006a4a:	6849      	ldr	r1, [r1, #4]
 8006a4c:	e7cc      	b.n	80069e8 <_malloc_r+0x2c>
 8006a4e:	1cc4      	adds	r4, r0, #3
 8006a50:	f024 0403 	bic.w	r4, r4, #3
 8006a54:	42a0      	cmp	r0, r4
 8006a56:	d005      	beq.n	8006a64 <_malloc_r+0xa8>
 8006a58:	1a21      	subs	r1, r4, r0
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	f000 f808 	bl	8006a70 <_sbrk_r>
 8006a60:	3001      	adds	r0, #1
 8006a62:	d0cf      	beq.n	8006a04 <_malloc_r+0x48>
 8006a64:	6025      	str	r5, [r4, #0]
 8006a66:	e7db      	b.n	8006a20 <_malloc_r+0x64>
 8006a68:	200000c4 	.word	0x200000c4
 8006a6c:	200000c8 	.word	0x200000c8

08006a70 <_sbrk_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	4c06      	ldr	r4, [pc, #24]	; (8006a8c <_sbrk_r+0x1c>)
 8006a74:	2300      	movs	r3, #0
 8006a76:	4605      	mov	r5, r0
 8006a78:	4608      	mov	r0, r1
 8006a7a:	6023      	str	r3, [r4, #0]
 8006a7c:	f7fa fcee 	bl	800145c <_sbrk>
 8006a80:	1c43      	adds	r3, r0, #1
 8006a82:	d102      	bne.n	8006a8a <_sbrk_r+0x1a>
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	b103      	cbz	r3, 8006a8a <_sbrk_r+0x1a>
 8006a88:	602b      	str	r3, [r5, #0]
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	200006b0 	.word	0x200006b0

08006a90 <__malloc_lock>:
 8006a90:	4770      	bx	lr

08006a92 <__malloc_unlock>:
 8006a92:	4770      	bx	lr

08006a94 <_init>:
 8006a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a96:	bf00      	nop
 8006a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9a:	bc08      	pop	{r3}
 8006a9c:	469e      	mov	lr, r3
 8006a9e:	4770      	bx	lr

08006aa0 <_fini>:
 8006aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa2:	bf00      	nop
 8006aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa6:	bc08      	pop	{r3}
 8006aa8:	469e      	mov	lr, r3
 8006aaa:	4770      	bx	lr
