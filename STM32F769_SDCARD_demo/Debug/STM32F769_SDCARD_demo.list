
STM32F769_SDCARD_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d60  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08008f60  08008f60  00018f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094d8  080094d8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080094d8  080094d8  000194d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094e0  080094e0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094e0  080094e0  000194e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094e4  080094e4  000194e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080094e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000072c  2000006c  08009554  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000798  08009554  00020798  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a511  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000358c  00000000  00000000  0003a5ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014d0  00000000  00000000  0003db38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001318  00000000  00000000  0003f008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000311ad  00000000  00000000  00040320  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012bc6  00000000  00000000  000714cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011bc3d  00000000  00000000  00084093  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019fcd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e68  00000000  00000000  0019fd4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000006c 	.word	0x2000006c
 800021c:	00000000 	.word	0x00000000
 8000220:	08008f48 	.word	0x08008f48

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000070 	.word	0x20000070
 800023c:	08008f48 	.word	0x08008f48

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005f8:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <SCB_EnableICache+0x3c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000604:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000608:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <SCB_EnableICache+0x3c>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	4a06      	ldr	r2, [pc, #24]	; (800062c <SCB_EnableICache+0x3c>)
 8000612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000616:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000618:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800061c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000636:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <SCB_EnableDCache+0x7c>)
 8000638:	2200      	movs	r2, #0
 800063a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800063e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <SCB_EnableDCache+0x7c>)
 8000644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000648:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	0b5b      	lsrs	r3, r3, #13
 800064e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000652:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	08db      	lsrs	r3, r3, #3
 8000658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800065c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	015a      	lsls	r2, r3, #5
 8000662:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000666:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000668:	68ba      	ldr	r2, [r7, #8]
 800066a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800066c:	490f      	ldr	r1, [pc, #60]	; (80006ac <SCB_EnableDCache+0x7c>)
 800066e:	4313      	orrs	r3, r2
 8000670:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	1e5a      	subs	r2, r3, #1
 8000678:	60ba      	str	r2, [r7, #8]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1ef      	bne.n	800065e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	60fa      	str	r2, [r7, #12]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1e5      	bne.n	8000654 <SCB_EnableDCache+0x24>
 8000688:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <SCB_EnableDCache+0x7c>)
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <SCB_EnableDCache+0x7c>)
 8000692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000696:	6153      	str	r3, [r2, #20]
 8000698:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800069c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	f5ad 7d4e 	sub.w	sp, sp, #824	; 0x338
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006b8:	f7ff ff9a 	bl	80005f0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006bc:	f7ff ffb8 	bl	8000630 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f001 f8a2 	bl	8001808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 f860 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f000 f954 	bl	8000974 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006cc:	f000 f922 	bl	8000914 <MX_USART1_UART_Init>
  MX_SDMMC2_SD_Init();
 80006d0:	f000 f900 	bl	80008d4 <MX_SDMMC2_SD_Init>
  MX_FATFS_Init();
 80006d4:	f005 f86a 	bl	80057ac <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  if(BSP_SD_IsDetected() == SD_PRESENT) {
 80006d8:	f005 f8ec 	bl	80058b4 <BSP_SD_IsDetected>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d10e      	bne.n	8000700 <main+0x50>
	  HAL_UART_Transmit(&huart1, (uint8_t *)"SDCARD OK", 9, HAL_MAX_DELAY);
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	2209      	movs	r2, #9
 80006e8:	4922      	ldr	r1, [pc, #136]	; (8000774 <main+0xc4>)
 80006ea:	4823      	ldr	r0, [pc, #140]	; (8000778 <main+0xc8>)
 80006ec:	f003 fef4 	bl	80044d8 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart1, (uint8_t *) "\n\r", 2, HAL_MAX_DELAY);
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	2202      	movs	r2, #2
 80006f6:	4921      	ldr	r1, [pc, #132]	; (800077c <main+0xcc>)
 80006f8:	481f      	ldr	r0, [pc, #124]	; (8000778 <main+0xc8>)
 80006fa:	f003 feed 	bl	80044d8 <HAL_UART_Transmit>
 80006fe:	e00d      	b.n	800071c <main+0x6c>

  } else {
	  HAL_UART_Transmit(&huart1, (uint8_t *)"SDCARD NOK", 10, HAL_MAX_DELAY);
 8000700:	f04f 33ff 	mov.w	r3, #4294967295
 8000704:	220a      	movs	r2, #10
 8000706:	491e      	ldr	r1, [pc, #120]	; (8000780 <main+0xd0>)
 8000708:	481b      	ldr	r0, [pc, #108]	; (8000778 <main+0xc8>)
 800070a:	f003 fee5 	bl	80044d8 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart1, (uint8_t *) "\n\r", 2, HAL_MAX_DELAY);
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
 8000712:	2202      	movs	r2, #2
 8000714:	4919      	ldr	r1, [pc, #100]	; (800077c <main+0xcc>)
 8000716:	4818      	ldr	r0, [pc, #96]	; (8000778 <main+0xc8>)
 8000718:	f003 fede 	bl	80044d8 <HAL_UART_Transmit>
  FRESULT res;
  FATFS SDFatFs;
  char buff[256];


  res = BSP_SD_Init();
 800071c:	f005 f858 	bl	80057d0 <BSP_SD_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
  if(res != FR_OK) {
 8000726:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <main+0x82>
	  Error_Handler();
 800072e:	f000 fdd7 	bl	80012e0 <Error_Handler>
  }

  res = f_mount(&SDFatFs, "", 1);
 8000732:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000736:	2201      	movs	r2, #1
 8000738:	4912      	ldr	r1, [pc, #72]	; (8000784 <main+0xd4>)
 800073a:	4618      	mov	r0, r3
 800073c:	f007 f8a6 	bl	800788c <f_mount>
 8000740:	4603      	mov	r3, r0
 8000742:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
  if(res != FR_OK) {
 8000746:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <main+0xa2>
	  Error_Handler();
 800074e:	f000 fdc7 	bl	80012e0 <Error_Handler>
  }

  strcpy(buff, "/");
 8000752:	463b      	mov	r3, r7
 8000754:	222f      	movs	r2, #47	; 0x2f
 8000756:	801a      	strh	r2, [r3, #0]
  res = scan_files(buff);
 8000758:	463b      	mov	r3, r7
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fd22 	bl	80011a4 <scan_files>
 8000760:	4603      	mov	r3, r0
 8000762:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
  if(res != FR_OK) {
 8000766:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <main+0xc2>
 	  Error_Handler();
 800076e:	f000 fdb7 	bl	80012e0 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000772:	e7fe      	b.n	8000772 <main+0xc2>
 8000774:	08008f60 	.word	0x08008f60
 8000778:	20000264 	.word	0x20000264
 800077c:	08008f6c 	.word	0x08008f6c
 8000780:	08008f70 	.word	0x08008f70
 8000784:	08008f7c 	.word	0x08008f7c

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b0b8      	sub	sp, #224	; 0xe0
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000792:	2234      	movs	r2, #52	; 0x34
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f007 fb26 	bl	8007de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	2290      	movs	r2, #144	; 0x90
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f007 fb17 	bl	8007de8 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80007ba:	f001 fb41 	bl	8001e40 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	4b42      	ldr	r3, [pc, #264]	; (80008c8 <SystemClock_Config+0x140>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	4a41      	ldr	r2, [pc, #260]	; (80008c8 <SystemClock_Config+0x140>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ca:	4b3f      	ldr	r3, [pc, #252]	; (80008c8 <SystemClock_Config+0x140>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d6:	4b3d      	ldr	r3, [pc, #244]	; (80008cc <SystemClock_Config+0x144>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a3c      	ldr	r2, [pc, #240]	; (80008cc <SystemClock_Config+0x144>)
 80007dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	4b3a      	ldr	r3, [pc, #232]	; (80008cc <SystemClock_Config+0x144>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ee:	2301      	movs	r3, #1
 80007f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fc:	2302      	movs	r3, #2
 80007fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000806:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800080a:	2319      	movs	r3, #25
 800080c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000810:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000818:	2302      	movs	r3, #2
 800081a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800081e:	2304      	movs	r3, #4
 8000820:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fb69 	bl	8001f00 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000834:	f000 fd54 	bl	80012e0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000838:	f001 fb12 	bl	8001e60 <HAL_PWREx_EnableOverDrive>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000842:	f000 fd4d 	bl	80012e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2302      	movs	r3, #2
 800084e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000858:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800085c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000864:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000868:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800086c:	2107      	movs	r1, #7
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fdb8 	bl	80023e4 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800087a:	f000 fd31 	bl	80012e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SDMMC2
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <SystemClock_Config+0x148>)
 8000880:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000882:	23c0      	movs	r3, #192	; 0xc0
 8000884:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 800088a:	2303      	movs	r3, #3
 800088c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800088e:	2301      	movs	r3, #1
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000896:	2300      	movs	r3, #0
 8000898:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800089a:	2300      	movs	r3, #0
 800089c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800089e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 ff97 	bl	80027e4 <HAL_RCCEx_PeriphCLKConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x138>
  {
    Error_Handler();
 80008bc:	f000 fd10 	bl	80012e0 <Error_Handler>
  }
}
 80008c0:	bf00      	nop
 80008c2:	37e0      	adds	r7, #224	; 0xe0
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000
 80008d0:	04200040 	.word	0x04200040

080008d4 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_SDMMC2_SD_Init+0x38>)
 80008da:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <MX_SDMMC2_SD_Init+0x3c>)
 80008dc:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_SDMMC2_SD_Init+0x38>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_SDMMC2_SD_Init+0x38>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_SDMMC2_SD_Init+0x38>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_SDMMC2_SD_Init+0x38>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <MX_SDMMC2_SD_Init+0x38>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <MX_SDMMC2_SD_Init+0x38>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	200001e0 	.word	0x200001e0
 8000910:	40011c00 	.word	0x40011c00

08000914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_USART1_UART_Init+0x58>)
 800091a:	4a15      	ldr	r2, [pc, #84]	; (8000970 <MX_USART1_UART_Init+0x5c>)
 800091c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_USART1_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART1_UART_Init+0x58>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART1_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000958:	f003 fd70 	bl	800443c <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000962:	f000 fcbd 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000264 	.word	0x20000264
 8000970:	40011000 	.word	0x40011000

08000974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b090      	sub	sp, #64	; 0x40
 8000978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800098a:	4bac      	ldr	r3, [pc, #688]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4aab      	ldr	r2, [pc, #684]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000990:	f043 0310 	orr.w	r3, r3, #16
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4ba9      	ldr	r3, [pc, #676]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
 80009a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a2:	4ba6      	ldr	r3, [pc, #664]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4aa5      	ldr	r2, [pc, #660]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 80009a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4ba3      	ldr	r3, [pc, #652]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
 80009b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	4ba0      	ldr	r3, [pc, #640]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a9f      	ldr	r2, [pc, #636]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b9d      	ldr	r3, [pc, #628]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	623b      	str	r3, [r7, #32]
 80009d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d2:	4b9a      	ldr	r3, [pc, #616]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a99      	ldr	r2, [pc, #612]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 80009d8:	f043 0308 	orr.w	r3, r3, #8
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b97      	ldr	r3, [pc, #604]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0308 	and.w	r3, r3, #8
 80009e6:	61fb      	str	r3, [r7, #28]
 80009e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	4b94      	ldr	r3, [pc, #592]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a93      	ldr	r2, [pc, #588]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b91      	ldr	r3, [pc, #580]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	61bb      	str	r3, [r7, #24]
 8000a00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b8e      	ldr	r3, [pc, #568]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a8d      	ldr	r2, [pc, #564]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b8b      	ldr	r3, [pc, #556]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a1a:	4b88      	ldr	r3, [pc, #544]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a87      	ldr	r2, [pc, #540]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000a20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b85      	ldr	r3, [pc, #532]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a32:	4b82      	ldr	r3, [pc, #520]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a81      	ldr	r2, [pc, #516]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b7f      	ldr	r3, [pc, #508]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a4a:	4b7c      	ldr	r3, [pc, #496]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a7b      	ldr	r2, [pc, #492]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000a50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b79      	ldr	r3, [pc, #484]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a62:	4b76      	ldr	r3, [pc, #472]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a75      	ldr	r2, [pc, #468]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000a68:	f043 0320 	orr.w	r3, r3, #32
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b73      	ldr	r3, [pc, #460]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0320 	and.w	r3, r3, #32
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	4b70      	ldr	r3, [pc, #448]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a6f      	ldr	r2, [pc, #444]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b6d      	ldr	r3, [pc, #436]	; (8000c3c <MX_GPIO_Init+0x2c8>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a98:	4869      	ldr	r0, [pc, #420]	; (8000c40 <MX_GPIO_Init+0x2cc>)
 8000a9a:	f001 f9b7 	bl	8001e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_SCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8000a9e:	2378      	movs	r3, #120	; 0x78
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000aae:	2306      	movs	r3, #6
 8000ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4862      	ldr	r0, [pc, #392]	; (8000c44 <MX_GPIO_Init+0x2d0>)
 8000aba:	f000 ffe5 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ace:	2309      	movs	r3, #9
 8000ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	485a      	ldr	r0, [pc, #360]	; (8000c44 <MX_GPIO_Init+0x2d0>)
 8000ada:	f000 ffd5 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000ade:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af0:	230b      	movs	r3, #11
 8000af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af8:	4619      	mov	r1, r3
 8000afa:	4853      	ldr	r0, [pc, #332]	; (8000c48 <MX_GPIO_Init+0x2d4>)
 8000afc:	f000 ffc4 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin 
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin 
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8000b00:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b12:	230c      	movs	r3, #12
 8000b14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4849      	ldr	r0, [pc, #292]	; (8000c44 <MX_GPIO_Init+0x2d0>)
 8000b1e:	f000 ffb3 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000b22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b28:	2312      	movs	r3, #18
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b34:	2304      	movs	r3, #4
 8000b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4843      	ldr	r0, [pc, #268]	; (8000c4c <MX_GPIO_Init+0x2d8>)
 8000b40:	f000 ffa2 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8000b44:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000b56:	230a      	movs	r3, #10
 8000b58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b5e:	4619      	mov	r1, r3
 8000b60:	483a      	ldr	r0, [pc, #232]	; (8000c4c <MX_GPIO_Init+0x2d8>)
 8000b62:	f000 ff91 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RX_Pin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8000b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b78:	2308      	movs	r3, #8
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b80:	4619      	mov	r1, r3
 8000b82:	4833      	ldr	r0, [pc, #204]	; (8000c50 <MX_GPIO_Init+0x2dc>)
 8000b84:	f000 ff80 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_Pin */
  GPIO_InitStruct.Pin = CEC_Pin;
 8000b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8e:	2312      	movs	r3, #18
 8000b90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	482b      	ldr	r0, [pc, #172]	; (8000c54 <MX_GPIO_Init+0x2e0>)
 8000ba6:	f000 ff6f 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SDA_Pin */
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bae:	2312      	movs	r3, #18
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8000bba:	230b      	movs	r3, #11
 8000bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4821      	ldr	r0, [pc, #132]	; (8000c4c <MX_GPIO_Init+0x2d8>)
 8000bc6:	f000 ff5f 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000bca:	2340      	movs	r3, #64	; 0x40
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000bda:	230a      	movs	r3, #10
 8000bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be2:	4619      	mov	r1, r3
 8000be4:	4819      	ldr	r0, [pc, #100]	; (8000c4c <MX_GPIO_Init+0x2d8>)
 8000be6:	f000 ff4f 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A12_Pin 
                           FMC_A10_Pin FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin 
 8000bea:	f248 1337 	movw	r3, #33079	; 0x8137
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bfc:	230c      	movs	r3, #12
 8000bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c04:	4619      	mov	r1, r3
 8000c06:	4810      	ldr	r0, [pc, #64]	; (8000c48 <MX_GPIO_Init+0x2d4>)
 8000c08:	f000 ff3e 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_USER1_Pin Audio_INT_Pin WIFI_RST_Pin ARD_D8_Pin 
                           LD_USER2_Pin ARD_D7_Pin ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin 
 8000c0c:	f247 033b 	movw	r3, #28731	; 0x703b
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c12:	2300      	movs	r3, #0
 8000c14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4807      	ldr	r0, [pc, #28]	; (8000c40 <MX_GPIO_Init+0x2cc>)
 8000c22:	f000 ff31 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin 
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8000c26:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c38:	230c      	movs	r3, #12
 8000c3a:	e00d      	b.n	8000c58 <MX_GPIO_Init+0x2e4>
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40022400 	.word	0x40022400
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40021800 	.word	0x40021800
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	40020800 	.word	0x40020800
 8000c54:	40020000 	.word	0x40020000
 8000c58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5e:	4619      	mov	r1, r3
 8000c60:	48ba      	ldr	r0, [pc, #744]	; (8000f4c <MX_GPIO_Init+0x5d8>)
 8000c62:	f000 ff11 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN5_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 8000c66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c80:	4619      	mov	r1, r3
 8000c82:	48b3      	ldr	r0, [pc, #716]	; (8000f50 <MX_GPIO_Init+0x5dc>)
 8000c84:	f000 ff00 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8000c88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000c9a:	2309      	movs	r3, #9
 8000c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	48aa      	ldr	r0, [pc, #680]	; (8000f50 <MX_GPIO_Init+0x5dc>)
 8000ca6:	f000 feef 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_SCK_Pin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8000caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cbc:	2305      	movs	r3, #5
 8000cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	48a3      	ldr	r0, [pc, #652]	; (8000f54 <MX_GPIO_Init+0x5e0>)
 8000cc8:	f000 fede 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|LCD_BL_CTRL_Pin;
 8000ccc:	f44f 43a2 	mov.w	r3, #20736	; 0x5100
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	489d      	ldr	r0, [pc, #628]	; (8000f58 <MX_GPIO_Init+0x5e4>)
 8000ce2:	f000 fed1 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL2_Pin D27_Pin D26_Pin FMC_NBL3_Pin 
                           D29_Pin D31_Pin D28_Pin D25_Pin 
                           D30_Pin D24_Pin */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 8000ce6:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin 
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d00:	4619      	mov	r1, r3
 8000d02:	4895      	ldr	r0, [pc, #596]	; (8000f58 <MX_GPIO_Init+0x5e4>)
 8000d04:	f000 fec0 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin 
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin 
 8000d08:	23f8      	movs	r3, #248	; 0xf8
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4890      	ldr	r0, [pc, #576]	; (8000f5c <MX_GPIO_Init+0x5e8>)
 8000d1c:	f000 feb4 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8000d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8000d32:	2307      	movs	r3, #7
 8000d34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4888      	ldr	r0, [pc, #544]	; (8000f60 <MX_GPIO_Init+0x5ec>)
 8000d3e:	f000 fea3 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8000d42:	2330      	movs	r3, #48	; 0x30
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d52:	4619      	mov	r1, r3
 8000d54:	487d      	ldr	r0, [pc, #500]	; (8000f4c <MX_GPIO_Init+0x5d8>)
 8000d56:	f000 fe97 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8000d5a:	2308      	movs	r3, #8
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d72:	4619      	mov	r1, r3
 8000d74:	4875      	ldr	r0, [pc, #468]	; (8000f4c <MX_GPIO_Init+0x5d8>)
 8000d76:	f000 fe87 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8000d7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d8c:	2305      	movs	r3, #5
 8000d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d94:	4619      	mov	r1, r3
 8000d96:	486f      	ldr	r0, [pc, #444]	; (8000f54 <MX_GPIO_Init+0x5e0>)
 8000d98:	f000 fe76 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin 
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin 
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8000d9c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dae:	230c      	movs	r3, #12
 8000db0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000db2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db6:	4619      	mov	r1, r3
 8000db8:	486a      	ldr	r0, [pc, #424]	; (8000f64 <MX_GPIO_Init+0x5f0>)
 8000dba:	f000 fe65 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_RESET_Pin */
  GPIO_InitStruct.Pin = DSI_RESET_Pin;
 8000dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4864      	ldr	r0, [pc, #400]	; (8000f68 <MX_GPIO_Init+0x5f4>)
 8000dd8:	f000 fe56 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_TX_Pin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000dec:	2308      	movs	r3, #8
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df4:	4619      	mov	r1, r3
 8000df6:	4855      	ldr	r0, [pc, #340]	; (8000f4c <MX_GPIO_Init+0x5d8>)
 8000df8:	f000 fe46 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : D23_Pin D21_Pin D22_Pin FMC_SDNME_Pin 
                           FMC_SDNE0_Pin FMC_SDCKE0_Pin D20_Pin FMC_D_7_Pin 
                           FMC_D19_Pin FMC_D16_Pin FMC_D18_Pin */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin 
 8000dfc:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin 
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e0e:	230c      	movs	r3, #12
 8000e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e16:	4619      	mov	r1, r3
 8000e18:	4854      	ldr	r0, [pc, #336]	; (8000f6c <MX_GPIO_Init+0x5f8>)
 8000e1a:	f000 fe35 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8000e1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e30:	230a      	movs	r3, #10
 8000e32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4847      	ldr	r0, [pc, #284]	; (8000f58 <MX_GPIO_Init+0x5e4>)
 8000e3c:	f000 fe24 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CLK_Pin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8000e40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e52:	2300      	movs	r3, #0
 8000e54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	483d      	ldr	r0, [pc, #244]	; (8000f54 <MX_GPIO_Init+0x5e0>)
 8000e5e:	f000 fe13 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e68:	4b41      	ldr	r3, [pc, #260]	; (8000f70 <MX_GPIO_Init+0x5fc>)
 8000e6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e74:	4619      	mov	r1, r3
 8000e76:	4838      	ldr	r0, [pc, #224]	; (8000f58 <MX_GPIO_Init+0x5e4>)
 8000e78:	f000 fe06 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000e7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e82:	2300      	movs	r3, #0
 8000e84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4831      	ldr	r0, [pc, #196]	; (8000f58 <MX_GPIO_Init+0x5e4>)
 8000e92:	f000 fdf9 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8000e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4827      	ldr	r0, [pc, #156]	; (8000f50 <MX_GPIO_Init+0x5dc>)
 8000eb4:	f000 fde8 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_RX_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8000eb8:	23c0      	movs	r3, #192	; 0xc0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	481f      	ldr	r0, [pc, #124]	; (8000f50 <MX_GPIO_Init+0x5dc>)
 8000ed4:	f000 fdd8 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000ed8:	2310      	movs	r3, #16
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ee8:	230a      	movs	r3, #10
 8000eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	481e      	ldr	r0, [pc, #120]	; (8000f6c <MX_GPIO_Init+0x5f8>)
 8000ef4:	f000 fdc8 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_MCLKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000f08:	2306      	movs	r3, #6
 8000f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f10:	4619      	mov	r1, r3
 8000f12:	4813      	ldr	r0, [pc, #76]	; (8000f60 <MX_GPIO_Init+0x5ec>)
 8000f14:	f000 fdb8 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8000f18:	2348      	movs	r3, #72	; 0x48
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480d      	ldr	r0, [pc, #52]	; (8000f60 <MX_GPIO_Init+0x5ec>)
 8000f2c:	f000 fdac 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8000f40:	2303      	movs	r3, #3
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	e013      	b.n	8000f74 <MX_GPIO_Init+0x600>
 8000f4c:	40020c00 	.word	0x40020c00
 8000f50:	40020800 	.word	0x40020800
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40022000 	.word	0x40022000
 8000f5c:	40022800 	.word	0x40022800
 8000f60:	40021800 	.word	0x40021800
 8000f64:	40021400 	.word	0x40021400
 8000f68:	40022400 	.word	0x40022400
 8000f6c:	40021c00 	.word	0x40021c00
 8000f70:	10120000 	.word	0x10120000
 8000f74:	4883      	ldr	r0, [pc, #524]	; (8001184 <MX_GPIO_Init+0x810>)
 8000f76:	f000 fd87 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8000f7a:	2340      	movs	r3, #64	; 0x40
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f92:	4619      	mov	r1, r3
 8000f94:	487b      	ldr	r0, [pc, #492]	; (8001184 <MX_GPIO_Init+0x810>)
 8000f96:	f000 fd77 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8000f9a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fac:	4619      	mov	r1, r3
 8000fae:	4875      	ldr	r0, [pc, #468]	; (8001184 <MX_GPIO_Init+0x810>)
 8000fb0:	f000 fd6a 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_STP_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	486e      	ldr	r0, [pc, #440]	; (8001188 <MX_GPIO_Init+0x814>)
 8000fd0:	f000 fd5a 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fd4:	2332      	movs	r3, #50	; 0x32
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe4:	230b      	movs	r3, #11
 8000fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fec:	4619      	mov	r1, r3
 8000fee:	4866      	ldr	r0, [pc, #408]	; (8001188 <MX_GPIO_Init+0x814>)
 8000ff0:	f000 fd4a 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001004:	4619      	mov	r1, r3
 8001006:	4860      	ldr	r0, [pc, #384]	; (8001188 <MX_GPIO_Init+0x814>)
 8001008:	f000 fd3e 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800100c:	2304      	movs	r3, #4
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800101c:	2309      	movs	r3, #9
 800101e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001024:	4619      	mov	r1, r3
 8001026:	4859      	ldr	r0, [pc, #356]	; (800118c <MX_GPIO_Init+0x818>)
 8001028:	f000 fd2e 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SCL_Pin */
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 800102c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001032:	2312      	movs	r3, #18
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001036:	2301      	movs	r3, #1
 8001038:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103a:	2303      	movs	r3, #3
 800103c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800103e:	2304      	movs	r3, #4
 8001040:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001046:	4619      	mov	r1, r3
 8001048:	4851      	ldr	r0, [pc, #324]	; (8001190 <MX_GPIO_Init+0x81c>)
 800104a:	f000 fd1d 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 800104e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001060:	2309      	movs	r3, #9
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001068:	4619      	mov	r1, r3
 800106a:	4849      	ldr	r0, [pc, #292]	; (8001190 <MX_GPIO_Init+0x81c>)
 800106c:	f000 fd0c 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001070:	2386      	movs	r3, #134	; 0x86
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001080:	230b      	movs	r3, #11
 8001082:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001088:	4619      	mov	r1, r3
 800108a:	4842      	ldr	r0, [pc, #264]	; (8001194 <MX_GPIO_Init+0x820>)
 800108c:	f000 fcfc 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001090:	2301      	movs	r3, #1
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001094:	4b40      	ldr	r3, [pc, #256]	; (8001198 <MX_GPIO_Init+0x824>)
 8001096:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a0:	4619      	mov	r1, r3
 80010a2:	483c      	ldr	r0, [pc, #240]	; (8001194 <MX_GPIO_Init+0x820>)
 80010a4:	f000 fcf0 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 80010a8:	2350      	movs	r3, #80	; 0x50
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ac:	2303      	movs	r3, #3
 80010ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b8:	4619      	mov	r1, r3
 80010ba:	4836      	ldr	r0, [pc, #216]	; (8001194 <MX_GPIO_Init+0x820>)
 80010bc:	f000 fce4 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_TX_Pin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 80010c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80010d2:	230a      	movs	r3, #10
 80010d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010da:	4619      	mov	r1, r3
 80010dc:	482c      	ldr	r0, [pc, #176]	; (8001190 <MX_GPIO_Init+0x81c>)
 80010de:	f000 fcd3 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e6:	2300      	movs	r3, #0
 80010e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f2:	4619      	mov	r1, r3
 80010f4:	4829      	ldr	r0, [pc, #164]	; (800119c <MX_GPIO_Init+0x828>)
 80010f6:	f000 fcc7 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80010fa:	2328      	movs	r3, #40	; 0x28
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800110a:	230a      	movs	r3, #10
 800110c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001112:	4619      	mov	r1, r3
 8001114:	481f      	ldr	r0, [pc, #124]	; (8001194 <MX_GPIO_Init+0x820>)
 8001116:	f000 fcb7 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSIHOST_TE_Pin */
  GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 800111a:	2304      	movs	r3, #4
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800112a:	230d      	movs	r3, #13
 800112c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001132:	4619      	mov	r1, r3
 8001134:	481a      	ldr	r0, [pc, #104]	; (80011a0 <MX_GPIO_Init+0x82c>)
 8001136:	f000 fca7 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800113a:	2340      	movs	r3, #64	; 0x40
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800114a:	2309      	movs	r3, #9
 800114c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001152:	4619      	mov	r1, r3
 8001154:	4811      	ldr	r0, [pc, #68]	; (800119c <MX_GPIO_Init+0x828>)
 8001156:	f000 fc97 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800115a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800116c:	2305      	movs	r3, #5
 800116e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001174:	4619      	mov	r1, r3
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_GPIO_Init+0x818>)
 8001178:	f000 fc86 	bl	8001a88 <HAL_GPIO_Init>

}
 800117c:	bf00      	nop
 800117e:	3740      	adds	r7, #64	; 0x40
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40021400 	.word	0x40021400
 8001188:	40020800 	.word	0x40020800
 800118c:	40020400 	.word	0x40020400
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40020000 	.word	0x40020000
 8001198:	10110000 	.word	0x10110000
 800119c:	40021c00 	.word	0x40021c00
 80011a0:	40022400 	.word	0x40022400

080011a4 <scan_files>:

/* USER CODE BEGIN 4 */
FRESULT scan_files (
    char* path        /* Start node to be scanned (***also used as work area***) */
)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b093      	sub	sp, #76	; 0x4c
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    static FILINFO fno;


    res = f_opendir(&dir, path);                       /* Open the directory */
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f006 fbb0 	bl	8007918 <f_opendir>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (res == FR_OK) {
 80011be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d168      	bne.n	8001298 <scan_files+0xf4>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4936      	ldr	r1, [pc, #216]	; (80012a4 <scan_files+0x100>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f006 fc67 	bl	8007aa0 <f_readdir>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80011d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d156      	bne.n	800128e <scan_files+0xea>
 80011e0:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <scan_files+0x100>)
 80011e2:	7d9b      	ldrb	r3, [r3, #22]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d052      	beq.n	800128e <scan_files+0xea>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 80011e8:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <scan_files+0x100>)
 80011ea:	7a1b      	ldrb	r3, [r3, #8]
 80011ec:	f003 0310 	and.w	r3, r3, #16
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d033      	beq.n	800125c <scan_files+0xb8>
                i = strlen(path);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff f823 	bl	8000240 <strlen>
 80011fa:	6438      	str	r0, [r7, #64]	; 0x40
                sprintf(&path[i], "/%s", fno.fname);
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001200:	4413      	add	r3, r2
 8001202:	4a29      	ldr	r2, [pc, #164]	; (80012a8 <scan_files+0x104>)
 8001204:	4929      	ldr	r1, [pc, #164]	; (80012ac <scan_files+0x108>)
 8001206:	4618      	mov	r0, r3
 8001208:	f006 fe0e 	bl	8007e28 <siprintf>
                HAL_UART_Transmit(&huart1, &path[i], strlen(&path[i]), HAL_MAX_DELAY);
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001210:	18d4      	adds	r4, r2, r3
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001216:	4413      	add	r3, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f811 	bl	8000240 <strlen>
 800121e:	4603      	mov	r3, r0
 8001220:	b29a      	uxth	r2, r3
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	4621      	mov	r1, r4
 8001228:	4821      	ldr	r0, [pc, #132]	; (80012b0 <scan_files+0x10c>)
 800122a:	f003 f955 	bl	80044d8 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart1, (uint8_t *) "\n\r", 2, HAL_MAX_DELAY);
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	2202      	movs	r2, #2
 8001234:	491f      	ldr	r1, [pc, #124]	; (80012b4 <scan_files+0x110>)
 8001236:	481e      	ldr	r0, [pc, #120]	; (80012b0 <scan_files+0x10c>)
 8001238:	f003 f94e 	bl	80044d8 <HAL_UART_Transmit>
                res = scan_files(path);                    /* Enter the directory */
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffb1 	bl	80011a4 <scan_files>
 8001242:	4603      	mov	r3, r0
 8001244:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if (res != FR_OK) break;
 8001248:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800124c:	2b00      	cmp	r3, #0
 800124e:	d11d      	bne.n	800128c <scan_files+0xe8>
                path[i] = 0;
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001254:	4413      	add	r3, r2
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
 800125a:	e7b4      	b.n	80011c6 <scan_files+0x22>
            } else {                                       /* It is a file. */
                printf("%s/%s\n", path, fno.fname);
 800125c:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <scan_files+0x104>)
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	4815      	ldr	r0, [pc, #84]	; (80012b8 <scan_files+0x114>)
 8001262:	f006 fdc9 	bl	8007df8 <iprintf>
                HAL_UART_Transmit(&huart1, fno.fname, strlen(fno.fname), HAL_MAX_DELAY);
 8001266:	4810      	ldr	r0, [pc, #64]	; (80012a8 <scan_files+0x104>)
 8001268:	f7fe ffea 	bl	8000240 <strlen>
 800126c:	4603      	mov	r3, r0
 800126e:	b29a      	uxth	r2, r3
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	490c      	ldr	r1, [pc, #48]	; (80012a8 <scan_files+0x104>)
 8001276:	480e      	ldr	r0, [pc, #56]	; (80012b0 <scan_files+0x10c>)
 8001278:	f003 f92e 	bl	80044d8 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart1, (uint8_t *) "\n\r", 2, HAL_MAX_DELAY);
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	2202      	movs	r2, #2
 8001282:	490c      	ldr	r1, [pc, #48]	; (80012b4 <scan_files+0x110>)
 8001284:	480a      	ldr	r0, [pc, #40]	; (80012b0 <scan_files+0x10c>)
 8001286:	f003 f927 	bl	80044d8 <HAL_UART_Transmit>
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 800128a:	e79c      	b.n	80011c6 <scan_files+0x22>
                if (res != FR_OK) break;
 800128c:	bf00      	nop

            }
        }
        f_closedir(&dir);
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	4618      	mov	r0, r3
 8001294:	f006 fbde 	bl	8007a54 <f_closedir>
    }

    return res;
 8001298:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800129c:	4618      	mov	r0, r3
 800129e:	374c      	adds	r7, #76	; 0x4c
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd90      	pop	{r4, r7, pc}
 80012a4:	20000088 	.word	0x20000088
 80012a8:	2000009e 	.word	0x2000009e
 80012ac:	08008f80 	.word	0x08008f80
 80012b0:	20000264 	.word	0x20000264
 80012b4:	08008f6c 	.word	0x08008f6c
 80012b8:	08008f84 	.word	0x08008f84

080012bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d101      	bne.n	80012d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ce:	f000 fab7 	bl	8001840 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40001000 	.word	0x40001000

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_MspInit+0x50>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a11      	ldr	r2, [pc, #68]	; (8001340 <HAL_MspInit+0x50>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_MspInit+0x50>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_MspInit+0x50>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <HAL_MspInit+0x50>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_MspInit+0x50>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	2005      	movs	r0, #5
 800132c:	f000 fb82 	bl	8001a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001330:	2005      	movs	r0, #5
 8001332:	f000 fb9b 	bl	8001a6c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800

08001344 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08c      	sub	sp, #48	; 0x30
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a33      	ldr	r2, [pc, #204]	; (8001430 <HAL_SD_MspInit+0xec>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d160      	bne.n	8001428 <HAL_SD_MspInit+0xe4>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8001366:	4b33      	ldr	r3, [pc, #204]	; (8001434 <HAL_SD_MspInit+0xf0>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	4a32      	ldr	r2, [pc, #200]	; (8001434 <HAL_SD_MspInit+0xf0>)
 800136c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	4b30      	ldr	r3, [pc, #192]	; (8001434 <HAL_SD_MspInit+0xf0>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137a:	61bb      	str	r3, [r7, #24]
 800137c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <HAL_SD_MspInit+0xf0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a2c      	ldr	r2, [pc, #176]	; (8001434 <HAL_SD_MspInit+0xf0>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <HAL_SD_MspInit+0xf0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001396:	4b27      	ldr	r3, [pc, #156]	; (8001434 <HAL_SD_MspInit+0xf0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a26      	ldr	r2, [pc, #152]	; (8001434 <HAL_SD_MspInit+0xf0>)
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b24      	ldr	r3, [pc, #144]	; (8001434 <HAL_SD_MspInit+0xf0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <HAL_SD_MspInit+0xf0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a20      	ldr	r2, [pc, #128]	; (8001434 <HAL_SD_MspInit+0xf0>)
 80013b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <HAL_SD_MspInit+0xf0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0 
    */
    GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 80013c6:	2318      	movs	r3, #24
 80013c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80013d6:	230a      	movs	r3, #10
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	4815      	ldr	r0, [pc, #84]	; (8001438 <HAL_SD_MspInit+0xf4>)
 80013e2:	f000 fb51 	bl	8001a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 80013e6:	23c0      	movs	r3, #192	; 0xc0
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80013f6:	230b      	movs	r3, #11
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	4619      	mov	r1, r3
 8001400:	480e      	ldr	r0, [pc, #56]	; (800143c <HAL_SD_MspInit+0xf8>)
 8001402:	f000 fb41 	bl	8001a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8001406:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800140a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001418:	230b      	movs	r3, #11
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	4619      	mov	r1, r3
 8001422:	4807      	ldr	r0, [pc, #28]	; (8001440 <HAL_SD_MspInit+0xfc>)
 8001424:	f000 fb30 	bl	8001a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8001428:	bf00      	nop
 800142a:	3730      	adds	r7, #48	; 0x30
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40011c00 	.word	0x40011c00
 8001434:	40023800 	.word	0x40023800
 8001438:	40020400 	.word	0x40020400
 800143c:	40020c00 	.word	0x40020c00
 8001440:	40021800 	.word	0x40021800

08001444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a20      	ldr	r2, [pc, #128]	; (80014e4 <HAL_UART_MspInit+0xa0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d139      	bne.n	80014da <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <HAL_UART_MspInit+0xa4>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a1f      	ldr	r2, [pc, #124]	; (80014e8 <HAL_UART_MspInit+0xa4>)
 800146c:	f043 0310 	orr.w	r3, r3, #16
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <HAL_UART_MspInit+0xa4>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <HAL_UART_MspInit+0xa4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a19      	ldr	r2, [pc, #100]	; (80014e8 <HAL_UART_MspInit+0xa4>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_UART_MspInit+0xa4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014a8:	2307      	movs	r3, #7
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <HAL_UART_MspInit+0xa8>)
 80014b4:	f000 fae8 	bl	8001a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80014b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014ca:	2307      	movs	r3, #7
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <HAL_UART_MspInit+0xa8>)
 80014d6:	f000 fad7 	bl	8001a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40011000 	.word	0x40011000
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000

080014f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	; 0x30
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	2036      	movs	r0, #54	; 0x36
 8001506:	f000 fa95 	bl	8001a34 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800150a:	2036      	movs	r0, #54	; 0x36
 800150c:	f000 faae 	bl	8001a6c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <HAL_InitTick+0xa0>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	4a1e      	ldr	r2, [pc, #120]	; (8001590 <HAL_InitTick+0xa0>)
 8001516:	f043 0310 	orr.w	r3, r3, #16
 800151a:	6413      	str	r3, [r2, #64]	; 0x40
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <HAL_InitTick+0xa0>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f003 0310 	and.w	r3, r3, #16
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001528:	f107 0210 	add.w	r2, r7, #16
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4611      	mov	r1, r2
 8001532:	4618      	mov	r0, r3
 8001534:	f001 f924 	bl	8002780 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001538:	f001 f8fa 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 800153c:	4603      	mov	r3, r0
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001544:	4a13      	ldr	r2, [pc, #76]	; (8001594 <HAL_InitTick+0xa4>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	0c9b      	lsrs	r3, r3, #18
 800154c:	3b01      	subs	r3, #1
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_InitTick+0xa8>)
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <HAL_InitTick+0xac>)
 8001554:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <HAL_InitTick+0xa8>)
 8001558:	f240 32e7 	movw	r2, #999	; 0x3e7
 800155c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800155e:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <HAL_InitTick+0xa8>)
 8001560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001562:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <HAL_InitTick+0xa8>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_InitTick+0xa8>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001570:	4809      	ldr	r0, [pc, #36]	; (8001598 <HAL_InitTick+0xa8>)
 8001572:	f002 fcfd 	bl	8003f70 <HAL_TIM_Base_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d104      	bne.n	8001586 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800157c:	4806      	ldr	r0, [pc, #24]	; (8001598 <HAL_InitTick+0xa8>)
 800157e:	f002 fd2d 	bl	8003fdc <HAL_TIM_Base_Start_IT>
 8001582:	4603      	mov	r3, r0
 8001584:	e000      	b.n	8001588 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
}
 8001588:	4618      	mov	r0, r3
 800158a:	3730      	adds	r7, #48	; 0x30
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800
 8001594:	431bde83 	.word	0x431bde83
 8001598:	200002e4 	.word	0x200002e4
 800159c:	40001000 	.word	0x40001000

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <MemManage_Handler+0x4>

080015ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <BusFault_Handler+0x4>

080015c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <UsageFault_Handler+0x4>

080015c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <TIM6_DAC_IRQHandler+0x10>)
 8001606:	f002 fd13 	bl	8004030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200002e4 	.word	0x200002e4

08001614 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	e00a      	b.n	800163c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001626:	f3af 8000 	nop.w
 800162a:	4601      	mov	r1, r0
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	60ba      	str	r2, [r7, #8]
 8001632:	b2ca      	uxtb	r2, r1
 8001634:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	dbf0      	blt.n	8001626 <_read+0x12>
	}

return len;
 8001644:	687b      	ldr	r3, [r7, #4]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	e009      	b.n	8001674 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	60ba      	str	r2, [r7, #8]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3301      	adds	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	429a      	cmp	r2, r3
 800167a:	dbf1      	blt.n	8001660 <_write+0x12>
	}
	return len;
 800167c:	687b      	ldr	r3, [r7, #4]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_close>:

int _close(int file)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
	return -1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ae:	605a      	str	r2, [r3, #4]
	return 0;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <_isatty>:

int _isatty(int file)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
	return 1;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
	return 0;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <_sbrk+0x50>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x16>
		heap_end = &end;
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <_sbrk+0x50>)
 8001702:	4a10      	ldr	r2, [pc, #64]	; (8001744 <_sbrk+0x54>)
 8001704:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <_sbrk+0x50>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <_sbrk+0x50>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4413      	add	r3, r2
 8001714:	466a      	mov	r2, sp
 8001716:	4293      	cmp	r3, r2
 8001718:	d907      	bls.n	800172a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800171a:	f006 fb3b 	bl	8007d94 <__errno>
 800171e:	4602      	mov	r2, r0
 8001720:	230c      	movs	r3, #12
 8001722:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001724:	f04f 33ff 	mov.w	r3, #4294967295
 8001728:	e006      	b.n	8001738 <_sbrk+0x48>
	}

	heap_end += incr;
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <_sbrk+0x50>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a03      	ldr	r2, [pc, #12]	; (8001740 <_sbrk+0x50>)
 8001734:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200001a0 	.word	0x200001a0
 8001744:	20000798 	.word	0x20000798

08001748 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <SystemInit+0x5c>)
 800174e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001752:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <SystemInit+0x5c>)
 8001754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <SystemInit+0x60>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <SystemInit+0x60>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <SystemInit+0x60>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <SystemInit+0x60>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	490d      	ldr	r1, [pc, #52]	; (80017a8 <SystemInit+0x60>)
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <SystemInit+0x64>)
 8001776:	4013      	ands	r3, r2
 8001778:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <SystemInit+0x60>)
 800177c:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <SystemInit+0x68>)
 800177e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <SystemInit+0x60>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a08      	ldr	r2, [pc, #32]	; (80017a8 <SystemInit+0x60>)
 8001786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <SystemInit+0x60>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <SystemInit+0x5c>)
 8001794:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001798:	609a      	str	r2, [r3, #8]
#endif
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00
 80017a8:	40023800 	.word	0x40023800
 80017ac:	fef6ffff 	.word	0xfef6ffff
 80017b0:	24003010 	.word	0x24003010

080017b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017ba:	e003      	b.n	80017c4 <LoopCopyDataInit>

080017bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017c2:	3104      	adds	r1, #4

080017c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017c4:	480b      	ldr	r0, [pc, #44]	; (80017f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017cc:	d3f6      	bcc.n	80017bc <CopyDataInit>
  ldr  r2, =_sbss
 80017ce:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017d0:	e002      	b.n	80017d8 <LoopFillZerobss>

080017d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017d4:	f842 3b04 	str.w	r3, [r2], #4

080017d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017dc:	d3f9      	bcc.n	80017d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017de:	f7ff ffb3 	bl	8001748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017e2:	f006 fadd 	bl	8007da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017e6:	f7fe ff63 	bl	80006b0 <main>
  bx  lr    
 80017ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017ec:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80017f0:	080094e8 	.word	0x080094e8
  ldr  r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017f8:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 80017fc:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8001800:	20000798 	.word	0x20000798

08001804 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC_IRQHandler>
	...

08001808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_Init+0x34>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_Init+0x34>)
 8001812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001816:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_Init+0x34>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a07      	ldr	r2, [pc, #28]	; (800183c <HAL_Init+0x34>)
 800181e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001824:	2003      	movs	r0, #3
 8001826:	f000 f8fa 	bl	8001a1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182a:	2000      	movs	r0, #0
 800182c:	f7ff fe60 	bl	80014f0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001830:	f7ff fd5e 	bl	80012f0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023c00 	.word	0x40023c00

08001840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000004 	.word	0x20000004
 8001864:	20000324 	.word	0x20000324

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000324 	.word	0x20000324

08001880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff ffee 	bl	8001868 <HAL_GetTick>
 800188c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001898:	d005      	beq.n	80018a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_Delay+0x40>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018a6:	bf00      	nop
 80018a8:	f7ff ffde 	bl	8001868 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d8f7      	bhi.n	80018a8 <HAL_Delay+0x28>
  {
  }
}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000004 	.word	0x20000004

080018c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <__NVIC_SetPriorityGrouping+0x40>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e0:	4013      	ands	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <__NVIC_SetPriorityGrouping+0x40>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00
 8001908:	05fa0000 	.word	0x05fa0000

0800190c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <__NVIC_GetPriorityGrouping+0x18>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0307 	and.w	r3, r3, #7
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db0b      	blt.n	8001952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4907      	ldr	r1, [pc, #28]	; (8001960 <__NVIC_EnableIRQ+0x38>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	; (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
         );
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ff4c 	bl	80018c4 <__NVIC_SetPriorityGrouping>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a46:	f7ff ff61 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001a4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	6978      	ldr	r0, [r7, #20]
 8001a52:	f7ff ffb1 	bl	80019b8 <NVIC_EncodePriority>
 8001a56:	4602      	mov	r2, r0
 8001a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff80 	bl	8001964 <__NVIC_SetPriority>
}
 8001a64:	bf00      	nop
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff54 	bl	8001928 <__NVIC_EnableIRQ>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e175      	b.n	8001d94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	f040 8164 	bne.w	8001d8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x4e>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b12      	cmp	r3, #18
 8001ad4:	d123      	bne.n	8001b1e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	08da      	lsrs	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3208      	adds	r2, #8
 8001ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	220f      	movs	r2, #15
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	691a      	ldr	r2, [r3, #16]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	08da      	lsrs	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3208      	adds	r2, #8
 8001b18:	69b9      	ldr	r1, [r7, #24]
 8001b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	2203      	movs	r2, #3
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0203 	and.w	r2, r3, #3
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d00b      	beq.n	8001b72 <HAL_GPIO_Init+0xea>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d007      	beq.n	8001b72 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b66:	2b11      	cmp	r3, #17
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b12      	cmp	r3, #18
 8001b70:	d130      	bne.n	8001bd4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 0201 	and.w	r2, r3, #1
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80be 	beq.w	8001d8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	4b65      	ldr	r3, [pc, #404]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	4a64      	ldr	r2, [pc, #400]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1e:	4b62      	ldr	r3, [pc, #392]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c2a:	4a60      	ldr	r2, [pc, #384]	; (8001dac <HAL_GPIO_Init+0x324>)
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	3302      	adds	r3, #2
 8001c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	220f      	movs	r2, #15
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a57      	ldr	r2, [pc, #348]	; (8001db0 <HAL_GPIO_Init+0x328>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d037      	beq.n	8001cc6 <HAL_GPIO_Init+0x23e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a56      	ldr	r2, [pc, #344]	; (8001db4 <HAL_GPIO_Init+0x32c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d031      	beq.n	8001cc2 <HAL_GPIO_Init+0x23a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a55      	ldr	r2, [pc, #340]	; (8001db8 <HAL_GPIO_Init+0x330>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d02b      	beq.n	8001cbe <HAL_GPIO_Init+0x236>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a54      	ldr	r2, [pc, #336]	; (8001dbc <HAL_GPIO_Init+0x334>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d025      	beq.n	8001cba <HAL_GPIO_Init+0x232>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a53      	ldr	r2, [pc, #332]	; (8001dc0 <HAL_GPIO_Init+0x338>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d01f      	beq.n	8001cb6 <HAL_GPIO_Init+0x22e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a52      	ldr	r2, [pc, #328]	; (8001dc4 <HAL_GPIO_Init+0x33c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d019      	beq.n	8001cb2 <HAL_GPIO_Init+0x22a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a51      	ldr	r2, [pc, #324]	; (8001dc8 <HAL_GPIO_Init+0x340>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d013      	beq.n	8001cae <HAL_GPIO_Init+0x226>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a50      	ldr	r2, [pc, #320]	; (8001dcc <HAL_GPIO_Init+0x344>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00d      	beq.n	8001caa <HAL_GPIO_Init+0x222>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4f      	ldr	r2, [pc, #316]	; (8001dd0 <HAL_GPIO_Init+0x348>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d007      	beq.n	8001ca6 <HAL_GPIO_Init+0x21e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4e      	ldr	r2, [pc, #312]	; (8001dd4 <HAL_GPIO_Init+0x34c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d101      	bne.n	8001ca2 <HAL_GPIO_Init+0x21a>
 8001c9e:	2309      	movs	r3, #9
 8001ca0:	e012      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001ca2:	230a      	movs	r3, #10
 8001ca4:	e010      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001ca6:	2308      	movs	r3, #8
 8001ca8:	e00e      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001caa:	2307      	movs	r3, #7
 8001cac:	e00c      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cae:	2306      	movs	r3, #6
 8001cb0:	e00a      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	e008      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e004      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e002      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	f002 0203 	and.w	r2, r2, #3
 8001cce:	0092      	lsls	r2, r2, #2
 8001cd0:	4093      	lsls	r3, r2
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cd8:	4934      	ldr	r1, [pc, #208]	; (8001dac <HAL_GPIO_Init+0x324>)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce6:	4b3c      	ldr	r3, [pc, #240]	; (8001dd8 <HAL_GPIO_Init+0x350>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d0a:	4a33      	ldr	r2, [pc, #204]	; (8001dd8 <HAL_GPIO_Init+0x350>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d10:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <HAL_GPIO_Init+0x350>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d34:	4a28      	ldr	r2, [pc, #160]	; (8001dd8 <HAL_GPIO_Init+0x350>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d3a:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_GPIO_Init+0x350>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d5e:	4a1e      	ldr	r2, [pc, #120]	; (8001dd8 <HAL_GPIO_Init+0x350>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d64:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <HAL_GPIO_Init+0x350>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d88:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <HAL_GPIO_Init+0x350>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	2b0f      	cmp	r3, #15
 8001d98:	f67f ae86 	bls.w	8001aa8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	3724      	adds	r7, #36	; 0x24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40013800 	.word	0x40013800
 8001db0:	40020000 	.word	0x40020000
 8001db4:	40020400 	.word	0x40020400
 8001db8:	40020800 	.word	0x40020800
 8001dbc:	40020c00 	.word	0x40020c00
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40021400 	.word	0x40021400
 8001dc8:	40021800 	.word	0x40021800
 8001dcc:	40021c00 	.word	0x40021c00
 8001dd0:	40022000 	.word	0x40022000
 8001dd4:	40022400 	.word	0x40022400
 8001dd8:	40013c00 	.word	0x40013c00

08001ddc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	e001      	b.n	8001dfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	807b      	strh	r3, [r7, #2]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e1c:	787b      	ldrb	r3, [r7, #1]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e28:	e003      	b.n	8001e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e2a:	887b      	ldrh	r3, [r7, #2]
 8001e2c:	041a      	lsls	r2, r3, #16
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	619a      	str	r2, [r3, #24]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4e:	6013      	str	r3, [r2, #0]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40007000 	.word	0x40007000

08001e60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a22      	ldr	r2, [pc, #136]	; (8001ef8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e82:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e8e:	f7ff fceb 	bl	8001868 <HAL_GetTick>
 8001e92:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e94:	e009      	b.n	8001eaa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e96:	f7ff fce7 	bl	8001868 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ea4:	d901      	bls.n	8001eaa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e022      	b.n	8001ef0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb6:	d1ee      	bne.n	8001e96 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001eb8:	4b10      	ldr	r3, [pc, #64]	; (8001efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec4:	f7ff fcd0 	bl	8001868 <HAL_GetTick>
 8001ec8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eca:	e009      	b.n	8001ee0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ecc:	f7ff fccc 	bl	8001868 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eda:	d901      	bls.n	8001ee0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e007      	b.n	8001ef0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001eec:	d1ee      	bne.n	8001ecc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40007000 	.word	0x40007000

08001f00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e25e      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8087 	beq.w	8002032 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f24:	4b96      	ldr	r3, [pc, #600]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d00c      	beq.n	8001f4a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f30:	4b93      	ldr	r3, [pc, #588]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 030c 	and.w	r3, r3, #12
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d112      	bne.n	8001f62 <HAL_RCC_OscConfig+0x62>
 8001f3c:	4b90      	ldr	r3, [pc, #576]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f48:	d10b      	bne.n	8001f62 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4a:	4b8d      	ldr	r3, [pc, #564]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d06c      	beq.n	8002030 <HAL_RCC_OscConfig+0x130>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d168      	bne.n	8002030 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e238      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x7a>
 8001f6c:	4b84      	ldr	r3, [pc, #528]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a83      	ldr	r2, [pc, #524]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	e02e      	b.n	8001fd8 <HAL_RCC_OscConfig+0xd8>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x9c>
 8001f82:	4b7f      	ldr	r3, [pc, #508]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a7e      	ldr	r2, [pc, #504]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b7c      	ldr	r3, [pc, #496]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a7b      	ldr	r2, [pc, #492]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e01d      	b.n	8001fd8 <HAL_RCC_OscConfig+0xd8>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0xc0>
 8001fa6:	4b76      	ldr	r3, [pc, #472]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a75      	ldr	r2, [pc, #468]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b73      	ldr	r3, [pc, #460]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a72      	ldr	r2, [pc, #456]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e00b      	b.n	8001fd8 <HAL_RCC_OscConfig+0xd8>
 8001fc0:	4b6f      	ldr	r3, [pc, #444]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a6e      	ldr	r2, [pc, #440]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	4b6c      	ldr	r3, [pc, #432]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a6b      	ldr	r2, [pc, #428]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d013      	beq.n	8002008 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fc42 	bl	8001868 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff fc3e 	bl	8001868 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1ec      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffa:	4b61      	ldr	r3, [pc, #388]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0xe8>
 8002006:	e014      	b.n	8002032 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7ff fc2e 	bl	8001868 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002010:	f7ff fc2a 	bl	8001868 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e1d8      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	4b57      	ldr	r3, [pc, #348]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x110>
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d069      	beq.n	8002112 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800203e:	4b50      	ldr	r3, [pc, #320]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00b      	beq.n	8002062 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800204a:	4b4d      	ldr	r3, [pc, #308]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	2b08      	cmp	r3, #8
 8002054:	d11c      	bne.n	8002090 <HAL_RCC_OscConfig+0x190>
 8002056:	4b4a      	ldr	r3, [pc, #296]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d116      	bne.n	8002090 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	4b47      	ldr	r3, [pc, #284]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_RCC_OscConfig+0x17a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d001      	beq.n	800207a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e1ac      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207a:	4b41      	ldr	r3, [pc, #260]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	493d      	ldr	r1, [pc, #244]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208e:	e040      	b.n	8002112 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d023      	beq.n	80020e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002098:	4b39      	ldr	r3, [pc, #228]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a38      	ldr	r2, [pc, #224]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff fbe0 	bl	8001868 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ac:	f7ff fbdc 	bl	8001868 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e18a      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	4b30      	ldr	r3, [pc, #192]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ca:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4929      	ldr	r1, [pc, #164]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]
 80020de:	e018      	b.n	8002112 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e0:	4b27      	ldr	r3, [pc, #156]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a26      	ldr	r2, [pc, #152]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 80020e6:	f023 0301 	bic.w	r3, r3, #1
 80020ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7ff fbbc 	bl	8001868 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f4:	f7ff fbb8 	bl	8001868 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e166      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002106:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d038      	beq.n	8002190 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d019      	beq.n	800215a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8002128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800212a:	4a15      	ldr	r2, [pc, #84]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002132:	f7ff fb99 	bl	8001868 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800213a:	f7ff fb95 	bl	8001868 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e143      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 800214e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x23a>
 8002158:	e01a      	b.n	8002190 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 800215c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215e:	4a08      	ldr	r2, [pc, #32]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002166:	f7ff fb7f 	bl	8001868 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800216e:	f7ff fb7b 	bl	8001868 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d903      	bls.n	8002184 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e129      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
 8002180:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002184:	4b95      	ldr	r3, [pc, #596]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1ee      	bne.n	800216e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80a4 	beq.w	80022e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219e:	4b8f      	ldr	r3, [pc, #572]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10d      	bne.n	80021c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	4b8c      	ldr	r3, [pc, #560]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a8b      	ldr	r2, [pc, #556]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
 80021b6:	4b89      	ldr	r3, [pc, #548]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021c2:	2301      	movs	r3, #1
 80021c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c6:	4b86      	ldr	r3, [pc, #536]	; (80023e0 <HAL_RCC_OscConfig+0x4e0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d118      	bne.n	8002204 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021d2:	4b83      	ldr	r3, [pc, #524]	; (80023e0 <HAL_RCC_OscConfig+0x4e0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a82      	ldr	r2, [pc, #520]	; (80023e0 <HAL_RCC_OscConfig+0x4e0>)
 80021d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021de:	f7ff fb43 	bl	8001868 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80021e6:	f7ff fb3f 	bl	8001868 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b64      	cmp	r3, #100	; 0x64
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0ed      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f8:	4b79      	ldr	r3, [pc, #484]	; (80023e0 <HAL_RCC_OscConfig+0x4e0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x31a>
 800220c:	4b73      	ldr	r3, [pc, #460]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	4a72      	ldr	r2, [pc, #456]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	6713      	str	r3, [r2, #112]	; 0x70
 8002218:	e02d      	b.n	8002276 <HAL_RCC_OscConfig+0x376>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x33c>
 8002222:	4b6e      	ldr	r3, [pc, #440]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002226:	4a6d      	ldr	r2, [pc, #436]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	6713      	str	r3, [r2, #112]	; 0x70
 800222e:	4b6b      	ldr	r3, [pc, #428]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	4a6a      	ldr	r2, [pc, #424]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002234:	f023 0304 	bic.w	r3, r3, #4
 8002238:	6713      	str	r3, [r2, #112]	; 0x70
 800223a:	e01c      	b.n	8002276 <HAL_RCC_OscConfig+0x376>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b05      	cmp	r3, #5
 8002242:	d10c      	bne.n	800225e <HAL_RCC_OscConfig+0x35e>
 8002244:	4b65      	ldr	r3, [pc, #404]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	4a64      	ldr	r2, [pc, #400]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 800224a:	f043 0304 	orr.w	r3, r3, #4
 800224e:	6713      	str	r3, [r2, #112]	; 0x70
 8002250:	4b62      	ldr	r3, [pc, #392]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	4a61      	ldr	r2, [pc, #388]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6713      	str	r3, [r2, #112]	; 0x70
 800225c:	e00b      	b.n	8002276 <HAL_RCC_OscConfig+0x376>
 800225e:	4b5f      	ldr	r3, [pc, #380]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002262:	4a5e      	ldr	r2, [pc, #376]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	6713      	str	r3, [r2, #112]	; 0x70
 800226a:	4b5c      	ldr	r3, [pc, #368]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	4a5b      	ldr	r2, [pc, #364]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002270:	f023 0304 	bic.w	r3, r3, #4
 8002274:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d015      	beq.n	80022aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227e:	f7ff faf3 	bl	8001868 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002284:	e00a      	b.n	800229c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7ff faef 	bl	8001868 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	f241 3288 	movw	r2, #5000	; 0x1388
 8002294:	4293      	cmp	r3, r2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e09b      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229c:	4b4f      	ldr	r3, [pc, #316]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0ee      	beq.n	8002286 <HAL_RCC_OscConfig+0x386>
 80022a8:	e014      	b.n	80022d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022aa:	f7ff fadd 	bl	8001868 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b0:	e00a      	b.n	80022c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b2:	f7ff fad9 	bl	8001868 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e085      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c8:	4b44      	ldr	r3, [pc, #272]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1ee      	bne.n	80022b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d105      	bne.n	80022e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022da:	4b40      	ldr	r3, [pc, #256]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a3f      	ldr	r2, [pc, #252]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80022e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d071      	beq.n	80023d2 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ee:	4b3b      	ldr	r3, [pc, #236]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d069      	beq.n	80023ce <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d14b      	bne.n	800239a <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002302:	4b36      	ldr	r3, [pc, #216]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a35      	ldr	r2, [pc, #212]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002308:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800230c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7ff faab 	bl	8001868 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002316:	f7ff faa7 	bl	8001868 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e055      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002328:	4b2c      	ldr	r3, [pc, #176]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f0      	bne.n	8002316 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69da      	ldr	r2, [r3, #28]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	019b      	lsls	r3, r3, #6
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	085b      	lsrs	r3, r3, #1
 800234c:	3b01      	subs	r3, #1
 800234e:	041b      	lsls	r3, r3, #16
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	061b      	lsls	r3, r3, #24
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	071b      	lsls	r3, r3, #28
 8002360:	491e      	ldr	r1, [pc, #120]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a1c      	ldr	r2, [pc, #112]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 800236c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002372:	f7ff fa79 	bl	8001868 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237a:	f7ff fa75 	bl	8001868 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e023      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238c:	4b13      	ldr	r3, [pc, #76]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x47a>
 8002398:	e01b      	b.n	80023d2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a0f      	ldr	r2, [pc, #60]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80023a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7ff fa5f 	bl	8001868 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ae:	f7ff fa5b 	bl	8001868 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e009      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f0      	bne.n	80023ae <HAL_RCC_OscConfig+0x4ae>
 80023cc:	e001      	b.n	80023d2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40007000 	.word	0x40007000

080023e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0ce      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023fc:	4b69      	ldr	r3, [pc, #420]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d910      	bls.n	800242c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b66      	ldr	r3, [pc, #408]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 020f 	bic.w	r2, r3, #15
 8002412:	4964      	ldr	r1, [pc, #400]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b62      	ldr	r3, [pc, #392]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0b6      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002444:	4b58      	ldr	r3, [pc, #352]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a57      	ldr	r2, [pc, #348]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800244e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800245c:	4b52      	ldr	r3, [pc, #328]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a51      	ldr	r2, [pc, #324]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002466:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002468:	4b4f      	ldr	r3, [pc, #316]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	494c      	ldr	r1, [pc, #304]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d040      	beq.n	8002508 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	4b46      	ldr	r3, [pc, #280]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d115      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e07d      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a6:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e071      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b6:	4b3c      	ldr	r3, [pc, #240]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e069      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c6:	4b38      	ldr	r3, [pc, #224]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f023 0203 	bic.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4935      	ldr	r1, [pc, #212]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d8:	f7ff f9c6 	bl	8001868 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7ff f9c2 	bl	8001868 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e051      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 020c 	and.w	r2, r3, #12
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	429a      	cmp	r2, r3
 8002506:	d1eb      	bne.n	80024e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002508:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d210      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 020f 	bic.w	r2, r3, #15
 800251e:	4921      	ldr	r1, [pc, #132]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b1f      	ldr	r3, [pc, #124]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e030      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002544:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4915      	ldr	r1, [pc, #84]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	490d      	ldr	r1, [pc, #52]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002576:	f000 f81d 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 800257a:	4601      	mov	r1, r0
 800257c:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	4a09      	ldr	r2, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002588:	5cd3      	ldrb	r3, [r2, r3]
 800258a:	fa21 f303 	lsr.w	r3, r1, r3
 800258e:	4a08      	ldr	r2, [pc, #32]	; (80025b0 <HAL_RCC_ClockConfig+0x1cc>)
 8002590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002592:	2000      	movs	r0, #0
 8002594:	f7fe ffac 	bl	80014f0 <HAL_InitTick>

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023c00 	.word	0x40023c00
 80025a8:	40023800 	.word	0x40023800
 80025ac:	08008fd4 	.word	0x08008fd4
 80025b0:	20000000 	.word	0x20000000

080025b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	2300      	movs	r3, #0
 80025c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ca:	4b50      	ldr	r3, [pc, #320]	; (800270c <HAL_RCC_GetSysClockFreq+0x158>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d007      	beq.n	80025e6 <HAL_RCC_GetSysClockFreq+0x32>
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d008      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0x38>
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f040 808d 	bne.w	80026fa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025e0:	4b4b      	ldr	r3, [pc, #300]	; (8002710 <HAL_RCC_GetSysClockFreq+0x15c>)
 80025e2:	60bb      	str	r3, [r7, #8]
       break;
 80025e4:	e08c      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025e6:	4b4b      	ldr	r3, [pc, #300]	; (8002714 <HAL_RCC_GetSysClockFreq+0x160>)
 80025e8:	60bb      	str	r3, [r7, #8]
      break;
 80025ea:	e089      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025ec:	4b47      	ldr	r3, [pc, #284]	; (800270c <HAL_RCC_GetSysClockFreq+0x158>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025f6:	4b45      	ldr	r3, [pc, #276]	; (800270c <HAL_RCC_GetSysClockFreq+0x158>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d023      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002602:	4b42      	ldr	r3, [pc, #264]	; (800270c <HAL_RCC_GetSysClockFreq+0x158>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	099b      	lsrs	r3, r3, #6
 8002608:	f04f 0400 	mov.w	r4, #0
 800260c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	ea03 0501 	and.w	r5, r3, r1
 8002618:	ea04 0602 	and.w	r6, r4, r2
 800261c:	4a3d      	ldr	r2, [pc, #244]	; (8002714 <HAL_RCC_GetSysClockFreq+0x160>)
 800261e:	fb02 f106 	mul.w	r1, r2, r6
 8002622:	2200      	movs	r2, #0
 8002624:	fb02 f205 	mul.w	r2, r2, r5
 8002628:	440a      	add	r2, r1
 800262a:	493a      	ldr	r1, [pc, #232]	; (8002714 <HAL_RCC_GetSysClockFreq+0x160>)
 800262c:	fba5 0101 	umull	r0, r1, r5, r1
 8002630:	1853      	adds	r3, r2, r1
 8002632:	4619      	mov	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f04f 0400 	mov.w	r4, #0
 800263a:	461a      	mov	r2, r3
 800263c:	4623      	mov	r3, r4
 800263e:	f7fd fe57 	bl	80002f0 <__aeabi_uldivmod>
 8002642:	4603      	mov	r3, r0
 8002644:	460c      	mov	r4, r1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	e049      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264a:	4b30      	ldr	r3, [pc, #192]	; (800270c <HAL_RCC_GetSysClockFreq+0x158>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	099b      	lsrs	r3, r3, #6
 8002650:	f04f 0400 	mov.w	r4, #0
 8002654:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	ea03 0501 	and.w	r5, r3, r1
 8002660:	ea04 0602 	and.w	r6, r4, r2
 8002664:	4629      	mov	r1, r5
 8002666:	4632      	mov	r2, r6
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	f04f 0400 	mov.w	r4, #0
 8002670:	0154      	lsls	r4, r2, #5
 8002672:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002676:	014b      	lsls	r3, r1, #5
 8002678:	4619      	mov	r1, r3
 800267a:	4622      	mov	r2, r4
 800267c:	1b49      	subs	r1, r1, r5
 800267e:	eb62 0206 	sbc.w	r2, r2, r6
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	f04f 0400 	mov.w	r4, #0
 800268a:	0194      	lsls	r4, r2, #6
 800268c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002690:	018b      	lsls	r3, r1, #6
 8002692:	1a5b      	subs	r3, r3, r1
 8002694:	eb64 0402 	sbc.w	r4, r4, r2
 8002698:	f04f 0100 	mov.w	r1, #0
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	00e2      	lsls	r2, r4, #3
 80026a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026a6:	00d9      	lsls	r1, r3, #3
 80026a8:	460b      	mov	r3, r1
 80026aa:	4614      	mov	r4, r2
 80026ac:	195b      	adds	r3, r3, r5
 80026ae:	eb44 0406 	adc.w	r4, r4, r6
 80026b2:	f04f 0100 	mov.w	r1, #0
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	02a2      	lsls	r2, r4, #10
 80026bc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80026c0:	0299      	lsls	r1, r3, #10
 80026c2:	460b      	mov	r3, r1
 80026c4:	4614      	mov	r4, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	4621      	mov	r1, r4
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f04f 0400 	mov.w	r4, #0
 80026d0:	461a      	mov	r2, r3
 80026d2:	4623      	mov	r3, r4
 80026d4:	f7fd fe0c 	bl	80002f0 <__aeabi_uldivmod>
 80026d8:	4603      	mov	r3, r0
 80026da:	460c      	mov	r4, r1
 80026dc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_GetSysClockFreq+0x158>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	0c1b      	lsrs	r3, r3, #16
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	3301      	adds	r3, #1
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f6:	60bb      	str	r3, [r7, #8]
      break;
 80026f8:	e002      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RCC_GetSysClockFreq+0x15c>)
 80026fc:	60bb      	str	r3, [r7, #8]
      break;
 80026fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002700:	68bb      	ldr	r3, [r7, #8]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800
 8002710:	00f42400 	.word	0x00f42400
 8002714:	017d7840 	.word	0x017d7840

08002718 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <HAL_RCC_GetHCLKFreq+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000000 	.word	0x20000000

08002730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002734:	f7ff fff0 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002738:	4601      	mov	r1, r0
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0a9b      	lsrs	r3, r3, #10
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4a03      	ldr	r2, [pc, #12]	; (8002754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002746:	5cd3      	ldrb	r3, [r2, r3]
 8002748:	fa21 f303 	lsr.w	r3, r1, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40023800 	.word	0x40023800
 8002754:	08008fe4 	.word	0x08008fe4

08002758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800275c:	f7ff ffdc 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002760:	4601      	mov	r1, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0b5b      	lsrs	r3, r3, #13
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4a03      	ldr	r2, [pc, #12]	; (800277c <HAL_RCC_GetPCLK2Freq+0x24>)
 800276e:	5cd3      	ldrb	r3, [r2, r3]
 8002770:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	08008fe4 	.word	0x08008fe4

08002780 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	220f      	movs	r2, #15
 800278e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002790:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_RCC_GetClockConfig+0x5c>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0203 	and.w	r2, r3, #3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <HAL_RCC_GetClockConfig+0x5c>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <HAL_RCC_GetClockConfig+0x5c>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_RCC_GetClockConfig+0x5c>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	08db      	lsrs	r3, r3, #3
 80027ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027c2:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <HAL_RCC_GetClockConfig+0x60>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 020f 	and.w	r2, r3, #15
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	601a      	str	r2, [r3, #0]
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40023c00 	.word	0x40023c00

080027e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d012      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800280c:	4b69      	ldr	r3, [pc, #420]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4a68      	ldr	r2, [pc, #416]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002812:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002816:	6093      	str	r3, [r2, #8]
 8002818:	4b66      	ldr	r3, [pc, #408]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002820:	4964      	ldr	r1, [pc, #400]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800282e:	2301      	movs	r3, #1
 8002830:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d017      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800283e:	4b5d      	ldr	r3, [pc, #372]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002844:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284c:	4959      	ldr	r1, [pc, #356]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800285c:	d101      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800285e:	2301      	movs	r3, #1
 8002860:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800286a:	2301      	movs	r3, #1
 800286c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d017      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800287a:	4b4e      	ldr	r3, [pc, #312]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002880:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	494a      	ldr	r1, [pc, #296]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002898:	d101      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800289a:	2301      	movs	r3, #1
 800289c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80028b6:	2301      	movs	r3, #1
 80028b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0320 	and.w	r3, r3, #32
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 808b 	beq.w	80029de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028c8:	4b3a      	ldr	r3, [pc, #232]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	4a39      	ldr	r2, [pc, #228]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d2:	6413      	str	r3, [r2, #64]	; 0x40
 80028d4:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028e0:	4b35      	ldr	r3, [pc, #212]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a34      	ldr	r2, [pc, #208]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ec:	f7fe ffbc 	bl	8001868 <HAL_GetTick>
 80028f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f4:	f7fe ffb8 	bl	8001868 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	; 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e38d      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002906:	4b2c      	ldr	r3, [pc, #176]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002912:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d035      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	429a      	cmp	r2, r3
 800292e:	d02e      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002930:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002938:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800293a:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	4a1d      	ldr	r2, [pc, #116]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002944:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002946:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	4a1a      	ldr	r2, [pc, #104]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002950:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002952:	4a18      	ldr	r2, [pc, #96]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002958:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d114      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7fe ff80 	bl	8001868 <HAL_GetTick>
 8002968:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296a:	e00a      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296c:	f7fe ff7c 	bl	8001868 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	; 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e34f      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002982:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0ee      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800299a:	d111      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80029aa:	400b      	ands	r3, r1
 80029ac:	4901      	ldr	r1, [pc, #4]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
 80029b2:	e00b      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40007000 	.word	0x40007000
 80029bc:	0ffffcff 	.word	0x0ffffcff
 80029c0:	4bb3      	ldr	r3, [pc, #716]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4ab2      	ldr	r2, [pc, #712]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80029ca:	6093      	str	r3, [r2, #8]
 80029cc:	4bb0      	ldr	r3, [pc, #704]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d8:	49ad      	ldr	r1, [pc, #692]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d010      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029ea:	4ba9      	ldr	r3, [pc, #676]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f0:	4aa7      	ldr	r2, [pc, #668]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029fa:	4ba5      	ldr	r3, [pc, #660]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	49a2      	ldr	r1, [pc, #648]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a18:	4b9d      	ldr	r3, [pc, #628]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a26:	499a      	ldr	r1, [pc, #616]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a3a:	4b95      	ldr	r3, [pc, #596]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a48:	4991      	ldr	r1, [pc, #580]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a5c:	4b8c      	ldr	r3, [pc, #560]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a6a:	4989      	ldr	r1, [pc, #548]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a7e:	4b84      	ldr	r3, [pc, #528]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8c:	4980      	ldr	r1, [pc, #512]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aa0:	4b7b      	ldr	r3, [pc, #492]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	f023 0203 	bic.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	4978      	ldr	r1, [pc, #480]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ac2:	4b73      	ldr	r3, [pc, #460]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac8:	f023 020c 	bic.w	r2, r3, #12
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad0:	496f      	ldr	r1, [pc, #444]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ae4:	4b6a      	ldr	r3, [pc, #424]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af2:	4967      	ldr	r1, [pc, #412]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b06:	4b62      	ldr	r3, [pc, #392]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b14:	495e      	ldr	r1, [pc, #376]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b28:	4b59      	ldr	r3, [pc, #356]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b36:	4956      	ldr	r1, [pc, #344]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b4a:	4b51      	ldr	r3, [pc, #324]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	494d      	ldr	r1, [pc, #308]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00a      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b6c:	4b48      	ldr	r3, [pc, #288]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7a:	4945      	ldr	r1, [pc, #276]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b8e:	4b40      	ldr	r3, [pc, #256]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9c:	493c      	ldr	r1, [pc, #240]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00a      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bb0:	4b37      	ldr	r3, [pc, #220]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bbe:	4934      	ldr	r1, [pc, #208]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d011      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bd2:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002be0:	492b      	ldr	r1, [pc, #172]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c02:	2301      	movs	r3, #1
 8002c04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c12:	4b1f      	ldr	r3, [pc, #124]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c18:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c20:	491b      	ldr	r1, [pc, #108]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00b      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c34:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c44:	4912      	ldr	r1, [pc, #72]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00b      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c58:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c68:	4909      	ldr	r1, [pc, #36]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00f      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c7c:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8c:	e002      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
 8002c94:	4985      	ldr	r1, [pc, #532]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00b      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ca8:	4b80      	ldr	r3, [pc, #512]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cb8:	497c      	ldr	r1, [pc, #496]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d005      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cce:	f040 80d6 	bne.w	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cd2:	4b76      	ldr	r3, [pc, #472]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a75      	ldr	r2, [pc, #468]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002cd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cde:	f7fe fdc3 	bl	8001868 <HAL_GetTick>
 8002ce2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ce6:	f7fe fdbf 	bl	8001868 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b64      	cmp	r3, #100	; 0x64
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e194      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cf8:	4b6c      	ldr	r3, [pc, #432]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f0      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d021      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d11d      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d18:	4b64      	ldr	r3, [pc, #400]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d1e:	0c1b      	lsrs	r3, r3, #16
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d26:	4b61      	ldr	r3, [pc, #388]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d2c:	0e1b      	lsrs	r3, r3, #24
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	019a      	lsls	r2, r3, #6
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	041b      	lsls	r3, r3, #16
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	061b      	lsls	r3, r3, #24
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	071b      	lsls	r3, r3, #28
 8002d4c:	4957      	ldr	r1, [pc, #348]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d68:	d00a      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d02e      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d7e:	d129      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d80:	4b4a      	ldr	r3, [pc, #296]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d86:	0c1b      	lsrs	r3, r3, #16
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d8e:	4b47      	ldr	r3, [pc, #284]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d94:	0f1b      	lsrs	r3, r3, #28
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	019a      	lsls	r2, r3, #6
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	041b      	lsls	r3, r3, #16
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	061b      	lsls	r3, r3, #24
 8002dae:	431a      	orrs	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	071b      	lsls	r3, r3, #28
 8002db4:	493d      	ldr	r1, [pc, #244]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002dbc:	4b3b      	ldr	r3, [pc, #236]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc2:	f023 021f 	bic.w	r2, r3, #31
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	4937      	ldr	r1, [pc, #220]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d01d      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002de0:	4b32      	ldr	r3, [pc, #200]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de6:	0e1b      	lsrs	r3, r3, #24
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dee:	4b2f      	ldr	r3, [pc, #188]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002df4:	0f1b      	lsrs	r3, r3, #28
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	019a      	lsls	r2, r3, #6
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	041b      	lsls	r3, r3, #16
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	061b      	lsls	r3, r3, #24
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	071b      	lsls	r3, r3, #28
 8002e14:	4925      	ldr	r1, [pc, #148]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d011      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	019a      	lsls	r2, r3, #6
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	041b      	lsls	r3, r3, #16
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	061b      	lsls	r3, r3, #24
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	071b      	lsls	r3, r3, #28
 8002e44:	4919      	ldr	r1, [pc, #100]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e4c:	4b17      	ldr	r3, [pc, #92]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a16      	ldr	r2, [pc, #88]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e58:	f7fe fd06 	bl	8001868 <HAL_GetTick>
 8002e5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e60:	f7fe fd02 	bl	8001868 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e0d7      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	f040 80cd 	bne.w	8003020 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a08      	ldr	r2, [pc, #32]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e92:	f7fe fce9 	bl	8001868 <HAL_GetTick>
 8002e96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e9a:	f7fe fce5 	bl	8001868 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b64      	cmp	r3, #100	; 0x64
 8002ea6:	d903      	bls.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0ba      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002eac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002eb0:	4b5e      	ldr	r3, [pc, #376]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ebc:	d0ed      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d02e      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d12a      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ee6:	4b51      	ldr	r3, [pc, #324]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eec:	0c1b      	lsrs	r3, r3, #16
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ef4:	4b4d      	ldr	r3, [pc, #308]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	0f1b      	lsrs	r3, r3, #28
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	019a      	lsls	r2, r3, #6
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	041b      	lsls	r3, r3, #16
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	061b      	lsls	r3, r3, #24
 8002f14:	431a      	orrs	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	071b      	lsls	r3, r3, #28
 8002f1a:	4944      	ldr	r1, [pc, #272]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f22:	4b42      	ldr	r3, [pc, #264]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	3b01      	subs	r3, #1
 8002f32:	021b      	lsls	r3, r3, #8
 8002f34:	493d      	ldr	r1, [pc, #244]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d022      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f50:	d11d      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f52:	4b36      	ldr	r3, [pc, #216]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f58:	0e1b      	lsrs	r3, r3, #24
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f60:	4b32      	ldr	r3, [pc, #200]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	0f1b      	lsrs	r3, r3, #28
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	019a      	lsls	r2, r3, #6
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	041b      	lsls	r3, r3, #16
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	061b      	lsls	r3, r3, #24
 8002f80:	431a      	orrs	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	071b      	lsls	r3, r3, #28
 8002f86:	4929      	ldr	r1, [pc, #164]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d028      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f9a:	4b24      	ldr	r3, [pc, #144]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa0:	0e1b      	lsrs	r3, r3, #24
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fa8:	4b20      	ldr	r3, [pc, #128]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fae:	0c1b      	lsrs	r3, r3, #16
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	019a      	lsls	r2, r3, #6
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	041b      	lsls	r3, r3, #16
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	061b      	lsls	r3, r3, #24
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	071b      	lsls	r3, r3, #28
 8002fce:	4917      	ldr	r1, [pc, #92]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002fd6:	4b15      	ldr	r3, [pc, #84]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	4911      	ldr	r1, [pc, #68]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002fec:	4b0f      	ldr	r3, [pc, #60]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0e      	ldr	r2, [pc, #56]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff8:	f7fe fc36 	bl	8001868 <HAL_GetTick>
 8002ffc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003000:	f7fe fc32 	bl	8001868 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	; 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e007      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800301a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800301e:	d1ef      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800

08003030 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e01d      	b.n	800307e <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d105      	bne.n	800305a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7fe f975 	bl	8001344 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2203      	movs	r2, #3
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f80f 	bl	8003086 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003086:	b5b0      	push	{r4, r5, r7, lr}
 8003088:	b08e      	sub	sp, #56	; 0x38
 800308a:	af04      	add	r7, sp, #16
 800308c:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80030a6:	2376      	movs	r3, #118	; 0x76
 80030a8:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681d      	ldr	r5, [r3, #0]
 80030ae:	466c      	mov	r4, sp
 80030b0:	f107 0318 	add.w	r3, r7, #24
 80030b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80030b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80030bc:	f107 030c 	add.w	r3, r7, #12
 80030c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030c2:	4628      	mov	r0, r5
 80030c4:	f001 fe58 	bl	8004d78 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030d6:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f001 fe95 	bl	8004e0c <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f0:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 80030f2:	2002      	movs	r0, #2
 80030f4:	f7fe fbc4 	bl	8001880 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fe67 	bl	8003dcc <SD_PowerON>
 80030fe:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e013      	b.n	8003146 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fd8b 	bl	8003c3a <SD_InitCard>
 8003124:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00b      	beq.n	8003144 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3728      	adds	r7, #40	; 0x28
 800314a:	46bd      	mov	sp, r7
 800314c:	bdb0      	pop	{r4, r5, r7, pc}

0800314e <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800314e:	b590      	push	{r4, r7, lr}
 8003150:	b08f      	sub	sp, #60	; 0x3c
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800315c:	2300      	movs	r3, #0
 800315e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8003160:	f7fe fb82 	bl	8001868 <HAL_GetTick>
 8003164:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 8003166:	2300      	movs	r3, #0
 8003168:	633b      	str	r3, [r7, #48]	; 0x30
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d107      	bne.n	8003184 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003178:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e176      	b.n	8003472 <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	f040 8169 	bne.w	8003464 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	441a      	add	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d907      	bls.n	80031b6 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e15d      	b.n	8003472 <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2203      	movs	r2, #3
 80031ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2200      	movs	r2, #0
 80031c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d002      	beq.n	80031d4 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	025b      	lsls	r3, r3, #9
 80031d2:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031dc:	4618      	mov	r0, r3
 80031de:	f001 fea9 	bl	8004f34 <SDMMC_CmdBlockLength>
 80031e2:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80031e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d010      	beq.n	800320c <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fa:	431a      	orrs	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e132      	b.n	8003472 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800320c:	f04f 33ff 	mov.w	r3, #4294967295
 8003210:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	025b      	lsls	r3, r3, #9
 8003216:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003218:	2390      	movs	r3, #144	; 0x90
 800321a:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800321c:	2302      	movs	r3, #2
 800321e:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003220:	2300      	movs	r3, #0
 8003222:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003224:	2301      	movs	r3, #1
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f107 0210 	add.w	r2, r7, #16
 8003230:	4611      	mov	r1, r2
 8003232:	4618      	mov	r0, r3
 8003234:	f001 fe52 	bl	8004edc <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d90a      	bls.n	8003254 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2202      	movs	r2, #2
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4618      	mov	r0, r3
 800324c:	f001 feba 	bl	8004fc4 <SDMMC_CmdReadMultiBlock>
 8003250:	6378      	str	r0, [r7, #52]	; 0x34
 8003252:	e009      	b.n	8003268 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4618      	mov	r0, r3
 8003262:	f001 fe8b 	bl	8004f7c <SDMMC_CmdReadSingleBlock>
 8003266:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326a:	2b00      	cmp	r3, #0
 800326c:	d04a      	beq.n	8003304 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003276:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800327c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800327e:	431a      	orrs	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0f0      	b.n	8003472 <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d016      	beq.n	80032cc <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800329e:	2300      	movs	r3, #0
 80032a0:	633b      	str	r3, [r7, #48]	; 0x30
 80032a2:	e00d      	b.n	80032c0 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6819      	ldr	r1, [r3, #0]
 80032a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ae:	18d4      	adds	r4, r2, r3
 80032b0:	4608      	mov	r0, r1
 80032b2:	f001 fd8d 	bl	8004dd0 <SDMMC_ReadFIFO>
 80032b6:	4603      	mov	r3, r0
 80032b8:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	3301      	adds	r3, #1
 80032be:	633b      	str	r3, [r7, #48]	; 0x30
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c2:	2b07      	cmp	r3, #7
 80032c4:	d9ee      	bls.n	80032a4 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 80032c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c8:	3320      	adds	r3, #32
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80032cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <HAL_SD_ReadBlocks+0x194>
 80032d2:	f7fe fac9 	bl	8001868 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032de:	429a      	cmp	r2, r3
 80032e0:	d810      	bhi.n	8003304 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80032ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e0b6      	b.n	8003472 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0be      	beq.n	8003290 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d020      	beq.n	8003362 <HAL_SD_ReadBlocks+0x214>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d91d      	bls.n	8003362 <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	2b03      	cmp	r3, #3
 800332c:	d019      	beq.n	8003362 <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f001 feb2 	bl	800509c <SDMMC_CmdStopTransfer>
 8003338:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 800333a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333c:	2b00      	cmp	r3, #0
 800333e:	d010      	beq.n	8003362 <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003348:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800334e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003350:	431a      	orrs	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e087      	b.n	8003472 <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d010      	beq.n	8003392 <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003378:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	f043 0208 	orr.w	r2, r3, #8
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e06f      	b.n	8003472 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d010      	beq.n	80033c2 <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80033a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ae:	f043 0202 	orr.w	r2, r3, #2
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e057      	b.n	8003472 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d037      	beq.n	8003440 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	f043 0220 	orr.w	r2, r3, #32
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e03f      	b.n	8003472 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f001 fcea 	bl	8004dd0 <SDMMC_ReadFIFO>
 80033fc:	4602      	mov	r2, r0
 80033fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003400:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	3304      	adds	r3, #4
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340a:	2b00      	cmp	r3, #0
 800340c:	d007      	beq.n	800341e <HAL_SD_ReadBlocks+0x2d0>
 800340e:	f7fe fa2b 	bl	8001868 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800341a:	429a      	cmp	r2, r3
 800341c:	d810      	bhi.n	8003440 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003426:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e018      	b.n	8003472 <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1d1      	bne.n	80033f2 <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003456:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	e006      	b.n	8003472 <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
  }
}
 8003472:	4618      	mov	r0, r3
 8003474:	373c      	adds	r7, #60	; 0x3c
 8003476:	46bd      	mov	sp, r7
 8003478:	bd90      	pop	{r4, r7, pc}

0800347a <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b08e      	sub	sp, #56	; 0x38
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003488:	2300      	movs	r3, #0
 800348a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 800348c:	f7fe f9ec 	bl	8001868 <HAL_GetTick>
 8003490:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d107      	bne.n	80034b0 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e147      	b.n	8003740 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	f040 813a 	bne.w	8003732 <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	441a      	add	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d907      	bls.n	80034e2 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e12e      	b.n	8003740 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2203      	movs	r2, #3
 80034e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2200      	movs	r2, #0
 80034f0:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d002      	beq.n	8003500 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	025b      	lsls	r3, r3, #9
 80034fe:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003508:	4618      	mov	r0, r3
 800350a:	f001 fd13 	bl	8004f34 <SDMMC_CmdBlockLength>
 800350e:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8003510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003512:	2b00      	cmp	r3, #0
 8003514:	d010      	beq.n	8003538 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800351e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003526:	431a      	orrs	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e103      	b.n	8003740 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d90a      	bls.n	8003554 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4618      	mov	r0, r3
 800354c:	f001 fd82 	bl	8005054 <SDMMC_CmdWriteMultiBlock>
 8003550:	6378      	str	r0, [r7, #52]	; 0x34
 8003552:	e009      	b.n	8003568 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2210      	movs	r2, #16
 8003558:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4618      	mov	r0, r3
 8003562:	f001 fd53 	bl	800500c <SDMMC_CmdWriteSingleBlock>
 8003566:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356a:	2b00      	cmp	r3, #0
 800356c:	d010      	beq.n	8003590 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003576:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800357c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357e:	431a      	orrs	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0d7      	b.n	8003740 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003590:	f04f 33ff 	mov.w	r3, #4294967295
 8003594:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	025b      	lsls	r3, r3, #9
 800359a:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800359c:	2390      	movs	r3, #144	; 0x90
 800359e:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80035a8:	2301      	movs	r3, #1
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f107 0210 	add.w	r2, r7, #16
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f001 fc90 	bl	8004edc <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80035bc:	e037      	b.n	800362e <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d014      	beq.n	80035f6 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80035cc:	2300      	movs	r3, #0
 80035ce:	633b      	str	r3, [r7, #48]	; 0x30
 80035d0:	e00b      	b.n	80035ea <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035dc:	4413      	add	r3, r2
 80035de:	4619      	mov	r1, r3
 80035e0:	f001 fc03 	bl	8004dea <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	3301      	adds	r3, #1
 80035e8:	633b      	str	r3, [r7, #48]	; 0x30
 80035ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ec:	2b07      	cmp	r3, #7
 80035ee:	d9f0      	bls.n	80035d2 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 80035f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f2:	3320      	adds	r3, #32
 80035f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80035f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <HAL_SD_WriteBlocks+0x192>
 80035fc:	f7fe f934 	bl	8001868 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003608:	429a      	cmp	r2, r3
 800360a:	d810      	bhi.n	800362e <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003614:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800361a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361c:	431a      	orrs	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e088      	b.n	8003740 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003634:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0c0      	beq.n	80035be <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d020      	beq.n	800368c <HAL_SD_WriteBlocks+0x212>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d91d      	bls.n	800368c <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003654:	2b03      	cmp	r3, #3
 8003656:	d019      	beq.n	800368c <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f001 fd1d 	bl	800509c <SDMMC_CmdStopTransfer>
 8003662:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8003664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003666:	2b00      	cmp	r3, #0
 8003668:	d010      	beq.n	800368c <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003672:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367a:	431a      	orrs	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e059      	b.n	8003740 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d010      	beq.n	80036bc <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80036a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	f043 0208 	orr.w	r2, r3, #8
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e041      	b.n	8003740 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d010      	beq.n	80036ec <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80036d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	f043 0202 	orr.w	r2, r3, #2
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e029      	b.n	8003740 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d010      	beq.n	800371c <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003702:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	f043 0210 	orr.w	r2, r3, #16
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e011      	b.n	8003740 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003724:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	e006      	b.n	8003740 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
  }
}
 8003740:	4618      	mov	r0, r3
 8003742:	3738      	adds	r7, #56	; 0x38
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800375a:	0e1b      	lsrs	r3, r3, #24
 800375c:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	099b      	lsrs	r3, r3, #6
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	b2da      	uxtb	r2, r3
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	089b      	lsrs	r3, r3, #2
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	b2da      	uxtb	r2, r3
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	b2da      	uxtb	r2, r3
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003790:	0c1b      	lsrs	r3, r3, #16
 8003792:	b2db      	uxtb	r3, r3
 8003794:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	b2da      	uxtb	r2, r3
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037c4:	0e1b      	lsrs	r3, r3, #24
 80037c6:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037d8:	0c1b      	lsrs	r3, r3, #16
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	88db      	ldrh	r3, [r3, #6]
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	4313      	orrs	r3, r2
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	b2da      	uxtb	r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800380a:	0a1b      	lsrs	r3, r3, #8
 800380c:	b2db      	uxtb	r3, r3
 800380e:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	09db      	lsrs	r3, r3, #7
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	b2da      	uxtb	r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	099b      	lsrs	r3, r3, #6
 8003824:	b2db      	uxtb	r3, r3
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	b2da      	uxtb	r2, r3
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	b2da      	uxtb	r2, r3
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	b2da      	uxtb	r2, r3
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2200      	movs	r2, #0
 8003854:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	2b00      	cmp	r3, #0
 800385c:	f040 8086 	bne.w	800396c <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	029b      	lsls	r3, r3, #10
 8003864:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003870:	b2db      	uxtb	r3, r3
 8003872:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	431a      	orrs	r2, r3
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003886:	0e1b      	lsrs	r3, r3, #24
 8003888:	b2db      	uxtb	r3, r3
 800388a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	099b      	lsrs	r3, r3, #6
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	431a      	orrs	r2, r3
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	08db      	lsrs	r3, r3, #3
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c0:	0c1b      	lsrs	r3, r3, #16
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	095b      	lsrs	r3, r3, #5
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	089b      	lsrs	r3, r3, #2
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	f003 0306 	and.w	r3, r3, #6
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038fc:	0a1b      	lsrs	r3, r3, #8
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	7e1b      	ldrb	r3, [r3, #24]
 8003906:	b2da      	uxtb	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	09db      	lsrs	r3, r3, #7
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	b2db      	uxtb	r3, r3
 8003914:	4313      	orrs	r3, r2
 8003916:	b2da      	uxtb	r2, r3
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	7e1b      	ldrb	r3, [r3, #24]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	3302      	adds	r3, #2
 800392e:	2201      	movs	r2, #1
 8003930:	409a      	lsls	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003936:	fb02 f203 	mul.w	r2, r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	7a1b      	ldrb	r3, [r3, #8]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	461a      	mov	r2, r3
 8003946:	2301      	movs	r3, #1
 8003948:	4093      	lsls	r3, r2
 800394a:	461a      	mov	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003958:	0a52      	lsrs	r2, r2, #9
 800395a:	fb02 f203 	mul.w	r2, r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003968:	661a      	str	r2, [r3, #96]	; 0x60
 800396a:	e04d      	b.n	8003a08 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	2b01      	cmp	r3, #1
 8003972:	d138      	bne.n	80039e6 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003978:	b2db      	uxtb	r3, r3
 800397a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	041b      	lsls	r3, r3, #16
 8003980:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398c:	0e1b      	lsrs	r3, r3, #24
 800398e:	b2db      	uxtb	r3, r3
 8003990:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	431a      	orrs	r2, r3
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a4:	0c1b      	lsrs	r3, r3, #16
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	3301      	adds	r3, #1
 80039c6:	029a      	lsls	r2, r3, #10
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	655a      	str	r2, [r3, #84]	; 0x54
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039da:	659a      	str	r2, [r3, #88]	; 0x58
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	661a      	str	r2, [r3, #96]	; 0x60
 80039e4:	e010      	b.n	8003a08 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80039ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0c1      	b.n	8003b8c <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	099b      	lsrs	r3, r3, #6
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	7e9b      	ldrb	r3, [r3, #26]
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	09db      	lsrs	r3, r3, #7
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	4313      	orrs	r3, r2
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5e:	0e1b      	lsrs	r3, r3, #24
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	09db      	lsrs	r3, r3, #7
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	089b      	lsrs	r3, r3, #2
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f003 030c 	and.w	r3, r3, #12
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aaa:	0c1b      	lsrs	r3, r3, #16
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	7fdb      	ldrb	r3, [r3, #31]
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	099b      	lsrs	r3, r3, #6
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af8:	0a1b      	lsrs	r3, r3, #8
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	09db      	lsrs	r3, r3, #7
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	099b      	lsrs	r3, r3, #6
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	091b      	lsrs	r3, r3, #4
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	089b      	lsrs	r3, r3, #2
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	085b      	lsrs	r3, r3, #1
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8003c04:	f107 030c 	add.w	r3, r7, #12
 8003c08:	4619      	mov	r1, r3
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f986 	bl	8003f1c <SD_SendStatus>
 8003c10:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	0a5b      	lsrs	r3, r3, #9
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003c3a:	b5b0      	push	{r4, r5, r7, lr}
 8003c3c:	b094      	sub	sp, #80	; 0x50
 8003c3e:	af04      	add	r7, sp, #16
 8003c40:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8003c46:	2301      	movs	r3, #1
 8003c48:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f001 f8ea 	bl	8004e28 <SDMMC_GetPowerState>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003c5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003c5e:	e0b1      	b.n	8003dc4 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d02f      	beq.n	8003cc8 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 fae9 	bl	8005244 <SDMMC_CmdSendCID>
 8003c72:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <SD_InitCard+0x44>
    {
      return errorstate;
 8003c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7c:	e0a2      	b.n	8003dc4 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f001 f914 	bl	8004eb2 <SDMMC_GetResponse>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2104      	movs	r1, #4
 8003c96:	4618      	mov	r0, r3
 8003c98:	f001 f90b 	bl	8004eb2 <SDMMC_GetResponse>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2108      	movs	r1, #8
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f001 f902 	bl	8004eb2 <SDMMC_GetResponse>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	210c      	movs	r1, #12
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 f8f9 	bl	8004eb2 <SDMMC_GetResponse>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d00d      	beq.n	8003cec <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f107 020e 	add.w	r2, r7, #14
 8003cd8:	4611      	mov	r1, r2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 faf3 	bl	80052c6 <SDMMC_CmdSetRelAdd>
 8003ce0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <SD_InitCard+0xb2>
    {
      return errorstate;
 8003ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cea:	e06b      	b.n	8003dc4 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d036      	beq.n	8003d62 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003cf4:	89fb      	ldrh	r3, [r7, #14]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d04:	041b      	lsls	r3, r3, #16
 8003d06:	4619      	mov	r1, r3
 8003d08:	4610      	mov	r0, r2
 8003d0a:	f001 fabb 	bl	8005284 <SDMMC_CmdSendCSD>
 8003d0e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <SD_InitCard+0xe0>
    {
      return errorstate;
 8003d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d18:	e054      	b.n	8003dc4 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2100      	movs	r1, #0
 8003d20:	4618      	mov	r0, r3
 8003d22:	f001 f8c6 	bl	8004eb2 <SDMMC_GetResponse>
 8003d26:	4602      	mov	r2, r0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2104      	movs	r1, #4
 8003d32:	4618      	mov	r0, r3
 8003d34:	f001 f8bd 	bl	8004eb2 <SDMMC_GetResponse>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2108      	movs	r1, #8
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 f8b4 	bl	8004eb2 <SDMMC_GetResponse>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	210c      	movs	r1, #12
 8003d56:	4618      	mov	r0, r3
 8003d58:	f001 f8ab 	bl	8004eb2 <SDMMC_GetResponse>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2104      	movs	r1, #4
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f001 f8a2 	bl	8004eb2 <SDMMC_GetResponse>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	0d1a      	lsrs	r2, r3, #20
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8003d76:	f107 0310 	add.w	r3, r7, #16
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff fce3 	bl	8003748 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6819      	ldr	r1, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8a:	041b      	lsls	r3, r3, #16
 8003d8c:	f04f 0400 	mov.w	r4, #0
 8003d90:	461a      	mov	r2, r3
 8003d92:	4623      	mov	r3, r4
 8003d94:	4608      	mov	r0, r1
 8003d96:	f001 f9a5 	bl	80050e4 <SDMMC_CmdSelDesel>
 8003d9a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <SD_InitCard+0x16c>
  {
    return errorstate;
 8003da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da4:	e00e      	b.n	8003dc4 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681d      	ldr	r5, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	466c      	mov	r4, sp
 8003dae:	f103 0210 	add.w	r2, r3, #16
 8003db2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003db4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003db8:	3304      	adds	r3, #4
 8003dba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f000 ffdb 	bl	8004d78 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3740      	adds	r7, #64	; 0x40
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bdb0      	pop	{r4, r5, r7, pc}

08003dcc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 f9a0 	bl	800512e <SDMMC_CmdGoIdleState>
 8003dee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <SD_PowerON+0x2e>
  {
    return errorstate;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	e08c      	b.n	8003f14 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 f9b5 	bl	800516e <SDMMC_CmdOperCond>
 8003e04:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d03d      	beq.n	8003e88 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8003e12:	e032      	b.n	8003e7a <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	60ba      	str	r2, [r7, #8]
 8003e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d102      	bne.n	8003e28 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003e22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e26:	e075      	b.n	8003f14 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 f9be 	bl	80051b0 <SDMMC_CmdAppCommand>
 8003e34:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e40:	e068      	b.n	8003f14 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 f9d5 	bl	80051f8 <SDMMC_CmdAppOperCommand>
 8003e4e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e5a:	e05b      	b.n	8003f14 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2100      	movs	r1, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f001 f825 	bl	8004eb2 <SDMMC_GetResponse>
 8003e68:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	0fdb      	lsrs	r3, r3, #31
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	bf0c      	ite	eq
 8003e72:	2301      	moveq	r3, #1
 8003e74:	2300      	movne	r3, #0
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0c9      	beq.n	8003e14 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	645a      	str	r2, [r3, #68]	; 0x44
 8003e86:	e044      	b.n	8003f12 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8003e8e:	e031      	b.n	8003ef4 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	60ba      	str	r2, [r7, #8]
 8003e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d102      	bne.n	8003ea4 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003e9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ea2:	e037      	b.n	8003f14 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f001 f980 	bl	80051b0 <SDMMC_CmdAppCommand>
 8003eb0:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <SD_PowerON+0xf0>
      {
        return errorstate;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	e02b      	b.n	8003f14 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f001 f997 	bl	80051f8 <SDMMC_CmdAppOperCommand>
 8003eca:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <SD_PowerON+0x10a>
      {
        return errorstate;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	e01e      	b.n	8003f14 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2100      	movs	r1, #0
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 ffe8 	bl	8004eb2 <SDMMC_GetResponse>
 8003ee2:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	0fdb      	lsrs	r3, r3, #31
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0ca      	beq.n	8003e90 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
 8003f0a:	e002      	b.n	8003f12 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8003f30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f34:	e018      	b.n	8003f68 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	4619      	mov	r1, r3
 8003f42:	4610      	mov	r0, r2
 8003f44:	f001 f9e2 	bl	800530c <SDMMC_CmdSendStatus>
 8003f48:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <SD_SendStatus+0x38>
  {
    return errorstate;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	e009      	b.n	8003f68 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 ffa9 	bl	8004eb2 <SDMMC_GetResponse>
 8003f60:	4602      	mov	r2, r0
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e01d      	b.n	8003fbe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f815 	bl	8003fc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	4619      	mov	r1, r3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	f000 f986 	bl	80042c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	4b0c      	ldr	r3, [pc, #48]	; (800402c <HAL_TIM_Base_Start_IT+0x50>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b06      	cmp	r3, #6
 8004004:	d00b      	beq.n	800401e <HAL_TIM_Base_Start_IT+0x42>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400c:	d007      	beq.n	800401e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0201 	orr.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	00010007 	.word	0x00010007

08004030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b02      	cmp	r3, #2
 8004044:	d122      	bne.n	800408c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b02      	cmp	r3, #2
 8004052:	d11b      	bne.n	800408c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0202 	mvn.w	r2, #2
 800405c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f905 	bl	8004282 <HAL_TIM_IC_CaptureCallback>
 8004078:	e005      	b.n	8004086 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f8f7 	bl	800426e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f908 	bl	8004296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b04      	cmp	r3, #4
 8004098:	d122      	bne.n	80040e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d11b      	bne.n	80040e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0204 	mvn.w	r2, #4
 80040b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2202      	movs	r2, #2
 80040b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f8db 	bl	8004282 <HAL_TIM_IC_CaptureCallback>
 80040cc:	e005      	b.n	80040da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f8cd 	bl	800426e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f8de 	bl	8004296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d122      	bne.n	8004134 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d11b      	bne.n	8004134 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0208 	mvn.w	r2, #8
 8004104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2204      	movs	r2, #4
 800410a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f8b1 	bl	8004282 <HAL_TIM_IC_CaptureCallback>
 8004120:	e005      	b.n	800412e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f8a3 	bl	800426e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f8b4 	bl	8004296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0310 	and.w	r3, r3, #16
 800413e:	2b10      	cmp	r3, #16
 8004140:	d122      	bne.n	8004188 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b10      	cmp	r3, #16
 800414e:	d11b      	bne.n	8004188 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0210 	mvn.w	r2, #16
 8004158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2208      	movs	r2, #8
 800415e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f887 	bl	8004282 <HAL_TIM_IC_CaptureCallback>
 8004174:	e005      	b.n	8004182 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f879 	bl	800426e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f88a 	bl	8004296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d10e      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d107      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f06f 0201 	mvn.w	r2, #1
 80041ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fd f884 	bl	80012bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041be:	2b80      	cmp	r3, #128	; 0x80
 80041c0:	d10e      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041cc:	2b80      	cmp	r3, #128	; 0x80
 80041ce:	d107      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f91a 	bl	8004414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ee:	d10e      	bne.n	800420e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fa:	2b80      	cmp	r3, #128	; 0x80
 80041fc:	d107      	bne.n	800420e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f90d 	bl	8004428 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004218:	2b40      	cmp	r3, #64	; 0x40
 800421a:	d10e      	bne.n	800423a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004226:	2b40      	cmp	r3, #64	; 0x40
 8004228:	d107      	bne.n	800423a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f838 	bl	80042aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b20      	cmp	r3, #32
 8004246:	d10e      	bne.n	8004266 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b20      	cmp	r3, #32
 8004254:	d107      	bne.n	8004266 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f06f 0220 	mvn.w	r2, #32
 800425e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f8cd 	bl	8004400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a40      	ldr	r2, [pc, #256]	; (80043d4 <TIM_Base_SetConfig+0x114>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d013      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042de:	d00f      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a3d      	ldr	r2, [pc, #244]	; (80043d8 <TIM_Base_SetConfig+0x118>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00b      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a3c      	ldr	r2, [pc, #240]	; (80043dc <TIM_Base_SetConfig+0x11c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d007      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a3b      	ldr	r2, [pc, #236]	; (80043e0 <TIM_Base_SetConfig+0x120>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a3a      	ldr	r2, [pc, #232]	; (80043e4 <TIM_Base_SetConfig+0x124>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d108      	bne.n	8004312 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a2f      	ldr	r2, [pc, #188]	; (80043d4 <TIM_Base_SetConfig+0x114>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d02b      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004320:	d027      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a2c      	ldr	r2, [pc, #176]	; (80043d8 <TIM_Base_SetConfig+0x118>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d023      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a2b      	ldr	r2, [pc, #172]	; (80043dc <TIM_Base_SetConfig+0x11c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01f      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a2a      	ldr	r2, [pc, #168]	; (80043e0 <TIM_Base_SetConfig+0x120>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d01b      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a29      	ldr	r2, [pc, #164]	; (80043e4 <TIM_Base_SetConfig+0x124>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d017      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a28      	ldr	r2, [pc, #160]	; (80043e8 <TIM_Base_SetConfig+0x128>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a27      	ldr	r2, [pc, #156]	; (80043ec <TIM_Base_SetConfig+0x12c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00f      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a26      	ldr	r2, [pc, #152]	; (80043f0 <TIM_Base_SetConfig+0x130>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00b      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a25      	ldr	r2, [pc, #148]	; (80043f4 <TIM_Base_SetConfig+0x134>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d007      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a24      	ldr	r2, [pc, #144]	; (80043f8 <TIM_Base_SetConfig+0x138>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a23      	ldr	r2, [pc, #140]	; (80043fc <TIM_Base_SetConfig+0x13c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d108      	bne.n	8004384 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a0a      	ldr	r2, [pc, #40]	; (80043d4 <TIM_Base_SetConfig+0x114>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d003      	beq.n	80043b8 <TIM_Base_SetConfig+0xf8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a0c      	ldr	r2, [pc, #48]	; (80043e4 <TIM_Base_SetConfig+0x124>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d103      	bne.n	80043c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	615a      	str	r2, [r3, #20]
}
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40010000 	.word	0x40010000
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40000c00 	.word	0x40000c00
 80043e4:	40010400 	.word	0x40010400
 80043e8:	40014000 	.word	0x40014000
 80043ec:	40014400 	.word	0x40014400
 80043f0:	40014800 	.word	0x40014800
 80043f4:	40001800 	.word	0x40001800
 80043f8:	40001c00 	.word	0x40001c00
 80043fc:	40002000 	.word	0x40002000

08004400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e040      	b.n	80044d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fc fff0 	bl	8001444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2224      	movs	r2, #36	; 0x24
 8004468:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0201 	bic.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f8be 	bl	80045fc <UART_SetConfig>
 8004480:	4603      	mov	r3, r0
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e022      	b.n	80044d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fb56 	bl	8004b44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044b6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fbdd 	bl	8004c88 <UART_CheckIdleState>
 80044ce:	4603      	mov	r3, r0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	; 0x28
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	4613      	mov	r3, r2
 80044e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d17f      	bne.n	80045f0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_UART_Transmit+0x24>
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e078      	b.n	80045f2 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_UART_Transmit+0x36>
 800450a:	2302      	movs	r3, #2
 800450c:	e071      	b.n	80045f2 <HAL_UART_Transmit+0x11a>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2221      	movs	r2, #33	; 0x21
 8004520:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004522:	f7fd f9a1 	bl	8001868 <HAL_GetTick>
 8004526:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	88fa      	ldrh	r2, [r7, #6]
 800452c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	88fa      	ldrh	r2, [r7, #6]
 8004534:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004540:	d108      	bne.n	8004554 <HAL_UART_Transmit+0x7c>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d104      	bne.n	8004554 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	e003      	b.n	800455c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004558:	2300      	movs	r3, #0
 800455a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800455c:	e02c      	b.n	80045b8 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2200      	movs	r2, #0
 8004566:	2180      	movs	r1, #128	; 0x80
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 fbbc 	bl	8004ce6 <UART_WaitOnFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e03c      	b.n	80045f2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10b      	bne.n	8004596 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800458c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	3302      	adds	r3, #2
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	e007      	b.n	80045a6 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	781a      	ldrb	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	3301      	adds	r3, #1
 80045a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1cc      	bne.n	800455e <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2200      	movs	r2, #0
 80045cc:	2140      	movs	r1, #64	; 0x40
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 fb89 	bl	8004ce6 <UART_WaitOnFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e009      	b.n	80045f2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	e000      	b.n	80045f2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80045f0:	2302      	movs	r3, #2
  }
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3720      	adds	r7, #32
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004604:	2300      	movs	r3, #0
 8004606:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	4bb1      	ldr	r3, [pc, #708]	; (80048f0 <UART_SetConfig+0x2f4>)
 800462c:	4013      	ands	r3, r2
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6812      	ldr	r2, [r2, #0]
 8004632:	6939      	ldr	r1, [r7, #16]
 8004634:	430b      	orrs	r3, r1
 8004636:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	430a      	orrs	r2, r1
 8004670:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a9f      	ldr	r2, [pc, #636]	; (80048f4 <UART_SetConfig+0x2f8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d121      	bne.n	80046c0 <UART_SetConfig+0xc4>
 800467c:	4b9e      	ldr	r3, [pc, #632]	; (80048f8 <UART_SetConfig+0x2fc>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b03      	cmp	r3, #3
 8004688:	d816      	bhi.n	80046b8 <UART_SetConfig+0xbc>
 800468a:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <UART_SetConfig+0x94>)
 800468c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004690:	080046a1 	.word	0x080046a1
 8004694:	080046ad 	.word	0x080046ad
 8004698:	080046a7 	.word	0x080046a7
 800469c:	080046b3 	.word	0x080046b3
 80046a0:	2301      	movs	r3, #1
 80046a2:	77fb      	strb	r3, [r7, #31]
 80046a4:	e151      	b.n	800494a <UART_SetConfig+0x34e>
 80046a6:	2302      	movs	r3, #2
 80046a8:	77fb      	strb	r3, [r7, #31]
 80046aa:	e14e      	b.n	800494a <UART_SetConfig+0x34e>
 80046ac:	2304      	movs	r3, #4
 80046ae:	77fb      	strb	r3, [r7, #31]
 80046b0:	e14b      	b.n	800494a <UART_SetConfig+0x34e>
 80046b2:	2308      	movs	r3, #8
 80046b4:	77fb      	strb	r3, [r7, #31]
 80046b6:	e148      	b.n	800494a <UART_SetConfig+0x34e>
 80046b8:	2310      	movs	r3, #16
 80046ba:	77fb      	strb	r3, [r7, #31]
 80046bc:	bf00      	nop
 80046be:	e144      	b.n	800494a <UART_SetConfig+0x34e>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a8d      	ldr	r2, [pc, #564]	; (80048fc <UART_SetConfig+0x300>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d134      	bne.n	8004734 <UART_SetConfig+0x138>
 80046ca:	4b8b      	ldr	r3, [pc, #556]	; (80048f8 <UART_SetConfig+0x2fc>)
 80046cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d0:	f003 030c 	and.w	r3, r3, #12
 80046d4:	2b0c      	cmp	r3, #12
 80046d6:	d829      	bhi.n	800472c <UART_SetConfig+0x130>
 80046d8:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <UART_SetConfig+0xe4>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	08004715 	.word	0x08004715
 80046e4:	0800472d 	.word	0x0800472d
 80046e8:	0800472d 	.word	0x0800472d
 80046ec:	0800472d 	.word	0x0800472d
 80046f0:	08004721 	.word	0x08004721
 80046f4:	0800472d 	.word	0x0800472d
 80046f8:	0800472d 	.word	0x0800472d
 80046fc:	0800472d 	.word	0x0800472d
 8004700:	0800471b 	.word	0x0800471b
 8004704:	0800472d 	.word	0x0800472d
 8004708:	0800472d 	.word	0x0800472d
 800470c:	0800472d 	.word	0x0800472d
 8004710:	08004727 	.word	0x08004727
 8004714:	2300      	movs	r3, #0
 8004716:	77fb      	strb	r3, [r7, #31]
 8004718:	e117      	b.n	800494a <UART_SetConfig+0x34e>
 800471a:	2302      	movs	r3, #2
 800471c:	77fb      	strb	r3, [r7, #31]
 800471e:	e114      	b.n	800494a <UART_SetConfig+0x34e>
 8004720:	2304      	movs	r3, #4
 8004722:	77fb      	strb	r3, [r7, #31]
 8004724:	e111      	b.n	800494a <UART_SetConfig+0x34e>
 8004726:	2308      	movs	r3, #8
 8004728:	77fb      	strb	r3, [r7, #31]
 800472a:	e10e      	b.n	800494a <UART_SetConfig+0x34e>
 800472c:	2310      	movs	r3, #16
 800472e:	77fb      	strb	r3, [r7, #31]
 8004730:	bf00      	nop
 8004732:	e10a      	b.n	800494a <UART_SetConfig+0x34e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a71      	ldr	r2, [pc, #452]	; (8004900 <UART_SetConfig+0x304>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d120      	bne.n	8004780 <UART_SetConfig+0x184>
 800473e:	4b6e      	ldr	r3, [pc, #440]	; (80048f8 <UART_SetConfig+0x2fc>)
 8004740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004744:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004748:	2b10      	cmp	r3, #16
 800474a:	d00f      	beq.n	800476c <UART_SetConfig+0x170>
 800474c:	2b10      	cmp	r3, #16
 800474e:	d802      	bhi.n	8004756 <UART_SetConfig+0x15a>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <UART_SetConfig+0x164>
 8004754:	e010      	b.n	8004778 <UART_SetConfig+0x17c>
 8004756:	2b20      	cmp	r3, #32
 8004758:	d005      	beq.n	8004766 <UART_SetConfig+0x16a>
 800475a:	2b30      	cmp	r3, #48	; 0x30
 800475c:	d009      	beq.n	8004772 <UART_SetConfig+0x176>
 800475e:	e00b      	b.n	8004778 <UART_SetConfig+0x17c>
 8004760:	2300      	movs	r3, #0
 8004762:	77fb      	strb	r3, [r7, #31]
 8004764:	e0f1      	b.n	800494a <UART_SetConfig+0x34e>
 8004766:	2302      	movs	r3, #2
 8004768:	77fb      	strb	r3, [r7, #31]
 800476a:	e0ee      	b.n	800494a <UART_SetConfig+0x34e>
 800476c:	2304      	movs	r3, #4
 800476e:	77fb      	strb	r3, [r7, #31]
 8004770:	e0eb      	b.n	800494a <UART_SetConfig+0x34e>
 8004772:	2308      	movs	r3, #8
 8004774:	77fb      	strb	r3, [r7, #31]
 8004776:	e0e8      	b.n	800494a <UART_SetConfig+0x34e>
 8004778:	2310      	movs	r3, #16
 800477a:	77fb      	strb	r3, [r7, #31]
 800477c:	bf00      	nop
 800477e:	e0e4      	b.n	800494a <UART_SetConfig+0x34e>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a5f      	ldr	r2, [pc, #380]	; (8004904 <UART_SetConfig+0x308>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d120      	bne.n	80047cc <UART_SetConfig+0x1d0>
 800478a:	4b5b      	ldr	r3, [pc, #364]	; (80048f8 <UART_SetConfig+0x2fc>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004790:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004794:	2b40      	cmp	r3, #64	; 0x40
 8004796:	d00f      	beq.n	80047b8 <UART_SetConfig+0x1bc>
 8004798:	2b40      	cmp	r3, #64	; 0x40
 800479a:	d802      	bhi.n	80047a2 <UART_SetConfig+0x1a6>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <UART_SetConfig+0x1b0>
 80047a0:	e010      	b.n	80047c4 <UART_SetConfig+0x1c8>
 80047a2:	2b80      	cmp	r3, #128	; 0x80
 80047a4:	d005      	beq.n	80047b2 <UART_SetConfig+0x1b6>
 80047a6:	2bc0      	cmp	r3, #192	; 0xc0
 80047a8:	d009      	beq.n	80047be <UART_SetConfig+0x1c2>
 80047aa:	e00b      	b.n	80047c4 <UART_SetConfig+0x1c8>
 80047ac:	2300      	movs	r3, #0
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e0cb      	b.n	800494a <UART_SetConfig+0x34e>
 80047b2:	2302      	movs	r3, #2
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e0c8      	b.n	800494a <UART_SetConfig+0x34e>
 80047b8:	2304      	movs	r3, #4
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e0c5      	b.n	800494a <UART_SetConfig+0x34e>
 80047be:	2308      	movs	r3, #8
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e0c2      	b.n	800494a <UART_SetConfig+0x34e>
 80047c4:	2310      	movs	r3, #16
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	bf00      	nop
 80047ca:	e0be      	b.n	800494a <UART_SetConfig+0x34e>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a4d      	ldr	r2, [pc, #308]	; (8004908 <UART_SetConfig+0x30c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d124      	bne.n	8004820 <UART_SetConfig+0x224>
 80047d6:	4b48      	ldr	r3, [pc, #288]	; (80048f8 <UART_SetConfig+0x2fc>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e4:	d012      	beq.n	800480c <UART_SetConfig+0x210>
 80047e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ea:	d802      	bhi.n	80047f2 <UART_SetConfig+0x1f6>
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d007      	beq.n	8004800 <UART_SetConfig+0x204>
 80047f0:	e012      	b.n	8004818 <UART_SetConfig+0x21c>
 80047f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f6:	d006      	beq.n	8004806 <UART_SetConfig+0x20a>
 80047f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047fc:	d009      	beq.n	8004812 <UART_SetConfig+0x216>
 80047fe:	e00b      	b.n	8004818 <UART_SetConfig+0x21c>
 8004800:	2300      	movs	r3, #0
 8004802:	77fb      	strb	r3, [r7, #31]
 8004804:	e0a1      	b.n	800494a <UART_SetConfig+0x34e>
 8004806:	2302      	movs	r3, #2
 8004808:	77fb      	strb	r3, [r7, #31]
 800480a:	e09e      	b.n	800494a <UART_SetConfig+0x34e>
 800480c:	2304      	movs	r3, #4
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e09b      	b.n	800494a <UART_SetConfig+0x34e>
 8004812:	2308      	movs	r3, #8
 8004814:	77fb      	strb	r3, [r7, #31]
 8004816:	e098      	b.n	800494a <UART_SetConfig+0x34e>
 8004818:	2310      	movs	r3, #16
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	bf00      	nop
 800481e:	e094      	b.n	800494a <UART_SetConfig+0x34e>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a39      	ldr	r2, [pc, #228]	; (800490c <UART_SetConfig+0x310>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d124      	bne.n	8004874 <UART_SetConfig+0x278>
 800482a:	4b33      	ldr	r3, [pc, #204]	; (80048f8 <UART_SetConfig+0x2fc>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004838:	d012      	beq.n	8004860 <UART_SetConfig+0x264>
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483e:	d802      	bhi.n	8004846 <UART_SetConfig+0x24a>
 8004840:	2b00      	cmp	r3, #0
 8004842:	d007      	beq.n	8004854 <UART_SetConfig+0x258>
 8004844:	e012      	b.n	800486c <UART_SetConfig+0x270>
 8004846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800484a:	d006      	beq.n	800485a <UART_SetConfig+0x25e>
 800484c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004850:	d009      	beq.n	8004866 <UART_SetConfig+0x26a>
 8004852:	e00b      	b.n	800486c <UART_SetConfig+0x270>
 8004854:	2301      	movs	r3, #1
 8004856:	77fb      	strb	r3, [r7, #31]
 8004858:	e077      	b.n	800494a <UART_SetConfig+0x34e>
 800485a:	2302      	movs	r3, #2
 800485c:	77fb      	strb	r3, [r7, #31]
 800485e:	e074      	b.n	800494a <UART_SetConfig+0x34e>
 8004860:	2304      	movs	r3, #4
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e071      	b.n	800494a <UART_SetConfig+0x34e>
 8004866:	2308      	movs	r3, #8
 8004868:	77fb      	strb	r3, [r7, #31]
 800486a:	e06e      	b.n	800494a <UART_SetConfig+0x34e>
 800486c:	2310      	movs	r3, #16
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	bf00      	nop
 8004872:	e06a      	b.n	800494a <UART_SetConfig+0x34e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a25      	ldr	r2, [pc, #148]	; (8004910 <UART_SetConfig+0x314>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d124      	bne.n	80048c8 <UART_SetConfig+0x2cc>
 800487e:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <UART_SetConfig+0x2fc>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004884:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488c:	d012      	beq.n	80048b4 <UART_SetConfig+0x2b8>
 800488e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004892:	d802      	bhi.n	800489a <UART_SetConfig+0x29e>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d007      	beq.n	80048a8 <UART_SetConfig+0x2ac>
 8004898:	e012      	b.n	80048c0 <UART_SetConfig+0x2c4>
 800489a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489e:	d006      	beq.n	80048ae <UART_SetConfig+0x2b2>
 80048a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048a4:	d009      	beq.n	80048ba <UART_SetConfig+0x2be>
 80048a6:	e00b      	b.n	80048c0 <UART_SetConfig+0x2c4>
 80048a8:	2300      	movs	r3, #0
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e04d      	b.n	800494a <UART_SetConfig+0x34e>
 80048ae:	2302      	movs	r3, #2
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e04a      	b.n	800494a <UART_SetConfig+0x34e>
 80048b4:	2304      	movs	r3, #4
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e047      	b.n	800494a <UART_SetConfig+0x34e>
 80048ba:	2308      	movs	r3, #8
 80048bc:	77fb      	strb	r3, [r7, #31]
 80048be:	e044      	b.n	800494a <UART_SetConfig+0x34e>
 80048c0:	2310      	movs	r3, #16
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	bf00      	nop
 80048c6:	e040      	b.n	800494a <UART_SetConfig+0x34e>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a11      	ldr	r2, [pc, #68]	; (8004914 <UART_SetConfig+0x318>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d139      	bne.n	8004946 <UART_SetConfig+0x34a>
 80048d2:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <UART_SetConfig+0x2fc>)
 80048d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e0:	d027      	beq.n	8004932 <UART_SetConfig+0x336>
 80048e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e6:	d817      	bhi.n	8004918 <UART_SetConfig+0x31c>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01c      	beq.n	8004926 <UART_SetConfig+0x32a>
 80048ec:	e027      	b.n	800493e <UART_SetConfig+0x342>
 80048ee:	bf00      	nop
 80048f0:	efff69f3 	.word	0xefff69f3
 80048f4:	40011000 	.word	0x40011000
 80048f8:	40023800 	.word	0x40023800
 80048fc:	40004400 	.word	0x40004400
 8004900:	40004800 	.word	0x40004800
 8004904:	40004c00 	.word	0x40004c00
 8004908:	40005000 	.word	0x40005000
 800490c:	40011400 	.word	0x40011400
 8004910:	40007800 	.word	0x40007800
 8004914:	40007c00 	.word	0x40007c00
 8004918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800491c:	d006      	beq.n	800492c <UART_SetConfig+0x330>
 800491e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004922:	d009      	beq.n	8004938 <UART_SetConfig+0x33c>
 8004924:	e00b      	b.n	800493e <UART_SetConfig+0x342>
 8004926:	2300      	movs	r3, #0
 8004928:	77fb      	strb	r3, [r7, #31]
 800492a:	e00e      	b.n	800494a <UART_SetConfig+0x34e>
 800492c:	2302      	movs	r3, #2
 800492e:	77fb      	strb	r3, [r7, #31]
 8004930:	e00b      	b.n	800494a <UART_SetConfig+0x34e>
 8004932:	2304      	movs	r3, #4
 8004934:	77fb      	strb	r3, [r7, #31]
 8004936:	e008      	b.n	800494a <UART_SetConfig+0x34e>
 8004938:	2308      	movs	r3, #8
 800493a:	77fb      	strb	r3, [r7, #31]
 800493c:	e005      	b.n	800494a <UART_SetConfig+0x34e>
 800493e:	2310      	movs	r3, #16
 8004940:	77fb      	strb	r3, [r7, #31]
 8004942:	bf00      	nop
 8004944:	e001      	b.n	800494a <UART_SetConfig+0x34e>
 8004946:	2310      	movs	r3, #16
 8004948:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004952:	d17c      	bne.n	8004a4e <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8004954:	7ffb      	ldrb	r3, [r7, #31]
 8004956:	2b08      	cmp	r3, #8
 8004958:	d859      	bhi.n	8004a0e <UART_SetConfig+0x412>
 800495a:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <UART_SetConfig+0x364>)
 800495c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004960:	08004985 	.word	0x08004985
 8004964:	080049a3 	.word	0x080049a3
 8004968:	080049c1 	.word	0x080049c1
 800496c:	08004a0f 	.word	0x08004a0f
 8004970:	080049d9 	.word	0x080049d9
 8004974:	08004a0f 	.word	0x08004a0f
 8004978:	08004a0f 	.word	0x08004a0f
 800497c:	08004a0f 	.word	0x08004a0f
 8004980:	080049f7 	.word	0x080049f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004984:	f7fd fed4 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8004988:	4603      	mov	r3, r0
 800498a:	005a      	lsls	r2, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	085b      	lsrs	r3, r3, #1
 8004992:	441a      	add	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	b29b      	uxth	r3, r3
 800499e:	61bb      	str	r3, [r7, #24]
        break;
 80049a0:	e038      	b.n	8004a14 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80049a2:	f7fd fed9 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 80049a6:	4603      	mov	r3, r0
 80049a8:	005a      	lsls	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	085b      	lsrs	r3, r3, #1
 80049b0:	441a      	add	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	61bb      	str	r3, [r7, #24]
        break;
 80049be:	e029      	b.n	8004a14 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	085a      	lsrs	r2, r3, #1
 80049c6:	4b5d      	ldr	r3, [pc, #372]	; (8004b3c <UART_SetConfig+0x540>)
 80049c8:	4413      	add	r3, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6852      	ldr	r2, [r2, #4]
 80049ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	61bb      	str	r3, [r7, #24]
        break;
 80049d6:	e01d      	b.n	8004a14 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80049d8:	f7fd fdec 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 80049dc:	4603      	mov	r3, r0
 80049de:	005a      	lsls	r2, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	085b      	lsrs	r3, r3, #1
 80049e6:	441a      	add	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	61bb      	str	r3, [r7, #24]
        break;
 80049f4:	e00e      	b.n	8004a14 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	61bb      	str	r3, [r7, #24]
        break;
 8004a0c:	e002      	b.n	8004a14 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	75fb      	strb	r3, [r7, #23]
        break;
 8004a12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2b0f      	cmp	r3, #15
 8004a18:	d916      	bls.n	8004a48 <UART_SetConfig+0x44c>
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a20:	d212      	bcs.n	8004a48 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f023 030f 	bic.w	r3, r3, #15
 8004a2a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	085b      	lsrs	r3, r3, #1
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	89fb      	ldrh	r3, [r7, #14]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	89fa      	ldrh	r2, [r7, #14]
 8004a44:	60da      	str	r2, [r3, #12]
 8004a46:	e06e      	b.n	8004b26 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	75fb      	strb	r3, [r7, #23]
 8004a4c:	e06b      	b.n	8004b26 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004a4e:	7ffb      	ldrb	r3, [r7, #31]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d857      	bhi.n	8004b04 <UART_SetConfig+0x508>
 8004a54:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <UART_SetConfig+0x460>)
 8004a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5a:	bf00      	nop
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a9d 	.word	0x08004a9d
 8004a64:	08004ab9 	.word	0x08004ab9
 8004a68:	08004b05 	.word	0x08004b05
 8004a6c:	08004ad1 	.word	0x08004ad1
 8004a70:	08004b05 	.word	0x08004b05
 8004a74:	08004b05 	.word	0x08004b05
 8004a78:	08004b05 	.word	0x08004b05
 8004a7c:	08004aed 	.word	0x08004aed
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004a80:	f7fd fe56 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8004a84:	4602      	mov	r2, r0
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	085b      	lsrs	r3, r3, #1
 8004a8c:	441a      	add	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	61bb      	str	r3, [r7, #24]
        break;
 8004a9a:	e036      	b.n	8004b0a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004a9c:	f7fd fe5c 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	441a      	add	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	61bb      	str	r3, [r7, #24]
        break;
 8004ab6:	e028      	b.n	8004b0a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	085a      	lsrs	r2, r3, #1
 8004abe:	4b20      	ldr	r3, [pc, #128]	; (8004b40 <UART_SetConfig+0x544>)
 8004ac0:	4413      	add	r3, r2
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6852      	ldr	r2, [r2, #4]
 8004ac6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	61bb      	str	r3, [r7, #24]
        break;
 8004ace:	e01c      	b.n	8004b0a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004ad0:	f7fd fd70 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	085b      	lsrs	r3, r3, #1
 8004adc:	441a      	add	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	61bb      	str	r3, [r7, #24]
        break;
 8004aea:	e00e      	b.n	8004b0a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	085b      	lsrs	r3, r3, #1
 8004af2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	61bb      	str	r3, [r7, #24]
        break;
 8004b02:	e002      	b.n	8004b0a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	75fb      	strb	r3, [r7, #23]
        break;
 8004b08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b0f      	cmp	r3, #15
 8004b0e:	d908      	bls.n	8004b22 <UART_SetConfig+0x526>
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b16:	d204      	bcs.n	8004b22 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	60da      	str	r2, [r3, #12]
 8004b20:	e001      	b.n	8004b26 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3720      	adds	r7, #32
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	01e84800 	.word	0x01e84800
 8004b40:	00f42400 	.word	0x00f42400

08004b44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01a      	beq.n	8004c5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c42:	d10a      	bne.n	8004c5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	605a      	str	r2, [r3, #4]
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004c96:	f7fc fde7 	bl	8001868 <HAL_GetTick>
 8004c9a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d10e      	bne.n	8004cc8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004caa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f814 	bl	8004ce6 <UART_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e00a      	b.n	8004cde <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	603b      	str	r3, [r7, #0]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf6:	e02a      	b.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d026      	beq.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d00:	f7fc fdb2 	bl	8001868 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d302      	bcc.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d11b      	bne.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d24:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0201 	bic.w	r2, r2, #1
 8004d34:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e00f      	b.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69da      	ldr	r2, [r3, #28]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4013      	ands	r3, r2
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	bf0c      	ite	eq
 8004d5e:	2301      	moveq	r3, #1
 8004d60:	2300      	movne	r3, #0
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	461a      	mov	r2, r3
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d0c5      	beq.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004d78:	b084      	sub	sp, #16
 8004d7a:	b480      	push	{r7}
 8004d7c:	b085      	sub	sp, #20
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	f107 001c 	add.w	r0, r7, #28
 8004d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004d8e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004d90:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004d92:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004d96:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004d9a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004d9e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004da2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <SDMMC_Init+0x54>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	b004      	add	sp, #16
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	ffff8100 	.word	0xffff8100

08004dd0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2203      	movs	r2, #3
 8004e18:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0303 	and.w	r3, r3, #3
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e62:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004e68:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004e6e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <SDMMC_SendCommand+0x50>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	fffff000 	.word	0xfffff000

08004e98 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	b2db      	uxtb	r3, r3
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b085      	sub	sp, #20
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3314      	adds	r3, #20
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	4413      	add	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
}  
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f02:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004f08:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004f0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0

}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004f46:	2310      	movs	r3, #16
 8004f48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f4a:	2340      	movs	r3, #64	; 0x40
 8004f4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f56:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f58:	f107 0308 	add.w	r3, r7, #8
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff ff70 	bl	8004e44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f68:	2110      	movs	r1, #16
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fa1c 	bl	80053a8 <SDMMC_GetCmdResp1>
 8004f70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f72:	69fb      	ldr	r3, [r7, #28]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3720      	adds	r7, #32
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004f8e:	2311      	movs	r3, #17
 8004f90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f92:	2340      	movs	r3, #64	; 0x40
 8004f94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f9e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004fa0:	f107 0308 	add.w	r3, r7, #8
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7ff ff4c 	bl	8004e44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb0:	2111      	movs	r1, #17
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f9f8 	bl	80053a8 <SDMMC_GetCmdResp1>
 8004fb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fba:	69fb      	ldr	r3, [r7, #28]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3720      	adds	r7, #32
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004fd6:	2312      	movs	r3, #18
 8004fd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004fda:	2340      	movs	r3, #64	; 0x40
 8004fdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fe6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004fe8:	f107 0308 	add.w	r3, r7, #8
 8004fec:	4619      	mov	r1, r3
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff ff28 	bl	8004e44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff8:	2112      	movs	r1, #18
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f9d4 	bl	80053a8 <SDMMC_GetCmdResp1>
 8005000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005002:	69fb      	ldr	r3, [r7, #28]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3720      	adds	r7, #32
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800501e:	2318      	movs	r3, #24
 8005020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005022:	2340      	movs	r3, #64	; 0x40
 8005024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800502a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800502e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005030:	f107 0308 	add.w	r3, r7, #8
 8005034:	4619      	mov	r1, r3
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff ff04 	bl	8004e44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800503c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005040:	2118      	movs	r1, #24
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f9b0 	bl	80053a8 <SDMMC_GetCmdResp1>
 8005048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800504a:	69fb      	ldr	r3, [r7, #28]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3720      	adds	r7, #32
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800505e:	2300      	movs	r3, #0
 8005060:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005066:	2319      	movs	r3, #25
 8005068:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800506a:	2340      	movs	r3, #64	; 0x40
 800506c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800506e:	2300      	movs	r3, #0
 8005070:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005076:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005078:	f107 0308 	add.w	r3, r7, #8
 800507c:	4619      	mov	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff fee0 	bl	8004e44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005084:	f241 3288 	movw	r2, #5000	; 0x1388
 8005088:	2119      	movs	r1, #25
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f98c 	bl	80053a8 <SDMMC_GetCmdResp1>
 8005090:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005092:	69fb      	ldr	r3, [r7, #28]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3720      	adds	r7, #32
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80050ac:	230c      	movs	r3, #12
 80050ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050b0:	2340      	movs	r3, #64	; 0x40
 80050b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80050b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050bc:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050be:	f107 0308 	add.w	r3, r7, #8
 80050c2:	4619      	mov	r1, r3
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff febd 	bl	8004e44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 80050ca:	4a05      	ldr	r2, [pc, #20]	; (80050e0 <SDMMC_CmdStopTransfer+0x44>)
 80050cc:	210c      	movs	r1, #12
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f96a 	bl	80053a8 <SDMMC_GetCmdResp1>
 80050d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050d6:	69fb      	ldr	r3, [r7, #28]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3720      	adds	r7, #32
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	05f5e100 	.word	0x05f5e100

080050e4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	; 0x28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80050f0:	2300      	movs	r3, #0
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80050f8:	2307      	movs	r3, #7
 80050fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050fc:	2340      	movs	r3, #64	; 0x40
 80050fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005100:	2300      	movs	r3, #0
 8005102:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005108:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800510a:	f107 0310 	add.w	r3, r7, #16
 800510e:	4619      	mov	r1, r3
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f7ff fe97 	bl	8004e44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005116:	f241 3288 	movw	r2, #5000	; 0x1388
 800511a:	2107      	movs	r1, #7
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f943 	bl	80053a8 <SDMMC_GetCmdResp1>
 8005122:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005126:	4618      	mov	r0, r3
 8005128:	3728      	adds	r7, #40	; 0x28
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b088      	sub	sp, #32
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005136:	2300      	movs	r3, #0
 8005138:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005142:	2300      	movs	r3, #0
 8005144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800514a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800514e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005150:	f107 0308 	add.w	r3, r7, #8
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff fe74 	bl	8004e44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f8f9 	bl	8005354 <SDMMC_GetCmdError>
 8005162:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005164:	69fb      	ldr	r3, [r7, #28]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b088      	sub	sp, #32
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005176:	2300      	movs	r3, #0
 8005178:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800517a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800517e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005180:	2308      	movs	r3, #8
 8005182:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005184:	2340      	movs	r3, #64	; 0x40
 8005186:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800518c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005190:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005192:	f107 0308 	add.w	r3, r7, #8
 8005196:	4619      	mov	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7ff fe53 	bl	8004e44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 faca 	bl	8005738 <SDMMC_GetCmdResp7>
 80051a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051a6:	69fb      	ldr	r3, [r7, #28]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3720      	adds	r7, #32
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80051ba:	2300      	movs	r3, #0
 80051bc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80051c2:	2337      	movs	r3, #55	; 0x37
 80051c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051c6:	2340      	movs	r3, #64	; 0x40
 80051c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051d2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051d4:	f107 0308 	add.w	r3, r7, #8
 80051d8:	4619      	mov	r1, r3
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff fe32 	bl	8004e44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80051e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e4:	2137      	movs	r1, #55	; 0x37
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f8de 	bl	80053a8 <SDMMC_GetCmdResp1>
 80051ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051ee:	69fb      	ldr	r3, [r7, #28]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3720      	adds	r7, #32
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005202:	2300      	movs	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	4b0d      	ldr	r3, [pc, #52]	; (8005240 <SDMMC_CmdAppOperCommand+0x48>)
 800520a:	4313      	orrs	r3, r2
 800520c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800520e:	2329      	movs	r3, #41	; 0x29
 8005210:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005212:	2340      	movs	r3, #64	; 0x40
 8005214:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005216:	2300      	movs	r3, #0
 8005218:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800521a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800521e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005220:	f107 0308 	add.w	r3, r7, #8
 8005224:	4619      	mov	r1, r3
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7ff fe0c 	bl	8004e44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f9e1 	bl	80055f4 <SDMMC_GetCmdResp3>
 8005232:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005234:	69fb      	ldr	r3, [r7, #28]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	80100000 	.word	0x80100000

08005244 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800524c:	2300      	movs	r3, #0
 800524e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005254:	2302      	movs	r3, #2
 8005256:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005258:	23c0      	movs	r3, #192	; 0xc0
 800525a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005264:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005266:	f107 0308 	add.w	r3, r7, #8
 800526a:	4619      	mov	r1, r3
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7ff fde9 	bl	8004e44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f97e 	bl	8005574 <SDMMC_GetCmdResp2>
 8005278:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800527a:	69fb      	ldr	r3, [r7, #28]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3720      	adds	r7, #32
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800528e:	2300      	movs	r3, #0
 8005290:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005296:	2309      	movs	r3, #9
 8005298:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800529a:	23c0      	movs	r3, #192	; 0xc0
 800529c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052a6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80052a8:	f107 0308 	add.w	r3, r7, #8
 80052ac:	4619      	mov	r1, r3
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff fdc8 	bl	8004e44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f95d 	bl	8005574 <SDMMC_GetCmdResp2>
 80052ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052bc:	69fb      	ldr	r3, [r7, #28]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b088      	sub	sp, #32
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80052d0:	2300      	movs	r3, #0
 80052d2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80052d8:	2303      	movs	r3, #3
 80052da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80052dc:	2340      	movs	r3, #64	; 0x40
 80052de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052e8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80052ea:	f107 0308 	add.w	r3, r7, #8
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff fda7 	bl	8004e44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	2103      	movs	r1, #3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f9ae 	bl	800565c <SDMMC_GetCmdResp6>
 8005300:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005302:	69fb      	ldr	r3, [r7, #28]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005316:	2300      	movs	r3, #0
 8005318:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800531e:	230d      	movs	r3, #13
 8005320:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005322:	2340      	movs	r3, #64	; 0x40
 8005324:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005326:	2300      	movs	r3, #0
 8005328:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800532a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800532e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005330:	f107 0308 	add.w	r3, r7, #8
 8005334:	4619      	mov	r1, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff fd84 	bl	8004e44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800533c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005340:	210d      	movs	r1, #13
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f830 	bl	80053a8 <SDMMC_GetCmdResp1>
 8005348:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800534a:	69fb      	ldr	r3, [r7, #28]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3720      	adds	r7, #32
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005354:	b490      	push	{r4, r7}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800535c:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <SDMMC_GetCmdError+0x4c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a10      	ldr	r2, [pc, #64]	; (80053a4 <SDMMC_GetCmdError+0x50>)
 8005362:	fba2 2303 	umull	r2, r3, r2, r3
 8005366:	0a5b      	lsrs	r3, r3, #9
 8005368:	f241 3288 	movw	r2, #5000	; 0x1388
 800536c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005370:	4623      	mov	r3, r4
 8005372:	1e5c      	subs	r4, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005378:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800537c:	e00a      	b.n	8005394 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0f2      	beq.n	8005370 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005390:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bc90      	pop	{r4, r7}
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000000 	.word	0x20000000
 80053a4:	10624dd3 	.word	0x10624dd3

080053a8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80053a8:	b590      	push	{r4, r7, lr}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	460b      	mov	r3, r1
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80053b6:	4b6c      	ldr	r3, [pc, #432]	; (8005568 <SDMMC_GetCmdResp1+0x1c0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a6c      	ldr	r2, [pc, #432]	; (800556c <SDMMC_GetCmdResp1+0x1c4>)
 80053bc:	fba2 2303 	umull	r2, r3, r2, r3
 80053c0:	0a5b      	lsrs	r3, r3, #9
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80053c8:	4623      	mov	r3, r4
 80053ca:	1e5c      	subs	r4, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d102      	bne.n	80053d6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053d4:	e0c3      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053da:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0f2      	beq.n	80053c8 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e6:	f003 0304 	and.w	r3, r3, #4
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d004      	beq.n	80053f8 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2204      	movs	r2, #4
 80053f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80053f4:	2304      	movs	r3, #4
 80053f6:	e0b2      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d004      	beq.n	800540e <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800540a:	2301      	movs	r3, #1
 800540c:	e0a7      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f7ff fd42 	bl	8004e98 <SDMMC_GetCommandResponse>
 8005414:	4603      	mov	r3, r0
 8005416:	461a      	mov	r2, r3
 8005418:	7afb      	ldrb	r3, [r7, #11]
 800541a:	4293      	cmp	r3, r2
 800541c:	d001      	beq.n	8005422 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800541e:	2301      	movs	r3, #1
 8005420:	e09d      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005428:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800542a:	2100      	movs	r1, #0
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f7ff fd40 	bl	8004eb2 <SDMMC_GetResponse>
 8005432:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	4b4e      	ldr	r3, [pc, #312]	; (8005570 <SDMMC_GetCmdResp1+0x1c8>)
 8005438:	4013      	ands	r3, r2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800543e:	2300      	movs	r3, #0
 8005440:	e08d      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2b00      	cmp	r3, #0
 8005446:	da02      	bge.n	800544e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800544c:	e087      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005458:	2340      	movs	r3, #64	; 0x40
 800545a:	e080      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005466:	2380      	movs	r3, #128	; 0x80
 8005468:	e079      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005478:	e071      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005488:	e069      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005498:	e061      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80054a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054a8:	e059      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80054b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054b8:	e051      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80054c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054c8:	e049      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80054d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054d8:	e041      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 80054e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e8:	e039      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80054f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054f8:	e031      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005504:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005508:	e029      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005514:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005518:	e021      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005524:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005528:	e019      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005534:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005538:	e011      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005544:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005548:	e009      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005554:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005558:	e001      	b.n	800555e <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800555a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800555e:	4618      	mov	r0, r3
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	bd90      	pop	{r4, r7, pc}
 8005566:	bf00      	nop
 8005568:	20000000 	.word	0x20000000
 800556c:	10624dd3 	.word	0x10624dd3
 8005570:	fdffe008 	.word	0xfdffe008

08005574 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005574:	b490      	push	{r4, r7}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800557c:	4b1b      	ldr	r3, [pc, #108]	; (80055ec <SDMMC_GetCmdResp2+0x78>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1b      	ldr	r2, [pc, #108]	; (80055f0 <SDMMC_GetCmdResp2+0x7c>)
 8005582:	fba2 2303 	umull	r2, r3, r2, r3
 8005586:	0a5b      	lsrs	r3, r3, #9
 8005588:	f241 3288 	movw	r2, #5000	; 0x1388
 800558c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005590:	4623      	mov	r3, r4
 8005592:	1e5c      	subs	r4, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d102      	bne.n	800559e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005598:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800559c:	e020      	b.n	80055e0 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f2      	beq.n	8005590 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d004      	beq.n	80055c0 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2204      	movs	r2, #4
 80055ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055bc:	2304      	movs	r3, #4
 80055be:	e00f      	b.n	80055e0 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d004      	beq.n	80055d6 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e004      	b.n	80055e0 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc90      	pop	{r4, r7}
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	20000000 	.word	0x20000000
 80055f0:	10624dd3 	.word	0x10624dd3

080055f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80055f4:	b490      	push	{r4, r7}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80055fc:	4b15      	ldr	r3, [pc, #84]	; (8005654 <SDMMC_GetCmdResp3+0x60>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a15      	ldr	r2, [pc, #84]	; (8005658 <SDMMC_GetCmdResp3+0x64>)
 8005602:	fba2 2303 	umull	r2, r3, r2, r3
 8005606:	0a5b      	lsrs	r3, r3, #9
 8005608:	f241 3288 	movw	r2, #5000	; 0x1388
 800560c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005610:	4623      	mov	r3, r4
 8005612:	1e5c      	subs	r4, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d102      	bne.n	800561e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005618:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800561c:	e015      	b.n	800564a <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005622:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0f2      	beq.n	8005610 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562e:	f003 0304 	and.w	r3, r3, #4
 8005632:	2b00      	cmp	r3, #0
 8005634:	d004      	beq.n	8005640 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2204      	movs	r2, #4
 800563a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800563c:	2304      	movs	r3, #4
 800563e:	e004      	b.n	800564a <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005646:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bc90      	pop	{r4, r7}
 8005652:	4770      	bx	lr
 8005654:	20000000 	.word	0x20000000
 8005658:	10624dd3 	.word	0x10624dd3

0800565c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800565c:	b590      	push	{r4, r7, lr}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	460b      	mov	r3, r1
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800566a:	4b31      	ldr	r3, [pc, #196]	; (8005730 <SDMMC_GetCmdResp6+0xd4>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a31      	ldr	r2, [pc, #196]	; (8005734 <SDMMC_GetCmdResp6+0xd8>)
 8005670:	fba2 2303 	umull	r2, r3, r2, r3
 8005674:	0a5b      	lsrs	r3, r3, #9
 8005676:	f241 3288 	movw	r2, #5000	; 0x1388
 800567a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800567e:	4623      	mov	r3, r4
 8005680:	1e5c      	subs	r4, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d102      	bne.n	800568c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005686:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800568a:	e04c      	b.n	8005726 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005690:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0f2      	beq.n	800567e <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2204      	movs	r2, #4
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056aa:	2304      	movs	r3, #4
 80056ac:	e03b      	b.n	8005726 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d004      	beq.n	80056c4 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e030      	b.n	8005726 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f7ff fbe7 	bl	8004e98 <SDMMC_GetCommandResponse>
 80056ca:	4603      	mov	r3, r0
 80056cc:	461a      	mov	r2, r3
 80056ce:	7afb      	ldrb	r3, [r7, #11]
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d001      	beq.n	80056d8 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e026      	b.n	8005726 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80056de:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80056e0:	2100      	movs	r1, #0
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f7ff fbe5 	bl	8004eb2 <SDMMC_GetResponse>
 80056e8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d106      	bne.n	8005702 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	0c1b      	lsrs	r3, r3, #16
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80056fe:	2300      	movs	r3, #0
 8005700:	e011      	b.n	8005726 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800570c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005710:	e009      	b.n	8005726 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800571c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005720:	e001      	b.n	8005726 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005726:	4618      	mov	r0, r3
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	bd90      	pop	{r4, r7, pc}
 800572e:	bf00      	nop
 8005730:	20000000 	.word	0x20000000
 8005734:	10624dd3 	.word	0x10624dd3

08005738 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005738:	b490      	push	{r4, r7}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005740:	4b18      	ldr	r3, [pc, #96]	; (80057a4 <SDMMC_GetCmdResp7+0x6c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a18      	ldr	r2, [pc, #96]	; (80057a8 <SDMMC_GetCmdResp7+0x70>)
 8005746:	fba2 2303 	umull	r2, r3, r2, r3
 800574a:	0a5b      	lsrs	r3, r3, #9
 800574c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005750:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005754:	4623      	mov	r3, r4
 8005756:	1e5c      	subs	r4, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800575c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005760:	e01a      	b.n	8005798 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005766:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0f2      	beq.n	8005754 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b00      	cmp	r3, #0
 8005778:	d004      	beq.n	8005784 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2240      	movs	r2, #64	; 0x40
 800577e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005780:	2304      	movs	r3, #4
 8005782:	e009      	b.n	8005798 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2240      	movs	r2, #64	; 0x40
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005796:	2300      	movs	r3, #0
  
}
 8005798:	4618      	mov	r0, r3
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bc90      	pop	{r4, r7}
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	20000000 	.word	0x20000000
 80057a8:	10624dd3 	.word	0x10624dd3

080057ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80057b0:	4904      	ldr	r1, [pc, #16]	; (80057c4 <MX_FATFS_Init+0x18>)
 80057b2:	4805      	ldr	r0, [pc, #20]	; (80057c8 <MX_FATFS_Init+0x1c>)
 80057b4:	f002 fa18 	bl	8007be8 <FATFS_LinkDriver>
 80057b8:	4603      	mov	r3, r0
 80057ba:	461a      	mov	r2, r3
 80057bc:	4b03      	ldr	r3, [pc, #12]	; (80057cc <MX_FATFS_Init+0x20>)
 80057be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80057c0:	bf00      	nop
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	2000032c 	.word	0x2000032c
 80057c8:	08008fec 	.word	0x08008fec
 80057cc:	20000328 	.word	0x20000328

080057d0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80057da:	f000 f86b 	bl	80058b4 <BSP_SD_IsDetected>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d001      	beq.n	80057e8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80057e4:	2302      	movs	r3, #2
 80057e6:	e005      	b.n	80057f4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80057e8:	4804      	ldr	r0, [pc, #16]	; (80057fc <BSP_SD_Init+0x2c>)
 80057ea:	f7fd fc21 	bl	8003030 <HAL_SD_Init>
 80057ee:	4603      	mov	r3, r0
 80057f0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80057f2:	79fb      	ldrb	r3, [r7, #7]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	200001e0 	.word	0x200001e0

08005800 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af02      	add	r7, sp, #8
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	68f9      	ldr	r1, [r7, #12]
 800581c:	4806      	ldr	r0, [pc, #24]	; (8005838 <BSP_SD_ReadBlocks+0x38>)
 800581e:	f7fd fc96 	bl	800314e <HAL_SD_ReadBlocks>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800582c:	7dfb      	ldrb	r3, [r7, #23]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	200001e0 	.word	0x200001e0

0800583c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af02      	add	r7, sp, #8
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	68f9      	ldr	r1, [r7, #12]
 8005858:	4806      	ldr	r0, [pc, #24]	; (8005874 <BSP_SD_WriteBlocks+0x38>)
 800585a:	f7fd fe0e 	bl	800347a <HAL_SD_WriteBlocks>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8005868:	7dfb      	ldrb	r3, [r7, #23]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	200001e0 	.word	0x200001e0

08005878 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800587c:	4805      	ldr	r0, [pc, #20]	; (8005894 <BSP_SD_GetCardState+0x1c>)
 800587e:	f7fe f9b7 	bl	8003bf0 <HAL_SD_GetCardState>
 8005882:	4603      	mov	r3, r0
 8005884:	2b04      	cmp	r3, #4
 8005886:	bf14      	ite	ne
 8005888:	2301      	movne	r3, #1
 800588a:	2300      	moveq	r3, #0
 800588c:	b2db      	uxtb	r3, r3
}
 800588e:	4618      	mov	r0, r3
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	200001e0 	.word	0x200001e0

08005898 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80058a0:	6879      	ldr	r1, [r7, #4]
 80058a2:	4803      	ldr	r0, [pc, #12]	; (80058b0 <BSP_SD_GetCardInfo+0x18>)
 80058a4:	f7fe f978 	bl	8003b98 <HAL_SD_GetCardInfo>
}
 80058a8:	bf00      	nop
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	200001e0 	.word	0x200001e0

080058b4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80058ba:	2301      	movs	r3, #1
 80058bc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80058be:	f000 f80b 	bl	80058d8 <BSP_PlatformIsDetected>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80058c8:	2300      	movs	r3, #0
 80058ca:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	b2db      	uxtb	r3, r3
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80058de:	2301      	movs	r3, #1
 80058e0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80058e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058e6:	4806      	ldr	r0, [pc, #24]	; (8005900 <BSP_PlatformIsDetected+0x28>)
 80058e8:	f7fc fa78 	bl	8001ddc <HAL_GPIO_ReadPin>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80058f2:	2300      	movs	r3, #0
 80058f4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 80058f6:	79fb      	ldrb	r3, [r7, #7]
}  
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40022000 	.word	0x40022000

08005904 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	4603      	mov	r3, r0
 800590c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800590e:	4b0b      	ldr	r3, [pc, #44]	; (800593c <SD_CheckStatus+0x38>)
 8005910:	2201      	movs	r2, #1
 8005912:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005914:	f7ff ffb0 	bl	8005878 <BSP_SD_GetCardState>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d107      	bne.n	800592e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800591e:	4b07      	ldr	r3, [pc, #28]	; (800593c <SD_CheckStatus+0x38>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	f023 0301 	bic.w	r3, r3, #1
 8005928:	b2da      	uxtb	r2, r3
 800592a:	4b04      	ldr	r3, [pc, #16]	; (800593c <SD_CheckStatus+0x38>)
 800592c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800592e:	4b03      	ldr	r3, [pc, #12]	; (800593c <SD_CheckStatus+0x38>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	b2db      	uxtb	r3, r3
}
 8005934:	4618      	mov	r0, r3
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20000005 	.word	0x20000005

08005940 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	4603      	mov	r3, r0
 8005948:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800594a:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <SD_initialize+0x38>)
 800594c:	2201      	movs	r2, #1
 800594e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005950:	f7ff ff3e 	bl	80057d0 <BSP_SD_Init>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d107      	bne.n	800596a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	4618      	mov	r0, r3
 800595e:	f7ff ffd1 	bl	8005904 <SD_CheckStatus>
 8005962:	4603      	mov	r3, r0
 8005964:	461a      	mov	r2, r3
 8005966:	4b04      	ldr	r3, [pc, #16]	; (8005978 <SD_initialize+0x38>)
 8005968:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800596a:	4b03      	ldr	r3, [pc, #12]	; (8005978 <SD_initialize+0x38>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	b2db      	uxtb	r3, r3
}
 8005970:	4618      	mov	r0, r3
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	20000005 	.word	0x20000005

0800597c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	4603      	mov	r3, r0
 8005984:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff ffbb 	bl	8005904 <SD_CheckStatus>
 800598e:	4603      	mov	r3, r0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	607a      	str	r2, [r7, #4]
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	4603      	mov	r3, r0
 80059a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80059ac:	f04f 33ff 	mov.w	r3, #4294967295
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	68b8      	ldr	r0, [r7, #8]
 80059b6:	f7ff ff23 	bl	8005800 <BSP_SD_ReadBlocks>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d107      	bne.n	80059d0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80059c0:	bf00      	nop
 80059c2:	f7ff ff59 	bl	8005878 <BSP_SD_GetCardState>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1fa      	bne.n	80059c2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b086      	sub	sp, #24
 80059de:	af00      	add	r7, sp, #0
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]
 80059e6:	4603      	mov	r3, r0
 80059e8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80059ee:	f04f 33ff 	mov.w	r3, #4294967295
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	68b8      	ldr	r0, [r7, #8]
 80059f8:	f7ff ff20 	bl	800583c <BSP_SD_WriteBlocks>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d107      	bne.n	8005a12 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005a02:	bf00      	nop
 8005a04:	f7ff ff38 	bl	8005878 <BSP_SD_GetCardState>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1fa      	bne.n	8005a04 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08c      	sub	sp, #48	; 0x30
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	4603      	mov	r3, r0
 8005a24:	603a      	str	r2, [r7, #0]
 8005a26:	71fb      	strb	r3, [r7, #7]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005a32:	4b25      	ldr	r3, [pc, #148]	; (8005ac8 <SD_ioctl+0xac>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <SD_ioctl+0x28>
 8005a40:	2303      	movs	r3, #3
 8005a42:	e03c      	b.n	8005abe <SD_ioctl+0xa2>

  switch (cmd)
 8005a44:	79bb      	ldrb	r3, [r7, #6]
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d834      	bhi.n	8005ab4 <SD_ioctl+0x98>
 8005a4a:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <SD_ioctl+0x34>)
 8005a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a50:	08005a61 	.word	0x08005a61
 8005a54:	08005a69 	.word	0x08005a69
 8005a58:	08005a81 	.word	0x08005a81
 8005a5c:	08005a9b 	.word	0x08005a9b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005a66:	e028      	b.n	8005aba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005a68:	f107 030c 	add.w	r3, r7, #12
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff ff13 	bl	8005898 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005a7e:	e01c      	b.n	8005aba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005a80:	f107 030c 	add.w	r3, r7, #12
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff ff07 	bl	8005898 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005a98:	e00f      	b.n	8005aba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005a9a:	f107 030c 	add.w	r3, r7, #12
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff fefa 	bl	8005898 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa6:	0a5a      	lsrs	r2, r3, #9
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005ab2:	e002      	b.n	8005aba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005aba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3730      	adds	r7, #48	; 0x30
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000005 	.word	0x20000005

08005acc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	4a08      	ldr	r2, [pc, #32]	; (8005afc <disk_status+0x30>)
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	79fa      	ldrb	r2, [r7, #7]
 8005ae4:	4905      	ldr	r1, [pc, #20]	; (8005afc <disk_status+0x30>)
 8005ae6:	440a      	add	r2, r1
 8005ae8:	7a12      	ldrb	r2, [r2, #8]
 8005aea:	4610      	mov	r0, r2
 8005aec:	4798      	blx	r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	200001cc 	.word	0x200001cc

08005b00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	4603      	mov	r3, r0
 8005b08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	4a0d      	ldr	r2, [pc, #52]	; (8005b48 <disk_initialize+0x48>)
 8005b12:	5cd3      	ldrb	r3, [r2, r3]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d111      	bne.n	8005b3c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	4a0b      	ldr	r2, [pc, #44]	; (8005b48 <disk_initialize+0x48>)
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	4a09      	ldr	r2, [pc, #36]	; (8005b48 <disk_initialize+0x48>)
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	79fa      	ldrb	r2, [r7, #7]
 8005b2e:	4906      	ldr	r1, [pc, #24]	; (8005b48 <disk_initialize+0x48>)
 8005b30:	440a      	add	r2, r1
 8005b32:	7a12      	ldrb	r2, [r2, #8]
 8005b34:	4610      	mov	r0, r2
 8005b36:	4798      	blx	r3
 8005b38:	4603      	mov	r3, r0
 8005b3a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	200001cc 	.word	0x200001cc

08005b4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005b4c:	b590      	push	{r4, r7, lr}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	607a      	str	r2, [r7, #4]
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	4603      	mov	r3, r0
 8005b5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	4a0a      	ldr	r2, [pc, #40]	; (8005b88 <disk_read+0x3c>)
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	689c      	ldr	r4, [r3, #8]
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	4a07      	ldr	r2, [pc, #28]	; (8005b88 <disk_read+0x3c>)
 8005b6c:	4413      	add	r3, r2
 8005b6e:	7a18      	ldrb	r0, [r3, #8]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	47a0      	blx	r4
 8005b78:	4603      	mov	r3, r0
 8005b7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd90      	pop	{r4, r7, pc}
 8005b86:	bf00      	nop
 8005b88:	200001cc 	.word	0x200001cc

08005b8c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005b8c:	b590      	push	{r4, r7, lr}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
 8005b96:	603b      	str	r3, [r7, #0]
 8005b98:	4603      	mov	r3, r0
 8005b9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
 8005b9e:	4a0a      	ldr	r2, [pc, #40]	; (8005bc8 <disk_write+0x3c>)
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	68dc      	ldr	r4, [r3, #12]
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	4a07      	ldr	r2, [pc, #28]	; (8005bc8 <disk_write+0x3c>)
 8005bac:	4413      	add	r3, r2
 8005bae:	7a18      	ldrb	r0, [r3, #8]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	68b9      	ldr	r1, [r7, #8]
 8005bb6:	47a0      	blx	r4
 8005bb8:	4603      	mov	r3, r0
 8005bba:	75fb      	strb	r3, [r7, #23]
  return res;
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd90      	pop	{r4, r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	200001cc 	.word	0x200001cc

08005bcc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005bdc:	89fb      	ldrh	r3, [r7, #14]
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	b21a      	sxth	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	b21b      	sxth	r3, r3
 8005be8:	4313      	orrs	r3, r2
 8005bea:	b21b      	sxth	r3, r3
 8005bec:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005bee:	89fb      	ldrh	r3, [r7, #14]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3303      	adds	r3, #3
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	021b      	lsls	r3, r3, #8
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	3202      	adds	r2, #2
 8005c14:	7812      	ldrb	r2, [r2, #0]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	021b      	lsls	r3, r3, #8
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	3201      	adds	r2, #1
 8005c22:	7812      	ldrb	r2, [r2, #0]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	7812      	ldrb	r2, [r2, #0]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]
	return rv;
 8005c34:	68fb      	ldr	r3, [r7, #12]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	887a      	ldrh	r2, [r7, #2]
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]
 8005c5a:	887b      	ldrh	r3, [r7, #2]
 8005c5c:	0a1b      	lsrs	r3, r3, #8
 8005c5e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	607a      	str	r2, [r7, #4]
 8005c66:	887a      	ldrh	r2, [r7, #2]
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	701a      	strb	r2, [r3, #0]
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	701a      	strb	r2, [r3, #0]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	0a1b      	lsrs	r3, r3, #8
 8005c92:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	607a      	str	r2, [r7, #4]
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	0a1b      	lsrs	r3, r3, #8
 8005ca4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	0a1b      	lsrs	r3, r3, #8
 8005cb6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	607a      	str	r2, [r7, #4]
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	701a      	strb	r2, [r3, #0]
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	617a      	str	r2, [r7, #20]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	607b      	str	r3, [r7, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f3      	bne.n	8005ce0 <mem_set+0x10>
}
 8005cf8:	bf00      	nop
 8005cfa:	371c      	adds	r7, #28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005d04:	b480      	push	{r7}
 8005d06:	b089      	sub	sp, #36	; 0x24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	61fb      	str	r3, [r7, #28]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	61fa      	str	r2, [r7, #28]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	4619      	mov	r1, r3
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	61ba      	str	r2, [r7, #24]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	1acb      	subs	r3, r1, r3
 8005d30:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	607b      	str	r3, [r7, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <mem_cmp+0x40>
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d0eb      	beq.n	8005d1c <mem_cmp+0x18>

	return r;
 8005d44:	697b      	ldr	r3, [r7, #20]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3724      	adds	r7, #36	; 0x24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005d5c:	e002      	b.n	8005d64 <chk_chr+0x12>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3301      	adds	r3, #1
 8005d62:	607b      	str	r3, [r7, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d005      	beq.n	8005d78 <chk_chr+0x26>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d1f2      	bne.n	8005d5e <chk_chr+0xc>
	return *str;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	e01f      	b.n	8005dd8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005d98:	4a41      	ldr	r2, [pc, #260]	; (8005ea0 <inc_lock+0x118>)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	011b      	lsls	r3, r3, #4
 8005d9e:	4413      	add	r3, r2
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d113      	bne.n	8005dd2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005daa:	4a3d      	ldr	r2, [pc, #244]	; (8005ea0 <inc_lock+0x118>)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	4413      	add	r3, r2
 8005db2:	3304      	adds	r3, #4
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d109      	bne.n	8005dd2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005dbe:	4a38      	ldr	r2, [pc, #224]	; (8005ea0 <inc_lock+0x118>)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	4413      	add	r3, r2
 8005dc6:	3308      	adds	r3, #8
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d006      	beq.n	8005de0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d9dc      	bls.n	8005d98 <inc_lock+0x10>
 8005dde:	e000      	b.n	8005de2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005de0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d132      	bne.n	8005e4e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005de8:	2300      	movs	r3, #0
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	e002      	b.n	8005df4 <inc_lock+0x6c>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3301      	adds	r3, #1
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d806      	bhi.n	8005e08 <inc_lock+0x80>
 8005dfa:	4a29      	ldr	r2, [pc, #164]	; (8005ea0 <inc_lock+0x118>)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	4413      	add	r3, r2
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1f2      	bne.n	8005dee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d101      	bne.n	8005e12 <inc_lock+0x8a>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	e040      	b.n	8005e94 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4922      	ldr	r1, [pc, #136]	; (8005ea0 <inc_lock+0x118>)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	440b      	add	r3, r1
 8005e1e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	491e      	ldr	r1, [pc, #120]	; (8005ea0 <inc_lock+0x118>)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	440b      	add	r3, r1
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695a      	ldr	r2, [r3, #20]
 8005e34:	491a      	ldr	r1, [pc, #104]	; (8005ea0 <inc_lock+0x118>)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	011b      	lsls	r3, r3, #4
 8005e3a:	440b      	add	r3, r1
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005e40:	4a17      	ldr	r2, [pc, #92]	; (8005ea0 <inc_lock+0x118>)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	4413      	add	r3, r2
 8005e48:	330c      	adds	r3, #12
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d009      	beq.n	8005e68 <inc_lock+0xe0>
 8005e54:	4a12      	ldr	r2, [pc, #72]	; (8005ea0 <inc_lock+0x118>)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	4413      	add	r3, r2
 8005e5c:	330c      	adds	r3, #12
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <inc_lock+0xe0>
 8005e64:	2300      	movs	r3, #0
 8005e66:	e015      	b.n	8005e94 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d108      	bne.n	8005e80 <inc_lock+0xf8>
 8005e6e:	4a0c      	ldr	r2, [pc, #48]	; (8005ea0 <inc_lock+0x118>)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	4413      	add	r3, r2
 8005e76:	330c      	adds	r3, #12
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	e001      	b.n	8005e84 <inc_lock+0xfc>
 8005e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e84:	4906      	ldr	r1, [pc, #24]	; (8005ea0 <inc_lock+0x118>)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	440b      	add	r3, r1
 8005e8c:	330c      	adds	r3, #12
 8005e8e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3301      	adds	r3, #1
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	200001ac 	.word	0x200001ac

08005ea4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	607b      	str	r3, [r7, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d825      	bhi.n	8005f04 <dec_lock+0x60>
		n = Files[i].ctr;
 8005eb8:	4a17      	ldr	r2, [pc, #92]	; (8005f18 <dec_lock+0x74>)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	4413      	add	r3, r2
 8005ec0:	330c      	adds	r3, #12
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005ec6:	89fb      	ldrh	r3, [r7, #14]
 8005ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ecc:	d101      	bne.n	8005ed2 <dec_lock+0x2e>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005ed2:	89fb      	ldrh	r3, [r7, #14]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <dec_lock+0x3a>
 8005ed8:	89fb      	ldrh	r3, [r7, #14]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005ede:	4a0e      	ldr	r2, [pc, #56]	; (8005f18 <dec_lock+0x74>)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	4413      	add	r3, r2
 8005ee6:	330c      	adds	r3, #12
 8005ee8:	89fa      	ldrh	r2, [r7, #14]
 8005eea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005eec:	89fb      	ldrh	r3, [r7, #14]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d105      	bne.n	8005efe <dec_lock+0x5a>
 8005ef2:	4a09      	ldr	r2, [pc, #36]	; (8005f18 <dec_lock+0x74>)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	011b      	lsls	r3, r3, #4
 8005ef8:	4413      	add	r3, r2
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	737b      	strb	r3, [r7, #13]
 8005f02:	e001      	b.n	8005f08 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005f04:	2302      	movs	r3, #2
 8005f06:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005f08:	7b7b      	ldrb	r3, [r7, #13]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	200001ac 	.word	0x200001ac

08005f1c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005f24:	2300      	movs	r3, #0
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	e010      	b.n	8005f4c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005f2a:	4a0d      	ldr	r2, [pc, #52]	; (8005f60 <clear_lock+0x44>)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	4413      	add	r3, r2
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d105      	bne.n	8005f46 <clear_lock+0x2a>
 8005f3a:	4a09      	ldr	r2, [pc, #36]	; (8005f60 <clear_lock+0x44>)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	4413      	add	r3, r2
 8005f42:	2200      	movs	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d9eb      	bls.n	8005f2a <clear_lock+0xe>
	}
}
 8005f52:	bf00      	nop
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	200001ac 	.word	0x200001ac

08005f64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	78db      	ldrb	r3, [r3, #3]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d034      	beq.n	8005fe2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	7858      	ldrb	r0, [r3, #1]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005f88:	2301      	movs	r3, #1
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	f7ff fdfe 	bl	8005b8c <disk_write>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d002      	beq.n	8005f9c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	73fb      	strb	r3, [r7, #15]
 8005f9a:	e022      	b.n	8005fe2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	1ad2      	subs	r2, r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d217      	bcs.n	8005fe2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	789b      	ldrb	r3, [r3, #2]
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	e010      	b.n	8005fdc <sync_window+0x78>
					wsect += fs->fsize;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	7858      	ldrb	r0, [r3, #1]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005fce:	2301      	movs	r3, #1
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	f7ff fddb 	bl	8005b8c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d8eb      	bhi.n	8005fba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3718      	adds	r7, #24
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d01b      	beq.n	800603c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff ffad 	bl	8005f64 <sync_window>
 800600a:	4603      	mov	r3, r0
 800600c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d113      	bne.n	800603c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	7858      	ldrb	r0, [r3, #1]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800601e:	2301      	movs	r3, #1
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	f7ff fd93 	bl	8005b4c <disk_read>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d004      	beq.n	8006036 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800602c:	f04f 33ff 	mov.w	r3, #4294967295
 8006030:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006032:	2301      	movs	r3, #1
 8006034:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800603c:	7bfb      	ldrb	r3, [r7, #15]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	3b02      	subs	r3, #2
 8006054:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	3b02      	subs	r3, #2
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d301      	bcc.n	8006066 <clust2sect+0x20>
 8006062:	2300      	movs	r3, #0
 8006064:	e008      	b.n	8006078 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	895b      	ldrh	r3, [r3, #10]
 800606a:	461a      	mov	r2, r3
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	fb03 f202 	mul.w	r2, r3, r2
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	4413      	add	r3, r2
}
 8006078:	4618      	mov	r0, r3
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d904      	bls.n	80060a4 <get_fat+0x20>
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d302      	bcc.n	80060aa <get_fat+0x26>
		val = 1;	/* Internal error */
 80060a4:	2301      	movs	r3, #1
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	e08c      	b.n	80061c4 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80060aa:	f04f 33ff 	mov.w	r3, #4294967295
 80060ae:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d045      	beq.n	8006144 <get_fat+0xc0>
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d05d      	beq.n	8006178 <get_fat+0xf4>
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d177      	bne.n	80061b0 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	085b      	lsrs	r3, r3, #1
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4413      	add	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	0a5b      	lsrs	r3, r3, #9
 80060d6:	4413      	add	r3, r2
 80060d8:	4619      	mov	r1, r3
 80060da:	6938      	ldr	r0, [r7, #16]
 80060dc:	f7ff ff86 	bl	8005fec <move_window>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d167      	bne.n	80061b6 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	60fa      	str	r2, [r7, #12]
 80060ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4413      	add	r3, r2
 80060f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	0a5b      	lsrs	r3, r3, #9
 8006102:	4413      	add	r3, r2
 8006104:	4619      	mov	r1, r3
 8006106:	6938      	ldr	r0, [r7, #16]
 8006108:	f7ff ff70 	bl	8005fec <move_window>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d153      	bne.n	80061ba <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	4413      	add	r3, r2
 800611c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	461a      	mov	r2, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	4313      	orrs	r3, r2
 8006128:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <get_fat+0xb6>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	091b      	lsrs	r3, r3, #4
 8006138:	e002      	b.n	8006140 <get_fat+0xbc>
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006140:	617b      	str	r3, [r7, #20]
			break;
 8006142:	e03f      	b.n	80061c4 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	0a1b      	lsrs	r3, r3, #8
 800614c:	4413      	add	r3, r2
 800614e:	4619      	mov	r1, r3
 8006150:	6938      	ldr	r0, [r7, #16]
 8006152:	f7ff ff4b 	bl	8005fec <move_window>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d130      	bne.n	80061be <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800616a:	4413      	add	r3, r2
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff fd2d 	bl	8005bcc <ld_word>
 8006172:	4603      	mov	r3, r0
 8006174:	617b      	str	r3, [r7, #20]
			break;
 8006176:	e025      	b.n	80061c4 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	09db      	lsrs	r3, r3, #7
 8006180:	4413      	add	r3, r2
 8006182:	4619      	mov	r1, r3
 8006184:	6938      	ldr	r0, [r7, #16]
 8006186:	f7ff ff31 	bl	8005fec <move_window>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d118      	bne.n	80061c2 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800619e:	4413      	add	r3, r2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7ff fd2b 	bl	8005bfc <ld_dword>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80061ac:	617b      	str	r3, [r7, #20]
			break;
 80061ae:	e009      	b.n	80061c4 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80061b0:	2301      	movs	r3, #1
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	e006      	b.n	80061c4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061b6:	bf00      	nop
 80061b8:	e004      	b.n	80061c4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061ba:	bf00      	nop
 80061bc:	e002      	b.n	80061c4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80061be:	bf00      	nop
 80061c0:	e000      	b.n	80061c4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80061c2:	bf00      	nop
		}
	}

	return val;
 80061c4:	697b      	ldr	r3, [r7, #20]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80061ce:	b590      	push	{r4, r7, lr}
 80061d0:	b089      	sub	sp, #36	; 0x24
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	60f8      	str	r0, [r7, #12]
 80061d6:	60b9      	str	r1, [r7, #8]
 80061d8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80061da:	2302      	movs	r3, #2
 80061dc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	f240 80d6 	bls.w	8006392 <put_fat+0x1c4>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	f080 80d0 	bcs.w	8006392 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d073      	beq.n	80062e2 <put_fat+0x114>
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	f000 8091 	beq.w	8006322 <put_fat+0x154>
 8006200:	2b01      	cmp	r3, #1
 8006202:	f040 80c6 	bne.w	8006392 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	61bb      	str	r3, [r7, #24]
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	085b      	lsrs	r3, r3, #1
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	4413      	add	r3, r2
 8006212:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	0a5b      	lsrs	r3, r3, #9
 800621c:	4413      	add	r3, r2
 800621e:	4619      	mov	r1, r3
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7ff fee3 	bl	8005fec <move_window>
 8006226:	4603      	mov	r3, r0
 8006228:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800622a:	7ffb      	ldrb	r3, [r7, #31]
 800622c:	2b00      	cmp	r3, #0
 800622e:	f040 80a9 	bne.w	8006384 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	1c59      	adds	r1, r3, #1
 800623c:	61b9      	str	r1, [r7, #24]
 800623e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006242:	4413      	add	r3, r2
 8006244:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00d      	beq.n	800626c <put_fat+0x9e>
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	b25b      	sxtb	r3, r3
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	b25a      	sxtb	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	011b      	lsls	r3, r3, #4
 8006262:	b25b      	sxtb	r3, r3
 8006264:	4313      	orrs	r3, r2
 8006266:	b25b      	sxtb	r3, r3
 8006268:	b2db      	uxtb	r3, r3
 800626a:	e001      	b.n	8006270 <put_fat+0xa2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	b2db      	uxtb	r3, r3
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2201      	movs	r2, #1
 8006278:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	0a5b      	lsrs	r3, r3, #9
 8006282:	4413      	add	r3, r2
 8006284:	4619      	mov	r1, r3
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f7ff feb0 	bl	8005fec <move_window>
 800628c:	4603      	mov	r3, r0
 800628e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006290:	7ffb      	ldrb	r3, [r7, #31]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d178      	bne.n	8006388 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a2:	4413      	add	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <put_fat+0xea>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	091b      	lsrs	r3, r3, #4
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	e00e      	b.n	80062d6 <put_fat+0x108>
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	b25b      	sxtb	r3, r3
 80062be:	f023 030f 	bic.w	r3, r3, #15
 80062c2:	b25a      	sxtb	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	0a1b      	lsrs	r3, r3, #8
 80062c8:	b25b      	sxtb	r3, r3
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	b25b      	sxtb	r3, r3
 80062d0:	4313      	orrs	r3, r2
 80062d2:	b25b      	sxtb	r3, r3
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	70da      	strb	r2, [r3, #3]
			break;
 80062e0:	e057      	b.n	8006392 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	0a1b      	lsrs	r3, r3, #8
 80062ea:	4413      	add	r3, r2
 80062ec:	4619      	mov	r1, r3
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f7ff fe7c 	bl	8005fec <move_window>
 80062f4:	4603      	mov	r3, r0
 80062f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062f8:	7ffb      	ldrb	r3, [r7, #31]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d146      	bne.n	800638c <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800630c:	4413      	add	r3, r2
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	b292      	uxth	r2, r2
 8006312:	4611      	mov	r1, r2
 8006314:	4618      	mov	r0, r3
 8006316:	f7ff fc94 	bl	8005c42 <st_word>
			fs->wflag = 1;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2201      	movs	r2, #1
 800631e:	70da      	strb	r2, [r3, #3]
			break;
 8006320:	e037      	b.n	8006392 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	09db      	lsrs	r3, r3, #7
 800632a:	4413      	add	r3, r2
 800632c:	4619      	mov	r1, r3
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f7ff fe5c 	bl	8005fec <move_window>
 8006334:	4603      	mov	r3, r0
 8006336:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006338:	7ffb      	ldrb	r3, [r7, #31]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d128      	bne.n	8006390 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006352:	4413      	add	r3, r2
 8006354:	4618      	mov	r0, r3
 8006356:	f7ff fc51 	bl	8005bfc <ld_dword>
 800635a:	4603      	mov	r3, r0
 800635c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006360:	4323      	orrs	r3, r4
 8006362:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006372:	4413      	add	r3, r2
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	4618      	mov	r0, r3
 8006378:	f7ff fc7e 	bl	8005c78 <st_dword>
			fs->wflag = 1;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2201      	movs	r2, #1
 8006380:	70da      	strb	r2, [r3, #3]
			break;
 8006382:	e006      	b.n	8006392 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006384:	bf00      	nop
 8006386:	e004      	b.n	8006392 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006388:	bf00      	nop
 800638a:	e002      	b.n	8006392 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800638c:	bf00      	nop
 800638e:	e000      	b.n	8006392 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006390:	bf00      	nop
		}
	}
	return res;
 8006392:	7ffb      	ldrb	r3, [r7, #31]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3724      	adds	r7, #36	; 0x24
 8006398:	46bd      	mov	sp, r7
 800639a:	bd90      	pop	{r4, r7, pc}

0800639c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10d      	bne.n	80063ce <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <create_chain+0x2c>
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d31b      	bcc.n	8006400 <create_chain+0x64>
 80063c8:	2301      	movs	r3, #1
 80063ca:	61bb      	str	r3, [r7, #24]
 80063cc:	e018      	b.n	8006400 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80063ce:	6839      	ldr	r1, [r7, #0]
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff fe57 	bl	8006084 <get_fat>
 80063d6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d801      	bhi.n	80063e2 <create_chain+0x46>
 80063de:	2301      	movs	r3, #1
 80063e0:	e070      	b.n	80064c4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e8:	d101      	bne.n	80063ee <create_chain+0x52>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	e06a      	b.n	80064c4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d201      	bcs.n	80063fc <create_chain+0x60>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	e063      	b.n	80064c4 <create_chain+0x128>
		scl = clst;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	3301      	adds	r3, #1
 8006408:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	69fa      	ldr	r2, [r7, #28]
 8006410:	429a      	cmp	r2, r3
 8006412:	d307      	bcc.n	8006424 <create_chain+0x88>
				ncl = 2;
 8006414:	2302      	movs	r3, #2
 8006416:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006418:	69fa      	ldr	r2, [r7, #28]
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	429a      	cmp	r2, r3
 800641e:	d901      	bls.n	8006424 <create_chain+0x88>
 8006420:	2300      	movs	r3, #0
 8006422:	e04f      	b.n	80064c4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006424:	69f9      	ldr	r1, [r7, #28]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7ff fe2c 	bl	8006084 <get_fat>
 800642c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00e      	beq.n	8006452 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d003      	beq.n	8006442 <create_chain+0xa6>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d101      	bne.n	8006446 <create_chain+0xaa>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	e03e      	b.n	80064c4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006446:	69fa      	ldr	r2, [r7, #28]
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	429a      	cmp	r2, r3
 800644c:	d1da      	bne.n	8006404 <create_chain+0x68>
 800644e:	2300      	movs	r3, #0
 8006450:	e038      	b.n	80064c4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006452:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006454:	f04f 32ff 	mov.w	r2, #4294967295
 8006458:	69f9      	ldr	r1, [r7, #28]
 800645a:	6938      	ldr	r0, [r7, #16]
 800645c:	f7ff feb7 	bl	80061ce <put_fat>
 8006460:	4603      	mov	r3, r0
 8006462:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006464:	7dfb      	ldrb	r3, [r7, #23]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d109      	bne.n	800647e <create_chain+0xe2>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d006      	beq.n	800647e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006470:	69fa      	ldr	r2, [r7, #28]
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6938      	ldr	r0, [r7, #16]
 8006476:	f7ff feaa 	bl	80061ce <put_fat>
 800647a:	4603      	mov	r3, r0
 800647c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800647e:	7dfb      	ldrb	r3, [r7, #23]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d116      	bne.n	80064b2 <create_chain+0x116>
		fs->last_clst = ncl;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	69fa      	ldr	r2, [r7, #28]
 8006488:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	695a      	ldr	r2, [r3, #20]
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	3b02      	subs	r3, #2
 8006494:	429a      	cmp	r2, r3
 8006496:	d804      	bhi.n	80064a2 <create_chain+0x106>
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	1e5a      	subs	r2, r3, #1
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	791b      	ldrb	r3, [r3, #4]
 80064a6:	f043 0301 	orr.w	r3, r3, #1
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	711a      	strb	r2, [r3, #4]
 80064b0:	e007      	b.n	80064c2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80064b2:	7dfb      	ldrb	r3, [r7, #23]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d102      	bne.n	80064be <create_chain+0x122>
 80064b8:	f04f 33ff 	mov.w	r3, #4294967295
 80064bc:	e000      	b.n	80064c0 <create_chain+0x124>
 80064be:	2301      	movs	r3, #1
 80064c0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80064c2:	69fb      	ldr	r3, [r7, #28]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3720      	adds	r7, #32
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064e2:	d204      	bcs.n	80064ee <dir_sdi+0x22>
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	f003 031f 	and.w	r3, r3, #31
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80064ee:	2302      	movs	r3, #2
 80064f0:	e063      	b.n	80065ba <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d106      	bne.n	8006512 <dir_sdi+0x46>
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b02      	cmp	r3, #2
 800650a:	d902      	bls.n	8006512 <dir_sdi+0x46>
		clst = fs->dirbase;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006510:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10c      	bne.n	8006532 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	095b      	lsrs	r3, r3, #5
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	8912      	ldrh	r2, [r2, #8]
 8006520:	4293      	cmp	r3, r2
 8006522:	d301      	bcc.n	8006528 <dir_sdi+0x5c>
 8006524:	2302      	movs	r3, #2
 8006526:	e048      	b.n	80065ba <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	61da      	str	r2, [r3, #28]
 8006530:	e029      	b.n	8006586 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	895b      	ldrh	r3, [r3, #10]
 8006536:	025b      	lsls	r3, r3, #9
 8006538:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800653a:	e019      	b.n	8006570 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6979      	ldr	r1, [r7, #20]
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff fd9f 	bl	8006084 <get_fat>
 8006546:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654e:	d101      	bne.n	8006554 <dir_sdi+0x88>
 8006550:	2301      	movs	r3, #1
 8006552:	e032      	b.n	80065ba <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d904      	bls.n	8006564 <dir_sdi+0x98>
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	429a      	cmp	r2, r3
 8006562:	d301      	bcc.n	8006568 <dir_sdi+0x9c>
 8006564:	2302      	movs	r3, #2
 8006566:	e028      	b.n	80065ba <dir_sdi+0xee>
			ofs -= csz;
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	429a      	cmp	r2, r3
 8006576:	d2e1      	bcs.n	800653c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006578:	6979      	ldr	r1, [r7, #20]
 800657a:	6938      	ldr	r0, [r7, #16]
 800657c:	f7ff fd63 	bl	8006046 <clust2sect>
 8006580:	4602      	mov	r2, r0
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <dir_sdi+0xcc>
 8006594:	2302      	movs	r3, #2
 8006596:	e010      	b.n	80065ba <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	0a5b      	lsrs	r3, r3, #9
 80065a0:	441a      	add	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b2:	441a      	add	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b086      	sub	sp, #24
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	3320      	adds	r3, #32
 80065d8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <dir_next+0x28>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065e8:	d301      	bcc.n	80065ee <dir_next+0x2c>
 80065ea:	2304      	movs	r3, #4
 80065ec:	e0aa      	b.n	8006744 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f040 8098 	bne.w	800672a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10b      	bne.n	8006624 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	095b      	lsrs	r3, r3, #5
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	8912      	ldrh	r2, [r2, #8]
 8006614:	4293      	cmp	r3, r2
 8006616:	f0c0 8088 	bcc.w	800672a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	61da      	str	r2, [r3, #28]
 8006620:	2304      	movs	r3, #4
 8006622:	e08f      	b.n	8006744 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	0a5b      	lsrs	r3, r3, #9
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	8952      	ldrh	r2, [r2, #10]
 800662c:	3a01      	subs	r2, #1
 800662e:	4013      	ands	r3, r2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d17a      	bne.n	800672a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	4619      	mov	r1, r3
 800663c:	4610      	mov	r0, r2
 800663e:	f7ff fd21 	bl	8006084 <get_fat>
 8006642:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d801      	bhi.n	800664e <dir_next+0x8c>
 800664a:	2302      	movs	r3, #2
 800664c:	e07a      	b.n	8006744 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006654:	d101      	bne.n	800665a <dir_next+0x98>
 8006656:	2301      	movs	r3, #1
 8006658:	e074      	b.n	8006744 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	429a      	cmp	r2, r3
 8006662:	d358      	bcc.n	8006716 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d104      	bne.n	8006674 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	61da      	str	r2, [r3, #28]
 8006670:	2304      	movs	r3, #4
 8006672:	e067      	b.n	8006744 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	4619      	mov	r1, r3
 800667c:	4610      	mov	r0, r2
 800667e:	f7ff fe8d 	bl	800639c <create_chain>
 8006682:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <dir_next+0xcc>
 800668a:	2307      	movs	r3, #7
 800668c:	e05a      	b.n	8006744 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <dir_next+0xd6>
 8006694:	2302      	movs	r3, #2
 8006696:	e055      	b.n	8006744 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669e:	d101      	bne.n	80066a4 <dir_next+0xe2>
 80066a0:	2301      	movs	r3, #1
 80066a2:	e04f      	b.n	8006744 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f7ff fc5d 	bl	8005f64 <sync_window>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <dir_next+0xf2>
 80066b0:	2301      	movs	r3, #1
 80066b2:	e047      	b.n	8006744 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3334      	adds	r3, #52	; 0x34
 80066b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066bc:	2100      	movs	r1, #0
 80066be:	4618      	mov	r0, r3
 80066c0:	f7ff fb06 	bl	8005cd0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80066c4:	2300      	movs	r3, #0
 80066c6:	613b      	str	r3, [r7, #16]
 80066c8:	6979      	ldr	r1, [r7, #20]
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f7ff fcbb 	bl	8006046 <clust2sect>
 80066d0:	4602      	mov	r2, r0
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	631a      	str	r2, [r3, #48]	; 0x30
 80066d6:	e012      	b.n	80066fe <dir_next+0x13c>
						fs->wflag = 1;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2201      	movs	r2, #1
 80066dc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f7ff fc40 	bl	8005f64 <sync_window>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <dir_next+0x12c>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e02a      	b.n	8006744 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	3301      	adds	r3, #1
 80066f2:	613b      	str	r3, [r7, #16]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	895b      	ldrh	r3, [r3, #10]
 8006702:	461a      	mov	r2, r3
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	4293      	cmp	r3, r2
 8006708:	d3e6      	bcc.n	80066d8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1ad2      	subs	r2, r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800671c:	6979      	ldr	r1, [r7, #20]
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f7ff fc91 	bl	8006046 <clust2sect>
 8006724:	4602      	mov	r2, r0
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800673c:	441a      	add	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	331a      	adds	r3, #26
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff fa36 	bl	8005bcc <ld_word>
 8006760:	4603      	mov	r3, r0
 8006762:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	2b03      	cmp	r3, #3
 800676a:	d109      	bne.n	8006780 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	3314      	adds	r3, #20
 8006770:	4618      	mov	r0, r3
 8006772:	f7ff fa2b 	bl	8005bcc <ld_word>
 8006776:	4603      	mov	r3, r0
 8006778:	041b      	lsls	r3, r3, #16
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	4313      	orrs	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006780:	68fb      	ldr	r3, [r7, #12]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
	...

0800678c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800678c:	b590      	push	{r4, r7, lr}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	331a      	adds	r3, #26
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fa16 	bl	8005bcc <ld_word>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <cmp_lfn+0x1e>
 80067a6:	2300      	movs	r3, #0
 80067a8:	e059      	b.n	800685e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067b2:	1e5a      	subs	r2, r3, #1
 80067b4:	4613      	mov	r3, r2
 80067b6:	005b      	lsls	r3, r3, #1
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80067c0:	2301      	movs	r3, #1
 80067c2:	81fb      	strh	r3, [r7, #14]
 80067c4:	2300      	movs	r3, #0
 80067c6:	613b      	str	r3, [r7, #16]
 80067c8:	e033      	b.n	8006832 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80067ca:	4a27      	ldr	r2, [pc, #156]	; (8006868 <cmp_lfn+0xdc>)
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	4413      	add	r3, r2
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	4413      	add	r3, r2
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff f9f7 	bl	8005bcc <ld_word>
 80067de:	4603      	mov	r3, r0
 80067e0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80067e2:	89fb      	ldrh	r3, [r7, #14]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01a      	beq.n	800681e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	2bfe      	cmp	r3, #254	; 0xfe
 80067ec:	d812      	bhi.n	8006814 <cmp_lfn+0x88>
 80067ee:	89bb      	ldrh	r3, [r7, #12]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f001 fa45 	bl	8007c80 <ff_wtoupper>
 80067f6:	4603      	mov	r3, r0
 80067f8:	461c      	mov	r4, r3
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	617a      	str	r2, [r7, #20]
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	4413      	add	r3, r2
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	4618      	mov	r0, r3
 800680a:	f001 fa39 	bl	8007c80 <ff_wtoupper>
 800680e:	4603      	mov	r3, r0
 8006810:	429c      	cmp	r4, r3
 8006812:	d001      	beq.n	8006818 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006814:	2300      	movs	r3, #0
 8006816:	e022      	b.n	800685e <cmp_lfn+0xd2>
			}
			wc = uc;
 8006818:	89bb      	ldrh	r3, [r7, #12]
 800681a:	81fb      	strh	r3, [r7, #14]
 800681c:	e006      	b.n	800682c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800681e:	89bb      	ldrh	r3, [r7, #12]
 8006820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006824:	4293      	cmp	r3, r2
 8006826:	d001      	beq.n	800682c <cmp_lfn+0xa0>
 8006828:	2300      	movs	r3, #0
 800682a:	e018      	b.n	800685e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	3301      	adds	r3, #1
 8006830:	613b      	str	r3, [r7, #16]
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	2b0c      	cmp	r3, #12
 8006836:	d9c8      	bls.n	80067ca <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00b      	beq.n	800685c <cmp_lfn+0xd0>
 8006844:	89fb      	ldrh	r3, [r7, #14]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d008      	beq.n	800685c <cmp_lfn+0xd0>
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	4413      	add	r3, r2
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <cmp_lfn+0xd0>
 8006858:	2300      	movs	r3, #0
 800685a:	e000      	b.n	800685e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800685c:	2301      	movs	r3, #1
}
 800685e:	4618      	mov	r0, r3
 8006860:	371c      	adds	r7, #28
 8006862:	46bd      	mov	sp, r7
 8006864:	bd90      	pop	{r4, r7, pc}
 8006866:	bf00      	nop
 8006868:	08009080 	.word	0x08009080

0800686c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	331a      	adds	r3, #26
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff f9a6 	bl	8005bcc <ld_word>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <pick_lfn+0x1e>
 8006886:	2300      	movs	r3, #0
 8006888:	e04d      	b.n	8006926 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006892:	1e5a      	subs	r2, r3, #1
 8006894:	4613      	mov	r3, r2
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80068a0:	2301      	movs	r3, #1
 80068a2:	81fb      	strh	r3, [r7, #14]
 80068a4:	2300      	movs	r3, #0
 80068a6:	613b      	str	r3, [r7, #16]
 80068a8:	e028      	b.n	80068fc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80068aa:	4a21      	ldr	r2, [pc, #132]	; (8006930 <pick_lfn+0xc4>)
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	4413      	add	r3, r2
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	4413      	add	r3, r2
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff f987 	bl	8005bcc <ld_word>
 80068be:	4603      	mov	r3, r0
 80068c0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80068c2:	89fb      	ldrh	r3, [r7, #14]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00f      	beq.n	80068e8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	2bfe      	cmp	r3, #254	; 0xfe
 80068cc:	d901      	bls.n	80068d2 <pick_lfn+0x66>
 80068ce:	2300      	movs	r3, #0
 80068d0:	e029      	b.n	8006926 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80068d2:	89bb      	ldrh	r3, [r7, #12]
 80068d4:	81fb      	strh	r3, [r7, #14]
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	617a      	str	r2, [r7, #20]
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	4413      	add	r3, r2
 80068e2:	89fa      	ldrh	r2, [r7, #14]
 80068e4:	801a      	strh	r2, [r3, #0]
 80068e6:	e006      	b.n	80068f6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80068e8:	89bb      	ldrh	r3, [r7, #12]
 80068ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d001      	beq.n	80068f6 <pick_lfn+0x8a>
 80068f2:	2300      	movs	r3, #0
 80068f4:	e017      	b.n	8006926 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	3301      	adds	r3, #1
 80068fa:	613b      	str	r3, [r7, #16]
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	2b0c      	cmp	r3, #12
 8006900:	d9d3      	bls.n	80068aa <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2bfe      	cmp	r3, #254	; 0xfe
 8006912:	d901      	bls.n	8006918 <pick_lfn+0xac>
 8006914:	2300      	movs	r3, #0
 8006916:	e006      	b.n	8006926 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	4413      	add	r3, r2
 8006920:	2200      	movs	r2, #0
 8006922:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8006924:	2301      	movs	r3, #1
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	08009080 	.word	0x08009080

08006934 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006940:	230b      	movs	r3, #11
 8006942:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	b2da      	uxtb	r2, r3
 8006948:	0852      	lsrs	r2, r2, #1
 800694a:	01db      	lsls	r3, r3, #7
 800694c:	4313      	orrs	r3, r2
 800694e:	b2da      	uxtb	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	1c59      	adds	r1, r3, #1
 8006954:	6079      	str	r1, [r7, #4]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	4413      	add	r3, r2
 800695a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	3b01      	subs	r3, #1
 8006960:	60bb      	str	r3, [r7, #8]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1ed      	bne.n	8006944 <sum_sfn+0x10>
	return sum;
 8006968:	7bfb      	ldrb	r3, [r7, #15]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b086      	sub	sp, #24
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006980:	2304      	movs	r3, #4
 8006982:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800698a:	23ff      	movs	r3, #255	; 0xff
 800698c:	757b      	strb	r3, [r7, #21]
 800698e:	23ff      	movs	r3, #255	; 0xff
 8006990:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8006992:	e081      	b.n	8006a98 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	4619      	mov	r1, r3
 800699a:	6938      	ldr	r0, [r7, #16]
 800699c:	f7ff fb26 	bl	8005fec <move_window>
 80069a0:	4603      	mov	r3, r0
 80069a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80069a4:	7dfb      	ldrb	r3, [r7, #23]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d17c      	bne.n	8006aa4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80069b2:	7dbb      	ldrb	r3, [r7, #22]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d102      	bne.n	80069be <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80069b8:	2304      	movs	r3, #4
 80069ba:	75fb      	strb	r3, [r7, #23]
 80069bc:	e077      	b.n	8006aae <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	330b      	adds	r3, #11
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069ca:	73fb      	strb	r3, [r7, #15]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	7bfa      	ldrb	r2, [r7, #15]
 80069d0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80069d2:	7dbb      	ldrb	r3, [r7, #22]
 80069d4:	2be5      	cmp	r3, #229	; 0xe5
 80069d6:	d00e      	beq.n	80069f6 <dir_read+0x80>
 80069d8:	7dbb      	ldrb	r3, [r7, #22]
 80069da:	2b2e      	cmp	r3, #46	; 0x2e
 80069dc:	d00b      	beq.n	80069f6 <dir_read+0x80>
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	f023 0320 	bic.w	r3, r3, #32
 80069e4:	2b08      	cmp	r3, #8
 80069e6:	bf0c      	ite	eq
 80069e8:	2301      	moveq	r3, #1
 80069ea:	2300      	movne	r3, #0
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	461a      	mov	r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d002      	beq.n	80069fc <dir_read+0x86>
				ord = 0xFF;
 80069f6:	23ff      	movs	r3, #255	; 0xff
 80069f8:	757b      	strb	r3, [r7, #21]
 80069fa:	e044      	b.n	8006a86 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
 80069fe:	2b0f      	cmp	r3, #15
 8006a00:	d12f      	bne.n	8006a62 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8006a02:	7dbb      	ldrb	r3, [r7, #22]
 8006a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00d      	beq.n	8006a28 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	7b5b      	ldrb	r3, [r3, #13]
 8006a12:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8006a14:	7dbb      	ldrb	r3, [r7, #22]
 8006a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a1a:	75bb      	strb	r3, [r7, #22]
 8006a1c:	7dbb      	ldrb	r3, [r7, #22]
 8006a1e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	695a      	ldr	r2, [r3, #20]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006a28:	7dba      	ldrb	r2, [r7, #22]
 8006a2a:	7d7b      	ldrb	r3, [r7, #21]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d115      	bne.n	8006a5c <dir_read+0xe6>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	330d      	adds	r3, #13
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	7d3a      	ldrb	r2, [r7, #20]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d10e      	bne.n	8006a5c <dir_read+0xe6>
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	4619      	mov	r1, r3
 8006a48:	4610      	mov	r0, r2
 8006a4a:	f7ff ff0f 	bl	800686c <pick_lfn>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <dir_read+0xe6>
 8006a54:	7d7b      	ldrb	r3, [r7, #21]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	e000      	b.n	8006a5e <dir_read+0xe8>
 8006a5c:	23ff      	movs	r3, #255	; 0xff
 8006a5e:	757b      	strb	r3, [r7, #21]
 8006a60:	e011      	b.n	8006a86 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8006a62:	7d7b      	ldrb	r3, [r7, #21]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d109      	bne.n	8006a7c <dir_read+0x106>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff ff61 	bl	8006934 <sum_sfn>
 8006a72:	4603      	mov	r3, r0
 8006a74:	461a      	mov	r2, r3
 8006a76:	7d3b      	ldrb	r3, [r7, #20]
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d015      	beq.n	8006aa8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a82:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8006a84:	e010      	b.n	8006aa8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006a86:	2100      	movs	r1, #0
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff fd9a 	bl	80065c2 <dir_next>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006a92:	7dfb      	ldrb	r3, [r7, #23]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d109      	bne.n	8006aac <dir_read+0x136>
	while (dp->sect) {
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f47f af79 	bne.w	8006994 <dir_read+0x1e>
 8006aa2:	e004      	b.n	8006aae <dir_read+0x138>
		if (res != FR_OK) break;
 8006aa4:	bf00      	nop
 8006aa6:	e002      	b.n	8006aae <dir_read+0x138>
					break;
 8006aa8:	bf00      	nop
 8006aaa:	e000      	b.n	8006aae <dir_read+0x138>
		if (res != FR_OK) break;
 8006aac:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d002      	beq.n	8006aba <dir_read+0x144>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	61da      	str	r2, [r3, #28]
	return res;
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff fcf9 	bl	80064cc <dir_sdi>
 8006ada:	4603      	mov	r3, r0
 8006adc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <dir_find+0x24>
 8006ae4:	7dfb      	ldrb	r3, [r7, #23]
 8006ae6:	e0a9      	b.n	8006c3c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006ae8:	23ff      	movs	r3, #255	; 0xff
 8006aea:	753b      	strb	r3, [r7, #20]
 8006aec:	7d3b      	ldrb	r3, [r7, #20]
 8006aee:	757b      	strb	r3, [r7, #21]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f04f 32ff 	mov.w	r2, #4294967295
 8006af6:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	4619      	mov	r1, r3
 8006afe:	6938      	ldr	r0, [r7, #16]
 8006b00:	f7ff fa74 	bl	8005fec <move_window>
 8006b04:	4603      	mov	r3, r0
 8006b06:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006b08:	7dfb      	ldrb	r3, [r7, #23]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f040 8090 	bne.w	8006c30 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006b18:	7dbb      	ldrb	r3, [r7, #22]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d102      	bne.n	8006b24 <dir_find+0x60>
 8006b1e:	2304      	movs	r3, #4
 8006b20:	75fb      	strb	r3, [r7, #23]
 8006b22:	e08a      	b.n	8006c3a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	330b      	adds	r3, #11
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b30:	73fb      	strb	r3, [r7, #15]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	7bfa      	ldrb	r2, [r7, #15]
 8006b36:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006b38:	7dbb      	ldrb	r3, [r7, #22]
 8006b3a:	2be5      	cmp	r3, #229	; 0xe5
 8006b3c:	d007      	beq.n	8006b4e <dir_find+0x8a>
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d009      	beq.n	8006b5c <dir_find+0x98>
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
 8006b4a:	2b0f      	cmp	r3, #15
 8006b4c:	d006      	beq.n	8006b5c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006b4e:	23ff      	movs	r3, #255	; 0xff
 8006b50:	757b      	strb	r3, [r7, #21]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f04f 32ff 	mov.w	r2, #4294967295
 8006b58:	631a      	str	r2, [r3, #48]	; 0x30
 8006b5a:	e05e      	b.n	8006c1a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	2b0f      	cmp	r3, #15
 8006b60:	d136      	bne.n	8006bd0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d154      	bne.n	8006c1a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006b70:	7dbb      	ldrb	r3, [r7, #22]
 8006b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00d      	beq.n	8006b96 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	7b5b      	ldrb	r3, [r3, #13]
 8006b80:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006b82:	7dbb      	ldrb	r3, [r7, #22]
 8006b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b88:	75bb      	strb	r3, [r7, #22]
 8006b8a:	7dbb      	ldrb	r3, [r7, #22]
 8006b8c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695a      	ldr	r2, [r3, #20]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006b96:	7dba      	ldrb	r2, [r7, #22]
 8006b98:	7d7b      	ldrb	r3, [r7, #21]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d115      	bne.n	8006bca <dir_find+0x106>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	330d      	adds	r3, #13
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	7d3a      	ldrb	r2, [r7, #20]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d10e      	bne.n	8006bca <dir_find+0x106>
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	f7ff fde8 	bl	800678c <cmp_lfn>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <dir_find+0x106>
 8006bc2:	7d7b      	ldrb	r3, [r7, #21]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	e000      	b.n	8006bcc <dir_find+0x108>
 8006bca:	23ff      	movs	r3, #255	; 0xff
 8006bcc:	757b      	strb	r3, [r7, #21]
 8006bce:	e024      	b.n	8006c1a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006bd0:	7d7b      	ldrb	r3, [r7, #21]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d109      	bne.n	8006bea <dir_find+0x126>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7ff feaa 	bl	8006934 <sum_sfn>
 8006be0:	4603      	mov	r3, r0
 8006be2:	461a      	mov	r2, r3
 8006be4:	7d3b      	ldrb	r3, [r7, #20]
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d024      	beq.n	8006c34 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <dir_find+0x14a>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a18      	ldr	r0, [r3, #32]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	3324      	adds	r3, #36	; 0x24
 8006c00:	220b      	movs	r2, #11
 8006c02:	4619      	mov	r1, r3
 8006c04:	f7ff f87e 	bl	8005d04 <mem_cmp>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d014      	beq.n	8006c38 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006c0e:	23ff      	movs	r3, #255	; 0xff
 8006c10:	757b      	strb	r3, [r7, #21]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f04f 32ff 	mov.w	r2, #4294967295
 8006c18:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff fcd0 	bl	80065c2 <dir_next>
 8006c22:	4603      	mov	r3, r0
 8006c24:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006c26:	7dfb      	ldrb	r3, [r7, #23]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f43f af65 	beq.w	8006af8 <dir_find+0x34>
 8006c2e:	e004      	b.n	8006c3a <dir_find+0x176>
		if (res != FR_OK) break;
 8006c30:	bf00      	nop
 8006c32:	e002      	b.n	8006c3a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006c34:	bf00      	nop
 8006c36:	e000      	b.n	8006c3a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006c38:	bf00      	nop

	return res;
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	2200      	movs	r2, #0
 8006c58:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 80c9 	beq.w	8006df6 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6c:	d032      	beq.n	8006cd4 <get_fileinfo+0x90>
			i = j = 0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	61bb      	str	r3, [r7, #24]
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006c76:	e01b      	b.n	8006cb0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8006c78:	89fb      	ldrh	r3, [r7, #14]
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 ffc3 	bl	8007c08 <ff_convert>
 8006c82:	4603      	mov	r3, r0
 8006c84:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8006c86:	89fb      	ldrh	r3, [r7, #14]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d102      	bne.n	8006c92 <get_fileinfo+0x4e>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	e01a      	b.n	8006cc8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	2bfe      	cmp	r3, #254	; 0xfe
 8006c96:	d902      	bls.n	8006c9e <get_fileinfo+0x5a>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	e014      	b.n	8006cc8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	61fa      	str	r2, [r7, #28]
 8006ca4:	89fa      	ldrh	r2, [r7, #14]
 8006ca6:	b2d1      	uxtb	r1, r2
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	4413      	add	r3, r2
 8006cac:	460a      	mov	r2, r1
 8006cae:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	1c59      	adds	r1, r3, #1
 8006cb8:	61b9      	str	r1, [r7, #24]
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	4413      	add	r3, r2
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	81fb      	strh	r3, [r7, #14]
 8006cc2:	89fb      	ldrh	r3, [r7, #14]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1d7      	bne.n	8006c78 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	4413      	add	r3, r2
 8006cce:	3316      	adds	r3, #22
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	61bb      	str	r3, [r7, #24]
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	3316      	adds	r3, #22
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8006ce8:	e04c      	b.n	8006d84 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1a      	ldr	r2, [r3, #32]
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	1c59      	adds	r1, r3, #1
 8006cf2:	61f9      	str	r1, [r7, #28]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006cfa:	7dfb      	ldrb	r3, [r7, #23]
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	d100      	bne.n	8006d02 <get_fileinfo+0xbe>
 8006d00:	e040      	b.n	8006d84 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006d02:	7dfb      	ldrb	r3, [r7, #23]
 8006d04:	2b05      	cmp	r3, #5
 8006d06:	d101      	bne.n	8006d0c <get_fileinfo+0xc8>
 8006d08:	23e5      	movs	r3, #229	; 0xe5
 8006d0a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	2b09      	cmp	r3, #9
 8006d10:	d10f      	bne.n	8006d32 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8006d12:	89bb      	ldrh	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d105      	bne.n	8006d24 <get_fileinfo+0xe0>
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	3316      	adds	r3, #22
 8006d20:	222e      	movs	r2, #46	; 0x2e
 8006d22:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	1c5a      	adds	r2, r3, #1
 8006d28:	61ba      	str	r2, [r7, #24]
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	222e      	movs	r2, #46	; 0x2e
 8006d30:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	4413      	add	r3, r2
 8006d38:	3309      	adds	r3, #9
 8006d3a:	7dfa      	ldrb	r2, [r7, #23]
 8006d3c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8006d3e:	89bb      	ldrh	r3, [r7, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d11c      	bne.n	8006d7e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8006d44:	7dfb      	ldrb	r3, [r7, #23]
 8006d46:	2b40      	cmp	r3, #64	; 0x40
 8006d48:	d913      	bls.n	8006d72 <get_fileinfo+0x12e>
 8006d4a:	7dfb      	ldrb	r3, [r7, #23]
 8006d4c:	2b5a      	cmp	r3, #90	; 0x5a
 8006d4e:	d810      	bhi.n	8006d72 <get_fileinfo+0x12e>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	330c      	adds	r3, #12
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d901      	bls.n	8006d64 <get_fileinfo+0x120>
 8006d60:	2310      	movs	r3, #16
 8006d62:	e000      	b.n	8006d66 <get_fileinfo+0x122>
 8006d64:	2308      	movs	r3, #8
 8006d66:	4013      	ands	r3, r2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8006d6c:	7dfb      	ldrb	r3, [r7, #23]
 8006d6e:	3320      	adds	r3, #32
 8006d70:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	4413      	add	r3, r2
 8006d78:	3316      	adds	r3, #22
 8006d7a:	7dfa      	ldrb	r2, [r7, #23]
 8006d7c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	3301      	adds	r3, #1
 8006d82:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	2b0a      	cmp	r3, #10
 8006d88:	d9af      	bls.n	8006cea <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8006d8a:	89bb      	ldrh	r3, [r7, #12]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10d      	bne.n	8006dac <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8006d90:	683a      	ldr	r2, [r7, #0]
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	4413      	add	r3, r2
 8006d96:	3316      	adds	r3, #22
 8006d98:	2200      	movs	r2, #0
 8006d9a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	330c      	adds	r3, #12
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <get_fileinfo+0x168>
 8006da8:	2300      	movs	r3, #0
 8006daa:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	4413      	add	r3, r2
 8006db2:	3309      	adds	r3, #9
 8006db4:	2200      	movs	r2, #0
 8006db6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	7ada      	ldrb	r2, [r3, #11]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	331c      	adds	r3, #28
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fe ff17 	bl	8005bfc <ld_dword>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	3316      	adds	r3, #22
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fe ff0e 	bl	8005bfc <ld_dword>
 8006de0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	80da      	strh	r2, [r3, #6]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	0c1b      	lsrs	r3, r3, #16
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	809a      	strh	r2, [r3, #4]
 8006df4:	e000      	b.n	8006df8 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006df6:	bf00      	nop
}
 8006df8:	3720      	adds	r7, #32
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08a      	sub	sp, #40	; 0x28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	617b      	str	r3, [r7, #20]
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	61ba      	str	r2, [r7, #24]
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	4413      	add	r3, r2
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e30:	2b1f      	cmp	r3, #31
 8006e32:	d940      	bls.n	8006eb6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006e34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e36:	2b2f      	cmp	r3, #47	; 0x2f
 8006e38:	d006      	beq.n	8006e48 <create_name+0x48>
 8006e3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e3c:	2b5c      	cmp	r3, #92	; 0x5c
 8006e3e:	d110      	bne.n	8006e62 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006e40:	e002      	b.n	8006e48 <create_name+0x48>
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	3301      	adds	r3, #1
 8006e46:	61bb      	str	r3, [r7, #24]
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	2b2f      	cmp	r3, #47	; 0x2f
 8006e52:	d0f6      	beq.n	8006e42 <create_name+0x42>
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	4413      	add	r3, r2
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b5c      	cmp	r3, #92	; 0x5c
 8006e5e:	d0f0      	beq.n	8006e42 <create_name+0x42>
			break;
 8006e60:	e02a      	b.n	8006eb8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	2bfe      	cmp	r3, #254	; 0xfe
 8006e66:	d901      	bls.n	8006e6c <create_name+0x6c>
 8006e68:	2306      	movs	r3, #6
 8006e6a:	e177      	b.n	800715c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006e6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006e72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e74:	2101      	movs	r1, #1
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fec6 	bl	8007c08 <ff_convert>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006e80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <create_name+0x8a>
 8006e86:	2306      	movs	r3, #6
 8006e88:	e168      	b.n	800715c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006e8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e8e:	d809      	bhi.n	8006ea4 <create_name+0xa4>
 8006e90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e92:	4619      	mov	r1, r3
 8006e94:	48b3      	ldr	r0, [pc, #716]	; (8007164 <create_name+0x364>)
 8006e96:	f7fe ff5c 	bl	8005d52 <chk_chr>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <create_name+0xa4>
 8006ea0:	2306      	movs	r3, #6
 8006ea2:	e15b      	b.n	800715c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	617a      	str	r2, [r7, #20]
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	4413      	add	r3, r2
 8006eb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006eb2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006eb4:	e7b4      	b.n	8006e20 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006eb6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	441a      	add	r2, r3
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006ec2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ec4:	2b1f      	cmp	r3, #31
 8006ec6:	d801      	bhi.n	8006ecc <create_name+0xcc>
 8006ec8:	2304      	movs	r3, #4
 8006eca:	e000      	b.n	8006ece <create_name+0xce>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006ed2:	e011      	b.n	8006ef8 <create_name+0xf8>
		w = lfn[di - 1];
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006eda:	4413      	add	r3, r2
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	881b      	ldrh	r3, [r3, #0]
 8006ee4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006ee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d002      	beq.n	8006ef2 <create_name+0xf2>
 8006eec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006eee:	2b2e      	cmp	r3, #46	; 0x2e
 8006ef0:	d106      	bne.n	8006f00 <create_name+0x100>
		di--;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1ea      	bne.n	8006ed4 <create_name+0xd4>
 8006efe:	e000      	b.n	8006f02 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006f00:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	4413      	add	r3, r2
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <create_name+0x118>
 8006f14:	2306      	movs	r3, #6
 8006f16:	e121      	b.n	800715c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3324      	adds	r3, #36	; 0x24
 8006f1c:	220b      	movs	r2, #11
 8006f1e:	2120      	movs	r1, #32
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fe fed5 	bl	8005cd0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006f26:	2300      	movs	r3, #0
 8006f28:	61bb      	str	r3, [r7, #24]
 8006f2a:	e002      	b.n	8006f32 <create_name+0x132>
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	61bb      	str	r3, [r7, #24]
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d0f5      	beq.n	8006f2c <create_name+0x12c>
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f4c:	d0ee      	beq.n	8006f2c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d009      	beq.n	8006f68 <create_name+0x168>
 8006f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f58:	f043 0303 	orr.w	r3, r3, #3
 8006f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006f60:	e002      	b.n	8006f68 <create_name+0x168>
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d009      	beq.n	8006f82 <create_name+0x182>
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006f74:	4413      	add	r3, r2
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	2b2e      	cmp	r3, #46	; 0x2e
 8006f80:	d1ef      	bne.n	8006f62 <create_name+0x162>

	i = b = 0; ni = 8;
 8006f82:	2300      	movs	r3, #0
 8006f84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006f88:	2300      	movs	r3, #0
 8006f8a:	623b      	str	r3, [r7, #32]
 8006f8c:	2308      	movs	r3, #8
 8006f8e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	61ba      	str	r2, [r7, #24]
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006fa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 8090 	beq.w	80070c8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006fa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d006      	beq.n	8006fbc <create_name+0x1bc>
 8006fae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fb0:	2b2e      	cmp	r3, #46	; 0x2e
 8006fb2:	d10a      	bne.n	8006fca <create_name+0x1ca>
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d006      	beq.n	8006fca <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fc0:	f043 0303 	orr.w	r3, r3, #3
 8006fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006fc8:	e07d      	b.n	80070c6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006fca:	6a3a      	ldr	r2, [r7, #32]
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d203      	bcs.n	8006fda <create_name+0x1da>
 8006fd2:	69ba      	ldr	r2, [r7, #24]
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d123      	bne.n	8007022 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	2b0b      	cmp	r3, #11
 8006fde:	d106      	bne.n	8006fee <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fe4:	f043 0303 	orr.w	r3, r3, #3
 8006fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006fec:	e06f      	b.n	80070ce <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d005      	beq.n	8007002 <create_name+0x202>
 8006ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ffa:	f043 0303 	orr.w	r3, r3, #3
 8006ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	429a      	cmp	r2, r3
 8007008:	d860      	bhi.n	80070cc <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	2308      	movs	r3, #8
 8007010:	623b      	str	r3, [r7, #32]
 8007012:	230b      	movs	r3, #11
 8007014:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007016:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007020:	e051      	b.n	80070c6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007024:	2b7f      	cmp	r3, #127	; 0x7f
 8007026:	d914      	bls.n	8007052 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007028:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800702a:	2100      	movs	r1, #0
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fdeb 	bl	8007c08 <ff_convert>
 8007032:	4603      	mov	r3, r0
 8007034:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007038:	2b00      	cmp	r3, #0
 800703a:	d004      	beq.n	8007046 <create_name+0x246>
 800703c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800703e:	3b80      	subs	r3, #128	; 0x80
 8007040:	4a49      	ldr	r2, [pc, #292]	; (8007168 <create_name+0x368>)
 8007042:	5cd3      	ldrb	r3, [r2, r3]
 8007044:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800704a:	f043 0302 	orr.w	r3, r3, #2
 800704e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007054:	2b00      	cmp	r3, #0
 8007056:	d007      	beq.n	8007068 <create_name+0x268>
 8007058:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800705a:	4619      	mov	r1, r3
 800705c:	4843      	ldr	r0, [pc, #268]	; (800716c <create_name+0x36c>)
 800705e:	f7fe fe78 	bl	8005d52 <chk_chr>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d008      	beq.n	800707a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007068:	235f      	movs	r3, #95	; 0x5f
 800706a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800706c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007070:	f043 0303 	orr.w	r3, r3, #3
 8007074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007078:	e01b      	b.n	80070b2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800707a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800707c:	2b40      	cmp	r3, #64	; 0x40
 800707e:	d909      	bls.n	8007094 <create_name+0x294>
 8007080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007082:	2b5a      	cmp	r3, #90	; 0x5a
 8007084:	d806      	bhi.n	8007094 <create_name+0x294>
					b |= 2;
 8007086:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800708a:	f043 0302 	orr.w	r3, r3, #2
 800708e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007092:	e00e      	b.n	80070b2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007096:	2b60      	cmp	r3, #96	; 0x60
 8007098:	d90b      	bls.n	80070b2 <create_name+0x2b2>
 800709a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800709c:	2b7a      	cmp	r3, #122	; 0x7a
 800709e:	d808      	bhi.n	80070b2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80070a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070a4:	f043 0301 	orr.w	r3, r3, #1
 80070a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80070ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070ae:	3b20      	subs	r3, #32
 80070b0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	623a      	str	r2, [r7, #32]
 80070b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80070ba:	b2d1      	uxtb	r1, r2
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	4413      	add	r3, r2
 80070c0:	460a      	mov	r2, r1
 80070c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80070c6:	e763      	b.n	8006f90 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80070c8:	bf00      	nop
 80070ca:	e000      	b.n	80070ce <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80070cc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80070d4:	2be5      	cmp	r3, #229	; 0xe5
 80070d6:	d103      	bne.n	80070e0 <create_name+0x2e0>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2205      	movs	r2, #5
 80070dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	2b08      	cmp	r3, #8
 80070e4:	d104      	bne.n	80070f0 <create_name+0x2f0>
 80070e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80070f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070f4:	f003 030c 	and.w	r3, r3, #12
 80070f8:	2b0c      	cmp	r3, #12
 80070fa:	d005      	beq.n	8007108 <create_name+0x308>
 80070fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007100:	f003 0303 	and.w	r3, r3, #3
 8007104:	2b03      	cmp	r3, #3
 8007106:	d105      	bne.n	8007114 <create_name+0x314>
 8007108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800710c:	f043 0302 	orr.w	r3, r3, #2
 8007110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d117      	bne.n	8007150 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007120:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007124:	f003 0303 	and.w	r3, r3, #3
 8007128:	2b01      	cmp	r3, #1
 800712a:	d105      	bne.n	8007138 <create_name+0x338>
 800712c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007130:	f043 0310 	orr.w	r3, r3, #16
 8007134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007138:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800713c:	f003 030c 	and.w	r3, r3, #12
 8007140:	2b04      	cmp	r3, #4
 8007142:	d105      	bne.n	8007150 <create_name+0x350>
 8007144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007148:	f043 0308 	orr.w	r3, r3, #8
 800714c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007156:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800715a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800715c:	4618      	mov	r0, r3
 800715e:	3728      	adds	r7, #40	; 0x28
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	08008f8c 	.word	0x08008f8c
 8007168:	08009000 	.word	0x08009000
 800716c:	08008f98 	.word	0x08008f98

08007170 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007184:	e002      	b.n	800718c <follow_path+0x1c>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	3301      	adds	r3, #1
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2b2f      	cmp	r3, #47	; 0x2f
 8007192:	d0f8      	beq.n	8007186 <follow_path+0x16>
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b5c      	cmp	r3, #92	; 0x5c
 800719a:	d0f4      	beq.n	8007186 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	2200      	movs	r2, #0
 80071a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	2b1f      	cmp	r3, #31
 80071a8:	d80a      	bhi.n	80071c0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2280      	movs	r2, #128	; 0x80
 80071ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80071b2:	2100      	movs	r1, #0
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff f989 	bl	80064cc <dir_sdi>
 80071ba:	4603      	mov	r3, r0
 80071bc:	75fb      	strb	r3, [r7, #23]
 80071be:	e043      	b.n	8007248 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80071c0:	463b      	mov	r3, r7
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff fe1b 	bl	8006e00 <create_name>
 80071ca:	4603      	mov	r3, r0
 80071cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d134      	bne.n	800723e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7ff fc75 	bl	8006ac4 <dir_find>
 80071da:	4603      	mov	r3, r0
 80071dc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80071e4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00a      	beq.n	8007202 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d127      	bne.n	8007242 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80071f2:	7afb      	ldrb	r3, [r7, #11]
 80071f4:	f003 0304 	and.w	r3, r3, #4
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d122      	bne.n	8007242 <follow_path+0xd2>
 80071fc:	2305      	movs	r3, #5
 80071fe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007200:	e01f      	b.n	8007242 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007202:	7afb      	ldrb	r3, [r7, #11]
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b00      	cmp	r3, #0
 800720a:	d11c      	bne.n	8007246 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	799b      	ldrb	r3, [r3, #6]
 8007210:	f003 0310 	and.w	r3, r3, #16
 8007214:	2b00      	cmp	r3, #0
 8007216:	d102      	bne.n	800721e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007218:	2305      	movs	r3, #5
 800721a:	75fb      	strb	r3, [r7, #23]
 800721c:	e014      	b.n	8007248 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722c:	4413      	add	r3, r2
 800722e:	4619      	mov	r1, r3
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f7ff fa8b 	bl	800674c <ld_clust>
 8007236:	4602      	mov	r2, r0
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800723c:	e7c0      	b.n	80071c0 <follow_path+0x50>
			if (res != FR_OK) break;
 800723e:	bf00      	nop
 8007240:	e002      	b.n	8007248 <follow_path+0xd8>
				break;
 8007242:	bf00      	nop
 8007244:	e000      	b.n	8007248 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007246:	bf00      	nop
			}
		}
	}

	return res;
 8007248:	7dfb      	ldrb	r3, [r7, #23]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007252:	b480      	push	{r7}
 8007254:	b087      	sub	sp, #28
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800725a:	f04f 33ff 	mov.w	r3, #4294967295
 800725e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d031      	beq.n	80072cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	617b      	str	r3, [r7, #20]
 800726e:	e002      	b.n	8007276 <get_ldnumber+0x24>
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	3301      	adds	r3, #1
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	2b1f      	cmp	r3, #31
 800727c:	d903      	bls.n	8007286 <get_ldnumber+0x34>
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	2b3a      	cmp	r3, #58	; 0x3a
 8007284:	d1f4      	bne.n	8007270 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b3a      	cmp	r3, #58	; 0x3a
 800728c:	d11c      	bne.n	80072c8 <get_ldnumber+0x76>
			tp = *path;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	60fa      	str	r2, [r7, #12]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	3b30      	subs	r3, #48	; 0x30
 800729e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b09      	cmp	r3, #9
 80072a4:	d80e      	bhi.n	80072c4 <get_ldnumber+0x72>
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d10a      	bne.n	80072c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d107      	bne.n	80072c4 <get_ldnumber+0x72>
					vol = (int)i;
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	3301      	adds	r3, #1
 80072bc:	617b      	str	r3, [r7, #20]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	e002      	b.n	80072ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80072c8:	2300      	movs	r3, #0
 80072ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80072cc:	693b      	ldr	r3, [r7, #16]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	371c      	adds	r7, #28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
	...

080072dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	70da      	strb	r2, [r3, #3]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f04f 32ff 	mov.w	r2, #4294967295
 80072f2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7fe fe78 	bl	8005fec <move_window>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <check_fs+0x2a>
 8007302:	2304      	movs	r3, #4
 8007304:	e038      	b.n	8007378 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	3334      	adds	r3, #52	; 0x34
 800730a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800730e:	4618      	mov	r0, r3
 8007310:	f7fe fc5c 	bl	8005bcc <ld_word>
 8007314:	4603      	mov	r3, r0
 8007316:	461a      	mov	r2, r3
 8007318:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800731c:	429a      	cmp	r2, r3
 800731e:	d001      	beq.n	8007324 <check_fs+0x48>
 8007320:	2303      	movs	r3, #3
 8007322:	e029      	b.n	8007378 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800732a:	2be9      	cmp	r3, #233	; 0xe9
 800732c:	d009      	beq.n	8007342 <check_fs+0x66>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007334:	2beb      	cmp	r3, #235	; 0xeb
 8007336:	d11e      	bne.n	8007376 <check_fs+0x9a>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800733e:	2b90      	cmp	r3, #144	; 0x90
 8007340:	d119      	bne.n	8007376 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3334      	adds	r3, #52	; 0x34
 8007346:	3336      	adds	r3, #54	; 0x36
 8007348:	4618      	mov	r0, r3
 800734a:	f7fe fc57 	bl	8005bfc <ld_dword>
 800734e:	4603      	mov	r3, r0
 8007350:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007354:	4a0a      	ldr	r2, [pc, #40]	; (8007380 <check_fs+0xa4>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d101      	bne.n	800735e <check_fs+0x82>
 800735a:	2300      	movs	r3, #0
 800735c:	e00c      	b.n	8007378 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	3334      	adds	r3, #52	; 0x34
 8007362:	3352      	adds	r3, #82	; 0x52
 8007364:	4618      	mov	r0, r3
 8007366:	f7fe fc49 	bl	8005bfc <ld_dword>
 800736a:	4602      	mov	r2, r0
 800736c:	4b05      	ldr	r3, [pc, #20]	; (8007384 <check_fs+0xa8>)
 800736e:	429a      	cmp	r2, r3
 8007370:	d101      	bne.n	8007376 <check_fs+0x9a>
 8007372:	2300      	movs	r3, #0
 8007374:	e000      	b.n	8007378 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007376:	2302      	movs	r3, #2
}
 8007378:	4618      	mov	r0, r3
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	00544146 	.word	0x00544146
 8007384:	33544146 	.word	0x33544146

08007388 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b096      	sub	sp, #88	; 0x58
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	4613      	mov	r3, r2
 8007394:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2200      	movs	r2, #0
 800739a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f7ff ff58 	bl	8007252 <get_ldnumber>
 80073a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80073a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	da01      	bge.n	80073ae <find_volume+0x26>
 80073aa:	230b      	movs	r3, #11
 80073ac:	e22e      	b.n	800780c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80073ae:	4aa8      	ldr	r2, [pc, #672]	; (8007650 <find_volume+0x2c8>)
 80073b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <find_volume+0x3a>
 80073be:	230c      	movs	r3, #12
 80073c0:	e224      	b.n	800780c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	f023 0301 	bic.w	r3, r3, #1
 80073ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80073d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01a      	beq.n	800740e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80073d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073da:	785b      	ldrb	r3, [r3, #1]
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fe fb75 	bl	8005acc <disk_status>
 80073e2:	4603      	mov	r3, r0
 80073e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80073e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10c      	bne.n	800740e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80073f4:	79fb      	ldrb	r3, [r7, #7]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d007      	beq.n	800740a <find_volume+0x82>
 80073fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073fe:	f003 0304 	and.w	r3, r3, #4
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007406:	230a      	movs	r3, #10
 8007408:	e200      	b.n	800780c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800740a:	2300      	movs	r3, #0
 800740c:	e1fe      	b.n	800780c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007410:	2200      	movs	r2, #0
 8007412:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007416:	b2da      	uxtb	r2, r3
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800741c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741e:	785b      	ldrb	r3, [r3, #1]
 8007420:	4618      	mov	r0, r3
 8007422:	f7fe fb6d 	bl	8005b00 <disk_initialize>
 8007426:	4603      	mov	r3, r0
 8007428:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800742c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007438:	2303      	movs	r3, #3
 800743a:	e1e7      	b.n	800780c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800743c:	79fb      	ldrb	r3, [r7, #7]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d007      	beq.n	8007452 <find_volume+0xca>
 8007442:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007446:	f003 0304 	and.w	r3, r3, #4
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800744e:	230a      	movs	r3, #10
 8007450:	e1dc      	b.n	800780c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007452:	2300      	movs	r3, #0
 8007454:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007456:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007458:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800745a:	f7ff ff3f 	bl	80072dc <check_fs>
 800745e:	4603      	mov	r3, r0
 8007460:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007464:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007468:	2b02      	cmp	r3, #2
 800746a:	d14b      	bne.n	8007504 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800746c:	2300      	movs	r3, #0
 800746e:	643b      	str	r3, [r7, #64]	; 0x40
 8007470:	e01f      	b.n	80074b2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007474:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800747a:	011b      	lsls	r3, r3, #4
 800747c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007480:	4413      	add	r3, r2
 8007482:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007486:	3304      	adds	r3, #4
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d006      	beq.n	800749c <find_volume+0x114>
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	3308      	adds	r3, #8
 8007492:	4618      	mov	r0, r3
 8007494:	f7fe fbb2 	bl	8005bfc <ld_dword>
 8007498:	4602      	mov	r2, r0
 800749a:	e000      	b.n	800749e <find_volume+0x116>
 800749c:	2200      	movs	r2, #0
 800749e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80074a6:	440b      	add	r3, r1
 80074a8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80074ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ae:	3301      	adds	r3, #1
 80074b0:	643b      	str	r3, [r7, #64]	; 0x40
 80074b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d9dc      	bls.n	8007472 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80074b8:	2300      	movs	r3, #0
 80074ba:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80074bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d002      	beq.n	80074c8 <find_volume+0x140>
 80074c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c4:	3b01      	subs	r3, #1
 80074c6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80074c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80074d0:	4413      	add	r3, r2
 80074d2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80074d6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80074d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d005      	beq.n	80074ea <find_volume+0x162>
 80074de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80074e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074e2:	f7ff fefb 	bl	80072dc <check_fs>
 80074e6:	4603      	mov	r3, r0
 80074e8:	e000      	b.n	80074ec <find_volume+0x164>
 80074ea:	2303      	movs	r3, #3
 80074ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80074f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d905      	bls.n	8007504 <find_volume+0x17c>
 80074f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074fa:	3301      	adds	r3, #1
 80074fc:	643b      	str	r3, [r7, #64]	; 0x40
 80074fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007500:	2b03      	cmp	r3, #3
 8007502:	d9e1      	bls.n	80074c8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007504:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007508:	2b04      	cmp	r3, #4
 800750a:	d101      	bne.n	8007510 <find_volume+0x188>
 800750c:	2301      	movs	r3, #1
 800750e:	e17d      	b.n	800780c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007510:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007514:	2b01      	cmp	r3, #1
 8007516:	d901      	bls.n	800751c <find_volume+0x194>
 8007518:	230d      	movs	r3, #13
 800751a:	e177      	b.n	800780c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800751c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751e:	3334      	adds	r3, #52	; 0x34
 8007520:	330b      	adds	r3, #11
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe fb52 	bl	8005bcc <ld_word>
 8007528:	4603      	mov	r3, r0
 800752a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800752e:	d001      	beq.n	8007534 <find_volume+0x1ac>
 8007530:	230d      	movs	r3, #13
 8007532:	e16b      	b.n	800780c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	3334      	adds	r3, #52	; 0x34
 8007538:	3316      	adds	r3, #22
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe fb46 	bl	8005bcc <ld_word>
 8007540:	4603      	mov	r3, r0
 8007542:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <find_volume+0x1d0>
 800754a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754c:	3334      	adds	r3, #52	; 0x34
 800754e:	3324      	adds	r3, #36	; 0x24
 8007550:	4618      	mov	r0, r3
 8007552:	f7fe fb53 	bl	8005bfc <ld_dword>
 8007556:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800755c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800755e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007560:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756a:	789b      	ldrb	r3, [r3, #2]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d005      	beq.n	800757c <find_volume+0x1f4>
 8007570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007572:	789b      	ldrb	r3, [r3, #2]
 8007574:	2b02      	cmp	r3, #2
 8007576:	d001      	beq.n	800757c <find_volume+0x1f4>
 8007578:	230d      	movs	r3, #13
 800757a:	e147      	b.n	800780c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800757c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757e:	789b      	ldrb	r3, [r3, #2]
 8007580:	461a      	mov	r2, r3
 8007582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007584:	fb02 f303 	mul.w	r3, r2, r3
 8007588:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800758a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007590:	b29a      	uxth	r2, r3
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007598:	895b      	ldrh	r3, [r3, #10]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d008      	beq.n	80075b0 <find_volume+0x228>
 800759e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a0:	895b      	ldrh	r3, [r3, #10]
 80075a2:	461a      	mov	r2, r3
 80075a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a6:	895b      	ldrh	r3, [r3, #10]
 80075a8:	3b01      	subs	r3, #1
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <find_volume+0x22c>
 80075b0:	230d      	movs	r3, #13
 80075b2:	e12b      	b.n	800780c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80075b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b6:	3334      	adds	r3, #52	; 0x34
 80075b8:	3311      	adds	r3, #17
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe fb06 	bl	8005bcc <ld_word>
 80075c0:	4603      	mov	r3, r0
 80075c2:	461a      	mov	r2, r3
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80075c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ca:	891b      	ldrh	r3, [r3, #8]
 80075cc:	f003 030f 	and.w	r3, r3, #15
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <find_volume+0x252>
 80075d6:	230d      	movs	r3, #13
 80075d8:	e118      	b.n	800780c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80075da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075dc:	3334      	adds	r3, #52	; 0x34
 80075de:	3313      	adds	r3, #19
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fe faf3 	bl	8005bcc <ld_word>
 80075e6:	4603      	mov	r3, r0
 80075e8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80075ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <find_volume+0x276>
 80075f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f2:	3334      	adds	r3, #52	; 0x34
 80075f4:	3320      	adds	r3, #32
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fe fb00 	bl	8005bfc <ld_dword>
 80075fc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80075fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007600:	3334      	adds	r3, #52	; 0x34
 8007602:	330e      	adds	r3, #14
 8007604:	4618      	mov	r0, r3
 8007606:	f7fe fae1 	bl	8005bcc <ld_word>
 800760a:	4603      	mov	r3, r0
 800760c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800760e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <find_volume+0x290>
 8007614:	230d      	movs	r3, #13
 8007616:	e0f9      	b.n	800780c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007618:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800761a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800761c:	4413      	add	r3, r2
 800761e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007620:	8912      	ldrh	r2, [r2, #8]
 8007622:	0912      	lsrs	r2, r2, #4
 8007624:	b292      	uxth	r2, r2
 8007626:	4413      	add	r3, r2
 8007628:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800762a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800762c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762e:	429a      	cmp	r2, r3
 8007630:	d201      	bcs.n	8007636 <find_volume+0x2ae>
 8007632:	230d      	movs	r3, #13
 8007634:	e0ea      	b.n	800780c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007636:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800763e:	8952      	ldrh	r2, [r2, #10]
 8007640:	fbb3 f3f2 	udiv	r3, r3, r2
 8007644:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	2b00      	cmp	r3, #0
 800764a:	d103      	bne.n	8007654 <find_volume+0x2cc>
 800764c:	230d      	movs	r3, #13
 800764e:	e0dd      	b.n	800780c <find_volume+0x484>
 8007650:	200001a4 	.word	0x200001a4
		fmt = FS_FAT32;
 8007654:	2303      	movs	r3, #3
 8007656:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007660:	4293      	cmp	r3, r2
 8007662:	d802      	bhi.n	800766a <find_volume+0x2e2>
 8007664:	2302      	movs	r3, #2
 8007666:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007670:	4293      	cmp	r3, r2
 8007672:	d802      	bhi.n	800767a <find_volume+0x2f2>
 8007674:	2301      	movs	r3, #1
 8007676:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	1c9a      	adds	r2, r3, #2
 800767e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007680:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007686:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007688:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800768a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800768c:	441a      	add	r2, r3
 800768e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007690:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007692:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007696:	441a      	add	r2, r3
 8007698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800769c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d11e      	bne.n	80076e2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	3334      	adds	r3, #52	; 0x34
 80076a8:	332a      	adds	r3, #42	; 0x2a
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe fa8e 	bl	8005bcc <ld_word>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <find_volume+0x332>
 80076b6:	230d      	movs	r3, #13
 80076b8:	e0a8      	b.n	800780c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80076ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076bc:	891b      	ldrh	r3, [r3, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <find_volume+0x33e>
 80076c2:	230d      	movs	r3, #13
 80076c4:	e0a2      	b.n	800780c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80076c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c8:	3334      	adds	r3, #52	; 0x34
 80076ca:	332c      	adds	r3, #44	; 0x2c
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fe fa95 	bl	8005bfc <ld_dword>
 80076d2:	4602      	mov	r2, r0
 80076d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	647b      	str	r3, [r7, #68]	; 0x44
 80076e0:	e01f      	b.n	8007722 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80076e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e4:	891b      	ldrh	r3, [r3, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <find_volume+0x366>
 80076ea:	230d      	movs	r3, #13
 80076ec:	e08e      	b.n	800780c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80076ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f4:	441a      	add	r2, r3
 80076f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80076fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d103      	bne.n	800770a <find_volume+0x382>
 8007702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	005b      	lsls	r3, r3, #1
 8007708:	e00a      	b.n	8007720 <find_volume+0x398>
 800770a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	4613      	mov	r3, r2
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	4413      	add	r3, r2
 8007714:	085a      	lsrs	r2, r3, #1
 8007716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007720:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007724:	69da      	ldr	r2, [r3, #28]
 8007726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007728:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800772c:	0a5b      	lsrs	r3, r3, #9
 800772e:	429a      	cmp	r2, r3
 8007730:	d201      	bcs.n	8007736 <find_volume+0x3ae>
 8007732:	230d      	movs	r3, #13
 8007734:	e06a      	b.n	800780c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007738:	f04f 32ff 	mov.w	r2, #4294967295
 800773c:	615a      	str	r2, [r3, #20]
 800773e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007740:	695a      	ldr	r2, [r3, #20]
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007748:	2280      	movs	r2, #128	; 0x80
 800774a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800774c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007750:	2b03      	cmp	r3, #3
 8007752:	d149      	bne.n	80077e8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007756:	3334      	adds	r3, #52	; 0x34
 8007758:	3330      	adds	r3, #48	; 0x30
 800775a:	4618      	mov	r0, r3
 800775c:	f7fe fa36 	bl	8005bcc <ld_word>
 8007760:	4603      	mov	r3, r0
 8007762:	2b01      	cmp	r3, #1
 8007764:	d140      	bne.n	80077e8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007768:	3301      	adds	r3, #1
 800776a:	4619      	mov	r1, r3
 800776c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800776e:	f7fe fc3d 	bl	8005fec <move_window>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d137      	bne.n	80077e8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	2200      	movs	r2, #0
 800777c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800777e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007780:	3334      	adds	r3, #52	; 0x34
 8007782:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007786:	4618      	mov	r0, r3
 8007788:	f7fe fa20 	bl	8005bcc <ld_word>
 800778c:	4603      	mov	r3, r0
 800778e:	461a      	mov	r2, r3
 8007790:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007794:	429a      	cmp	r2, r3
 8007796:	d127      	bne.n	80077e8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779a:	3334      	adds	r3, #52	; 0x34
 800779c:	4618      	mov	r0, r3
 800779e:	f7fe fa2d 	bl	8005bfc <ld_dword>
 80077a2:	4602      	mov	r2, r0
 80077a4:	4b1b      	ldr	r3, [pc, #108]	; (8007814 <find_volume+0x48c>)
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d11e      	bne.n	80077e8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	3334      	adds	r3, #52	; 0x34
 80077ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe fa22 	bl	8005bfc <ld_dword>
 80077b8:	4602      	mov	r2, r0
 80077ba:	4b17      	ldr	r3, [pc, #92]	; (8007818 <find_volume+0x490>)
 80077bc:	429a      	cmp	r2, r3
 80077be:	d113      	bne.n	80077e8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80077c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c2:	3334      	adds	r3, #52	; 0x34
 80077c4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fe fa17 	bl	8005bfc <ld_dword>
 80077ce:	4602      	mov	r2, r0
 80077d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80077d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d6:	3334      	adds	r3, #52	; 0x34
 80077d8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fe fa0d 	bl	8005bfc <ld_dword>
 80077e2:	4602      	mov	r2, r0
 80077e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80077e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80077ee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80077f0:	4b0a      	ldr	r3, [pc, #40]	; (800781c <find_volume+0x494>)
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	3301      	adds	r3, #1
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	4b08      	ldr	r3, [pc, #32]	; (800781c <find_volume+0x494>)
 80077fa:	801a      	strh	r2, [r3, #0]
 80077fc:	4b07      	ldr	r3, [pc, #28]	; (800781c <find_volume+0x494>)
 80077fe:	881a      	ldrh	r2, [r3, #0]
 8007800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007802:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007804:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007806:	f7fe fb89 	bl	8005f1c <clear_lock>
#endif
	return FR_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3758      	adds	r7, #88	; 0x58
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	41615252 	.word	0x41615252
 8007818:	61417272 	.word	0x61417272
 800781c:	200001a8 	.word	0x200001a8

08007820 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800782a:	2309      	movs	r3, #9
 800782c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d01c      	beq.n	800786e <validate+0x4e>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d018      	beq.n	800786e <validate+0x4e>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d013      	beq.n	800786e <validate+0x4e>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	889a      	ldrh	r2, [r3, #4]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	88db      	ldrh	r3, [r3, #6]
 8007850:	429a      	cmp	r2, r3
 8007852:	d10c      	bne.n	800786e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	785b      	ldrb	r3, [r3, #1]
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe f936 	bl	8005acc <disk_status>
 8007860:	4603      	mov	r3, r0
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <validate+0x4e>
			res = FR_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800786e:	7bfb      	ldrb	r3, [r7, #15]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d102      	bne.n	800787a <validate+0x5a>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	e000      	b.n	800787c <validate+0x5c>
 800787a:	2300      	movs	r3, #0
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	6013      	str	r3, [r2, #0]
	return res;
 8007880:	7bfb      	ldrb	r3, [r7, #15]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
	...

0800788c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	4613      	mov	r3, r2
 8007898:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800789e:	f107 0310 	add.w	r3, r7, #16
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7ff fcd5 	bl	8007252 <get_ldnumber>
 80078a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	da01      	bge.n	80078b4 <f_mount+0x28>
 80078b0:	230b      	movs	r3, #11
 80078b2:	e02b      	b.n	800790c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80078b4:	4a17      	ldr	r2, [pc, #92]	; (8007914 <f_mount+0x88>)
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d005      	beq.n	80078d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80078c4:	69b8      	ldr	r0, [r7, #24]
 80078c6:	f7fe fb29 	bl	8005f1c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	2200      	movs	r2, #0
 80078ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d002      	beq.n	80078dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	490d      	ldr	r1, [pc, #52]	; (8007914 <f_mount+0x88>)
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <f_mount+0x66>
 80078ec:	79fb      	ldrb	r3, [r7, #7]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d001      	beq.n	80078f6 <f_mount+0x6a>
 80078f2:	2300      	movs	r3, #0
 80078f4:	e00a      	b.n	800790c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80078f6:	f107 010c 	add.w	r1, r7, #12
 80078fa:	f107 0308 	add.w	r3, r7, #8
 80078fe:	2200      	movs	r2, #0
 8007900:	4618      	mov	r0, r3
 8007902:	f7ff fd41 	bl	8007388 <find_volume>
 8007906:	4603      	mov	r3, r0
 8007908:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800790a:	7dfb      	ldrb	r3, [r7, #23]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3720      	adds	r7, #32
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	200001a4 	.word	0x200001a4

08007918 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800791e:	af00      	add	r7, sp, #0
 8007920:	1d3b      	adds	r3, r7, #4
 8007922:	6018      	str	r0, [r3, #0]
 8007924:	463b      	mov	r3, r7
 8007926:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8007928:	1d3b      	adds	r3, r7, #4
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <f_opendir+0x1c>
 8007930:	2309      	movs	r3, #9
 8007932:	e08a      	b.n	8007a4a <f_opendir+0x132>

	/* Get logical drive */
	obj = &dp->obj;
 8007934:	1d3b      	adds	r3, r7, #4
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 800793c:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8007940:	463b      	mov	r3, r7
 8007942:	2200      	movs	r2, #0
 8007944:	4618      	mov	r0, r3
 8007946:	f7ff fd1f 	bl	8007388 <find_volume>
 800794a:	4603      	mov	r3, r0
 800794c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 8007950:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007954:	2b00      	cmp	r3, #0
 8007956:	d16e      	bne.n	8007a36 <f_opendir+0x11e>
		obj->fs = fs;
 8007958:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800795c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007960:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8007962:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8007966:	f107 020c 	add.w	r2, r7, #12
 800796a:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800796c:	463b      	mov	r3, r7
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	1d3b      	adds	r3, r7, #4
 8007972:	4611      	mov	r1, r2
 8007974:	6818      	ldr	r0, [r3, #0]
 8007976:	f7ff fbfb 	bl	8007170 <follow_path>
 800797a:	4603      	mov	r3, r0
 800797c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 8007980:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007984:	2b00      	cmp	r3, #0
 8007986:	d14f      	bne.n	8007a28 <f_opendir+0x110>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007988:	1d3b      	adds	r3, r7, #4
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007990:	b25b      	sxtb	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	db17      	blt.n	80079c6 <f_opendir+0xae>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8007996:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800799a:	799b      	ldrb	r3, [r3, #6]
 800799c:	f003 0310 	and.w	r3, r3, #16
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00d      	beq.n	80079c0 <f_opendir+0xa8>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80079a4:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80079a8:	1d3b      	adds	r3, r7, #4
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	4619      	mov	r1, r3
 80079b0:	4610      	mov	r0, r2
 80079b2:	f7fe fecb 	bl	800674c <ld_clust>
 80079b6:	4602      	mov	r2, r0
 80079b8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80079bc:	609a      	str	r2, [r3, #8]
 80079be:	e002      	b.n	80079c6 <f_opendir+0xae>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80079c0:	2305      	movs	r3, #5
 80079c2:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 80079c6:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d12c      	bne.n	8007a28 <f_opendir+0x110>
				obj->id = fs->id;
 80079ce:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80079d2:	88da      	ldrh	r2, [r3, #6]
 80079d4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80079d8:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80079da:	1d3b      	adds	r3, r7, #4
 80079dc:	2100      	movs	r1, #0
 80079de:	6818      	ldr	r0, [r3, #0]
 80079e0:	f7fe fd74 	bl	80064cc <dir_sdi>
 80079e4:	4603      	mov	r3, r0
 80079e6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80079ea:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d11a      	bne.n	8007a28 <f_opendir+0x110>
					if (obj->sclust) {
 80079f2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d011      	beq.n	8007a20 <f_opendir+0x108>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80079fc:	1d3b      	adds	r3, r7, #4
 80079fe:	2100      	movs	r1, #0
 8007a00:	6818      	ldr	r0, [r3, #0]
 8007a02:	f7fe f9c1 	bl	8005d88 <inc_lock>
 8007a06:	4602      	mov	r2, r0
 8007a08:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007a0c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007a0e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d107      	bne.n	8007a28 <f_opendir+0x110>
 8007a18:	2312      	movs	r3, #18
 8007a1a:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 8007a1e:	e003      	b.n	8007a28 <f_opendir+0x110>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007a20:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007a24:	2200      	movs	r2, #0
 8007a26:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007a28:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d102      	bne.n	8007a36 <f_opendir+0x11e>
 8007a30:	2305      	movs	r3, #5
 8007a32:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007a36:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <f_opendir+0x12e>
 8007a3e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007a46:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f107 0208 	add.w	r2, r7, #8
 8007a62:	4611      	mov	r1, r2
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff fedb 	bl	8007820 <validate>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d110      	bne.n	8007a96 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d006      	beq.n	8007a8a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7fe fa0f 	bl	8005ea4 <dec_lock>
 8007a86:	4603      	mov	r3, r0
 8007a88:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d102      	bne.n	8007a96 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	1d3b      	adds	r3, r7, #4
 8007aaa:	6018      	str	r0, [r3, #0]
 8007aac:	463b      	mov	r3, r7
 8007aae:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8007ab0:	1d3b      	adds	r3, r7, #4
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007ab8:	4611      	mov	r1, r2
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7ff feb0 	bl	8007820 <validate>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 8007ac6:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d139      	bne.n	8007b42 <f_readdir+0xa2>
		if (!fno) {
 8007ace:	463b      	mov	r3, r7
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d108      	bne.n	8007ae8 <f_readdir+0x48>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8007ad6:	1d3b      	adds	r3, r7, #4
 8007ad8:	2100      	movs	r1, #0
 8007ada:	6818      	ldr	r0, [r3, #0]
 8007adc:	f7fe fcf6 	bl	80064cc <dir_sdi>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8007ae6:	e02c      	b.n	8007b42 <f_readdir+0xa2>
		} else {
			INIT_NAMBUF(fs);
 8007ae8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8007aec:	f107 0208 	add.w	r2, r7, #8
 8007af0:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8007af2:	1d3b      	adds	r3, r7, #4
 8007af4:	2100      	movs	r1, #0
 8007af6:	6818      	ldr	r0, [r3, #0]
 8007af8:	f7fe ff3d 	bl	8006976 <dir_read>
 8007afc:	4603      	mov	r3, r0
 8007afe:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007b02:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007b06:	2b04      	cmp	r3, #4
 8007b08:	d102      	bne.n	8007b10 <f_readdir+0x70>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 8007b10:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d114      	bne.n	8007b42 <f_readdir+0xa2>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007b18:	463a      	mov	r2, r7
 8007b1a:	1d3b      	adds	r3, r7, #4
 8007b1c:	6811      	ldr	r1, [r2, #0]
 8007b1e:	6818      	ldr	r0, [r3, #0]
 8007b20:	f7ff f890 	bl	8006c44 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007b24:	1d3b      	adds	r3, r7, #4
 8007b26:	2100      	movs	r1, #0
 8007b28:	6818      	ldr	r0, [r3, #0]
 8007b2a:	f7fe fd4a 	bl	80065c2 <dir_next>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8007b34:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007b38:	2b04      	cmp	r3, #4
 8007b3a:	d102      	bne.n	8007b42 <f_readdir+0xa2>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007b42:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007b66:	4b1f      	ldr	r3, [pc, #124]	; (8007be4 <FATFS_LinkDriverEx+0x94>)
 8007b68:	7a5b      	ldrb	r3, [r3, #9]
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d131      	bne.n	8007bd4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007b70:	4b1c      	ldr	r3, [pc, #112]	; (8007be4 <FATFS_LinkDriverEx+0x94>)
 8007b72:	7a5b      	ldrb	r3, [r3, #9]
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	461a      	mov	r2, r3
 8007b78:	4b1a      	ldr	r3, [pc, #104]	; (8007be4 <FATFS_LinkDriverEx+0x94>)
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007b7e:	4b19      	ldr	r3, [pc, #100]	; (8007be4 <FATFS_LinkDriverEx+0x94>)
 8007b80:	7a5b      	ldrb	r3, [r3, #9]
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	4a17      	ldr	r2, [pc, #92]	; (8007be4 <FATFS_LinkDriverEx+0x94>)
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007b8e:	4b15      	ldr	r3, [pc, #84]	; (8007be4 <FATFS_LinkDriverEx+0x94>)
 8007b90:	7a5b      	ldrb	r3, [r3, #9]
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	461a      	mov	r2, r3
 8007b96:	4b13      	ldr	r3, [pc, #76]	; (8007be4 <FATFS_LinkDriverEx+0x94>)
 8007b98:	4413      	add	r3, r2
 8007b9a:	79fa      	ldrb	r2, [r7, #7]
 8007b9c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007b9e:	4b11      	ldr	r3, [pc, #68]	; (8007be4 <FATFS_LinkDriverEx+0x94>)
 8007ba0:	7a5b      	ldrb	r3, [r3, #9]
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	b2d1      	uxtb	r1, r2
 8007ba8:	4a0e      	ldr	r2, [pc, #56]	; (8007be4 <FATFS_LinkDriverEx+0x94>)
 8007baa:	7251      	strb	r1, [r2, #9]
 8007bac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007bae:	7dbb      	ldrb	r3, [r7, #22]
 8007bb0:	3330      	adds	r3, #48	; 0x30
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	223a      	movs	r2, #58	; 0x3a
 8007bbe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	3302      	adds	r3, #2
 8007bc4:	222f      	movs	r2, #47	; 0x2f
 8007bc6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	3303      	adds	r3, #3
 8007bcc:	2200      	movs	r2, #0
 8007bce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	371c      	adds	r7, #28
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	200001cc 	.word	0x200001cc

08007be8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f7ff ffaa 	bl	8007b50 <FATFS_LinkDriverEx>
 8007bfc:	4603      	mov	r3, r0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
	...

08007c08 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	6039      	str	r1, [r7, #0]
 8007c12:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007c14:	88fb      	ldrh	r3, [r7, #6]
 8007c16:	2b7f      	cmp	r3, #127	; 0x7f
 8007c18:	d802      	bhi.n	8007c20 <ff_convert+0x18>
		c = chr;
 8007c1a:	88fb      	ldrh	r3, [r7, #6]
 8007c1c:	81fb      	strh	r3, [r7, #14]
 8007c1e:	e025      	b.n	8007c6c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00b      	beq.n	8007c3e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007c26:	88fb      	ldrh	r3, [r7, #6]
 8007c28:	2bff      	cmp	r3, #255	; 0xff
 8007c2a:	d805      	bhi.n	8007c38 <ff_convert+0x30>
 8007c2c:	88fb      	ldrh	r3, [r7, #6]
 8007c2e:	3b80      	subs	r3, #128	; 0x80
 8007c30:	4a12      	ldr	r2, [pc, #72]	; (8007c7c <ff_convert+0x74>)
 8007c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c36:	e000      	b.n	8007c3a <ff_convert+0x32>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	81fb      	strh	r3, [r7, #14]
 8007c3c:	e016      	b.n	8007c6c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007c3e:	2300      	movs	r3, #0
 8007c40:	81fb      	strh	r3, [r7, #14]
 8007c42:	e009      	b.n	8007c58 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007c44:	89fb      	ldrh	r3, [r7, #14]
 8007c46:	4a0d      	ldr	r2, [pc, #52]	; (8007c7c <ff_convert+0x74>)
 8007c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c4c:	88fa      	ldrh	r2, [r7, #6]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d006      	beq.n	8007c60 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007c52:	89fb      	ldrh	r3, [r7, #14]
 8007c54:	3301      	adds	r3, #1
 8007c56:	81fb      	strh	r3, [r7, #14]
 8007c58:	89fb      	ldrh	r3, [r7, #14]
 8007c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8007c5c:	d9f2      	bls.n	8007c44 <ff_convert+0x3c>
 8007c5e:	e000      	b.n	8007c62 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007c60:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007c62:	89fb      	ldrh	r3, [r7, #14]
 8007c64:	3380      	adds	r3, #128	; 0x80
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007c6c:	89fb      	ldrh	r3, [r7, #14]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	08009090 	.word	0x08009090

08007c80 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	4603      	mov	r3, r0
 8007c88:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007c8a:	88fb      	ldrh	r3, [r7, #6]
 8007c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c90:	d201      	bcs.n	8007c96 <ff_wtoupper+0x16>
 8007c92:	4b3e      	ldr	r3, [pc, #248]	; (8007d8c <ff_wtoupper+0x10c>)
 8007c94:	e000      	b.n	8007c98 <ff_wtoupper+0x18>
 8007c96:	4b3e      	ldr	r3, [pc, #248]	; (8007d90 <ff_wtoupper+0x110>)
 8007c98:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	1c9a      	adds	r2, r3, #2
 8007c9e:	617a      	str	r2, [r7, #20]
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007ca4:	8a7b      	ldrh	r3, [r7, #18]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d068      	beq.n	8007d7c <ff_wtoupper+0xfc>
 8007caa:	88fa      	ldrh	r2, [r7, #6]
 8007cac:	8a7b      	ldrh	r3, [r7, #18]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d364      	bcc.n	8007d7c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	1c9a      	adds	r2, r3, #2
 8007cb6:	617a      	str	r2, [r7, #20]
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	823b      	strh	r3, [r7, #16]
 8007cbc:	8a3b      	ldrh	r3, [r7, #16]
 8007cbe:	0a1b      	lsrs	r3, r3, #8
 8007cc0:	81fb      	strh	r3, [r7, #14]
 8007cc2:	8a3b      	ldrh	r3, [r7, #16]
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007cc8:	88fa      	ldrh	r2, [r7, #6]
 8007cca:	8a79      	ldrh	r1, [r7, #18]
 8007ccc:	8a3b      	ldrh	r3, [r7, #16]
 8007cce:	440b      	add	r3, r1
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	da49      	bge.n	8007d68 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007cd4:	89fb      	ldrh	r3, [r7, #14]
 8007cd6:	2b08      	cmp	r3, #8
 8007cd8:	d84f      	bhi.n	8007d7a <ff_wtoupper+0xfa>
 8007cda:	a201      	add	r2, pc, #4	; (adr r2, 8007ce0 <ff_wtoupper+0x60>)
 8007cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce0:	08007d05 	.word	0x08007d05
 8007ce4:	08007d17 	.word	0x08007d17
 8007ce8:	08007d2d 	.word	0x08007d2d
 8007cec:	08007d35 	.word	0x08007d35
 8007cf0:	08007d3d 	.word	0x08007d3d
 8007cf4:	08007d45 	.word	0x08007d45
 8007cf8:	08007d4d 	.word	0x08007d4d
 8007cfc:	08007d55 	.word	0x08007d55
 8007d00:	08007d5d 	.word	0x08007d5d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007d04:	88fa      	ldrh	r2, [r7, #6]
 8007d06:	8a7b      	ldrh	r3, [r7, #18]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	4413      	add	r3, r2
 8007d10:	881b      	ldrh	r3, [r3, #0]
 8007d12:	80fb      	strh	r3, [r7, #6]
 8007d14:	e027      	b.n	8007d66 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007d16:	88fa      	ldrh	r2, [r7, #6]
 8007d18:	8a7b      	ldrh	r3, [r7, #18]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	88fa      	ldrh	r2, [r7, #6]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	80fb      	strh	r3, [r7, #6]
 8007d2a:	e01c      	b.n	8007d66 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007d2c:	88fb      	ldrh	r3, [r7, #6]
 8007d2e:	3b10      	subs	r3, #16
 8007d30:	80fb      	strh	r3, [r7, #6]
 8007d32:	e018      	b.n	8007d66 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007d34:	88fb      	ldrh	r3, [r7, #6]
 8007d36:	3b20      	subs	r3, #32
 8007d38:	80fb      	strh	r3, [r7, #6]
 8007d3a:	e014      	b.n	8007d66 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007d3c:	88fb      	ldrh	r3, [r7, #6]
 8007d3e:	3b30      	subs	r3, #48	; 0x30
 8007d40:	80fb      	strh	r3, [r7, #6]
 8007d42:	e010      	b.n	8007d66 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007d44:	88fb      	ldrh	r3, [r7, #6]
 8007d46:	3b1a      	subs	r3, #26
 8007d48:	80fb      	strh	r3, [r7, #6]
 8007d4a:	e00c      	b.n	8007d66 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	3308      	adds	r3, #8
 8007d50:	80fb      	strh	r3, [r7, #6]
 8007d52:	e008      	b.n	8007d66 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007d54:	88fb      	ldrh	r3, [r7, #6]
 8007d56:	3b50      	subs	r3, #80	; 0x50
 8007d58:	80fb      	strh	r3, [r7, #6]
 8007d5a:	e004      	b.n	8007d66 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007d5c:	88fb      	ldrh	r3, [r7, #6]
 8007d5e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007d62:	80fb      	strh	r3, [r7, #6]
 8007d64:	bf00      	nop
			}
			break;
 8007d66:	e008      	b.n	8007d7a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007d68:	89fb      	ldrh	r3, [r7, #14]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d195      	bne.n	8007c9a <ff_wtoupper+0x1a>
 8007d6e:	8a3b      	ldrh	r3, [r7, #16]
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	4413      	add	r3, r2
 8007d76:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007d78:	e78f      	b.n	8007c9a <ff_wtoupper+0x1a>
			break;
 8007d7a:	bf00      	nop
	}

	return chr;
 8007d7c:	88fb      	ldrh	r3, [r7, #6]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	371c      	adds	r7, #28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	08009190 	.word	0x08009190
 8007d90:	08009384 	.word	0x08009384

08007d94 <__errno>:
 8007d94:	4b01      	ldr	r3, [pc, #4]	; (8007d9c <__errno+0x8>)
 8007d96:	6818      	ldr	r0, [r3, #0]
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	20000008 	.word	0x20000008

08007da0 <__libc_init_array>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	4e0d      	ldr	r6, [pc, #52]	; (8007dd8 <__libc_init_array+0x38>)
 8007da4:	4c0d      	ldr	r4, [pc, #52]	; (8007ddc <__libc_init_array+0x3c>)
 8007da6:	1ba4      	subs	r4, r4, r6
 8007da8:	10a4      	asrs	r4, r4, #2
 8007daa:	2500      	movs	r5, #0
 8007dac:	42a5      	cmp	r5, r4
 8007dae:	d109      	bne.n	8007dc4 <__libc_init_array+0x24>
 8007db0:	4e0b      	ldr	r6, [pc, #44]	; (8007de0 <__libc_init_array+0x40>)
 8007db2:	4c0c      	ldr	r4, [pc, #48]	; (8007de4 <__libc_init_array+0x44>)
 8007db4:	f001 f8c8 	bl	8008f48 <_init>
 8007db8:	1ba4      	subs	r4, r4, r6
 8007dba:	10a4      	asrs	r4, r4, #2
 8007dbc:	2500      	movs	r5, #0
 8007dbe:	42a5      	cmp	r5, r4
 8007dc0:	d105      	bne.n	8007dce <__libc_init_array+0x2e>
 8007dc2:	bd70      	pop	{r4, r5, r6, pc}
 8007dc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dc8:	4798      	blx	r3
 8007dca:	3501      	adds	r5, #1
 8007dcc:	e7ee      	b.n	8007dac <__libc_init_array+0xc>
 8007dce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dd2:	4798      	blx	r3
 8007dd4:	3501      	adds	r5, #1
 8007dd6:	e7f2      	b.n	8007dbe <__libc_init_array+0x1e>
 8007dd8:	080094e0 	.word	0x080094e0
 8007ddc:	080094e0 	.word	0x080094e0
 8007de0:	080094e0 	.word	0x080094e0
 8007de4:	080094e4 	.word	0x080094e4

08007de8 <memset>:
 8007de8:	4402      	add	r2, r0
 8007dea:	4603      	mov	r3, r0
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d100      	bne.n	8007df2 <memset+0xa>
 8007df0:	4770      	bx	lr
 8007df2:	f803 1b01 	strb.w	r1, [r3], #1
 8007df6:	e7f9      	b.n	8007dec <memset+0x4>

08007df8 <iprintf>:
 8007df8:	b40f      	push	{r0, r1, r2, r3}
 8007dfa:	4b0a      	ldr	r3, [pc, #40]	; (8007e24 <iprintf+0x2c>)
 8007dfc:	b513      	push	{r0, r1, r4, lr}
 8007dfe:	681c      	ldr	r4, [r3, #0]
 8007e00:	b124      	cbz	r4, 8007e0c <iprintf+0x14>
 8007e02:	69a3      	ldr	r3, [r4, #24]
 8007e04:	b913      	cbnz	r3, 8007e0c <iprintf+0x14>
 8007e06:	4620      	mov	r0, r4
 8007e08:	f000 f86e 	bl	8007ee8 <__sinit>
 8007e0c:	ab05      	add	r3, sp, #20
 8007e0e:	9a04      	ldr	r2, [sp, #16]
 8007e10:	68a1      	ldr	r1, [r4, #8]
 8007e12:	9301      	str	r3, [sp, #4]
 8007e14:	4620      	mov	r0, r4
 8007e16:	f000 fac7 	bl	80083a8 <_vfiprintf_r>
 8007e1a:	b002      	add	sp, #8
 8007e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e20:	b004      	add	sp, #16
 8007e22:	4770      	bx	lr
 8007e24:	20000008 	.word	0x20000008

08007e28 <siprintf>:
 8007e28:	b40e      	push	{r1, r2, r3}
 8007e2a:	b500      	push	{lr}
 8007e2c:	b09c      	sub	sp, #112	; 0x70
 8007e2e:	ab1d      	add	r3, sp, #116	; 0x74
 8007e30:	9002      	str	r0, [sp, #8]
 8007e32:	9006      	str	r0, [sp, #24]
 8007e34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e38:	4809      	ldr	r0, [pc, #36]	; (8007e60 <siprintf+0x38>)
 8007e3a:	9107      	str	r1, [sp, #28]
 8007e3c:	9104      	str	r1, [sp, #16]
 8007e3e:	4909      	ldr	r1, [pc, #36]	; (8007e64 <siprintf+0x3c>)
 8007e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e44:	9105      	str	r1, [sp, #20]
 8007e46:	6800      	ldr	r0, [r0, #0]
 8007e48:	9301      	str	r3, [sp, #4]
 8007e4a:	a902      	add	r1, sp, #8
 8007e4c:	f000 f98a 	bl	8008164 <_svfiprintf_r>
 8007e50:	9b02      	ldr	r3, [sp, #8]
 8007e52:	2200      	movs	r2, #0
 8007e54:	701a      	strb	r2, [r3, #0]
 8007e56:	b01c      	add	sp, #112	; 0x70
 8007e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e5c:	b003      	add	sp, #12
 8007e5e:	4770      	bx	lr
 8007e60:	20000008 	.word	0x20000008
 8007e64:	ffff0208 	.word	0xffff0208

08007e68 <std>:
 8007e68:	2300      	movs	r3, #0
 8007e6a:	b510      	push	{r4, lr}
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e72:	6083      	str	r3, [r0, #8]
 8007e74:	8181      	strh	r1, [r0, #12]
 8007e76:	6643      	str	r3, [r0, #100]	; 0x64
 8007e78:	81c2      	strh	r2, [r0, #14]
 8007e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e7e:	6183      	str	r3, [r0, #24]
 8007e80:	4619      	mov	r1, r3
 8007e82:	2208      	movs	r2, #8
 8007e84:	305c      	adds	r0, #92	; 0x5c
 8007e86:	f7ff ffaf 	bl	8007de8 <memset>
 8007e8a:	4b05      	ldr	r3, [pc, #20]	; (8007ea0 <std+0x38>)
 8007e8c:	6263      	str	r3, [r4, #36]	; 0x24
 8007e8e:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <std+0x3c>)
 8007e90:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e92:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <std+0x40>)
 8007e94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e96:	4b05      	ldr	r3, [pc, #20]	; (8007eac <std+0x44>)
 8007e98:	6224      	str	r4, [r4, #32]
 8007e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8007e9c:	bd10      	pop	{r4, pc}
 8007e9e:	bf00      	nop
 8007ea0:	08008905 	.word	0x08008905
 8007ea4:	08008927 	.word	0x08008927
 8007ea8:	0800895f 	.word	0x0800895f
 8007eac:	08008983 	.word	0x08008983

08007eb0 <_cleanup_r>:
 8007eb0:	4901      	ldr	r1, [pc, #4]	; (8007eb8 <_cleanup_r+0x8>)
 8007eb2:	f000 b885 	b.w	8007fc0 <_fwalk_reent>
 8007eb6:	bf00      	nop
 8007eb8:	08008c5d 	.word	0x08008c5d

08007ebc <__sfmoreglue>:
 8007ebc:	b570      	push	{r4, r5, r6, lr}
 8007ebe:	1e4a      	subs	r2, r1, #1
 8007ec0:	2568      	movs	r5, #104	; 0x68
 8007ec2:	4355      	muls	r5, r2
 8007ec4:	460e      	mov	r6, r1
 8007ec6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007eca:	f000 f897 	bl	8007ffc <_malloc_r>
 8007ece:	4604      	mov	r4, r0
 8007ed0:	b140      	cbz	r0, 8007ee4 <__sfmoreglue+0x28>
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ed8:	300c      	adds	r0, #12
 8007eda:	60a0      	str	r0, [r4, #8]
 8007edc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ee0:	f7ff ff82 	bl	8007de8 <memset>
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	bd70      	pop	{r4, r5, r6, pc}

08007ee8 <__sinit>:
 8007ee8:	6983      	ldr	r3, [r0, #24]
 8007eea:	b510      	push	{r4, lr}
 8007eec:	4604      	mov	r4, r0
 8007eee:	bb33      	cbnz	r3, 8007f3e <__sinit+0x56>
 8007ef0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007ef4:	6503      	str	r3, [r0, #80]	; 0x50
 8007ef6:	4b12      	ldr	r3, [pc, #72]	; (8007f40 <__sinit+0x58>)
 8007ef8:	4a12      	ldr	r2, [pc, #72]	; (8007f44 <__sinit+0x5c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6282      	str	r2, [r0, #40]	; 0x28
 8007efe:	4298      	cmp	r0, r3
 8007f00:	bf04      	itt	eq
 8007f02:	2301      	moveq	r3, #1
 8007f04:	6183      	streq	r3, [r0, #24]
 8007f06:	f000 f81f 	bl	8007f48 <__sfp>
 8007f0a:	6060      	str	r0, [r4, #4]
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f000 f81b 	bl	8007f48 <__sfp>
 8007f12:	60a0      	str	r0, [r4, #8]
 8007f14:	4620      	mov	r0, r4
 8007f16:	f000 f817 	bl	8007f48 <__sfp>
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	60e0      	str	r0, [r4, #12]
 8007f1e:	2104      	movs	r1, #4
 8007f20:	6860      	ldr	r0, [r4, #4]
 8007f22:	f7ff ffa1 	bl	8007e68 <std>
 8007f26:	2201      	movs	r2, #1
 8007f28:	2109      	movs	r1, #9
 8007f2a:	68a0      	ldr	r0, [r4, #8]
 8007f2c:	f7ff ff9c 	bl	8007e68 <std>
 8007f30:	2202      	movs	r2, #2
 8007f32:	2112      	movs	r1, #18
 8007f34:	68e0      	ldr	r0, [r4, #12]
 8007f36:	f7ff ff97 	bl	8007e68 <std>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	61a3      	str	r3, [r4, #24]
 8007f3e:	bd10      	pop	{r4, pc}
 8007f40:	08009440 	.word	0x08009440
 8007f44:	08007eb1 	.word	0x08007eb1

08007f48 <__sfp>:
 8007f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4a:	4b1b      	ldr	r3, [pc, #108]	; (8007fb8 <__sfp+0x70>)
 8007f4c:	681e      	ldr	r6, [r3, #0]
 8007f4e:	69b3      	ldr	r3, [r6, #24]
 8007f50:	4607      	mov	r7, r0
 8007f52:	b913      	cbnz	r3, 8007f5a <__sfp+0x12>
 8007f54:	4630      	mov	r0, r6
 8007f56:	f7ff ffc7 	bl	8007ee8 <__sinit>
 8007f5a:	3648      	adds	r6, #72	; 0x48
 8007f5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f60:	3b01      	subs	r3, #1
 8007f62:	d503      	bpl.n	8007f6c <__sfp+0x24>
 8007f64:	6833      	ldr	r3, [r6, #0]
 8007f66:	b133      	cbz	r3, 8007f76 <__sfp+0x2e>
 8007f68:	6836      	ldr	r6, [r6, #0]
 8007f6a:	e7f7      	b.n	8007f5c <__sfp+0x14>
 8007f6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f70:	b16d      	cbz	r5, 8007f8e <__sfp+0x46>
 8007f72:	3468      	adds	r4, #104	; 0x68
 8007f74:	e7f4      	b.n	8007f60 <__sfp+0x18>
 8007f76:	2104      	movs	r1, #4
 8007f78:	4638      	mov	r0, r7
 8007f7a:	f7ff ff9f 	bl	8007ebc <__sfmoreglue>
 8007f7e:	6030      	str	r0, [r6, #0]
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d1f1      	bne.n	8007f68 <__sfp+0x20>
 8007f84:	230c      	movs	r3, #12
 8007f86:	603b      	str	r3, [r7, #0]
 8007f88:	4604      	mov	r4, r0
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f8e:	4b0b      	ldr	r3, [pc, #44]	; (8007fbc <__sfp+0x74>)
 8007f90:	6665      	str	r5, [r4, #100]	; 0x64
 8007f92:	e9c4 5500 	strd	r5, r5, [r4]
 8007f96:	60a5      	str	r5, [r4, #8]
 8007f98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007f9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007fa0:	2208      	movs	r2, #8
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fa8:	f7ff ff1e 	bl	8007de8 <memset>
 8007fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fb4:	e7e9      	b.n	8007f8a <__sfp+0x42>
 8007fb6:	bf00      	nop
 8007fb8:	08009440 	.word	0x08009440
 8007fbc:	ffff0001 	.word	0xffff0001

08007fc0 <_fwalk_reent>:
 8007fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc4:	4680      	mov	r8, r0
 8007fc6:	4689      	mov	r9, r1
 8007fc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fcc:	2600      	movs	r6, #0
 8007fce:	b914      	cbnz	r4, 8007fd6 <_fwalk_reent+0x16>
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fd6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007fda:	3f01      	subs	r7, #1
 8007fdc:	d501      	bpl.n	8007fe2 <_fwalk_reent+0x22>
 8007fde:	6824      	ldr	r4, [r4, #0]
 8007fe0:	e7f5      	b.n	8007fce <_fwalk_reent+0xe>
 8007fe2:	89ab      	ldrh	r3, [r5, #12]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d907      	bls.n	8007ff8 <_fwalk_reent+0x38>
 8007fe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fec:	3301      	adds	r3, #1
 8007fee:	d003      	beq.n	8007ff8 <_fwalk_reent+0x38>
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	47c8      	blx	r9
 8007ff6:	4306      	orrs	r6, r0
 8007ff8:	3568      	adds	r5, #104	; 0x68
 8007ffa:	e7ee      	b.n	8007fda <_fwalk_reent+0x1a>

08007ffc <_malloc_r>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	1ccd      	adds	r5, r1, #3
 8008000:	f025 0503 	bic.w	r5, r5, #3
 8008004:	3508      	adds	r5, #8
 8008006:	2d0c      	cmp	r5, #12
 8008008:	bf38      	it	cc
 800800a:	250c      	movcc	r5, #12
 800800c:	2d00      	cmp	r5, #0
 800800e:	4606      	mov	r6, r0
 8008010:	db01      	blt.n	8008016 <_malloc_r+0x1a>
 8008012:	42a9      	cmp	r1, r5
 8008014:	d903      	bls.n	800801e <_malloc_r+0x22>
 8008016:	230c      	movs	r3, #12
 8008018:	6033      	str	r3, [r6, #0]
 800801a:	2000      	movs	r0, #0
 800801c:	bd70      	pop	{r4, r5, r6, pc}
 800801e:	f000 fee1 	bl	8008de4 <__malloc_lock>
 8008022:	4a21      	ldr	r2, [pc, #132]	; (80080a8 <_malloc_r+0xac>)
 8008024:	6814      	ldr	r4, [r2, #0]
 8008026:	4621      	mov	r1, r4
 8008028:	b991      	cbnz	r1, 8008050 <_malloc_r+0x54>
 800802a:	4c20      	ldr	r4, [pc, #128]	; (80080ac <_malloc_r+0xb0>)
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	b91b      	cbnz	r3, 8008038 <_malloc_r+0x3c>
 8008030:	4630      	mov	r0, r6
 8008032:	f000 fc57 	bl	80088e4 <_sbrk_r>
 8008036:	6020      	str	r0, [r4, #0]
 8008038:	4629      	mov	r1, r5
 800803a:	4630      	mov	r0, r6
 800803c:	f000 fc52 	bl	80088e4 <_sbrk_r>
 8008040:	1c43      	adds	r3, r0, #1
 8008042:	d124      	bne.n	800808e <_malloc_r+0x92>
 8008044:	230c      	movs	r3, #12
 8008046:	6033      	str	r3, [r6, #0]
 8008048:	4630      	mov	r0, r6
 800804a:	f000 fecc 	bl	8008de6 <__malloc_unlock>
 800804e:	e7e4      	b.n	800801a <_malloc_r+0x1e>
 8008050:	680b      	ldr	r3, [r1, #0]
 8008052:	1b5b      	subs	r3, r3, r5
 8008054:	d418      	bmi.n	8008088 <_malloc_r+0x8c>
 8008056:	2b0b      	cmp	r3, #11
 8008058:	d90f      	bls.n	800807a <_malloc_r+0x7e>
 800805a:	600b      	str	r3, [r1, #0]
 800805c:	50cd      	str	r5, [r1, r3]
 800805e:	18cc      	adds	r4, r1, r3
 8008060:	4630      	mov	r0, r6
 8008062:	f000 fec0 	bl	8008de6 <__malloc_unlock>
 8008066:	f104 000b 	add.w	r0, r4, #11
 800806a:	1d23      	adds	r3, r4, #4
 800806c:	f020 0007 	bic.w	r0, r0, #7
 8008070:	1ac3      	subs	r3, r0, r3
 8008072:	d0d3      	beq.n	800801c <_malloc_r+0x20>
 8008074:	425a      	negs	r2, r3
 8008076:	50e2      	str	r2, [r4, r3]
 8008078:	e7d0      	b.n	800801c <_malloc_r+0x20>
 800807a:	428c      	cmp	r4, r1
 800807c:	684b      	ldr	r3, [r1, #4]
 800807e:	bf16      	itet	ne
 8008080:	6063      	strne	r3, [r4, #4]
 8008082:	6013      	streq	r3, [r2, #0]
 8008084:	460c      	movne	r4, r1
 8008086:	e7eb      	b.n	8008060 <_malloc_r+0x64>
 8008088:	460c      	mov	r4, r1
 800808a:	6849      	ldr	r1, [r1, #4]
 800808c:	e7cc      	b.n	8008028 <_malloc_r+0x2c>
 800808e:	1cc4      	adds	r4, r0, #3
 8008090:	f024 0403 	bic.w	r4, r4, #3
 8008094:	42a0      	cmp	r0, r4
 8008096:	d005      	beq.n	80080a4 <_malloc_r+0xa8>
 8008098:	1a21      	subs	r1, r4, r0
 800809a:	4630      	mov	r0, r6
 800809c:	f000 fc22 	bl	80088e4 <_sbrk_r>
 80080a0:	3001      	adds	r0, #1
 80080a2:	d0cf      	beq.n	8008044 <_malloc_r+0x48>
 80080a4:	6025      	str	r5, [r4, #0]
 80080a6:	e7db      	b.n	8008060 <_malloc_r+0x64>
 80080a8:	200001d8 	.word	0x200001d8
 80080ac:	200001dc 	.word	0x200001dc

080080b0 <__ssputs_r>:
 80080b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080b4:	688e      	ldr	r6, [r1, #8]
 80080b6:	429e      	cmp	r6, r3
 80080b8:	4682      	mov	sl, r0
 80080ba:	460c      	mov	r4, r1
 80080bc:	4690      	mov	r8, r2
 80080be:	4699      	mov	r9, r3
 80080c0:	d837      	bhi.n	8008132 <__ssputs_r+0x82>
 80080c2:	898a      	ldrh	r2, [r1, #12]
 80080c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080c8:	d031      	beq.n	800812e <__ssputs_r+0x7e>
 80080ca:	6825      	ldr	r5, [r4, #0]
 80080cc:	6909      	ldr	r1, [r1, #16]
 80080ce:	1a6f      	subs	r7, r5, r1
 80080d0:	6965      	ldr	r5, [r4, #20]
 80080d2:	2302      	movs	r3, #2
 80080d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80080dc:	f109 0301 	add.w	r3, r9, #1
 80080e0:	443b      	add	r3, r7
 80080e2:	429d      	cmp	r5, r3
 80080e4:	bf38      	it	cc
 80080e6:	461d      	movcc	r5, r3
 80080e8:	0553      	lsls	r3, r2, #21
 80080ea:	d530      	bpl.n	800814e <__ssputs_r+0x9e>
 80080ec:	4629      	mov	r1, r5
 80080ee:	f7ff ff85 	bl	8007ffc <_malloc_r>
 80080f2:	4606      	mov	r6, r0
 80080f4:	b950      	cbnz	r0, 800810c <__ssputs_r+0x5c>
 80080f6:	230c      	movs	r3, #12
 80080f8:	f8ca 3000 	str.w	r3, [sl]
 80080fc:	89a3      	ldrh	r3, [r4, #12]
 80080fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008102:	81a3      	strh	r3, [r4, #12]
 8008104:	f04f 30ff 	mov.w	r0, #4294967295
 8008108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800810c:	463a      	mov	r2, r7
 800810e:	6921      	ldr	r1, [r4, #16]
 8008110:	f000 fe44 	bl	8008d9c <memcpy>
 8008114:	89a3      	ldrh	r3, [r4, #12]
 8008116:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800811a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800811e:	81a3      	strh	r3, [r4, #12]
 8008120:	6126      	str	r6, [r4, #16]
 8008122:	6165      	str	r5, [r4, #20]
 8008124:	443e      	add	r6, r7
 8008126:	1bed      	subs	r5, r5, r7
 8008128:	6026      	str	r6, [r4, #0]
 800812a:	60a5      	str	r5, [r4, #8]
 800812c:	464e      	mov	r6, r9
 800812e:	454e      	cmp	r6, r9
 8008130:	d900      	bls.n	8008134 <__ssputs_r+0x84>
 8008132:	464e      	mov	r6, r9
 8008134:	4632      	mov	r2, r6
 8008136:	4641      	mov	r1, r8
 8008138:	6820      	ldr	r0, [r4, #0]
 800813a:	f000 fe3a 	bl	8008db2 <memmove>
 800813e:	68a3      	ldr	r3, [r4, #8]
 8008140:	1b9b      	subs	r3, r3, r6
 8008142:	60a3      	str	r3, [r4, #8]
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	441e      	add	r6, r3
 8008148:	6026      	str	r6, [r4, #0]
 800814a:	2000      	movs	r0, #0
 800814c:	e7dc      	b.n	8008108 <__ssputs_r+0x58>
 800814e:	462a      	mov	r2, r5
 8008150:	f000 fe98 	bl	8008e84 <_realloc_r>
 8008154:	4606      	mov	r6, r0
 8008156:	2800      	cmp	r0, #0
 8008158:	d1e2      	bne.n	8008120 <__ssputs_r+0x70>
 800815a:	6921      	ldr	r1, [r4, #16]
 800815c:	4650      	mov	r0, sl
 800815e:	f000 fe43 	bl	8008de8 <_free_r>
 8008162:	e7c8      	b.n	80080f6 <__ssputs_r+0x46>

08008164 <_svfiprintf_r>:
 8008164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008168:	461d      	mov	r5, r3
 800816a:	898b      	ldrh	r3, [r1, #12]
 800816c:	061f      	lsls	r7, r3, #24
 800816e:	b09d      	sub	sp, #116	; 0x74
 8008170:	4680      	mov	r8, r0
 8008172:	460c      	mov	r4, r1
 8008174:	4616      	mov	r6, r2
 8008176:	d50f      	bpl.n	8008198 <_svfiprintf_r+0x34>
 8008178:	690b      	ldr	r3, [r1, #16]
 800817a:	b96b      	cbnz	r3, 8008198 <_svfiprintf_r+0x34>
 800817c:	2140      	movs	r1, #64	; 0x40
 800817e:	f7ff ff3d 	bl	8007ffc <_malloc_r>
 8008182:	6020      	str	r0, [r4, #0]
 8008184:	6120      	str	r0, [r4, #16]
 8008186:	b928      	cbnz	r0, 8008194 <_svfiprintf_r+0x30>
 8008188:	230c      	movs	r3, #12
 800818a:	f8c8 3000 	str.w	r3, [r8]
 800818e:	f04f 30ff 	mov.w	r0, #4294967295
 8008192:	e0c8      	b.n	8008326 <_svfiprintf_r+0x1c2>
 8008194:	2340      	movs	r3, #64	; 0x40
 8008196:	6163      	str	r3, [r4, #20]
 8008198:	2300      	movs	r3, #0
 800819a:	9309      	str	r3, [sp, #36]	; 0x24
 800819c:	2320      	movs	r3, #32
 800819e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081a2:	2330      	movs	r3, #48	; 0x30
 80081a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081a8:	9503      	str	r5, [sp, #12]
 80081aa:	f04f 0b01 	mov.w	fp, #1
 80081ae:	4637      	mov	r7, r6
 80081b0:	463d      	mov	r5, r7
 80081b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80081b6:	b10b      	cbz	r3, 80081bc <_svfiprintf_r+0x58>
 80081b8:	2b25      	cmp	r3, #37	; 0x25
 80081ba:	d13e      	bne.n	800823a <_svfiprintf_r+0xd6>
 80081bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80081c0:	d00b      	beq.n	80081da <_svfiprintf_r+0x76>
 80081c2:	4653      	mov	r3, sl
 80081c4:	4632      	mov	r2, r6
 80081c6:	4621      	mov	r1, r4
 80081c8:	4640      	mov	r0, r8
 80081ca:	f7ff ff71 	bl	80080b0 <__ssputs_r>
 80081ce:	3001      	adds	r0, #1
 80081d0:	f000 80a4 	beq.w	800831c <_svfiprintf_r+0x1b8>
 80081d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d6:	4453      	add	r3, sl
 80081d8:	9309      	str	r3, [sp, #36]	; 0x24
 80081da:	783b      	ldrb	r3, [r7, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 809d 	beq.w	800831c <_svfiprintf_r+0x1b8>
 80081e2:	2300      	movs	r3, #0
 80081e4:	f04f 32ff 	mov.w	r2, #4294967295
 80081e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081ec:	9304      	str	r3, [sp, #16]
 80081ee:	9307      	str	r3, [sp, #28]
 80081f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081f4:	931a      	str	r3, [sp, #104]	; 0x68
 80081f6:	462f      	mov	r7, r5
 80081f8:	2205      	movs	r2, #5
 80081fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80081fe:	4850      	ldr	r0, [pc, #320]	; (8008340 <_svfiprintf_r+0x1dc>)
 8008200:	f7f8 f826 	bl	8000250 <memchr>
 8008204:	9b04      	ldr	r3, [sp, #16]
 8008206:	b9d0      	cbnz	r0, 800823e <_svfiprintf_r+0xda>
 8008208:	06d9      	lsls	r1, r3, #27
 800820a:	bf44      	itt	mi
 800820c:	2220      	movmi	r2, #32
 800820e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008212:	071a      	lsls	r2, r3, #28
 8008214:	bf44      	itt	mi
 8008216:	222b      	movmi	r2, #43	; 0x2b
 8008218:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800821c:	782a      	ldrb	r2, [r5, #0]
 800821e:	2a2a      	cmp	r2, #42	; 0x2a
 8008220:	d015      	beq.n	800824e <_svfiprintf_r+0xea>
 8008222:	9a07      	ldr	r2, [sp, #28]
 8008224:	462f      	mov	r7, r5
 8008226:	2000      	movs	r0, #0
 8008228:	250a      	movs	r5, #10
 800822a:	4639      	mov	r1, r7
 800822c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008230:	3b30      	subs	r3, #48	; 0x30
 8008232:	2b09      	cmp	r3, #9
 8008234:	d94d      	bls.n	80082d2 <_svfiprintf_r+0x16e>
 8008236:	b1b8      	cbz	r0, 8008268 <_svfiprintf_r+0x104>
 8008238:	e00f      	b.n	800825a <_svfiprintf_r+0xf6>
 800823a:	462f      	mov	r7, r5
 800823c:	e7b8      	b.n	80081b0 <_svfiprintf_r+0x4c>
 800823e:	4a40      	ldr	r2, [pc, #256]	; (8008340 <_svfiprintf_r+0x1dc>)
 8008240:	1a80      	subs	r0, r0, r2
 8008242:	fa0b f000 	lsl.w	r0, fp, r0
 8008246:	4318      	orrs	r0, r3
 8008248:	9004      	str	r0, [sp, #16]
 800824a:	463d      	mov	r5, r7
 800824c:	e7d3      	b.n	80081f6 <_svfiprintf_r+0x92>
 800824e:	9a03      	ldr	r2, [sp, #12]
 8008250:	1d11      	adds	r1, r2, #4
 8008252:	6812      	ldr	r2, [r2, #0]
 8008254:	9103      	str	r1, [sp, #12]
 8008256:	2a00      	cmp	r2, #0
 8008258:	db01      	blt.n	800825e <_svfiprintf_r+0xfa>
 800825a:	9207      	str	r2, [sp, #28]
 800825c:	e004      	b.n	8008268 <_svfiprintf_r+0x104>
 800825e:	4252      	negs	r2, r2
 8008260:	f043 0302 	orr.w	r3, r3, #2
 8008264:	9207      	str	r2, [sp, #28]
 8008266:	9304      	str	r3, [sp, #16]
 8008268:	783b      	ldrb	r3, [r7, #0]
 800826a:	2b2e      	cmp	r3, #46	; 0x2e
 800826c:	d10c      	bne.n	8008288 <_svfiprintf_r+0x124>
 800826e:	787b      	ldrb	r3, [r7, #1]
 8008270:	2b2a      	cmp	r3, #42	; 0x2a
 8008272:	d133      	bne.n	80082dc <_svfiprintf_r+0x178>
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	1d1a      	adds	r2, r3, #4
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	9203      	str	r2, [sp, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	bfb8      	it	lt
 8008280:	f04f 33ff 	movlt.w	r3, #4294967295
 8008284:	3702      	adds	r7, #2
 8008286:	9305      	str	r3, [sp, #20]
 8008288:	4d2e      	ldr	r5, [pc, #184]	; (8008344 <_svfiprintf_r+0x1e0>)
 800828a:	7839      	ldrb	r1, [r7, #0]
 800828c:	2203      	movs	r2, #3
 800828e:	4628      	mov	r0, r5
 8008290:	f7f7 ffde 	bl	8000250 <memchr>
 8008294:	b138      	cbz	r0, 80082a6 <_svfiprintf_r+0x142>
 8008296:	2340      	movs	r3, #64	; 0x40
 8008298:	1b40      	subs	r0, r0, r5
 800829a:	fa03 f000 	lsl.w	r0, r3, r0
 800829e:	9b04      	ldr	r3, [sp, #16]
 80082a0:	4303      	orrs	r3, r0
 80082a2:	3701      	adds	r7, #1
 80082a4:	9304      	str	r3, [sp, #16]
 80082a6:	7839      	ldrb	r1, [r7, #0]
 80082a8:	4827      	ldr	r0, [pc, #156]	; (8008348 <_svfiprintf_r+0x1e4>)
 80082aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082ae:	2206      	movs	r2, #6
 80082b0:	1c7e      	adds	r6, r7, #1
 80082b2:	f7f7 ffcd 	bl	8000250 <memchr>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d038      	beq.n	800832c <_svfiprintf_r+0x1c8>
 80082ba:	4b24      	ldr	r3, [pc, #144]	; (800834c <_svfiprintf_r+0x1e8>)
 80082bc:	bb13      	cbnz	r3, 8008304 <_svfiprintf_r+0x1a0>
 80082be:	9b03      	ldr	r3, [sp, #12]
 80082c0:	3307      	adds	r3, #7
 80082c2:	f023 0307 	bic.w	r3, r3, #7
 80082c6:	3308      	adds	r3, #8
 80082c8:	9303      	str	r3, [sp, #12]
 80082ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082cc:	444b      	add	r3, r9
 80082ce:	9309      	str	r3, [sp, #36]	; 0x24
 80082d0:	e76d      	b.n	80081ae <_svfiprintf_r+0x4a>
 80082d2:	fb05 3202 	mla	r2, r5, r2, r3
 80082d6:	2001      	movs	r0, #1
 80082d8:	460f      	mov	r7, r1
 80082da:	e7a6      	b.n	800822a <_svfiprintf_r+0xc6>
 80082dc:	2300      	movs	r3, #0
 80082de:	3701      	adds	r7, #1
 80082e0:	9305      	str	r3, [sp, #20]
 80082e2:	4619      	mov	r1, r3
 80082e4:	250a      	movs	r5, #10
 80082e6:	4638      	mov	r0, r7
 80082e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082ec:	3a30      	subs	r2, #48	; 0x30
 80082ee:	2a09      	cmp	r2, #9
 80082f0:	d903      	bls.n	80082fa <_svfiprintf_r+0x196>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d0c8      	beq.n	8008288 <_svfiprintf_r+0x124>
 80082f6:	9105      	str	r1, [sp, #20]
 80082f8:	e7c6      	b.n	8008288 <_svfiprintf_r+0x124>
 80082fa:	fb05 2101 	mla	r1, r5, r1, r2
 80082fe:	2301      	movs	r3, #1
 8008300:	4607      	mov	r7, r0
 8008302:	e7f0      	b.n	80082e6 <_svfiprintf_r+0x182>
 8008304:	ab03      	add	r3, sp, #12
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	4622      	mov	r2, r4
 800830a:	4b11      	ldr	r3, [pc, #68]	; (8008350 <_svfiprintf_r+0x1ec>)
 800830c:	a904      	add	r1, sp, #16
 800830e:	4640      	mov	r0, r8
 8008310:	f3af 8000 	nop.w
 8008314:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008318:	4681      	mov	r9, r0
 800831a:	d1d6      	bne.n	80082ca <_svfiprintf_r+0x166>
 800831c:	89a3      	ldrh	r3, [r4, #12]
 800831e:	065b      	lsls	r3, r3, #25
 8008320:	f53f af35 	bmi.w	800818e <_svfiprintf_r+0x2a>
 8008324:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008326:	b01d      	add	sp, #116	; 0x74
 8008328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832c:	ab03      	add	r3, sp, #12
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	4622      	mov	r2, r4
 8008332:	4b07      	ldr	r3, [pc, #28]	; (8008350 <_svfiprintf_r+0x1ec>)
 8008334:	a904      	add	r1, sp, #16
 8008336:	4640      	mov	r0, r8
 8008338:	f000 f9c2 	bl	80086c0 <_printf_i>
 800833c:	e7ea      	b.n	8008314 <_svfiprintf_r+0x1b0>
 800833e:	bf00      	nop
 8008340:	080094a4 	.word	0x080094a4
 8008344:	080094aa 	.word	0x080094aa
 8008348:	080094ae 	.word	0x080094ae
 800834c:	00000000 	.word	0x00000000
 8008350:	080080b1 	.word	0x080080b1

08008354 <__sfputc_r>:
 8008354:	6893      	ldr	r3, [r2, #8]
 8008356:	3b01      	subs	r3, #1
 8008358:	2b00      	cmp	r3, #0
 800835a:	b410      	push	{r4}
 800835c:	6093      	str	r3, [r2, #8]
 800835e:	da08      	bge.n	8008372 <__sfputc_r+0x1e>
 8008360:	6994      	ldr	r4, [r2, #24]
 8008362:	42a3      	cmp	r3, r4
 8008364:	db01      	blt.n	800836a <__sfputc_r+0x16>
 8008366:	290a      	cmp	r1, #10
 8008368:	d103      	bne.n	8008372 <__sfputc_r+0x1e>
 800836a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800836e:	f000 bb0d 	b.w	800898c <__swbuf_r>
 8008372:	6813      	ldr	r3, [r2, #0]
 8008374:	1c58      	adds	r0, r3, #1
 8008376:	6010      	str	r0, [r2, #0]
 8008378:	7019      	strb	r1, [r3, #0]
 800837a:	4608      	mov	r0, r1
 800837c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008380:	4770      	bx	lr

08008382 <__sfputs_r>:
 8008382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008384:	4606      	mov	r6, r0
 8008386:	460f      	mov	r7, r1
 8008388:	4614      	mov	r4, r2
 800838a:	18d5      	adds	r5, r2, r3
 800838c:	42ac      	cmp	r4, r5
 800838e:	d101      	bne.n	8008394 <__sfputs_r+0x12>
 8008390:	2000      	movs	r0, #0
 8008392:	e007      	b.n	80083a4 <__sfputs_r+0x22>
 8008394:	463a      	mov	r2, r7
 8008396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800839a:	4630      	mov	r0, r6
 800839c:	f7ff ffda 	bl	8008354 <__sfputc_r>
 80083a0:	1c43      	adds	r3, r0, #1
 80083a2:	d1f3      	bne.n	800838c <__sfputs_r+0xa>
 80083a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083a8 <_vfiprintf_r>:
 80083a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ac:	460c      	mov	r4, r1
 80083ae:	b09d      	sub	sp, #116	; 0x74
 80083b0:	4617      	mov	r7, r2
 80083b2:	461d      	mov	r5, r3
 80083b4:	4606      	mov	r6, r0
 80083b6:	b118      	cbz	r0, 80083c0 <_vfiprintf_r+0x18>
 80083b8:	6983      	ldr	r3, [r0, #24]
 80083ba:	b90b      	cbnz	r3, 80083c0 <_vfiprintf_r+0x18>
 80083bc:	f7ff fd94 	bl	8007ee8 <__sinit>
 80083c0:	4b7c      	ldr	r3, [pc, #496]	; (80085b4 <_vfiprintf_r+0x20c>)
 80083c2:	429c      	cmp	r4, r3
 80083c4:	d158      	bne.n	8008478 <_vfiprintf_r+0xd0>
 80083c6:	6874      	ldr	r4, [r6, #4]
 80083c8:	89a3      	ldrh	r3, [r4, #12]
 80083ca:	0718      	lsls	r0, r3, #28
 80083cc:	d55e      	bpl.n	800848c <_vfiprintf_r+0xe4>
 80083ce:	6923      	ldr	r3, [r4, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d05b      	beq.n	800848c <_vfiprintf_r+0xe4>
 80083d4:	2300      	movs	r3, #0
 80083d6:	9309      	str	r3, [sp, #36]	; 0x24
 80083d8:	2320      	movs	r3, #32
 80083da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083de:	2330      	movs	r3, #48	; 0x30
 80083e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083e4:	9503      	str	r5, [sp, #12]
 80083e6:	f04f 0b01 	mov.w	fp, #1
 80083ea:	46b8      	mov	r8, r7
 80083ec:	4645      	mov	r5, r8
 80083ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80083f2:	b10b      	cbz	r3, 80083f8 <_vfiprintf_r+0x50>
 80083f4:	2b25      	cmp	r3, #37	; 0x25
 80083f6:	d154      	bne.n	80084a2 <_vfiprintf_r+0xfa>
 80083f8:	ebb8 0a07 	subs.w	sl, r8, r7
 80083fc:	d00b      	beq.n	8008416 <_vfiprintf_r+0x6e>
 80083fe:	4653      	mov	r3, sl
 8008400:	463a      	mov	r2, r7
 8008402:	4621      	mov	r1, r4
 8008404:	4630      	mov	r0, r6
 8008406:	f7ff ffbc 	bl	8008382 <__sfputs_r>
 800840a:	3001      	adds	r0, #1
 800840c:	f000 80c2 	beq.w	8008594 <_vfiprintf_r+0x1ec>
 8008410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008412:	4453      	add	r3, sl
 8008414:	9309      	str	r3, [sp, #36]	; 0x24
 8008416:	f898 3000 	ldrb.w	r3, [r8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 80ba 	beq.w	8008594 <_vfiprintf_r+0x1ec>
 8008420:	2300      	movs	r3, #0
 8008422:	f04f 32ff 	mov.w	r2, #4294967295
 8008426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800842a:	9304      	str	r3, [sp, #16]
 800842c:	9307      	str	r3, [sp, #28]
 800842e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008432:	931a      	str	r3, [sp, #104]	; 0x68
 8008434:	46a8      	mov	r8, r5
 8008436:	2205      	movs	r2, #5
 8008438:	f818 1b01 	ldrb.w	r1, [r8], #1
 800843c:	485e      	ldr	r0, [pc, #376]	; (80085b8 <_vfiprintf_r+0x210>)
 800843e:	f7f7 ff07 	bl	8000250 <memchr>
 8008442:	9b04      	ldr	r3, [sp, #16]
 8008444:	bb78      	cbnz	r0, 80084a6 <_vfiprintf_r+0xfe>
 8008446:	06d9      	lsls	r1, r3, #27
 8008448:	bf44      	itt	mi
 800844a:	2220      	movmi	r2, #32
 800844c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008450:	071a      	lsls	r2, r3, #28
 8008452:	bf44      	itt	mi
 8008454:	222b      	movmi	r2, #43	; 0x2b
 8008456:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800845a:	782a      	ldrb	r2, [r5, #0]
 800845c:	2a2a      	cmp	r2, #42	; 0x2a
 800845e:	d02a      	beq.n	80084b6 <_vfiprintf_r+0x10e>
 8008460:	9a07      	ldr	r2, [sp, #28]
 8008462:	46a8      	mov	r8, r5
 8008464:	2000      	movs	r0, #0
 8008466:	250a      	movs	r5, #10
 8008468:	4641      	mov	r1, r8
 800846a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800846e:	3b30      	subs	r3, #48	; 0x30
 8008470:	2b09      	cmp	r3, #9
 8008472:	d969      	bls.n	8008548 <_vfiprintf_r+0x1a0>
 8008474:	b360      	cbz	r0, 80084d0 <_vfiprintf_r+0x128>
 8008476:	e024      	b.n	80084c2 <_vfiprintf_r+0x11a>
 8008478:	4b50      	ldr	r3, [pc, #320]	; (80085bc <_vfiprintf_r+0x214>)
 800847a:	429c      	cmp	r4, r3
 800847c:	d101      	bne.n	8008482 <_vfiprintf_r+0xda>
 800847e:	68b4      	ldr	r4, [r6, #8]
 8008480:	e7a2      	b.n	80083c8 <_vfiprintf_r+0x20>
 8008482:	4b4f      	ldr	r3, [pc, #316]	; (80085c0 <_vfiprintf_r+0x218>)
 8008484:	429c      	cmp	r4, r3
 8008486:	bf08      	it	eq
 8008488:	68f4      	ldreq	r4, [r6, #12]
 800848a:	e79d      	b.n	80083c8 <_vfiprintf_r+0x20>
 800848c:	4621      	mov	r1, r4
 800848e:	4630      	mov	r0, r6
 8008490:	f000 fae0 	bl	8008a54 <__swsetup_r>
 8008494:	2800      	cmp	r0, #0
 8008496:	d09d      	beq.n	80083d4 <_vfiprintf_r+0x2c>
 8008498:	f04f 30ff 	mov.w	r0, #4294967295
 800849c:	b01d      	add	sp, #116	; 0x74
 800849e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a2:	46a8      	mov	r8, r5
 80084a4:	e7a2      	b.n	80083ec <_vfiprintf_r+0x44>
 80084a6:	4a44      	ldr	r2, [pc, #272]	; (80085b8 <_vfiprintf_r+0x210>)
 80084a8:	1a80      	subs	r0, r0, r2
 80084aa:	fa0b f000 	lsl.w	r0, fp, r0
 80084ae:	4318      	orrs	r0, r3
 80084b0:	9004      	str	r0, [sp, #16]
 80084b2:	4645      	mov	r5, r8
 80084b4:	e7be      	b.n	8008434 <_vfiprintf_r+0x8c>
 80084b6:	9a03      	ldr	r2, [sp, #12]
 80084b8:	1d11      	adds	r1, r2, #4
 80084ba:	6812      	ldr	r2, [r2, #0]
 80084bc:	9103      	str	r1, [sp, #12]
 80084be:	2a00      	cmp	r2, #0
 80084c0:	db01      	blt.n	80084c6 <_vfiprintf_r+0x11e>
 80084c2:	9207      	str	r2, [sp, #28]
 80084c4:	e004      	b.n	80084d0 <_vfiprintf_r+0x128>
 80084c6:	4252      	negs	r2, r2
 80084c8:	f043 0302 	orr.w	r3, r3, #2
 80084cc:	9207      	str	r2, [sp, #28]
 80084ce:	9304      	str	r3, [sp, #16]
 80084d0:	f898 3000 	ldrb.w	r3, [r8]
 80084d4:	2b2e      	cmp	r3, #46	; 0x2e
 80084d6:	d10e      	bne.n	80084f6 <_vfiprintf_r+0x14e>
 80084d8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80084dc:	2b2a      	cmp	r3, #42	; 0x2a
 80084de:	d138      	bne.n	8008552 <_vfiprintf_r+0x1aa>
 80084e0:	9b03      	ldr	r3, [sp, #12]
 80084e2:	1d1a      	adds	r2, r3, #4
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	9203      	str	r2, [sp, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	bfb8      	it	lt
 80084ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80084f0:	f108 0802 	add.w	r8, r8, #2
 80084f4:	9305      	str	r3, [sp, #20]
 80084f6:	4d33      	ldr	r5, [pc, #204]	; (80085c4 <_vfiprintf_r+0x21c>)
 80084f8:	f898 1000 	ldrb.w	r1, [r8]
 80084fc:	2203      	movs	r2, #3
 80084fe:	4628      	mov	r0, r5
 8008500:	f7f7 fea6 	bl	8000250 <memchr>
 8008504:	b140      	cbz	r0, 8008518 <_vfiprintf_r+0x170>
 8008506:	2340      	movs	r3, #64	; 0x40
 8008508:	1b40      	subs	r0, r0, r5
 800850a:	fa03 f000 	lsl.w	r0, r3, r0
 800850e:	9b04      	ldr	r3, [sp, #16]
 8008510:	4303      	orrs	r3, r0
 8008512:	f108 0801 	add.w	r8, r8, #1
 8008516:	9304      	str	r3, [sp, #16]
 8008518:	f898 1000 	ldrb.w	r1, [r8]
 800851c:	482a      	ldr	r0, [pc, #168]	; (80085c8 <_vfiprintf_r+0x220>)
 800851e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008522:	2206      	movs	r2, #6
 8008524:	f108 0701 	add.w	r7, r8, #1
 8008528:	f7f7 fe92 	bl	8000250 <memchr>
 800852c:	2800      	cmp	r0, #0
 800852e:	d037      	beq.n	80085a0 <_vfiprintf_r+0x1f8>
 8008530:	4b26      	ldr	r3, [pc, #152]	; (80085cc <_vfiprintf_r+0x224>)
 8008532:	bb1b      	cbnz	r3, 800857c <_vfiprintf_r+0x1d4>
 8008534:	9b03      	ldr	r3, [sp, #12]
 8008536:	3307      	adds	r3, #7
 8008538:	f023 0307 	bic.w	r3, r3, #7
 800853c:	3308      	adds	r3, #8
 800853e:	9303      	str	r3, [sp, #12]
 8008540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008542:	444b      	add	r3, r9
 8008544:	9309      	str	r3, [sp, #36]	; 0x24
 8008546:	e750      	b.n	80083ea <_vfiprintf_r+0x42>
 8008548:	fb05 3202 	mla	r2, r5, r2, r3
 800854c:	2001      	movs	r0, #1
 800854e:	4688      	mov	r8, r1
 8008550:	e78a      	b.n	8008468 <_vfiprintf_r+0xc0>
 8008552:	2300      	movs	r3, #0
 8008554:	f108 0801 	add.w	r8, r8, #1
 8008558:	9305      	str	r3, [sp, #20]
 800855a:	4619      	mov	r1, r3
 800855c:	250a      	movs	r5, #10
 800855e:	4640      	mov	r0, r8
 8008560:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008564:	3a30      	subs	r2, #48	; 0x30
 8008566:	2a09      	cmp	r2, #9
 8008568:	d903      	bls.n	8008572 <_vfiprintf_r+0x1ca>
 800856a:	2b00      	cmp	r3, #0
 800856c:	d0c3      	beq.n	80084f6 <_vfiprintf_r+0x14e>
 800856e:	9105      	str	r1, [sp, #20]
 8008570:	e7c1      	b.n	80084f6 <_vfiprintf_r+0x14e>
 8008572:	fb05 2101 	mla	r1, r5, r1, r2
 8008576:	2301      	movs	r3, #1
 8008578:	4680      	mov	r8, r0
 800857a:	e7f0      	b.n	800855e <_vfiprintf_r+0x1b6>
 800857c:	ab03      	add	r3, sp, #12
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	4622      	mov	r2, r4
 8008582:	4b13      	ldr	r3, [pc, #76]	; (80085d0 <_vfiprintf_r+0x228>)
 8008584:	a904      	add	r1, sp, #16
 8008586:	4630      	mov	r0, r6
 8008588:	f3af 8000 	nop.w
 800858c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008590:	4681      	mov	r9, r0
 8008592:	d1d5      	bne.n	8008540 <_vfiprintf_r+0x198>
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	065b      	lsls	r3, r3, #25
 8008598:	f53f af7e 	bmi.w	8008498 <_vfiprintf_r+0xf0>
 800859c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800859e:	e77d      	b.n	800849c <_vfiprintf_r+0xf4>
 80085a0:	ab03      	add	r3, sp, #12
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	4622      	mov	r2, r4
 80085a6:	4b0a      	ldr	r3, [pc, #40]	; (80085d0 <_vfiprintf_r+0x228>)
 80085a8:	a904      	add	r1, sp, #16
 80085aa:	4630      	mov	r0, r6
 80085ac:	f000 f888 	bl	80086c0 <_printf_i>
 80085b0:	e7ec      	b.n	800858c <_vfiprintf_r+0x1e4>
 80085b2:	bf00      	nop
 80085b4:	08009464 	.word	0x08009464
 80085b8:	080094a4 	.word	0x080094a4
 80085bc:	08009484 	.word	0x08009484
 80085c0:	08009444 	.word	0x08009444
 80085c4:	080094aa 	.word	0x080094aa
 80085c8:	080094ae 	.word	0x080094ae
 80085cc:	00000000 	.word	0x00000000
 80085d0:	08008383 	.word	0x08008383

080085d4 <_printf_common>:
 80085d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d8:	4691      	mov	r9, r2
 80085da:	461f      	mov	r7, r3
 80085dc:	688a      	ldr	r2, [r1, #8]
 80085de:	690b      	ldr	r3, [r1, #16]
 80085e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085e4:	4293      	cmp	r3, r2
 80085e6:	bfb8      	it	lt
 80085e8:	4613      	movlt	r3, r2
 80085ea:	f8c9 3000 	str.w	r3, [r9]
 80085ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085f2:	4606      	mov	r6, r0
 80085f4:	460c      	mov	r4, r1
 80085f6:	b112      	cbz	r2, 80085fe <_printf_common+0x2a>
 80085f8:	3301      	adds	r3, #1
 80085fa:	f8c9 3000 	str.w	r3, [r9]
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	0699      	lsls	r1, r3, #26
 8008602:	bf42      	ittt	mi
 8008604:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008608:	3302      	addmi	r3, #2
 800860a:	f8c9 3000 	strmi.w	r3, [r9]
 800860e:	6825      	ldr	r5, [r4, #0]
 8008610:	f015 0506 	ands.w	r5, r5, #6
 8008614:	d107      	bne.n	8008626 <_printf_common+0x52>
 8008616:	f104 0a19 	add.w	sl, r4, #25
 800861a:	68e3      	ldr	r3, [r4, #12]
 800861c:	f8d9 2000 	ldr.w	r2, [r9]
 8008620:	1a9b      	subs	r3, r3, r2
 8008622:	42ab      	cmp	r3, r5
 8008624:	dc28      	bgt.n	8008678 <_printf_common+0xa4>
 8008626:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800862a:	6822      	ldr	r2, [r4, #0]
 800862c:	3300      	adds	r3, #0
 800862e:	bf18      	it	ne
 8008630:	2301      	movne	r3, #1
 8008632:	0692      	lsls	r2, r2, #26
 8008634:	d42d      	bmi.n	8008692 <_printf_common+0xbe>
 8008636:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800863a:	4639      	mov	r1, r7
 800863c:	4630      	mov	r0, r6
 800863e:	47c0      	blx	r8
 8008640:	3001      	adds	r0, #1
 8008642:	d020      	beq.n	8008686 <_printf_common+0xb2>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	68e5      	ldr	r5, [r4, #12]
 8008648:	f8d9 2000 	ldr.w	r2, [r9]
 800864c:	f003 0306 	and.w	r3, r3, #6
 8008650:	2b04      	cmp	r3, #4
 8008652:	bf08      	it	eq
 8008654:	1aad      	subeq	r5, r5, r2
 8008656:	68a3      	ldr	r3, [r4, #8]
 8008658:	6922      	ldr	r2, [r4, #16]
 800865a:	bf0c      	ite	eq
 800865c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008660:	2500      	movne	r5, #0
 8008662:	4293      	cmp	r3, r2
 8008664:	bfc4      	itt	gt
 8008666:	1a9b      	subgt	r3, r3, r2
 8008668:	18ed      	addgt	r5, r5, r3
 800866a:	f04f 0900 	mov.w	r9, #0
 800866e:	341a      	adds	r4, #26
 8008670:	454d      	cmp	r5, r9
 8008672:	d11a      	bne.n	80086aa <_printf_common+0xd6>
 8008674:	2000      	movs	r0, #0
 8008676:	e008      	b.n	800868a <_printf_common+0xb6>
 8008678:	2301      	movs	r3, #1
 800867a:	4652      	mov	r2, sl
 800867c:	4639      	mov	r1, r7
 800867e:	4630      	mov	r0, r6
 8008680:	47c0      	blx	r8
 8008682:	3001      	adds	r0, #1
 8008684:	d103      	bne.n	800868e <_printf_common+0xba>
 8008686:	f04f 30ff 	mov.w	r0, #4294967295
 800868a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800868e:	3501      	adds	r5, #1
 8008690:	e7c3      	b.n	800861a <_printf_common+0x46>
 8008692:	18e1      	adds	r1, r4, r3
 8008694:	1c5a      	adds	r2, r3, #1
 8008696:	2030      	movs	r0, #48	; 0x30
 8008698:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800869c:	4422      	add	r2, r4
 800869e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086a6:	3302      	adds	r3, #2
 80086a8:	e7c5      	b.n	8008636 <_printf_common+0x62>
 80086aa:	2301      	movs	r3, #1
 80086ac:	4622      	mov	r2, r4
 80086ae:	4639      	mov	r1, r7
 80086b0:	4630      	mov	r0, r6
 80086b2:	47c0      	blx	r8
 80086b4:	3001      	adds	r0, #1
 80086b6:	d0e6      	beq.n	8008686 <_printf_common+0xb2>
 80086b8:	f109 0901 	add.w	r9, r9, #1
 80086bc:	e7d8      	b.n	8008670 <_printf_common+0x9c>
	...

080086c0 <_printf_i>:
 80086c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80086c8:	460c      	mov	r4, r1
 80086ca:	7e09      	ldrb	r1, [r1, #24]
 80086cc:	b085      	sub	sp, #20
 80086ce:	296e      	cmp	r1, #110	; 0x6e
 80086d0:	4617      	mov	r7, r2
 80086d2:	4606      	mov	r6, r0
 80086d4:	4698      	mov	r8, r3
 80086d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086d8:	f000 80b3 	beq.w	8008842 <_printf_i+0x182>
 80086dc:	d822      	bhi.n	8008724 <_printf_i+0x64>
 80086de:	2963      	cmp	r1, #99	; 0x63
 80086e0:	d036      	beq.n	8008750 <_printf_i+0x90>
 80086e2:	d80a      	bhi.n	80086fa <_printf_i+0x3a>
 80086e4:	2900      	cmp	r1, #0
 80086e6:	f000 80b9 	beq.w	800885c <_printf_i+0x19c>
 80086ea:	2958      	cmp	r1, #88	; 0x58
 80086ec:	f000 8083 	beq.w	80087f6 <_printf_i+0x136>
 80086f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80086f8:	e032      	b.n	8008760 <_printf_i+0xa0>
 80086fa:	2964      	cmp	r1, #100	; 0x64
 80086fc:	d001      	beq.n	8008702 <_printf_i+0x42>
 80086fe:	2969      	cmp	r1, #105	; 0x69
 8008700:	d1f6      	bne.n	80086f0 <_printf_i+0x30>
 8008702:	6820      	ldr	r0, [r4, #0]
 8008704:	6813      	ldr	r3, [r2, #0]
 8008706:	0605      	lsls	r5, r0, #24
 8008708:	f103 0104 	add.w	r1, r3, #4
 800870c:	d52a      	bpl.n	8008764 <_printf_i+0xa4>
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	6011      	str	r1, [r2, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	da03      	bge.n	800871e <_printf_i+0x5e>
 8008716:	222d      	movs	r2, #45	; 0x2d
 8008718:	425b      	negs	r3, r3
 800871a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800871e:	486f      	ldr	r0, [pc, #444]	; (80088dc <_printf_i+0x21c>)
 8008720:	220a      	movs	r2, #10
 8008722:	e039      	b.n	8008798 <_printf_i+0xd8>
 8008724:	2973      	cmp	r1, #115	; 0x73
 8008726:	f000 809d 	beq.w	8008864 <_printf_i+0x1a4>
 800872a:	d808      	bhi.n	800873e <_printf_i+0x7e>
 800872c:	296f      	cmp	r1, #111	; 0x6f
 800872e:	d020      	beq.n	8008772 <_printf_i+0xb2>
 8008730:	2970      	cmp	r1, #112	; 0x70
 8008732:	d1dd      	bne.n	80086f0 <_printf_i+0x30>
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	f043 0320 	orr.w	r3, r3, #32
 800873a:	6023      	str	r3, [r4, #0]
 800873c:	e003      	b.n	8008746 <_printf_i+0x86>
 800873e:	2975      	cmp	r1, #117	; 0x75
 8008740:	d017      	beq.n	8008772 <_printf_i+0xb2>
 8008742:	2978      	cmp	r1, #120	; 0x78
 8008744:	d1d4      	bne.n	80086f0 <_printf_i+0x30>
 8008746:	2378      	movs	r3, #120	; 0x78
 8008748:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800874c:	4864      	ldr	r0, [pc, #400]	; (80088e0 <_printf_i+0x220>)
 800874e:	e055      	b.n	80087fc <_printf_i+0x13c>
 8008750:	6813      	ldr	r3, [r2, #0]
 8008752:	1d19      	adds	r1, r3, #4
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	6011      	str	r1, [r2, #0]
 8008758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800875c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008760:	2301      	movs	r3, #1
 8008762:	e08c      	b.n	800887e <_printf_i+0x1be>
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	6011      	str	r1, [r2, #0]
 8008768:	f010 0f40 	tst.w	r0, #64	; 0x40
 800876c:	bf18      	it	ne
 800876e:	b21b      	sxthne	r3, r3
 8008770:	e7cf      	b.n	8008712 <_printf_i+0x52>
 8008772:	6813      	ldr	r3, [r2, #0]
 8008774:	6825      	ldr	r5, [r4, #0]
 8008776:	1d18      	adds	r0, r3, #4
 8008778:	6010      	str	r0, [r2, #0]
 800877a:	0628      	lsls	r0, r5, #24
 800877c:	d501      	bpl.n	8008782 <_printf_i+0xc2>
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	e002      	b.n	8008788 <_printf_i+0xc8>
 8008782:	0668      	lsls	r0, r5, #25
 8008784:	d5fb      	bpl.n	800877e <_printf_i+0xbe>
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	4854      	ldr	r0, [pc, #336]	; (80088dc <_printf_i+0x21c>)
 800878a:	296f      	cmp	r1, #111	; 0x6f
 800878c:	bf14      	ite	ne
 800878e:	220a      	movne	r2, #10
 8008790:	2208      	moveq	r2, #8
 8008792:	2100      	movs	r1, #0
 8008794:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008798:	6865      	ldr	r5, [r4, #4]
 800879a:	60a5      	str	r5, [r4, #8]
 800879c:	2d00      	cmp	r5, #0
 800879e:	f2c0 8095 	blt.w	80088cc <_printf_i+0x20c>
 80087a2:	6821      	ldr	r1, [r4, #0]
 80087a4:	f021 0104 	bic.w	r1, r1, #4
 80087a8:	6021      	str	r1, [r4, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d13d      	bne.n	800882a <_printf_i+0x16a>
 80087ae:	2d00      	cmp	r5, #0
 80087b0:	f040 808e 	bne.w	80088d0 <_printf_i+0x210>
 80087b4:	4665      	mov	r5, ip
 80087b6:	2a08      	cmp	r2, #8
 80087b8:	d10b      	bne.n	80087d2 <_printf_i+0x112>
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	07db      	lsls	r3, r3, #31
 80087be:	d508      	bpl.n	80087d2 <_printf_i+0x112>
 80087c0:	6923      	ldr	r3, [r4, #16]
 80087c2:	6862      	ldr	r2, [r4, #4]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	bfde      	ittt	le
 80087c8:	2330      	movle	r3, #48	; 0x30
 80087ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087d2:	ebac 0305 	sub.w	r3, ip, r5
 80087d6:	6123      	str	r3, [r4, #16]
 80087d8:	f8cd 8000 	str.w	r8, [sp]
 80087dc:	463b      	mov	r3, r7
 80087de:	aa03      	add	r2, sp, #12
 80087e0:	4621      	mov	r1, r4
 80087e2:	4630      	mov	r0, r6
 80087e4:	f7ff fef6 	bl	80085d4 <_printf_common>
 80087e8:	3001      	adds	r0, #1
 80087ea:	d14d      	bne.n	8008888 <_printf_i+0x1c8>
 80087ec:	f04f 30ff 	mov.w	r0, #4294967295
 80087f0:	b005      	add	sp, #20
 80087f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087f6:	4839      	ldr	r0, [pc, #228]	; (80088dc <_printf_i+0x21c>)
 80087f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80087fc:	6813      	ldr	r3, [r2, #0]
 80087fe:	6821      	ldr	r1, [r4, #0]
 8008800:	1d1d      	adds	r5, r3, #4
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6015      	str	r5, [r2, #0]
 8008806:	060a      	lsls	r2, r1, #24
 8008808:	d50b      	bpl.n	8008822 <_printf_i+0x162>
 800880a:	07ca      	lsls	r2, r1, #31
 800880c:	bf44      	itt	mi
 800880e:	f041 0120 	orrmi.w	r1, r1, #32
 8008812:	6021      	strmi	r1, [r4, #0]
 8008814:	b91b      	cbnz	r3, 800881e <_printf_i+0x15e>
 8008816:	6822      	ldr	r2, [r4, #0]
 8008818:	f022 0220 	bic.w	r2, r2, #32
 800881c:	6022      	str	r2, [r4, #0]
 800881e:	2210      	movs	r2, #16
 8008820:	e7b7      	b.n	8008792 <_printf_i+0xd2>
 8008822:	064d      	lsls	r5, r1, #25
 8008824:	bf48      	it	mi
 8008826:	b29b      	uxthmi	r3, r3
 8008828:	e7ef      	b.n	800880a <_printf_i+0x14a>
 800882a:	4665      	mov	r5, ip
 800882c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008830:	fb02 3311 	mls	r3, r2, r1, r3
 8008834:	5cc3      	ldrb	r3, [r0, r3]
 8008836:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800883a:	460b      	mov	r3, r1
 800883c:	2900      	cmp	r1, #0
 800883e:	d1f5      	bne.n	800882c <_printf_i+0x16c>
 8008840:	e7b9      	b.n	80087b6 <_printf_i+0xf6>
 8008842:	6813      	ldr	r3, [r2, #0]
 8008844:	6825      	ldr	r5, [r4, #0]
 8008846:	6961      	ldr	r1, [r4, #20]
 8008848:	1d18      	adds	r0, r3, #4
 800884a:	6010      	str	r0, [r2, #0]
 800884c:	0628      	lsls	r0, r5, #24
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	d501      	bpl.n	8008856 <_printf_i+0x196>
 8008852:	6019      	str	r1, [r3, #0]
 8008854:	e002      	b.n	800885c <_printf_i+0x19c>
 8008856:	066a      	lsls	r2, r5, #25
 8008858:	d5fb      	bpl.n	8008852 <_printf_i+0x192>
 800885a:	8019      	strh	r1, [r3, #0]
 800885c:	2300      	movs	r3, #0
 800885e:	6123      	str	r3, [r4, #16]
 8008860:	4665      	mov	r5, ip
 8008862:	e7b9      	b.n	80087d8 <_printf_i+0x118>
 8008864:	6813      	ldr	r3, [r2, #0]
 8008866:	1d19      	adds	r1, r3, #4
 8008868:	6011      	str	r1, [r2, #0]
 800886a:	681d      	ldr	r5, [r3, #0]
 800886c:	6862      	ldr	r2, [r4, #4]
 800886e:	2100      	movs	r1, #0
 8008870:	4628      	mov	r0, r5
 8008872:	f7f7 fced 	bl	8000250 <memchr>
 8008876:	b108      	cbz	r0, 800887c <_printf_i+0x1bc>
 8008878:	1b40      	subs	r0, r0, r5
 800887a:	6060      	str	r0, [r4, #4]
 800887c:	6863      	ldr	r3, [r4, #4]
 800887e:	6123      	str	r3, [r4, #16]
 8008880:	2300      	movs	r3, #0
 8008882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008886:	e7a7      	b.n	80087d8 <_printf_i+0x118>
 8008888:	6923      	ldr	r3, [r4, #16]
 800888a:	462a      	mov	r2, r5
 800888c:	4639      	mov	r1, r7
 800888e:	4630      	mov	r0, r6
 8008890:	47c0      	blx	r8
 8008892:	3001      	adds	r0, #1
 8008894:	d0aa      	beq.n	80087ec <_printf_i+0x12c>
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	079b      	lsls	r3, r3, #30
 800889a:	d413      	bmi.n	80088c4 <_printf_i+0x204>
 800889c:	68e0      	ldr	r0, [r4, #12]
 800889e:	9b03      	ldr	r3, [sp, #12]
 80088a0:	4298      	cmp	r0, r3
 80088a2:	bfb8      	it	lt
 80088a4:	4618      	movlt	r0, r3
 80088a6:	e7a3      	b.n	80087f0 <_printf_i+0x130>
 80088a8:	2301      	movs	r3, #1
 80088aa:	464a      	mov	r2, r9
 80088ac:	4639      	mov	r1, r7
 80088ae:	4630      	mov	r0, r6
 80088b0:	47c0      	blx	r8
 80088b2:	3001      	adds	r0, #1
 80088b4:	d09a      	beq.n	80087ec <_printf_i+0x12c>
 80088b6:	3501      	adds	r5, #1
 80088b8:	68e3      	ldr	r3, [r4, #12]
 80088ba:	9a03      	ldr	r2, [sp, #12]
 80088bc:	1a9b      	subs	r3, r3, r2
 80088be:	42ab      	cmp	r3, r5
 80088c0:	dcf2      	bgt.n	80088a8 <_printf_i+0x1e8>
 80088c2:	e7eb      	b.n	800889c <_printf_i+0x1dc>
 80088c4:	2500      	movs	r5, #0
 80088c6:	f104 0919 	add.w	r9, r4, #25
 80088ca:	e7f5      	b.n	80088b8 <_printf_i+0x1f8>
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1ac      	bne.n	800882a <_printf_i+0x16a>
 80088d0:	7803      	ldrb	r3, [r0, #0]
 80088d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088da:	e76c      	b.n	80087b6 <_printf_i+0xf6>
 80088dc:	080094b5 	.word	0x080094b5
 80088e0:	080094c6 	.word	0x080094c6

080088e4 <_sbrk_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4c06      	ldr	r4, [pc, #24]	; (8008900 <_sbrk_r+0x1c>)
 80088e8:	2300      	movs	r3, #0
 80088ea:	4605      	mov	r5, r0
 80088ec:	4608      	mov	r0, r1
 80088ee:	6023      	str	r3, [r4, #0]
 80088f0:	f7f8 fefe 	bl	80016f0 <_sbrk>
 80088f4:	1c43      	adds	r3, r0, #1
 80088f6:	d102      	bne.n	80088fe <_sbrk_r+0x1a>
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	b103      	cbz	r3, 80088fe <_sbrk_r+0x1a>
 80088fc:	602b      	str	r3, [r5, #0]
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	20000794 	.word	0x20000794

08008904 <__sread>:
 8008904:	b510      	push	{r4, lr}
 8008906:	460c      	mov	r4, r1
 8008908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800890c:	f000 fae0 	bl	8008ed0 <_read_r>
 8008910:	2800      	cmp	r0, #0
 8008912:	bfab      	itete	ge
 8008914:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008916:	89a3      	ldrhlt	r3, [r4, #12]
 8008918:	181b      	addge	r3, r3, r0
 800891a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800891e:	bfac      	ite	ge
 8008920:	6563      	strge	r3, [r4, #84]	; 0x54
 8008922:	81a3      	strhlt	r3, [r4, #12]
 8008924:	bd10      	pop	{r4, pc}

08008926 <__swrite>:
 8008926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800892a:	461f      	mov	r7, r3
 800892c:	898b      	ldrh	r3, [r1, #12]
 800892e:	05db      	lsls	r3, r3, #23
 8008930:	4605      	mov	r5, r0
 8008932:	460c      	mov	r4, r1
 8008934:	4616      	mov	r6, r2
 8008936:	d505      	bpl.n	8008944 <__swrite+0x1e>
 8008938:	2302      	movs	r3, #2
 800893a:	2200      	movs	r2, #0
 800893c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008940:	f000 f9b6 	bl	8008cb0 <_lseek_r>
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800894a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800894e:	81a3      	strh	r3, [r4, #12]
 8008950:	4632      	mov	r2, r6
 8008952:	463b      	mov	r3, r7
 8008954:	4628      	mov	r0, r5
 8008956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800895a:	f000 b869 	b.w	8008a30 <_write_r>

0800895e <__sseek>:
 800895e:	b510      	push	{r4, lr}
 8008960:	460c      	mov	r4, r1
 8008962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008966:	f000 f9a3 	bl	8008cb0 <_lseek_r>
 800896a:	1c43      	adds	r3, r0, #1
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	bf15      	itete	ne
 8008970:	6560      	strne	r0, [r4, #84]	; 0x54
 8008972:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008976:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800897a:	81a3      	strheq	r3, [r4, #12]
 800897c:	bf18      	it	ne
 800897e:	81a3      	strhne	r3, [r4, #12]
 8008980:	bd10      	pop	{r4, pc}

08008982 <__sclose>:
 8008982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008986:	f000 b8d3 	b.w	8008b30 <_close_r>
	...

0800898c <__swbuf_r>:
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898e:	460e      	mov	r6, r1
 8008990:	4614      	mov	r4, r2
 8008992:	4605      	mov	r5, r0
 8008994:	b118      	cbz	r0, 800899e <__swbuf_r+0x12>
 8008996:	6983      	ldr	r3, [r0, #24]
 8008998:	b90b      	cbnz	r3, 800899e <__swbuf_r+0x12>
 800899a:	f7ff faa5 	bl	8007ee8 <__sinit>
 800899e:	4b21      	ldr	r3, [pc, #132]	; (8008a24 <__swbuf_r+0x98>)
 80089a0:	429c      	cmp	r4, r3
 80089a2:	d12a      	bne.n	80089fa <__swbuf_r+0x6e>
 80089a4:	686c      	ldr	r4, [r5, #4]
 80089a6:	69a3      	ldr	r3, [r4, #24]
 80089a8:	60a3      	str	r3, [r4, #8]
 80089aa:	89a3      	ldrh	r3, [r4, #12]
 80089ac:	071a      	lsls	r2, r3, #28
 80089ae:	d52e      	bpl.n	8008a0e <__swbuf_r+0x82>
 80089b0:	6923      	ldr	r3, [r4, #16]
 80089b2:	b363      	cbz	r3, 8008a0e <__swbuf_r+0x82>
 80089b4:	6923      	ldr	r3, [r4, #16]
 80089b6:	6820      	ldr	r0, [r4, #0]
 80089b8:	1ac0      	subs	r0, r0, r3
 80089ba:	6963      	ldr	r3, [r4, #20]
 80089bc:	b2f6      	uxtb	r6, r6
 80089be:	4283      	cmp	r3, r0
 80089c0:	4637      	mov	r7, r6
 80089c2:	dc04      	bgt.n	80089ce <__swbuf_r+0x42>
 80089c4:	4621      	mov	r1, r4
 80089c6:	4628      	mov	r0, r5
 80089c8:	f000 f948 	bl	8008c5c <_fflush_r>
 80089cc:	bb28      	cbnz	r0, 8008a1a <__swbuf_r+0x8e>
 80089ce:	68a3      	ldr	r3, [r4, #8]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	60a3      	str	r3, [r4, #8]
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	1c5a      	adds	r2, r3, #1
 80089d8:	6022      	str	r2, [r4, #0]
 80089da:	701e      	strb	r6, [r3, #0]
 80089dc:	6963      	ldr	r3, [r4, #20]
 80089de:	3001      	adds	r0, #1
 80089e0:	4283      	cmp	r3, r0
 80089e2:	d004      	beq.n	80089ee <__swbuf_r+0x62>
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	07db      	lsls	r3, r3, #31
 80089e8:	d519      	bpl.n	8008a1e <__swbuf_r+0x92>
 80089ea:	2e0a      	cmp	r6, #10
 80089ec:	d117      	bne.n	8008a1e <__swbuf_r+0x92>
 80089ee:	4621      	mov	r1, r4
 80089f0:	4628      	mov	r0, r5
 80089f2:	f000 f933 	bl	8008c5c <_fflush_r>
 80089f6:	b190      	cbz	r0, 8008a1e <__swbuf_r+0x92>
 80089f8:	e00f      	b.n	8008a1a <__swbuf_r+0x8e>
 80089fa:	4b0b      	ldr	r3, [pc, #44]	; (8008a28 <__swbuf_r+0x9c>)
 80089fc:	429c      	cmp	r4, r3
 80089fe:	d101      	bne.n	8008a04 <__swbuf_r+0x78>
 8008a00:	68ac      	ldr	r4, [r5, #8]
 8008a02:	e7d0      	b.n	80089a6 <__swbuf_r+0x1a>
 8008a04:	4b09      	ldr	r3, [pc, #36]	; (8008a2c <__swbuf_r+0xa0>)
 8008a06:	429c      	cmp	r4, r3
 8008a08:	bf08      	it	eq
 8008a0a:	68ec      	ldreq	r4, [r5, #12]
 8008a0c:	e7cb      	b.n	80089a6 <__swbuf_r+0x1a>
 8008a0e:	4621      	mov	r1, r4
 8008a10:	4628      	mov	r0, r5
 8008a12:	f000 f81f 	bl	8008a54 <__swsetup_r>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d0cc      	beq.n	80089b4 <__swbuf_r+0x28>
 8008a1a:	f04f 37ff 	mov.w	r7, #4294967295
 8008a1e:	4638      	mov	r0, r7
 8008a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a22:	bf00      	nop
 8008a24:	08009464 	.word	0x08009464
 8008a28:	08009484 	.word	0x08009484
 8008a2c:	08009444 	.word	0x08009444

08008a30 <_write_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4c07      	ldr	r4, [pc, #28]	; (8008a50 <_write_r+0x20>)
 8008a34:	4605      	mov	r5, r0
 8008a36:	4608      	mov	r0, r1
 8008a38:	4611      	mov	r1, r2
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	6022      	str	r2, [r4, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f7f8 fe05 	bl	800164e <_write>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_write_r+0x1e>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_write_r+0x1e>
 8008a4c:	602b      	str	r3, [r5, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	20000794 	.word	0x20000794

08008a54 <__swsetup_r>:
 8008a54:	4b32      	ldr	r3, [pc, #200]	; (8008b20 <__swsetup_r+0xcc>)
 8008a56:	b570      	push	{r4, r5, r6, lr}
 8008a58:	681d      	ldr	r5, [r3, #0]
 8008a5a:	4606      	mov	r6, r0
 8008a5c:	460c      	mov	r4, r1
 8008a5e:	b125      	cbz	r5, 8008a6a <__swsetup_r+0x16>
 8008a60:	69ab      	ldr	r3, [r5, #24]
 8008a62:	b913      	cbnz	r3, 8008a6a <__swsetup_r+0x16>
 8008a64:	4628      	mov	r0, r5
 8008a66:	f7ff fa3f 	bl	8007ee8 <__sinit>
 8008a6a:	4b2e      	ldr	r3, [pc, #184]	; (8008b24 <__swsetup_r+0xd0>)
 8008a6c:	429c      	cmp	r4, r3
 8008a6e:	d10f      	bne.n	8008a90 <__swsetup_r+0x3c>
 8008a70:	686c      	ldr	r4, [r5, #4]
 8008a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	0715      	lsls	r5, r2, #28
 8008a7a:	d42c      	bmi.n	8008ad6 <__swsetup_r+0x82>
 8008a7c:	06d0      	lsls	r0, r2, #27
 8008a7e:	d411      	bmi.n	8008aa4 <__swsetup_r+0x50>
 8008a80:	2209      	movs	r2, #9
 8008a82:	6032      	str	r2, [r6, #0]
 8008a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a88:	81a3      	strh	r3, [r4, #12]
 8008a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8e:	e03e      	b.n	8008b0e <__swsetup_r+0xba>
 8008a90:	4b25      	ldr	r3, [pc, #148]	; (8008b28 <__swsetup_r+0xd4>)
 8008a92:	429c      	cmp	r4, r3
 8008a94:	d101      	bne.n	8008a9a <__swsetup_r+0x46>
 8008a96:	68ac      	ldr	r4, [r5, #8]
 8008a98:	e7eb      	b.n	8008a72 <__swsetup_r+0x1e>
 8008a9a:	4b24      	ldr	r3, [pc, #144]	; (8008b2c <__swsetup_r+0xd8>)
 8008a9c:	429c      	cmp	r4, r3
 8008a9e:	bf08      	it	eq
 8008aa0:	68ec      	ldreq	r4, [r5, #12]
 8008aa2:	e7e6      	b.n	8008a72 <__swsetup_r+0x1e>
 8008aa4:	0751      	lsls	r1, r2, #29
 8008aa6:	d512      	bpl.n	8008ace <__swsetup_r+0x7a>
 8008aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008aaa:	b141      	cbz	r1, 8008abe <__swsetup_r+0x6a>
 8008aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ab0:	4299      	cmp	r1, r3
 8008ab2:	d002      	beq.n	8008aba <__swsetup_r+0x66>
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f000 f997 	bl	8008de8 <_free_r>
 8008aba:	2300      	movs	r3, #0
 8008abc:	6363      	str	r3, [r4, #52]	; 0x34
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ac4:	81a3      	strh	r3, [r4, #12]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	6063      	str	r3, [r4, #4]
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	89a3      	ldrh	r3, [r4, #12]
 8008ad0:	f043 0308 	orr.w	r3, r3, #8
 8008ad4:	81a3      	strh	r3, [r4, #12]
 8008ad6:	6923      	ldr	r3, [r4, #16]
 8008ad8:	b94b      	cbnz	r3, 8008aee <__swsetup_r+0x9a>
 8008ada:	89a3      	ldrh	r3, [r4, #12]
 8008adc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ae4:	d003      	beq.n	8008aee <__swsetup_r+0x9a>
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f000 f917 	bl	8008d1c <__smakebuf_r>
 8008aee:	89a2      	ldrh	r2, [r4, #12]
 8008af0:	f012 0301 	ands.w	r3, r2, #1
 8008af4:	d00c      	beq.n	8008b10 <__swsetup_r+0xbc>
 8008af6:	2300      	movs	r3, #0
 8008af8:	60a3      	str	r3, [r4, #8]
 8008afa:	6963      	ldr	r3, [r4, #20]
 8008afc:	425b      	negs	r3, r3
 8008afe:	61a3      	str	r3, [r4, #24]
 8008b00:	6923      	ldr	r3, [r4, #16]
 8008b02:	b953      	cbnz	r3, 8008b1a <__swsetup_r+0xc6>
 8008b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b08:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008b0c:	d1ba      	bne.n	8008a84 <__swsetup_r+0x30>
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}
 8008b10:	0792      	lsls	r2, r2, #30
 8008b12:	bf58      	it	pl
 8008b14:	6963      	ldrpl	r3, [r4, #20]
 8008b16:	60a3      	str	r3, [r4, #8]
 8008b18:	e7f2      	b.n	8008b00 <__swsetup_r+0xac>
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	e7f7      	b.n	8008b0e <__swsetup_r+0xba>
 8008b1e:	bf00      	nop
 8008b20:	20000008 	.word	0x20000008
 8008b24:	08009464 	.word	0x08009464
 8008b28:	08009484 	.word	0x08009484
 8008b2c:	08009444 	.word	0x08009444

08008b30 <_close_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	4c06      	ldr	r4, [pc, #24]	; (8008b4c <_close_r+0x1c>)
 8008b34:	2300      	movs	r3, #0
 8008b36:	4605      	mov	r5, r0
 8008b38:	4608      	mov	r0, r1
 8008b3a:	6023      	str	r3, [r4, #0]
 8008b3c:	f7f8 fda3 	bl	8001686 <_close>
 8008b40:	1c43      	adds	r3, r0, #1
 8008b42:	d102      	bne.n	8008b4a <_close_r+0x1a>
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	b103      	cbz	r3, 8008b4a <_close_r+0x1a>
 8008b48:	602b      	str	r3, [r5, #0]
 8008b4a:	bd38      	pop	{r3, r4, r5, pc}
 8008b4c:	20000794 	.word	0x20000794

08008b50 <__sflush_r>:
 8008b50:	898a      	ldrh	r2, [r1, #12]
 8008b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b56:	4605      	mov	r5, r0
 8008b58:	0710      	lsls	r0, r2, #28
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	d458      	bmi.n	8008c10 <__sflush_r+0xc0>
 8008b5e:	684b      	ldr	r3, [r1, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	dc05      	bgt.n	8008b70 <__sflush_r+0x20>
 8008b64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	dc02      	bgt.n	8008b70 <__sflush_r+0x20>
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b72:	2e00      	cmp	r6, #0
 8008b74:	d0f9      	beq.n	8008b6a <__sflush_r+0x1a>
 8008b76:	2300      	movs	r3, #0
 8008b78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b7c:	682f      	ldr	r7, [r5, #0]
 8008b7e:	6a21      	ldr	r1, [r4, #32]
 8008b80:	602b      	str	r3, [r5, #0]
 8008b82:	d032      	beq.n	8008bea <__sflush_r+0x9a>
 8008b84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b86:	89a3      	ldrh	r3, [r4, #12]
 8008b88:	075a      	lsls	r2, r3, #29
 8008b8a:	d505      	bpl.n	8008b98 <__sflush_r+0x48>
 8008b8c:	6863      	ldr	r3, [r4, #4]
 8008b8e:	1ac0      	subs	r0, r0, r3
 8008b90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b92:	b10b      	cbz	r3, 8008b98 <__sflush_r+0x48>
 8008b94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b96:	1ac0      	subs	r0, r0, r3
 8008b98:	2300      	movs	r3, #0
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b9e:	6a21      	ldr	r1, [r4, #32]
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	47b0      	blx	r6
 8008ba4:	1c43      	adds	r3, r0, #1
 8008ba6:	89a3      	ldrh	r3, [r4, #12]
 8008ba8:	d106      	bne.n	8008bb8 <__sflush_r+0x68>
 8008baa:	6829      	ldr	r1, [r5, #0]
 8008bac:	291d      	cmp	r1, #29
 8008bae:	d848      	bhi.n	8008c42 <__sflush_r+0xf2>
 8008bb0:	4a29      	ldr	r2, [pc, #164]	; (8008c58 <__sflush_r+0x108>)
 8008bb2:	40ca      	lsrs	r2, r1
 8008bb4:	07d6      	lsls	r6, r2, #31
 8008bb6:	d544      	bpl.n	8008c42 <__sflush_r+0xf2>
 8008bb8:	2200      	movs	r2, #0
 8008bba:	6062      	str	r2, [r4, #4]
 8008bbc:	04d9      	lsls	r1, r3, #19
 8008bbe:	6922      	ldr	r2, [r4, #16]
 8008bc0:	6022      	str	r2, [r4, #0]
 8008bc2:	d504      	bpl.n	8008bce <__sflush_r+0x7e>
 8008bc4:	1c42      	adds	r2, r0, #1
 8008bc6:	d101      	bne.n	8008bcc <__sflush_r+0x7c>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b903      	cbnz	r3, 8008bce <__sflush_r+0x7e>
 8008bcc:	6560      	str	r0, [r4, #84]	; 0x54
 8008bce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bd0:	602f      	str	r7, [r5, #0]
 8008bd2:	2900      	cmp	r1, #0
 8008bd4:	d0c9      	beq.n	8008b6a <__sflush_r+0x1a>
 8008bd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bda:	4299      	cmp	r1, r3
 8008bdc:	d002      	beq.n	8008be4 <__sflush_r+0x94>
 8008bde:	4628      	mov	r0, r5
 8008be0:	f000 f902 	bl	8008de8 <_free_r>
 8008be4:	2000      	movs	r0, #0
 8008be6:	6360      	str	r0, [r4, #52]	; 0x34
 8008be8:	e7c0      	b.n	8008b6c <__sflush_r+0x1c>
 8008bea:	2301      	movs	r3, #1
 8008bec:	4628      	mov	r0, r5
 8008bee:	47b0      	blx	r6
 8008bf0:	1c41      	adds	r1, r0, #1
 8008bf2:	d1c8      	bne.n	8008b86 <__sflush_r+0x36>
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d0c5      	beq.n	8008b86 <__sflush_r+0x36>
 8008bfa:	2b1d      	cmp	r3, #29
 8008bfc:	d001      	beq.n	8008c02 <__sflush_r+0xb2>
 8008bfe:	2b16      	cmp	r3, #22
 8008c00:	d101      	bne.n	8008c06 <__sflush_r+0xb6>
 8008c02:	602f      	str	r7, [r5, #0]
 8008c04:	e7b1      	b.n	8008b6a <__sflush_r+0x1a>
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c0c:	81a3      	strh	r3, [r4, #12]
 8008c0e:	e7ad      	b.n	8008b6c <__sflush_r+0x1c>
 8008c10:	690f      	ldr	r7, [r1, #16]
 8008c12:	2f00      	cmp	r7, #0
 8008c14:	d0a9      	beq.n	8008b6a <__sflush_r+0x1a>
 8008c16:	0793      	lsls	r3, r2, #30
 8008c18:	680e      	ldr	r6, [r1, #0]
 8008c1a:	bf08      	it	eq
 8008c1c:	694b      	ldreq	r3, [r1, #20]
 8008c1e:	600f      	str	r7, [r1, #0]
 8008c20:	bf18      	it	ne
 8008c22:	2300      	movne	r3, #0
 8008c24:	eba6 0807 	sub.w	r8, r6, r7
 8008c28:	608b      	str	r3, [r1, #8]
 8008c2a:	f1b8 0f00 	cmp.w	r8, #0
 8008c2e:	dd9c      	ble.n	8008b6a <__sflush_r+0x1a>
 8008c30:	4643      	mov	r3, r8
 8008c32:	463a      	mov	r2, r7
 8008c34:	6a21      	ldr	r1, [r4, #32]
 8008c36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c38:	4628      	mov	r0, r5
 8008c3a:	47b0      	blx	r6
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	dc06      	bgt.n	8008c4e <__sflush_r+0xfe>
 8008c40:	89a3      	ldrh	r3, [r4, #12]
 8008c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c46:	81a3      	strh	r3, [r4, #12]
 8008c48:	f04f 30ff 	mov.w	r0, #4294967295
 8008c4c:	e78e      	b.n	8008b6c <__sflush_r+0x1c>
 8008c4e:	4407      	add	r7, r0
 8008c50:	eba8 0800 	sub.w	r8, r8, r0
 8008c54:	e7e9      	b.n	8008c2a <__sflush_r+0xda>
 8008c56:	bf00      	nop
 8008c58:	20400001 	.word	0x20400001

08008c5c <_fflush_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	690b      	ldr	r3, [r1, #16]
 8008c60:	4605      	mov	r5, r0
 8008c62:	460c      	mov	r4, r1
 8008c64:	b1db      	cbz	r3, 8008c9e <_fflush_r+0x42>
 8008c66:	b118      	cbz	r0, 8008c70 <_fflush_r+0x14>
 8008c68:	6983      	ldr	r3, [r0, #24]
 8008c6a:	b90b      	cbnz	r3, 8008c70 <_fflush_r+0x14>
 8008c6c:	f7ff f93c 	bl	8007ee8 <__sinit>
 8008c70:	4b0c      	ldr	r3, [pc, #48]	; (8008ca4 <_fflush_r+0x48>)
 8008c72:	429c      	cmp	r4, r3
 8008c74:	d109      	bne.n	8008c8a <_fflush_r+0x2e>
 8008c76:	686c      	ldr	r4, [r5, #4]
 8008c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c7c:	b17b      	cbz	r3, 8008c9e <_fflush_r+0x42>
 8008c7e:	4621      	mov	r1, r4
 8008c80:	4628      	mov	r0, r5
 8008c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c86:	f7ff bf63 	b.w	8008b50 <__sflush_r>
 8008c8a:	4b07      	ldr	r3, [pc, #28]	; (8008ca8 <_fflush_r+0x4c>)
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	d101      	bne.n	8008c94 <_fflush_r+0x38>
 8008c90:	68ac      	ldr	r4, [r5, #8]
 8008c92:	e7f1      	b.n	8008c78 <_fflush_r+0x1c>
 8008c94:	4b05      	ldr	r3, [pc, #20]	; (8008cac <_fflush_r+0x50>)
 8008c96:	429c      	cmp	r4, r3
 8008c98:	bf08      	it	eq
 8008c9a:	68ec      	ldreq	r4, [r5, #12]
 8008c9c:	e7ec      	b.n	8008c78 <_fflush_r+0x1c>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	bd38      	pop	{r3, r4, r5, pc}
 8008ca2:	bf00      	nop
 8008ca4:	08009464 	.word	0x08009464
 8008ca8:	08009484 	.word	0x08009484
 8008cac:	08009444 	.word	0x08009444

08008cb0 <_lseek_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4c07      	ldr	r4, [pc, #28]	; (8008cd0 <_lseek_r+0x20>)
 8008cb4:	4605      	mov	r5, r0
 8008cb6:	4608      	mov	r0, r1
 8008cb8:	4611      	mov	r1, r2
 8008cba:	2200      	movs	r2, #0
 8008cbc:	6022      	str	r2, [r4, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f7f8 fd08 	bl	80016d4 <_lseek>
 8008cc4:	1c43      	adds	r3, r0, #1
 8008cc6:	d102      	bne.n	8008cce <_lseek_r+0x1e>
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	b103      	cbz	r3, 8008cce <_lseek_r+0x1e>
 8008ccc:	602b      	str	r3, [r5, #0]
 8008cce:	bd38      	pop	{r3, r4, r5, pc}
 8008cd0:	20000794 	.word	0x20000794

08008cd4 <__swhatbuf_r>:
 8008cd4:	b570      	push	{r4, r5, r6, lr}
 8008cd6:	460e      	mov	r6, r1
 8008cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cdc:	2900      	cmp	r1, #0
 8008cde:	b096      	sub	sp, #88	; 0x58
 8008ce0:	4614      	mov	r4, r2
 8008ce2:	461d      	mov	r5, r3
 8008ce4:	da07      	bge.n	8008cf6 <__swhatbuf_r+0x22>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	602b      	str	r3, [r5, #0]
 8008cea:	89b3      	ldrh	r3, [r6, #12]
 8008cec:	061a      	lsls	r2, r3, #24
 8008cee:	d410      	bmi.n	8008d12 <__swhatbuf_r+0x3e>
 8008cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cf4:	e00e      	b.n	8008d14 <__swhatbuf_r+0x40>
 8008cf6:	466a      	mov	r2, sp
 8008cf8:	f000 f8fc 	bl	8008ef4 <_fstat_r>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	dbf2      	blt.n	8008ce6 <__swhatbuf_r+0x12>
 8008d00:	9a01      	ldr	r2, [sp, #4]
 8008d02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d0a:	425a      	negs	r2, r3
 8008d0c:	415a      	adcs	r2, r3
 8008d0e:	602a      	str	r2, [r5, #0]
 8008d10:	e7ee      	b.n	8008cf0 <__swhatbuf_r+0x1c>
 8008d12:	2340      	movs	r3, #64	; 0x40
 8008d14:	2000      	movs	r0, #0
 8008d16:	6023      	str	r3, [r4, #0]
 8008d18:	b016      	add	sp, #88	; 0x58
 8008d1a:	bd70      	pop	{r4, r5, r6, pc}

08008d1c <__smakebuf_r>:
 8008d1c:	898b      	ldrh	r3, [r1, #12]
 8008d1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d20:	079d      	lsls	r5, r3, #30
 8008d22:	4606      	mov	r6, r0
 8008d24:	460c      	mov	r4, r1
 8008d26:	d507      	bpl.n	8008d38 <__smakebuf_r+0x1c>
 8008d28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d2c:	6023      	str	r3, [r4, #0]
 8008d2e:	6123      	str	r3, [r4, #16]
 8008d30:	2301      	movs	r3, #1
 8008d32:	6163      	str	r3, [r4, #20]
 8008d34:	b002      	add	sp, #8
 8008d36:	bd70      	pop	{r4, r5, r6, pc}
 8008d38:	ab01      	add	r3, sp, #4
 8008d3a:	466a      	mov	r2, sp
 8008d3c:	f7ff ffca 	bl	8008cd4 <__swhatbuf_r>
 8008d40:	9900      	ldr	r1, [sp, #0]
 8008d42:	4605      	mov	r5, r0
 8008d44:	4630      	mov	r0, r6
 8008d46:	f7ff f959 	bl	8007ffc <_malloc_r>
 8008d4a:	b948      	cbnz	r0, 8008d60 <__smakebuf_r+0x44>
 8008d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d50:	059a      	lsls	r2, r3, #22
 8008d52:	d4ef      	bmi.n	8008d34 <__smakebuf_r+0x18>
 8008d54:	f023 0303 	bic.w	r3, r3, #3
 8008d58:	f043 0302 	orr.w	r3, r3, #2
 8008d5c:	81a3      	strh	r3, [r4, #12]
 8008d5e:	e7e3      	b.n	8008d28 <__smakebuf_r+0xc>
 8008d60:	4b0d      	ldr	r3, [pc, #52]	; (8008d98 <__smakebuf_r+0x7c>)
 8008d62:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	6020      	str	r0, [r4, #0]
 8008d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d6c:	81a3      	strh	r3, [r4, #12]
 8008d6e:	9b00      	ldr	r3, [sp, #0]
 8008d70:	6163      	str	r3, [r4, #20]
 8008d72:	9b01      	ldr	r3, [sp, #4]
 8008d74:	6120      	str	r0, [r4, #16]
 8008d76:	b15b      	cbz	r3, 8008d90 <__smakebuf_r+0x74>
 8008d78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f000 f8cb 	bl	8008f18 <_isatty_r>
 8008d82:	b128      	cbz	r0, 8008d90 <__smakebuf_r+0x74>
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	f023 0303 	bic.w	r3, r3, #3
 8008d8a:	f043 0301 	orr.w	r3, r3, #1
 8008d8e:	81a3      	strh	r3, [r4, #12]
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	431d      	orrs	r5, r3
 8008d94:	81a5      	strh	r5, [r4, #12]
 8008d96:	e7cd      	b.n	8008d34 <__smakebuf_r+0x18>
 8008d98:	08007eb1 	.word	0x08007eb1

08008d9c <memcpy>:
 8008d9c:	b510      	push	{r4, lr}
 8008d9e:	1e43      	subs	r3, r0, #1
 8008da0:	440a      	add	r2, r1
 8008da2:	4291      	cmp	r1, r2
 8008da4:	d100      	bne.n	8008da8 <memcpy+0xc>
 8008da6:	bd10      	pop	{r4, pc}
 8008da8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008db0:	e7f7      	b.n	8008da2 <memcpy+0x6>

08008db2 <memmove>:
 8008db2:	4288      	cmp	r0, r1
 8008db4:	b510      	push	{r4, lr}
 8008db6:	eb01 0302 	add.w	r3, r1, r2
 8008dba:	d807      	bhi.n	8008dcc <memmove+0x1a>
 8008dbc:	1e42      	subs	r2, r0, #1
 8008dbe:	4299      	cmp	r1, r3
 8008dc0:	d00a      	beq.n	8008dd8 <memmove+0x26>
 8008dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dc6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008dca:	e7f8      	b.n	8008dbe <memmove+0xc>
 8008dcc:	4283      	cmp	r3, r0
 8008dce:	d9f5      	bls.n	8008dbc <memmove+0xa>
 8008dd0:	1881      	adds	r1, r0, r2
 8008dd2:	1ad2      	subs	r2, r2, r3
 8008dd4:	42d3      	cmn	r3, r2
 8008dd6:	d100      	bne.n	8008dda <memmove+0x28>
 8008dd8:	bd10      	pop	{r4, pc}
 8008dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dde:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008de2:	e7f7      	b.n	8008dd4 <memmove+0x22>

08008de4 <__malloc_lock>:
 8008de4:	4770      	bx	lr

08008de6 <__malloc_unlock>:
 8008de6:	4770      	bx	lr

08008de8 <_free_r>:
 8008de8:	b538      	push	{r3, r4, r5, lr}
 8008dea:	4605      	mov	r5, r0
 8008dec:	2900      	cmp	r1, #0
 8008dee:	d045      	beq.n	8008e7c <_free_r+0x94>
 8008df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008df4:	1f0c      	subs	r4, r1, #4
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	bfb8      	it	lt
 8008dfa:	18e4      	addlt	r4, r4, r3
 8008dfc:	f7ff fff2 	bl	8008de4 <__malloc_lock>
 8008e00:	4a1f      	ldr	r2, [pc, #124]	; (8008e80 <_free_r+0x98>)
 8008e02:	6813      	ldr	r3, [r2, #0]
 8008e04:	4610      	mov	r0, r2
 8008e06:	b933      	cbnz	r3, 8008e16 <_free_r+0x2e>
 8008e08:	6063      	str	r3, [r4, #4]
 8008e0a:	6014      	str	r4, [r2, #0]
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e12:	f7ff bfe8 	b.w	8008de6 <__malloc_unlock>
 8008e16:	42a3      	cmp	r3, r4
 8008e18:	d90c      	bls.n	8008e34 <_free_r+0x4c>
 8008e1a:	6821      	ldr	r1, [r4, #0]
 8008e1c:	1862      	adds	r2, r4, r1
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	bf04      	itt	eq
 8008e22:	681a      	ldreq	r2, [r3, #0]
 8008e24:	685b      	ldreq	r3, [r3, #4]
 8008e26:	6063      	str	r3, [r4, #4]
 8008e28:	bf04      	itt	eq
 8008e2a:	1852      	addeq	r2, r2, r1
 8008e2c:	6022      	streq	r2, [r4, #0]
 8008e2e:	6004      	str	r4, [r0, #0]
 8008e30:	e7ec      	b.n	8008e0c <_free_r+0x24>
 8008e32:	4613      	mov	r3, r2
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	b10a      	cbz	r2, 8008e3c <_free_r+0x54>
 8008e38:	42a2      	cmp	r2, r4
 8008e3a:	d9fa      	bls.n	8008e32 <_free_r+0x4a>
 8008e3c:	6819      	ldr	r1, [r3, #0]
 8008e3e:	1858      	adds	r0, r3, r1
 8008e40:	42a0      	cmp	r0, r4
 8008e42:	d10b      	bne.n	8008e5c <_free_r+0x74>
 8008e44:	6820      	ldr	r0, [r4, #0]
 8008e46:	4401      	add	r1, r0
 8008e48:	1858      	adds	r0, r3, r1
 8008e4a:	4282      	cmp	r2, r0
 8008e4c:	6019      	str	r1, [r3, #0]
 8008e4e:	d1dd      	bne.n	8008e0c <_free_r+0x24>
 8008e50:	6810      	ldr	r0, [r2, #0]
 8008e52:	6852      	ldr	r2, [r2, #4]
 8008e54:	605a      	str	r2, [r3, #4]
 8008e56:	4401      	add	r1, r0
 8008e58:	6019      	str	r1, [r3, #0]
 8008e5a:	e7d7      	b.n	8008e0c <_free_r+0x24>
 8008e5c:	d902      	bls.n	8008e64 <_free_r+0x7c>
 8008e5e:	230c      	movs	r3, #12
 8008e60:	602b      	str	r3, [r5, #0]
 8008e62:	e7d3      	b.n	8008e0c <_free_r+0x24>
 8008e64:	6820      	ldr	r0, [r4, #0]
 8008e66:	1821      	adds	r1, r4, r0
 8008e68:	428a      	cmp	r2, r1
 8008e6a:	bf04      	itt	eq
 8008e6c:	6811      	ldreq	r1, [r2, #0]
 8008e6e:	6852      	ldreq	r2, [r2, #4]
 8008e70:	6062      	str	r2, [r4, #4]
 8008e72:	bf04      	itt	eq
 8008e74:	1809      	addeq	r1, r1, r0
 8008e76:	6021      	streq	r1, [r4, #0]
 8008e78:	605c      	str	r4, [r3, #4]
 8008e7a:	e7c7      	b.n	8008e0c <_free_r+0x24>
 8008e7c:	bd38      	pop	{r3, r4, r5, pc}
 8008e7e:	bf00      	nop
 8008e80:	200001d8 	.word	0x200001d8

08008e84 <_realloc_r>:
 8008e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e86:	4607      	mov	r7, r0
 8008e88:	4614      	mov	r4, r2
 8008e8a:	460e      	mov	r6, r1
 8008e8c:	b921      	cbnz	r1, 8008e98 <_realloc_r+0x14>
 8008e8e:	4611      	mov	r1, r2
 8008e90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e94:	f7ff b8b2 	b.w	8007ffc <_malloc_r>
 8008e98:	b922      	cbnz	r2, 8008ea4 <_realloc_r+0x20>
 8008e9a:	f7ff ffa5 	bl	8008de8 <_free_r>
 8008e9e:	4625      	mov	r5, r4
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ea4:	f000 f848 	bl	8008f38 <_malloc_usable_size_r>
 8008ea8:	42a0      	cmp	r0, r4
 8008eaa:	d20f      	bcs.n	8008ecc <_realloc_r+0x48>
 8008eac:	4621      	mov	r1, r4
 8008eae:	4638      	mov	r0, r7
 8008eb0:	f7ff f8a4 	bl	8007ffc <_malloc_r>
 8008eb4:	4605      	mov	r5, r0
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d0f2      	beq.n	8008ea0 <_realloc_r+0x1c>
 8008eba:	4631      	mov	r1, r6
 8008ebc:	4622      	mov	r2, r4
 8008ebe:	f7ff ff6d 	bl	8008d9c <memcpy>
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	4638      	mov	r0, r7
 8008ec6:	f7ff ff8f 	bl	8008de8 <_free_r>
 8008eca:	e7e9      	b.n	8008ea0 <_realloc_r+0x1c>
 8008ecc:	4635      	mov	r5, r6
 8008ece:	e7e7      	b.n	8008ea0 <_realloc_r+0x1c>

08008ed0 <_read_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4c07      	ldr	r4, [pc, #28]	; (8008ef0 <_read_r+0x20>)
 8008ed4:	4605      	mov	r5, r0
 8008ed6:	4608      	mov	r0, r1
 8008ed8:	4611      	mov	r1, r2
 8008eda:	2200      	movs	r2, #0
 8008edc:	6022      	str	r2, [r4, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	f7f8 fb98 	bl	8001614 <_read>
 8008ee4:	1c43      	adds	r3, r0, #1
 8008ee6:	d102      	bne.n	8008eee <_read_r+0x1e>
 8008ee8:	6823      	ldr	r3, [r4, #0]
 8008eea:	b103      	cbz	r3, 8008eee <_read_r+0x1e>
 8008eec:	602b      	str	r3, [r5, #0]
 8008eee:	bd38      	pop	{r3, r4, r5, pc}
 8008ef0:	20000794 	.word	0x20000794

08008ef4 <_fstat_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4c07      	ldr	r4, [pc, #28]	; (8008f14 <_fstat_r+0x20>)
 8008ef8:	2300      	movs	r3, #0
 8008efa:	4605      	mov	r5, r0
 8008efc:	4608      	mov	r0, r1
 8008efe:	4611      	mov	r1, r2
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	f7f8 fbcc 	bl	800169e <_fstat>
 8008f06:	1c43      	adds	r3, r0, #1
 8008f08:	d102      	bne.n	8008f10 <_fstat_r+0x1c>
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	b103      	cbz	r3, 8008f10 <_fstat_r+0x1c>
 8008f0e:	602b      	str	r3, [r5, #0]
 8008f10:	bd38      	pop	{r3, r4, r5, pc}
 8008f12:	bf00      	nop
 8008f14:	20000794 	.word	0x20000794

08008f18 <_isatty_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4c06      	ldr	r4, [pc, #24]	; (8008f34 <_isatty_r+0x1c>)
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4605      	mov	r5, r0
 8008f20:	4608      	mov	r0, r1
 8008f22:	6023      	str	r3, [r4, #0]
 8008f24:	f7f8 fbcb 	bl	80016be <_isatty>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_isatty_r+0x1a>
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_isatty_r+0x1a>
 8008f30:	602b      	str	r3, [r5, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	20000794 	.word	0x20000794

08008f38 <_malloc_usable_size_r>:
 8008f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f3c:	1f18      	subs	r0, r3, #4
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	bfbc      	itt	lt
 8008f42:	580b      	ldrlt	r3, [r1, r0]
 8008f44:	18c0      	addlt	r0, r0, r3
 8008f46:	4770      	bx	lr

08008f48 <_init>:
 8008f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4a:	bf00      	nop
 8008f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f4e:	bc08      	pop	{r3}
 8008f50:	469e      	mov	lr, r3
 8008f52:	4770      	bx	lr

08008f54 <_fini>:
 8008f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f56:	bf00      	nop
 8008f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f5a:	bc08      	pop	{r3}
 8008f5c:	469e      	mov	lr, r3
 8008f5e:	4770      	bx	lr
