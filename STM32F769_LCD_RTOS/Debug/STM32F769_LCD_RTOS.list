
STM32F769_LCD_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab0c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d40  0800ad0c  0800ad0c  0001ad0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca4c  0800ca4c  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca4c  0800ca4c  0001ca4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca54  0800ca54  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca54  0800ca54  0001ca54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca58  0800ca58  0001ca58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  0800ca5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000096c0  20000044  0800caa0  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009704  0800caa0  00029704  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f8ea  00000000  00000000  00020072  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000540a  00000000  00000000  0004f95c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002360  00000000  00000000  00054d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020d0  00000000  00000000  000570c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033995  00000000  00000000  00059198  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e355  00000000  00000000  0008cb2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012cfdb  00000000  00000000  000aae82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d7e5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000956c  00000000  00000000  001d7ed8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000044 	.word	0x20000044
 800021c:	00000000 	.word	0x00000000
 8000220:	0800acf4 	.word	0x0800acf4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000048 	.word	0x20000048
 800023c:	0800acf4 	.word	0x0800acf4

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
	...

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b092      	sub	sp, #72	; 0x48
 8000578:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f002 f8c3 	bl	8002704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f841 	bl	8000604 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000582:	f001 f912 	bl	80017aa <BSP_LCD_Init>

  /* USER CODE END 2 */

  osKernelInitialize();
 8000586:	f007 fe01 	bl	800818c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 800058a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058e:	2224      	movs	r2, #36	; 0x24
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f00a fba5 	bl	800ace2 <memset>
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <main+0x78>)
 800059a:	627b      	str	r3, [r7, #36]	; 0x24
 800059c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80005a2:	2318      	movs	r3, #24
 80005a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 4096
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005aa:	461a      	mov	r2, r3
 80005ac:	2100      	movs	r1, #0
 80005ae:	4810      	ldr	r0, [pc, #64]	; (80005f0 <main+0x7c>)
 80005b0:	f007 fe54 	bl	800825c <osThreadNew>
 80005b4:	4602      	mov	r2, r0
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <main+0x80>)
 80005b8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  const osThreadAttr_t LCDtask_attributes = {
 80005ba:	463b      	mov	r3, r7
 80005bc:	2224      	movs	r2, #36	; 0x24
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f00a fb8e 	bl	800ace2 <memset>
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <main+0x84>)
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	2318      	movs	r3, #24
 80005d2:	61bb      	str	r3, [r7, #24]
    .name = "LCDTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 4096
  };

  LCDTaskHandle = osThreadNew(LCDTask, NULL, &LCDtask_attributes);
 80005d4:	463b      	mov	r3, r7
 80005d6:	461a      	mov	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	4808      	ldr	r0, [pc, #32]	; (80005fc <main+0x88>)
 80005dc:	f007 fe3e 	bl	800825c <osThreadNew>
 80005e0:	4602      	mov	r2, r0
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <main+0x8c>)
 80005e4:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e6:	f007 fe05 	bl	80081f4 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <main+0x76>
 80005ec:	0800ad0c 	.word	0x0800ad0c
 80005f0:	080007d5 	.word	0x080007d5
 80005f4:	20008f74 	.word	0x20008f74
 80005f8:	0800ad18 	.word	0x0800ad18
 80005fc:	08000751 	.word	0x08000751
 8000600:	20009474 	.word	0x20009474

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b0b8      	sub	sp, #224	; 0xe0
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800060e:	2234      	movs	r2, #52	; 0x34
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f00a fb65 	bl	800ace2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2290      	movs	r2, #144	; 0x90
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f00a fb56 	bl	800ace2 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000636:	f005 fdd7 	bl	80061e8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	4b43      	ldr	r3, [pc, #268]	; (8000748 <SystemClock_Config+0x144>)
 800063c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063e:	4a42      	ldr	r2, [pc, #264]	; (8000748 <SystemClock_Config+0x144>)
 8000640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000644:	6413      	str	r3, [r2, #64]	; 0x40
 8000646:	4b40      	ldr	r3, [pc, #256]	; (8000748 <SystemClock_Config+0x144>)
 8000648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000652:	4b3e      	ldr	r3, [pc, #248]	; (800074c <SystemClock_Config+0x148>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a3d      	ldr	r2, [pc, #244]	; (800074c <SystemClock_Config+0x148>)
 8000658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065c:	6013      	str	r3, [r2, #0]
 800065e:	4b3b      	ldr	r3, [pc, #236]	; (800074c <SystemClock_Config+0x148>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800066a:	2303      	movs	r3, #3
 800066c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067e:	2310      	movs	r3, #16
 8000680:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000692:	2319      	movs	r3, #25
 8000694:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000698:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800069c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006b0:	4618      	mov	r0, r3
 80006b2:	f005 fdf9 	bl	80062a8 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80006bc:	f000 f8a4 	bl	8000808 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006c0:	f005 fda2 	bl	8006208 <HAL_PWREx_EnableOverDrive>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006ca:	f000 f89d 	bl	8000808 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006f4:	2107      	movs	r1, #7
 80006f6:	4618      	mov	r0, r3
 80006f8:	f006 f848 	bl	800678c <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x102>
  {
    Error_Handler();
 8000702:	f000 f881 	bl	8000808 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000706:	2308      	movs	r3, #8
 8000708:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800070a:	23c0      	movs	r3, #192	; 0xc0
 800070c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800070e:	2302      	movs	r3, #2
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8000712:	2303      	movs	r3, #3
 8000714:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8000716:	2301      	movs	r3, #1
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800071e:	2300      	movs	r3, #0
 8000720:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	4618      	mov	r0, r3
 8000728:	f006 fa80 	bl	8006c2c <HAL_RCCEx_PeriphCLKConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000732:	f000 f869 	bl	8000808 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	2000      	movs	r0, #0
 800073c:	f006 f90e 	bl	800695c <HAL_RCC_MCOConfig>
}
 8000740:	bf00      	nop
 8000742:	37e0      	adds	r7, #224	; 0xe0
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <LCDTask>:
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void LCDTask (void *argument) {
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000758:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800075c:	2000      	movs	r0, #0
 800075e:	f001 f9c1 	bl	8001ae4 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 8000762:	2000      	movs	r0, #0
 8000764:	f001 fa1e 	bl	8001ba4 <BSP_LCD_SelectLayer>

	/* Touchscreen initialization */
	if (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize()) == TS_ERROR) {
 8000768:	f001 f9a4 	bl	8001ab4 <BSP_LCD_GetXSize>
 800076c:	4603      	mov	r3, r0
 800076e:	b29c      	uxth	r4, r3
 8000770:	f001 f9ac 	bl	8001acc <BSP_LCD_GetYSize>
 8000774:	4603      	mov	r3, r0
 8000776:	b29b      	uxth	r3, r3
 8000778:	4619      	mov	r1, r3
 800077a:	4620      	mov	r0, r4
 800077c:	f001 ff62 	bl	8002644 <BSP_TS_Init>
	//printf("BSP_TS_Init error\n");
	}

	/* Clear the LCD */
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	f001 fa6a 	bl	8001c5c <BSP_LCD_Clear>

	/* Set Touchscreen Demo1 description */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000788:	480f      	ldr	r0, [pc, #60]	; (80007c8 <LCDTask+0x78>)
 800078a:	f001 fa1b 	bl	8001bc4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 40);
 800078e:	f001 f991 	bl	8001ab4 <BSP_LCD_GetXSize>
 8000792:	4603      	mov	r3, r0
 8000794:	b29a      	uxth	r2, r3
 8000796:	2328      	movs	r3, #40	; 0x28
 8000798:	2100      	movs	r1, #0
 800079a:	2000      	movs	r0, #0
 800079c:	f001 fb8e 	bl	8001ebc <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80007a0:	f04f 30ff 	mov.w	r0, #4294967295
 80007a4:	f001 fa0e 	bl	8001bc4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80007a8:	4807      	ldr	r0, [pc, #28]	; (80007c8 <LCDTask+0x78>)
 80007aa:	f001 fa23 	bl	8001bf4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font24);
 80007ae:	4807      	ldr	r0, [pc, #28]	; (80007cc <LCDTask+0x7c>)
 80007b0:	f001 fa3a 	bl	8001c28 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"Touchscreen basic test from RTOS task", CENTER_MODE);
 80007b4:	2301      	movs	r3, #1
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <LCDTask+0x80>)
 80007b8:	2100      	movs	r1, #0
 80007ba:	2000      	movs	r0, #0
 80007bc:	f001 faba 	bl	8001d34 <BSP_LCD_DisplayStringAt>
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd90      	pop	{r4, r7, pc}
 80007c8:	ff0000ff 	.word	0xff0000ff
 80007cc:	2000002c 	.word	0x2000002c
 80007d0:	0800ad20 	.word	0x0800ad20

080007d4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f007 fde7 	bl	80083b0 <osDelay>
 80007e2:	e7fb      	b.n	80007dc <StartDefaultTask+0x8>

080007e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d101      	bne.n	80007fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007f6:	f001 ff93 	bl	8002720 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40001000 	.word	0x40001000

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
	...

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <HAL_MspInit+0x4c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <HAL_MspInit+0x4c>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000840:	6453      	str	r3, [r2, #68]	; 0x44
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	210f      	movs	r1, #15
 8000852:	f06f 0001 	mvn.w	r0, #1
 8000856:	f002 f85d 	bl	8002914 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800

08000868 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <HAL_DMA2D_MspInit+0x44>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d113      	bne.n	80008a2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <HAL_DMA2D_MspInit+0x48>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a0c      	ldr	r2, [pc, #48]	; (80008b0 <HAL_DMA2D_MspInit+0x48>)
 8000880:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <HAL_DMA2D_MspInit+0x48>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2105      	movs	r1, #5
 8000896:	205a      	movs	r0, #90	; 0x5a
 8000898:	f002 f83c 	bl	8002914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800089c:	205a      	movs	r0, #90	; 0x5a
 800089e:	f002 f855 	bl	800294c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	4002b000 	.word	0x4002b000
 80008b0:	40023800 	.word	0x40023800

080008b4 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a17      	ldr	r2, [pc, #92]	; (8000930 <HAL_DSI_MspInit+0x7c>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d127      	bne.n	8000926 <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <HAL_DSI_MspInit+0x80>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	4a16      	ldr	r2, [pc, #88]	; (8000934 <HAL_DSI_MspInit+0x80>)
 80008dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80008e0:	6453      	str	r3, [r2, #68]	; 0x44
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_DSI_MspInit+0x80>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_DSI_MspInit+0x80>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_DSI_MspInit+0x80>)
 80008f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_DSI_MspInit+0x80>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 8000906:	2304      	movs	r3, #4
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000916:	230d      	movs	r3, #13
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <HAL_DSI_MspInit+0x84>)
 8000922:	f003 fa61 	bl	8003de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40016c00 	.word	0x40016c00
 8000934:	40023800 	.word	0x40023800
 8000938:	40022400 	.word	0x40022400

0800093c <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_DSI_MspDeInit+0x30>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d109      	bne.n	8000962 <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_DSI_MspDeInit+0x34>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_DSI_MspDeInit+0x34>)
 8000954:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(DSIHOST_TE_GPIO_Port, DSIHOST_TE_Pin);
 800095a:	2104      	movs	r1, #4
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <HAL_DSI_MspDeInit+0x38>)
 800095e:	f003 fbed 	bl	800413c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40016c00 	.word	0x40016c00
 8000970:	40023800 	.word	0x40023800
 8000974:	40022400 	.word	0x40022400

08000978 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <HAL_LTDC_MspInit+0x44>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d113      	bne.n	80009b2 <HAL_LTDC_MspInit+0x3a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_LTDC_MspInit+0x48>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	4a0c      	ldr	r2, [pc, #48]	; (80009c0 <HAL_LTDC_MspInit+0x48>)
 8000990:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000994:	6453      	str	r3, [r2, #68]	; 0x44
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_LTDC_MspInit+0x48>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2105      	movs	r1, #5
 80009a6:	2058      	movs	r0, #88	; 0x58
 80009a8:	f001 ffb4 	bl	8002914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80009ac:	2058      	movs	r0, #88	; 0x58
 80009ae:	f001 ffcd 	bl	800294c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40016800 	.word	0x40016800
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80009d8:	4b3b      	ldr	r3, [pc, #236]	; (8000ac8 <HAL_FMC_MspInit+0x104>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d16f      	bne.n	8000ac0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80009e0:	4b39      	ldr	r3, [pc, #228]	; (8000ac8 <HAL_FMC_MspInit+0x104>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80009e6:	4b39      	ldr	r3, [pc, #228]	; (8000acc <HAL_FMC_MspInit+0x108>)
 80009e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009ea:	4a38      	ldr	r2, [pc, #224]	; (8000acc <HAL_FMC_MspInit+0x108>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6393      	str	r3, [r2, #56]	; 0x38
 80009f2:	4b36      	ldr	r3, [pc, #216]	; (8000acc <HAL_FMC_MspInit+0x108>)
 80009f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 80009fe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a02:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a10:	230c      	movs	r3, #12
 8000a12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	4619      	mov	r1, r3
 8000a18:	482d      	ldr	r0, [pc, #180]	; (8000ad0 <HAL_FMC_MspInit+0x10c>)
 8000a1a:	f003 f9e5 	bl	8003de8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin 
 8000a1e:	f248 1337 	movw	r3, #33079	; 0x8137
 8000a22:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a30:	230c      	movs	r3, #12
 8000a32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	4619      	mov	r1, r3
 8000a38:	4826      	ldr	r0, [pc, #152]	; (8000ad4 <HAL_FMC_MspInit+0x110>)
 8000a3a:	f003 f9d5 	bl	8003de8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8000a3e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a42:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a50:	230c      	movs	r3, #12
 8000a52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	481f      	ldr	r0, [pc, #124]	; (8000ad8 <HAL_FMC_MspInit+0x114>)
 8000a5a:	f003 f9c5 	bl	8003de8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 8000a5e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000a62:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin 
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a70:	230c      	movs	r3, #12
 8000a72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	4818      	ldr	r0, [pc, #96]	; (8000adc <HAL_FMC_MspInit+0x118>)
 8000a7a:	f003 f9b5 	bl	8003de8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8000a7e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a82:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a90:	230c      	movs	r3, #12
 8000a92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	4811      	ldr	r0, [pc, #68]	; (8000ae0 <HAL_FMC_MspInit+0x11c>)
 8000a9a:	f003 f9a5 	bl	8003de8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin 
 8000a9e:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8000aa2:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin 
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480a      	ldr	r0, [pc, #40]	; (8000ae4 <HAL_FMC_MspInit+0x120>)
 8000aba:	f003 f995 	bl	8003de8 <HAL_GPIO_Init>
 8000abe:	e000      	b.n	8000ac2 <HAL_FMC_MspInit+0xfe>
    return;
 8000ac0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000060 	.word	0x20000060
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40021800 	.word	0x40021800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40022000 	.word	0x40022000
 8000ae0:	40021400 	.word	0x40021400
 8000ae4:	40021c00 	.word	0x40021c00

08000ae8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000af0:	f7ff ff68 	bl	80009c4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08c      	sub	sp, #48	; 0x30
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	2036      	movs	r0, #54	; 0x36
 8000b12:	f001 feff 	bl	8002914 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000b16:	2036      	movs	r0, #54	; 0x36
 8000b18:	f001 ff18 	bl	800294c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <HAL_InitTick+0xa0>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	4a1e      	ldr	r2, [pc, #120]	; (8000b9c <HAL_InitTick+0xa0>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	6413      	str	r3, [r2, #64]	; 0x40
 8000b28:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <HAL_InitTick+0xa0>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f003 0310 	and.w	r3, r3, #16
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b34:	f107 0210 	add.w	r2, r7, #16
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f006 f842 	bl	8006bc8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b44:	f006 f82c 	bl	8006ba0 <HAL_RCC_GetPCLK1Freq>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b50:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <HAL_InitTick+0xa4>)
 8000b52:	fba2 2303 	umull	r2, r3, r2, r3
 8000b56:	0c9b      	lsrs	r3, r3, #18
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_InitTick+0xa8>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <HAL_InitTick+0xac>)
 8000b60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_InitTick+0xa8>)
 8000b64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b68:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <HAL_InitTick+0xa8>)
 8000b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <HAL_InitTick+0xa8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <HAL_InitTick+0xa8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b7c:	4809      	ldr	r0, [pc, #36]	; (8000ba4 <HAL_InitTick+0xa8>)
 8000b7e:	f006 fcfa 	bl	8007576 <HAL_TIM_Base_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d104      	bne.n	8000b92 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b88:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <HAL_InitTick+0xa8>)
 8000b8a:	f006 fd29 	bl	80075e0 <HAL_TIM_Base_Start_IT>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3730      	adds	r7, #48	; 0x30
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	431bde83 	.word	0x431bde83
 8000ba4:	20009530 	.word	0x20009530
 8000ba8:	40001000 	.word	0x40001000

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <TIM6_DAC_IRQHandler+0x10>)
 8000be6:	f006 fd25 	bl	8007634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20009530 	.word	0x20009530

08000bf4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <OTG_HS_IRQHandler+0x10>)
 8000bfa:	f004 fca9 	bl	8005550 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20008f78 	.word	0x20008f78

08000c08 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <LTDC_IRQHandler+0x10>)
 8000c0e:	f004 f9b5 	bl	8004f7c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20009398 	.word	0x20009398

08000c1c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <DMA2D_IRQHandler+0x10>)
 8000c22:	f002 f9cb 	bl	8002fbc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000948c 	.word	0x2000948c

08000c30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <SystemInit+0x5c>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <SystemInit+0x5c>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <SystemInit+0x60>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a11      	ldr	r2, [pc, #68]	; (8000c90 <SystemInit+0x60>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <SystemInit+0x60>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <SystemInit+0x60>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	490d      	ldr	r1, [pc, #52]	; (8000c90 <SystemInit+0x60>)
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <SystemInit+0x64>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <SystemInit+0x60>)
 8000c64:	4a0c      	ldr	r2, [pc, #48]	; (8000c98 <SystemInit+0x68>)
 8000c66:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <SystemInit+0x60>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <SystemInit+0x60>)
 8000c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <SystemInit+0x60>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <SystemInit+0x5c>)
 8000c7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c80:	609a      	str	r2, [r3, #8]
#endif
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00
 8000c90:	40023800 	.word	0x40023800
 8000c94:	fef6ffff 	.word	0xfef6ffff
 8000c98:	24003010 	.word	0x24003010

08000c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ca0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ca2:	e003      	b.n	8000cac <LoopCopyDataInit>

08000ca4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ca6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ca8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000caa:	3104      	adds	r1, #4

08000cac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cb0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cb2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cb4:	d3f6      	bcc.n	8000ca4 <CopyDataInit>
  ldr  r2, =_sbss
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cb8:	e002      	b.n	8000cc0 <LoopFillZerobss>

08000cba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cbc:	f842 3b04 	str.w	r3, [r2], #4

08000cc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cc4:	d3f9      	bcc.n	8000cba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cc6:	f7ff ffb3 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cca:	f009 ffdb 	bl	800ac84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cce:	f7ff fc51 	bl	8000574 <main>
  bx  lr    
 8000cd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000cd8:	0800ca5c 	.word	0x0800ca5c
  ldr  r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ce0:	20000044 	.word	0x20000044
  ldr  r2, =_sbss
 8000ce4:	20000044 	.word	0x20000044
  ldr  r3, = _ebss
 8000ce8:	20009704 	.word	0x20009704

08000cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC_IRQHandler>
	...

08000cf0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f90d 	bl	8000f1c <ft6x06_GetInstance>
 8000d02:	4603      	mov	r3, r0
 8000d04:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	2bff      	cmp	r3, #255	; 0xff
 8000d0a:	d10e      	bne.n	8000d2a <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f000 f905 	bl	8000f1c <ft6x06_GetInstance>
 8000d12:	4603      	mov	r3, r0
 8000d14:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8000d16:	7bbb      	ldrb	r3, [r7, #14]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d806      	bhi.n	8000d2a <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8000d1c:	7bbb      	ldrb	r3, [r7, #14]
 8000d1e:	88fa      	ldrh	r2, [r7, #6]
 8000d20:	b2d1      	uxtb	r1, r2
 8000d22:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <ft6x06_Init+0x44>)
 8000d24:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8000d26:	f000 fcd5 	bl	80016d4 <TS_IO_Init>
    }
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000064 	.word	0x20000064

08000d38 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8000d58:	f000 fcbc 	bl	80016d4 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	21a8      	movs	r1, #168	; 0xa8
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 fcda 	bl	800171c <TS_IO_Read>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	b29b      	uxth	r3, r3
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 f8bc 	bl	8000efe <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 f88d 	bl	8000ea8 <ft6x06_TS_DisableIT>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2102      	movs	r1, #2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fcb5 	bl	800171c <TS_IO_Read>
 8000db2:	4603      	mov	r3, r0
 8000db4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d901      	bls.n	8000dce <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <ft6x06_TS_DetectTouch+0x50>)
 8000dd4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <ft6x06_TS_DetectTouch+0x50>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	b2db      	uxtb	r3, r3
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000068 	.word	0x20000068

08000dec <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <ft6x06_TS_GetXY+0x90>)
 8000e00:	789a      	ldrb	r2, [r3, #2]
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <ft6x06_TS_GetXY+0x90>)
 8000e04:	785b      	ldrb	r3, [r3, #1]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d234      	bcs.n	8000e74 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <ft6x06_TS_GetXY+0x90>)
 8000e0c:	789b      	ldrb	r3, [r3, #2]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d002      	beq.n	8000e18 <ft6x06_TS_GetXY+0x2c>
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d003      	beq.n	8000e1e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8000e16:	e005      	b.n	8000e24 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8000e18:	2303      	movs	r3, #3
 8000e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8000e1c:	e002      	b.n	8000e24 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8000e1e:	2309      	movs	r3, #9
 8000e20:	75fb      	strb	r3, [r7, #23]
      break;
 8000e22:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8000e24:	89fb      	ldrh	r3, [r7, #14]
 8000e26:	b2d8      	uxtb	r0, r3
 8000e28:	f107 0210 	add.w	r2, r7, #16
 8000e2c:	7df9      	ldrb	r1, [r7, #23]
 8000e2e:	2304      	movs	r3, #4
 8000e30:	f000 fc92 	bl	8001758 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000e34:	7c3b      	ldrb	r3, [r7, #16]
 8000e36:	021b      	lsls	r3, r3, #8
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	7c7b      	ldrb	r3, [r7, #17]
 8000e42:	b21b      	sxth	r3, r3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	b21b      	sxth	r3, r3
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8000e4e:	7cbb      	ldrb	r3, [r7, #18]
 8000e50:	021b      	lsls	r3, r3, #8
 8000e52:	b21b      	sxth	r3, r3
 8000e54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	7cfb      	ldrb	r3, [r7, #19]
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <ft6x06_TS_GetXY+0x90>)
 8000e6a:	789b      	ldrb	r3, [r3, #2]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <ft6x06_TS_GetXY+0x90>)
 8000e72:	709a      	strb	r2, [r3, #2]
  }
}
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000068 	.word	0x20000068

08000e80 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	7bfa      	ldrb	r2, [r7, #15]
 8000e98:	21a4      	movs	r1, #164	; 0xa4
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fc24 	bl	80016e8 <TS_IO_Write>
}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	7bfa      	ldrb	r2, [r7, #15]
 8000ec0:	21a4      	movs	r1, #164	; 0xa4
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fc10 	bl	80016e8 <TS_IO_Write>
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b085      	sub	sp, #20
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	e00b      	b.n	8000f48 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <ft6x06_GetInstance+0x40>)
 8000f34:	5cd3      	ldrb	r3, [r2, r3]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	88fa      	ldrh	r2, [r7, #6]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d101      	bne.n	8000f42 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	e006      	b.n	8000f50 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	3301      	adds	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d9f0      	bls.n	8000f30 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8000f4e:	23ff      	movs	r3, #255	; 0xff
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	20000064 	.word	0x20000064

08000f60 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000f6a:	49be      	ldr	r1, [pc, #760]	; (8001264 <OTM8009A_Init+0x304>)
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f000 ffff 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000f72:	49bd      	ldr	r1, [pc, #756]	; (8001268 <OTM8009A_Init+0x308>)
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 fffb 	bl	8001f70 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8000f7a:	49bc      	ldr	r1, [pc, #752]	; (800126c <OTM8009A_Init+0x30c>)
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 fff7 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000f82:	49bb      	ldr	r1, [pc, #748]	; (8001270 <OTM8009A_Init+0x310>)
 8000f84:	2002      	movs	r0, #2
 8000f86:	f000 fff3 	bl	8001f70 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000f8a:	49b8      	ldr	r1, [pc, #736]	; (800126c <OTM8009A_Init+0x30c>)
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f000 ffef 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000f92:	49b8      	ldr	r1, [pc, #736]	; (8001274 <OTM8009A_Init+0x314>)
 8000f94:	2000      	movs	r0, #0
 8000f96:	f000 ffeb 	bl	8001f70 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000f9a:	200a      	movs	r0, #10
 8000f9c:	f000 fbfa 	bl	8001794 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000fa0:	49b5      	ldr	r1, [pc, #724]	; (8001278 <OTM8009A_Init+0x318>)
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 ffe4 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000fa8:	49b4      	ldr	r1, [pc, #720]	; (800127c <OTM8009A_Init+0x31c>)
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 ffe0 	bl	8001f70 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f000 fbef 	bl	8001794 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8000fb6:	49b2      	ldr	r1, [pc, #712]	; (8001280 <OTM8009A_Init+0x320>)
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 ffd9 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8000fbe:	49b1      	ldr	r1, [pc, #708]	; (8001284 <OTM8009A_Init+0x324>)
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 ffd5 	bl	8001f70 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8000fc6:	49b0      	ldr	r1, [pc, #704]	; (8001288 <OTM8009A_Init+0x328>)
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f000 ffd1 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000fce:	49af      	ldr	r1, [pc, #700]	; (800128c <OTM8009A_Init+0x32c>)
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f000 ffcd 	bl	8001f70 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8000fd6:	49ae      	ldr	r1, [pc, #696]	; (8001290 <OTM8009A_Init+0x330>)
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f000 ffc9 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8000fde:	49ad      	ldr	r1, [pc, #692]	; (8001294 <OTM8009A_Init+0x334>)
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 ffc5 	bl	8001f70 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000fe6:	499f      	ldr	r1, [pc, #636]	; (8001264 <OTM8009A_Init+0x304>)
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f000 ffc1 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8000fee:	49aa      	ldr	r1, [pc, #680]	; (8001298 <OTM8009A_Init+0x338>)
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f000 ffbd 	bl	8001f70 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000ff6:	49a9      	ldr	r1, [pc, #676]	; (800129c <OTM8009A_Init+0x33c>)
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f000 ffb9 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8000ffe:	49a8      	ldr	r1, [pc, #672]	; (80012a0 <OTM8009A_Init+0x340>)
 8001000:	2000      	movs	r0, #0
 8001002:	f000 ffb5 	bl	8001f70 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001006:	49a7      	ldr	r1, [pc, #668]	; (80012a4 <OTM8009A_Init+0x344>)
 8001008:	2000      	movs	r0, #0
 800100a:	f000 ffb1 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 800100e:	49a6      	ldr	r1, [pc, #664]	; (80012a8 <OTM8009A_Init+0x348>)
 8001010:	2000      	movs	r0, #0
 8001012:	f000 ffad 	bl	8001f70 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8001016:	49a5      	ldr	r1, [pc, #660]	; (80012ac <OTM8009A_Init+0x34c>)
 8001018:	2000      	movs	r0, #0
 800101a:	f000 ffa9 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800101e:	49a4      	ldr	r1, [pc, #656]	; (80012b0 <OTM8009A_Init+0x350>)
 8001020:	2000      	movs	r0, #0
 8001022:	f000 ffa5 	bl	8001f70 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8001026:	49a3      	ldr	r1, [pc, #652]	; (80012b4 <OTM8009A_Init+0x354>)
 8001028:	2000      	movs	r0, #0
 800102a:	f000 ffa1 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800102e:	4997      	ldr	r1, [pc, #604]	; (800128c <OTM8009A_Init+0x32c>)
 8001030:	2000      	movs	r0, #0
 8001032:	f000 ff9d 	bl	8001f70 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001036:	498b      	ldr	r1, [pc, #556]	; (8001264 <OTM8009A_Init+0x304>)
 8001038:	2000      	movs	r0, #0
 800103a:	f000 ff99 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800103e:	499e      	ldr	r1, [pc, #632]	; (80012b8 <OTM8009A_Init+0x358>)
 8001040:	2002      	movs	r0, #2
 8001042:	f000 ff95 	bl	8001f70 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8001046:	499d      	ldr	r1, [pc, #628]	; (80012bc <OTM8009A_Init+0x35c>)
 8001048:	2000      	movs	r0, #0
 800104a:	f000 ff91 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800104e:	499c      	ldr	r1, [pc, #624]	; (80012c0 <OTM8009A_Init+0x360>)
 8001050:	2000      	movs	r0, #0
 8001052:	f000 ff8d 	bl	8001f70 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8001056:	499b      	ldr	r1, [pc, #620]	; (80012c4 <OTM8009A_Init+0x364>)
 8001058:	2000      	movs	r0, #0
 800105a:	f000 ff89 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800105e:	499a      	ldr	r1, [pc, #616]	; (80012c8 <OTM8009A_Init+0x368>)
 8001060:	2000      	movs	r0, #0
 8001062:	f000 ff85 	bl	8001f70 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8001066:	4999      	ldr	r1, [pc, #612]	; (80012cc <OTM8009A_Init+0x36c>)
 8001068:	2000      	movs	r0, #0
 800106a:	f000 ff81 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800106e:	4998      	ldr	r1, [pc, #608]	; (80012d0 <OTM8009A_Init+0x370>)
 8001070:	2000      	movs	r0, #0
 8001072:	f000 ff7d 	bl	8001f70 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001076:	4989      	ldr	r1, [pc, #548]	; (800129c <OTM8009A_Init+0x33c>)
 8001078:	2000      	movs	r0, #0
 800107a:	f000 ff79 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800107e:	4995      	ldr	r1, [pc, #596]	; (80012d4 <OTM8009A_Init+0x374>)
 8001080:	2000      	movs	r0, #0
 8001082:	f000 ff75 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001086:	4987      	ldr	r1, [pc, #540]	; (80012a4 <OTM8009A_Init+0x344>)
 8001088:	2000      	movs	r0, #0
 800108a:	f000 ff71 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800108e:	4992      	ldr	r1, [pc, #584]	; (80012d8 <OTM8009A_Init+0x378>)
 8001090:	2000      	movs	r0, #0
 8001092:	f000 ff6d 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8001096:	4991      	ldr	r1, [pc, #580]	; (80012dc <OTM8009A_Init+0x37c>)
 8001098:	2000      	movs	r0, #0
 800109a:	f000 ff69 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800109e:	4990      	ldr	r1, [pc, #576]	; (80012e0 <OTM8009A_Init+0x380>)
 80010a0:	2002      	movs	r0, #2
 80010a2:	f000 ff65 	bl	8001f70 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80010a6:	4971      	ldr	r1, [pc, #452]	; (800126c <OTM8009A_Init+0x30c>)
 80010a8:	2000      	movs	r0, #0
 80010aa:	f000 ff61 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80010ae:	498d      	ldr	r1, [pc, #564]	; (80012e4 <OTM8009A_Init+0x384>)
 80010b0:	2006      	movs	r0, #6
 80010b2:	f000 ff5d 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80010b6:	498c      	ldr	r1, [pc, #560]	; (80012e8 <OTM8009A_Init+0x388>)
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 ff59 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80010be:	498b      	ldr	r1, [pc, #556]	; (80012ec <OTM8009A_Init+0x38c>)
 80010c0:	200e      	movs	r0, #14
 80010c2:	f000 ff55 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80010c6:	498a      	ldr	r1, [pc, #552]	; (80012f0 <OTM8009A_Init+0x390>)
 80010c8:	2000      	movs	r0, #0
 80010ca:	f000 ff51 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80010ce:	4989      	ldr	r1, [pc, #548]	; (80012f4 <OTM8009A_Init+0x394>)
 80010d0:	200e      	movs	r0, #14
 80010d2:	f000 ff4d 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80010d6:	4988      	ldr	r1, [pc, #544]	; (80012f8 <OTM8009A_Init+0x398>)
 80010d8:	2000      	movs	r0, #0
 80010da:	f000 ff49 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80010de:	4987      	ldr	r1, [pc, #540]	; (80012fc <OTM8009A_Init+0x39c>)
 80010e0:	200a      	movs	r0, #10
 80010e2:	f000 ff45 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80010e6:	4986      	ldr	r1, [pc, #536]	; (8001300 <OTM8009A_Init+0x3a0>)
 80010e8:	2000      	movs	r0, #0
 80010ea:	f000 ff41 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80010ee:	4985      	ldr	r1, [pc, #532]	; (8001304 <OTM8009A_Init+0x3a4>)
 80010f0:	2000      	movs	r0, #0
 80010f2:	f000 ff3d 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80010f6:	495d      	ldr	r1, [pc, #372]	; (800126c <OTM8009A_Init+0x30c>)
 80010f8:	2000      	movs	r0, #0
 80010fa:	f000 ff39 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80010fe:	4982      	ldr	r1, [pc, #520]	; (8001308 <OTM8009A_Init+0x3a8>)
 8001100:	200a      	movs	r0, #10
 8001102:	f000 ff35 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001106:	4981      	ldr	r1, [pc, #516]	; (800130c <OTM8009A_Init+0x3ac>)
 8001108:	2000      	movs	r0, #0
 800110a:	f000 ff31 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 800110e:	4980      	ldr	r1, [pc, #512]	; (8001310 <OTM8009A_Init+0x3b0>)
 8001110:	200f      	movs	r0, #15
 8001112:	f000 ff2d 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001116:	4974      	ldr	r1, [pc, #464]	; (80012e8 <OTM8009A_Init+0x388>)
 8001118:	2000      	movs	r0, #0
 800111a:	f000 ff29 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 800111e:	497d      	ldr	r1, [pc, #500]	; (8001314 <OTM8009A_Init+0x3b4>)
 8001120:	200f      	movs	r0, #15
 8001122:	f000 ff25 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001126:	4972      	ldr	r1, [pc, #456]	; (80012f0 <OTM8009A_Init+0x390>)
 8001128:	2000      	movs	r0, #0
 800112a:	f000 ff21 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 800112e:	497a      	ldr	r1, [pc, #488]	; (8001318 <OTM8009A_Init+0x3b8>)
 8001130:	200a      	movs	r0, #10
 8001132:	f000 ff1d 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001136:	4970      	ldr	r1, [pc, #448]	; (80012f8 <OTM8009A_Init+0x398>)
 8001138:	2000      	movs	r0, #0
 800113a:	f000 ff19 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 800113e:	4977      	ldr	r1, [pc, #476]	; (800131c <OTM8009A_Init+0x3bc>)
 8001140:	200f      	movs	r0, #15
 8001142:	f000 ff15 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001146:	496e      	ldr	r1, [pc, #440]	; (8001300 <OTM8009A_Init+0x3a0>)
 8001148:	2000      	movs	r0, #0
 800114a:	f000 ff11 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 800114e:	4974      	ldr	r1, [pc, #464]	; (8001320 <OTM8009A_Init+0x3c0>)
 8001150:	200f      	movs	r0, #15
 8001152:	f000 ff0d 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8001156:	4973      	ldr	r1, [pc, #460]	; (8001324 <OTM8009A_Init+0x3c4>)
 8001158:	2000      	movs	r0, #0
 800115a:	f000 ff09 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 800115e:	4972      	ldr	r1, [pc, #456]	; (8001328 <OTM8009A_Init+0x3c8>)
 8001160:	200a      	movs	r0, #10
 8001162:	f000 ff05 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8001166:	4971      	ldr	r1, [pc, #452]	; (800132c <OTM8009A_Init+0x3cc>)
 8001168:	2000      	movs	r0, #0
 800116a:	f000 ff01 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 800116e:	4970      	ldr	r1, [pc, #448]	; (8001330 <OTM8009A_Init+0x3d0>)
 8001170:	200a      	movs	r0, #10
 8001172:	f000 fefd 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001176:	493d      	ldr	r1, [pc, #244]	; (800126c <OTM8009A_Init+0x30c>)
 8001178:	2000      	movs	r0, #0
 800117a:	f000 fef9 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 800117e:	496d      	ldr	r1, [pc, #436]	; (8001334 <OTM8009A_Init+0x3d4>)
 8001180:	200a      	movs	r0, #10
 8001182:	f000 fef5 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001186:	4961      	ldr	r1, [pc, #388]	; (800130c <OTM8009A_Init+0x3ac>)
 8001188:	2000      	movs	r0, #0
 800118a:	f000 fef1 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 800118e:	496a      	ldr	r1, [pc, #424]	; (8001338 <OTM8009A_Init+0x3d8>)
 8001190:	200f      	movs	r0, #15
 8001192:	f000 feed 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001196:	4954      	ldr	r1, [pc, #336]	; (80012e8 <OTM8009A_Init+0x388>)
 8001198:	2000      	movs	r0, #0
 800119a:	f000 fee9 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 800119e:	4967      	ldr	r1, [pc, #412]	; (800133c <OTM8009A_Init+0x3dc>)
 80011a0:	200f      	movs	r0, #15
 80011a2:	f000 fee5 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80011a6:	4952      	ldr	r1, [pc, #328]	; (80012f0 <OTM8009A_Init+0x390>)
 80011a8:	2000      	movs	r0, #0
 80011aa:	f000 fee1 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80011ae:	4964      	ldr	r1, [pc, #400]	; (8001340 <OTM8009A_Init+0x3e0>)
 80011b0:	200a      	movs	r0, #10
 80011b2:	f000 fedd 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80011b6:	4950      	ldr	r1, [pc, #320]	; (80012f8 <OTM8009A_Init+0x398>)
 80011b8:	2000      	movs	r0, #0
 80011ba:	f000 fed9 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 80011be:	4961      	ldr	r1, [pc, #388]	; (8001344 <OTM8009A_Init+0x3e4>)
 80011c0:	200f      	movs	r0, #15
 80011c2:	f000 fed5 	bl	8001f70 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80011c6:	494e      	ldr	r1, [pc, #312]	; (8001300 <OTM8009A_Init+0x3a0>)
 80011c8:	2000      	movs	r0, #0
 80011ca:	f000 fed1 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 80011ce:	495e      	ldr	r1, [pc, #376]	; (8001348 <OTM8009A_Init+0x3e8>)
 80011d0:	200f      	movs	r0, #15
 80011d2:	f000 fecd 	bl	8001f70 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80011d6:	4931      	ldr	r1, [pc, #196]	; (800129c <OTM8009A_Init+0x33c>)
 80011d8:	2000      	movs	r0, #0
 80011da:	f000 fec9 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 80011de:	495b      	ldr	r1, [pc, #364]	; (800134c <OTM8009A_Init+0x3ec>)
 80011e0:	2000      	movs	r0, #0
 80011e2:	f000 fec5 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80011e6:	495a      	ldr	r1, [pc, #360]	; (8001350 <OTM8009A_Init+0x3f0>)
 80011e8:	2000      	movs	r0, #0
 80011ea:	f000 fec1 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 80011ee:	4959      	ldr	r1, [pc, #356]	; (8001354 <OTM8009A_Init+0x3f4>)
 80011f0:	2000      	movs	r0, #0
 80011f2:	f000 febd 	bl	8001f70 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 80011f6:	4958      	ldr	r1, [pc, #352]	; (8001358 <OTM8009A_Init+0x3f8>)
 80011f8:	2000      	movs	r0, #0
 80011fa:	f000 feb9 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 80011fe:	4957      	ldr	r1, [pc, #348]	; (800135c <OTM8009A_Init+0x3fc>)
 8001200:	2000      	movs	r0, #0
 8001202:	f000 feb5 	bl	8001f70 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001206:	4917      	ldr	r1, [pc, #92]	; (8001264 <OTM8009A_Init+0x304>)
 8001208:	2000      	movs	r0, #0
 800120a:	f000 feb1 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 800120e:	4954      	ldr	r1, [pc, #336]	; (8001360 <OTM8009A_Init+0x400>)
 8001210:	2003      	movs	r0, #3
 8001212:	f000 fead 	bl	8001f70 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001216:	4913      	ldr	r1, [pc, #76]	; (8001264 <OTM8009A_Init+0x304>)
 8001218:	2000      	movs	r0, #0
 800121a:	f000 fea9 	bl	8001f70 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800121e:	4911      	ldr	r1, [pc, #68]	; (8001264 <OTM8009A_Init+0x304>)
 8001220:	2000      	movs	r0, #0
 8001222:	f000 fea5 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8001226:	494f      	ldr	r1, [pc, #316]	; (8001364 <OTM8009A_Init+0x404>)
 8001228:	2010      	movs	r0, #16
 800122a:	f000 fea1 	bl	8001f70 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800122e:	490d      	ldr	r1, [pc, #52]	; (8001264 <OTM8009A_Init+0x304>)
 8001230:	2000      	movs	r0, #0
 8001232:	f000 fe9d 	bl	8001f70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8001236:	494c      	ldr	r1, [pc, #304]	; (8001368 <OTM8009A_Init+0x408>)
 8001238:	2010      	movs	r0, #16
 800123a:	f000 fe99 	bl	8001f70 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 800123e:	494b      	ldr	r1, [pc, #300]	; (800136c <OTM8009A_Init+0x40c>)
 8001240:	2000      	movs	r0, #0
 8001242:	f000 fe95 	bl	8001f70 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8001246:	2078      	movs	r0, #120	; 0x78
 8001248:	f000 faa4 	bl	8001794 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 8090 	beq.w	8001374 <OTM8009A_Init+0x414>
 8001254:	2b02      	cmp	r3, #2
 8001256:	d000      	beq.n	800125a <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8001258:	e091      	b.n	800137e <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 800125a:	4945      	ldr	r1, [pc, #276]	; (8001370 <OTM8009A_Init+0x410>)
 800125c:	2000      	movs	r0, #0
 800125e:	f000 fe87 	bl	8001f70 <DSI_IO_WriteCmd>
    break;
 8001262:	e08c      	b.n	800137e <OTM8009A_Init+0x41e>
 8001264:	0800aec0 	.word	0x0800aec0
 8001268:	0800ad78 	.word	0x0800ad78
 800126c:	0800aec4 	.word	0x0800aec4
 8001270:	0800ad7c 	.word	0x0800ad7c
 8001274:	0800aec8 	.word	0x0800aec8
 8001278:	0800aecc 	.word	0x0800aecc
 800127c:	0800aed0 	.word	0x0800aed0
 8001280:	0800aed4 	.word	0x0800aed4
 8001284:	0800aed8 	.word	0x0800aed8
 8001288:	0800aedc 	.word	0x0800aedc
 800128c:	0800aee0 	.word	0x0800aee0
 8001290:	0800aee4 	.word	0x0800aee4
 8001294:	0800aee8 	.word	0x0800aee8
 8001298:	0800aeec 	.word	0x0800aeec
 800129c:	0800aef0 	.word	0x0800aef0
 80012a0:	0800aef4 	.word	0x0800aef4
 80012a4:	0800aef8 	.word	0x0800aef8
 80012a8:	0800aefc 	.word	0x0800aefc
 80012ac:	0800af00 	.word	0x0800af00
 80012b0:	0800af04 	.word	0x0800af04
 80012b4:	0800af08 	.word	0x0800af08
 80012b8:	0800ada8 	.word	0x0800ada8
 80012bc:	0800af0c 	.word	0x0800af0c
 80012c0:	0800af10 	.word	0x0800af10
 80012c4:	0800af14 	.word	0x0800af14
 80012c8:	0800af18 	.word	0x0800af18
 80012cc:	0800af1c 	.word	0x0800af1c
 80012d0:	0800af20 	.word	0x0800af20
 80012d4:	0800af24 	.word	0x0800af24
 80012d8:	0800af28 	.word	0x0800af28
 80012dc:	0800af2c 	.word	0x0800af2c
 80012e0:	0800adac 	.word	0x0800adac
 80012e4:	0800adb0 	.word	0x0800adb0
 80012e8:	0800af30 	.word	0x0800af30
 80012ec:	0800adb8 	.word	0x0800adb8
 80012f0:	0800af34 	.word	0x0800af34
 80012f4:	0800adc8 	.word	0x0800adc8
 80012f8:	0800af38 	.word	0x0800af38
 80012fc:	0800add8 	.word	0x0800add8
 8001300:	0800af3c 	.word	0x0800af3c
 8001304:	0800af74 	.word	0x0800af74
 8001308:	0800ade4 	.word	0x0800ade4
 800130c:	0800af40 	.word	0x0800af40
 8001310:	0800adf0 	.word	0x0800adf0
 8001314:	0800ae00 	.word	0x0800ae00
 8001318:	0800ae10 	.word	0x0800ae10
 800131c:	0800ae1c 	.word	0x0800ae1c
 8001320:	0800ae2c 	.word	0x0800ae2c
 8001324:	0800af44 	.word	0x0800af44
 8001328:	0800ae3c 	.word	0x0800ae3c
 800132c:	0800af48 	.word	0x0800af48
 8001330:	0800ae48 	.word	0x0800ae48
 8001334:	0800ae54 	.word	0x0800ae54
 8001338:	0800ae60 	.word	0x0800ae60
 800133c:	0800ae70 	.word	0x0800ae70
 8001340:	0800ae80 	.word	0x0800ae80
 8001344:	0800ae8c 	.word	0x0800ae8c
 8001348:	0800ae9c 	.word	0x0800ae9c
 800134c:	0800af78 	.word	0x0800af78
 8001350:	0800af7c 	.word	0x0800af7c
 8001354:	0800af80 	.word	0x0800af80
 8001358:	0800af84 	.word	0x0800af84
 800135c:	0800af88 	.word	0x0800af88
 8001360:	0800aeac 	.word	0x0800aeac
 8001364:	0800ad80 	.word	0x0800ad80
 8001368:	0800ad94 	.word	0x0800ad94
 800136c:	0800af4c 	.word	0x0800af4c
 8001370:	0800af50 	.word	0x0800af50
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8001374:	491a      	ldr	r1, [pc, #104]	; (80013e0 <OTM8009A_Init+0x480>)
 8001376:	2000      	movs	r0, #0
 8001378:	f000 fdfa 	bl	8001f70 <DSI_IO_WriteCmd>
    break;
 800137c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d10b      	bne.n	800139c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8001384:	4917      	ldr	r1, [pc, #92]	; (80013e4 <OTM8009A_Init+0x484>)
 8001386:	2000      	movs	r0, #0
 8001388:	f000 fdf2 	bl	8001f70 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 800138c:	4916      	ldr	r1, [pc, #88]	; (80013e8 <OTM8009A_Init+0x488>)
 800138e:	2004      	movs	r0, #4
 8001390:	f000 fdee 	bl	8001f70 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8001394:	4915      	ldr	r1, [pc, #84]	; (80013ec <OTM8009A_Init+0x48c>)
 8001396:	2004      	movs	r0, #4
 8001398:	f000 fdea 	bl	8001f70 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 800139c:	4914      	ldr	r1, [pc, #80]	; (80013f0 <OTM8009A_Init+0x490>)
 800139e:	2000      	movs	r0, #0
 80013a0:	f000 fde6 	bl	8001f70 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 80013a4:	4913      	ldr	r1, [pc, #76]	; (80013f4 <OTM8009A_Init+0x494>)
 80013a6:	2000      	movs	r0, #0
 80013a8:	f000 fde2 	bl	8001f70 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 80013ac:	4912      	ldr	r1, [pc, #72]	; (80013f8 <OTM8009A_Init+0x498>)
 80013ae:	2000      	movs	r0, #0
 80013b0:	f000 fdde 	bl	8001f70 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 80013b4:	4911      	ldr	r1, [pc, #68]	; (80013fc <OTM8009A_Init+0x49c>)
 80013b6:	2000      	movs	r0, #0
 80013b8:	f000 fdda 	bl	8001f70 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 80013bc:	4910      	ldr	r1, [pc, #64]	; (8001400 <OTM8009A_Init+0x4a0>)
 80013be:	2000      	movs	r0, #0
 80013c0:	f000 fdd6 	bl	8001f70 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80013c4:	490f      	ldr	r1, [pc, #60]	; (8001404 <OTM8009A_Init+0x4a4>)
 80013c6:	2000      	movs	r0, #0
 80013c8:	f000 fdd2 	bl	8001f70 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 80013cc:	490e      	ldr	r1, [pc, #56]	; (8001408 <OTM8009A_Init+0x4a8>)
 80013ce:	2000      	movs	r0, #0
 80013d0:	f000 fdce 	bl	8001f70 <DSI_IO_WriteCmd>

  return 0;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	0800af54 	.word	0x0800af54
 80013e4:	0800af58 	.word	0x0800af58
 80013e8:	0800aeb0 	.word	0x0800aeb0
 80013ec:	0800aeb8 	.word	0x0800aeb8
 80013f0:	0800af5c 	.word	0x0800af5c
 80013f4:	0800af60 	.word	0x0800af60
 80013f8:	0800af64 	.word	0x0800af64
 80013fc:	0800af68 	.word	0x0800af68
 8001400:	0800af6c 	.word	0x0800af6c
 8001404:	0800aec0 	.word	0x0800aec0
 8001408:	0800af70 	.word	0x0800af70

0800140c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	; 0x30
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a58      	ldr	r2, [pc, #352]	; (8001578 <I2Cx_MspInit+0x16c>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d15b      	bne.n	80014d4 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 800141c:	4b57      	ldr	r3, [pc, #348]	; (800157c <I2Cx_MspInit+0x170>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	4a56      	ldr	r2, [pc, #344]	; (800157c <I2Cx_MspInit+0x170>)
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	6313      	str	r3, [r2, #48]	; 0x30
 8001428:	4b54      	ldr	r3, [pc, #336]	; (800157c <I2Cx_MspInit+0x170>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8001434:	4b51      	ldr	r3, [pc, #324]	; (800157c <I2Cx_MspInit+0x170>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	4a50      	ldr	r2, [pc, #320]	; (800157c <I2Cx_MspInit+0x170>)
 800143a:	f043 0302 	orr.w	r3, r3, #2
 800143e:	6313      	str	r3, [r2, #48]	; 0x30
 8001440:	4b4e      	ldr	r3, [pc, #312]	; (800157c <I2Cx_MspInit+0x170>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800144c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001450:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001452:	2312      	movs	r3, #18
 8001454:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800145a:	2302      	movs	r3, #2
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 800145e:	2304      	movs	r3, #4
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	4845      	ldr	r0, [pc, #276]	; (8001580 <I2Cx_MspInit+0x174>)
 800146a:	f002 fcbd 	bl	8003de8 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8001472:	230b      	movs	r3, #11
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	4841      	ldr	r0, [pc, #260]	; (8001584 <I2Cx_MspInit+0x178>)
 800147e:	f002 fcb3 	bl	8003de8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001482:	4b3e      	ldr	r3, [pc, #248]	; (800157c <I2Cx_MspInit+0x170>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a3d      	ldr	r2, [pc, #244]	; (800157c <I2Cx_MspInit+0x170>)
 8001488:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b3b      	ldr	r3, [pc, #236]	; (800157c <I2Cx_MspInit+0x170>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800149a:	4b38      	ldr	r3, [pc, #224]	; (800157c <I2Cx_MspInit+0x170>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4a37      	ldr	r2, [pc, #220]	; (800157c <I2Cx_MspInit+0x170>)
 80014a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014a4:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80014a6:	4b35      	ldr	r3, [pc, #212]	; (800157c <I2Cx_MspInit+0x170>)
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	4a34      	ldr	r2, [pc, #208]	; (800157c <I2Cx_MspInit+0x170>)
 80014ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014b0:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	210f      	movs	r1, #15
 80014b6:	205f      	movs	r0, #95	; 0x5f
 80014b8:	f001 fa2c 	bl	8002914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80014bc:	205f      	movs	r0, #95	; 0x5f
 80014be:	f001 fa45 	bl	800294c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	210f      	movs	r1, #15
 80014c6:	2060      	movs	r0, #96	; 0x60
 80014c8:	f001 fa24 	bl	8002914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 80014cc:	2060      	movs	r0, #96	; 0x60
 80014ce:	f001 fa3d 	bl	800294c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80014d2:	e04d      	b.n	8001570 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80014d4:	4b29      	ldr	r3, [pc, #164]	; (800157c <I2Cx_MspInit+0x170>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	4a28      	ldr	r2, [pc, #160]	; (800157c <I2Cx_MspInit+0x170>)
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	6313      	str	r3, [r2, #48]	; 0x30
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <I2Cx_MspInit+0x170>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80014ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014f0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80014f2:	2312      	movs	r3, #18
 80014f4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80014fa:	2302      	movs	r3, #2
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80014fe:	2304      	movs	r3, #4
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	4619      	mov	r1, r3
 8001508:	481e      	ldr	r0, [pc, #120]	; (8001584 <I2Cx_MspInit+0x178>)
 800150a:	f002 fc6d 	bl	8003de8 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800150e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	481a      	ldr	r0, [pc, #104]	; (8001584 <I2Cx_MspInit+0x178>)
 800151c:	f002 fc64 	bl	8003de8 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <I2Cx_MspInit+0x170>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	4a15      	ldr	r2, [pc, #84]	; (800157c <I2Cx_MspInit+0x170>)
 8001526:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800152a:	6413      	str	r3, [r2, #64]	; 0x40
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <I2Cx_MspInit+0x170>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <I2Cx_MspInit+0x170>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4a0f      	ldr	r2, [pc, #60]	; (800157c <I2Cx_MspInit+0x170>)
 800153e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001542:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001544:	4b0d      	ldr	r3, [pc, #52]	; (800157c <I2Cx_MspInit+0x170>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	4a0c      	ldr	r2, [pc, #48]	; (800157c <I2Cx_MspInit+0x170>)
 800154a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800154e:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	210f      	movs	r1, #15
 8001554:	201f      	movs	r0, #31
 8001556:	f001 f9dd 	bl	8002914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800155a:	201f      	movs	r0, #31
 800155c:	f001 f9f6 	bl	800294c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	210f      	movs	r1, #15
 8001564:	2020      	movs	r0, #32
 8001566:	f001 f9d5 	bl	8002914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800156a:	2020      	movs	r0, #32
 800156c:	f001 f9ee 	bl	800294c <HAL_NVIC_EnableIRQ>
}
 8001570:	bf00      	nop
 8001572:	3730      	adds	r7, #48	; 0x30
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000006c 	.word	0x2000006c
 800157c:	40023800 	.word	0x40023800
 8001580:	40020c00 	.word	0x40020c00
 8001584:	40020400 	.word	0x40020400

08001588 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f003 f9f9 	bl	8004988 <HAL_I2C_GetState>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d125      	bne.n	80015e8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <I2Cx_Init+0x68>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d103      	bne.n	80015ac <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <I2Cx_Init+0x6c>)
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	e002      	b.n	80015b2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <I2Cx_Init+0x70>)
 80015b0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a11      	ldr	r2, [pc, #68]	; (80015fc <I2Cx_Init+0x74>)
 80015b6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ff15 	bl	800140c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f002 fece 	bl	8004384 <HAL_I2C_Init>
  }
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000006c 	.word	0x2000006c
 80015f4:	40006000 	.word	0x40006000
 80015f8:	40005400 	.word	0x40005400
 80015fc:	40912732 	.word	0x40912732

08001600 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af04      	add	r7, sp, #16
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	4608      	mov	r0, r1
 800160a:	4611      	mov	r1, r2
 800160c:	461a      	mov	r2, r3
 800160e:	4603      	mov	r3, r0
 8001610:	72fb      	strb	r3, [r7, #11]
 8001612:	460b      	mov	r3, r1
 8001614:	813b      	strh	r3, [r7, #8]
 8001616:	4613      	mov	r3, r2
 8001618:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800161e:	7afb      	ldrb	r3, [r7, #11]
 8001620:	b299      	uxth	r1, r3
 8001622:	88f8      	ldrh	r0, [r7, #6]
 8001624:	893a      	ldrh	r2, [r7, #8]
 8001626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162a:	9302      	str	r3, [sp, #8]
 800162c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	6a3b      	ldr	r3, [r7, #32]
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	4603      	mov	r3, r0
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f003 f88c 	bl	8004754 <HAL_I2C_Mem_Read>
 800163c:	4603      	mov	r3, r0
 800163e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d004      	beq.n	8001650 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001646:	7afb      	ldrb	r3, [r7, #11]
 8001648:	4619      	mov	r1, r3
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 f832 	bl	80016b4 <I2Cx_Error>
  }
  return status;
 8001650:	7dfb      	ldrb	r3, [r7, #23]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b08a      	sub	sp, #40	; 0x28
 800165e:	af04      	add	r7, sp, #16
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	4608      	mov	r0, r1
 8001664:	4611      	mov	r1, r2
 8001666:	461a      	mov	r2, r3
 8001668:	4603      	mov	r3, r0
 800166a:	72fb      	strb	r3, [r7, #11]
 800166c:	460b      	mov	r3, r1
 800166e:	813b      	strh	r3, [r7, #8]
 8001670:	4613      	mov	r3, r2
 8001672:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001678:	7afb      	ldrb	r3, [r7, #11]
 800167a:	b299      	uxth	r1, r3
 800167c:	88f8      	ldrh	r0, [r7, #6]
 800167e:	893a      	ldrh	r2, [r7, #8]
 8001680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001684:	9302      	str	r3, [sp, #8]
 8001686:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	4603      	mov	r3, r0
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f002 ff4b 	bl	800452c <HAL_I2C_Mem_Write>
 8001696:	4603      	mov	r3, r0
 8001698:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d004      	beq.n	80016aa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80016a0:	7afb      	ldrb	r3, [r7, #11]
 80016a2:	4619      	mov	r1, r3
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f000 f805 	bl	80016b4 <I2Cx_Error>
  }
  return status;
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f002 feef 	bl	80044a4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ff5e 	bl	8001588 <I2Cx_Init>
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <TS_IO_Init+0x10>)
 80016da:	f7ff ff55 	bl	8001588 <I2Cx_Init>
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000006c 	.word	0x2000006c

080016e8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
 80016f2:	460b      	mov	r3, r1
 80016f4:	71bb      	strb	r3, [r7, #6]
 80016f6:	4613      	mov	r3, r2
 80016f8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80016fa:	79bb      	ldrb	r3, [r7, #6]
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	79f9      	ldrb	r1, [r7, #7]
 8001700:	2301      	movs	r3, #1
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	1d7b      	adds	r3, r7, #5
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2301      	movs	r3, #1
 800170a:	4803      	ldr	r0, [pc, #12]	; (8001718 <TS_IO_Write+0x30>)
 800170c:	f7ff ffa5 	bl	800165a <I2Cx_WriteMultiple>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2000006c 	.word	0x2000006c

0800171c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af02      	add	r7, sp, #8
 8001722:	4603      	mov	r3, r0
 8001724:	460a      	mov	r2, r1
 8001726:	71fb      	strb	r3, [r7, #7]
 8001728:	4613      	mov	r3, r2
 800172a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001730:	79bb      	ldrb	r3, [r7, #6]
 8001732:	b29a      	uxth	r2, r3
 8001734:	79f9      	ldrb	r1, [r7, #7]
 8001736:	2301      	movs	r3, #1
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	f107 030f 	add.w	r3, r7, #15
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2301      	movs	r3, #1
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <TS_IO_Read+0x38>)
 8001744:	f7ff ff5c 	bl	8001600 <I2Cx_ReadMultiple>

  return read_value;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000006c 	.word	0x2000006c

08001758 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af02      	add	r7, sp, #8
 800175e:	603a      	str	r2, [r7, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
 8001766:	460b      	mov	r3, r1
 8001768:	71bb      	strb	r3, [r7, #6]
 800176a:	4613      	mov	r3, r2
 800176c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800176e:	79bb      	ldrb	r3, [r7, #6]
 8001770:	b29a      	uxth	r2, r3
 8001772:	79f9      	ldrb	r1, [r7, #7]
 8001774:	88bb      	ldrh	r3, [r7, #4]
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2301      	movs	r3, #1
 800177e:	4804      	ldr	r0, [pc, #16]	; (8001790 <TS_IO_ReadMultiple+0x38>)
 8001780:	f7ff ff3e 	bl	8001600 <I2Cx_ReadMultiple>
 8001784:	4603      	mov	r3, r0
 8001786:	b29b      	uxth	r3, r3
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2000006c 	.word	0x2000006c

08001794 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 ffdf 	bl	8002760 <HAL_Delay>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80017ae:	2001      	movs	r0, #1
 80017b0:	f000 f804 	bl	80017bc <BSP_LCD_InitEx>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b090      	sub	sp, #64	; 0x40
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80017c6:	f646 3325 	movw	r3, #27429	; 0x6b25
 80017ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 80017d4:	f000 f936 	bl	8001a44 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 80017d8:	f000 fbf4 	bl	8001fc4 <LCD_IO_GetID>
 80017dc:	4603      	mov	r3, r0
 80017de:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 80017e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80017e2:	2b11      	cmp	r3, #17
 80017e4:	d001      	beq.n	80017ea <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 80017e6:	2301      	movs	r3, #1
 80017e8:	e113      	b.n	8001a12 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 80017ea:	f000 fbf3 	bl	8001fd4 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 80017ee:	4b8b      	ldr	r3, [pc, #556]	; (8001a1c <BSP_LCD_InitEx+0x260>)
 80017f0:	4a8b      	ldr	r2, [pc, #556]	; (8001a20 <BSP_LCD_InitEx+0x264>)
 80017f2:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 80017f4:	4889      	ldr	r0, [pc, #548]	; (8001a1c <BSP_LCD_InitEx+0x260>)
 80017f6:	f001 ff8d 	bl	8003714 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 80017fa:	2364      	movs	r3, #100	; 0x64
 80017fc:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 80017fe:	2305      	movs	r3, #5
 8001800:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8001806:	f24f 4324 	movw	r3, #62500	; 0xf424
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800180c:	4b83      	ldr	r3, [pc, #524]	; (8001a1c <BSP_LCD_InitEx+0x260>)
 800180e:	2201      	movs	r2, #1
 8001810:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	4a83      	ldr	r2, [pc, #524]	; (8001a24 <BSP_LCD_InitEx+0x268>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	0a9b      	lsrs	r3, r3, #10
 800181e:	4a7f      	ldr	r2, [pc, #508]	; (8001a1c <BSP_LCD_InitEx+0x260>)
 8001820:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	4619      	mov	r1, r3
 8001828:	487c      	ldr	r0, [pc, #496]	; (8001a1c <BSP_LCD_InitEx+0x260>)
 800182a:	f001 fe59 	bl	80034e0 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d108      	bne.n	8001846 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001834:	4b7c      	ldr	r3, [pc, #496]	; (8001a28 <BSP_LCD_InitEx+0x26c>)
 8001836:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800183a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800183c:	4b7b      	ldr	r3, [pc, #492]	; (8001a2c <BSP_LCD_InitEx+0x270>)
 800183e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	e007      	b.n	8001856 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8001846:	4b78      	ldr	r3, [pc, #480]	; (8001a28 <BSP_LCD_InitEx+0x26c>)
 8001848:	f44f 7248 	mov.w	r2, #800	; 0x320
 800184c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800184e:	4b77      	ldr	r3, [pc, #476]	; (8001a2c <BSP_LCD_InitEx+0x270>)
 8001850:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001854:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8001856:	4b74      	ldr	r3, [pc, #464]	; (8001a28 <BSP_LCD_InitEx+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 800185c:	4b73      	ldr	r3, [pc, #460]	; (8001a2c <BSP_LCD_InitEx+0x270>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8001862:	2301      	movs	r3, #1
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8001866:	230f      	movs	r3, #15
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 800186a:	2310      	movs	r3, #16
 800186c:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 800186e:	2302      	movs	r3, #2
 8001870:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8001872:	2322      	movs	r3, #34	; 0x22
 8001874:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8001876:	2322      	movs	r3, #34	; 0x22
 8001878:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 800187a:	4b6d      	ldr	r3, [pc, #436]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8001880:	4b6b      	ldr	r3, [pc, #428]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 8001882:	2205      	movs	r2, #5
 8001884:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8001886:	4b6a      	ldr	r3, [pc, #424]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800188c:	4b68      	ldr	r3, [pc, #416]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8001892:	4b67      	ldr	r3, [pc, #412]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 8001894:	2200      	movs	r2, #0
 8001896:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8001898:	4b65      	ldr	r3, [pc, #404]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 800189a:	2202      	movs	r2, #2
 800189c:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 800189e:	4b64      	ldr	r3, [pc, #400]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 80018a0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80018a4:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80018a6:	4b62      	ldr	r3, [pc, #392]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80018ac:	4a60      	ldr	r2, [pc, #384]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 80018ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b0:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018b6:	fb02 f203 	mul.w	r2, r2, r3
 80018ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c0:	4a5b      	ldr	r2, [pc, #364]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 80018c2:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018c8:	fb02 f203 	mul.w	r2, r2, r3
 80018cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d2:	4a57      	ldr	r2, [pc, #348]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 80018d4:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 80018d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	441a      	add	r2, r3
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	441a      	add	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	4413      	add	r3, r2
 80018e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018e6:	fb02 f203 	mul.w	r2, r2, r3
 80018ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f0:	4a4f      	ldr	r2, [pc, #316]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 80018f2:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 80018f4:	4a4e      	ldr	r2, [pc, #312]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 80018f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f8:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 80018fa:	4a4d      	ldr	r2, [pc, #308]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001900:	4a4b      	ldr	r2, [pc, #300]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8001906:	4a4a      	ldr	r2, [pc, #296]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 8001908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800190c:	4b48      	ldr	r3, [pc, #288]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 800190e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001912:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001914:	4b46      	ldr	r3, [pc, #280]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 8001916:	2210      	movs	r2, #16
 8001918:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800191a:	4b45      	ldr	r3, [pc, #276]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 800191c:	2200      	movs	r2, #0
 800191e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001920:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 8001922:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001926:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001928:	4b41      	ldr	r3, [pc, #260]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 800192a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800192e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001930:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 8001932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001936:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001938:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 800193a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800193e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8001940:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 8001942:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001946:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8001948:	4b39      	ldr	r3, [pc, #228]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 800194a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800194e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8001950:	4937      	ldr	r1, [pc, #220]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 8001952:	4832      	ldr	r0, [pc, #200]	; (8001a1c <BSP_LCD_InitEx+0x260>)
 8001954:	f001 ff52 	bl	80037fc <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	3b01      	subs	r3, #1
 800195c:	4a35      	ldr	r2, [pc, #212]	; (8001a34 <BSP_LCD_InitEx+0x278>)
 800195e:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8001960:	69fa      	ldr	r2, [r7, #28]
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	4413      	add	r3, r2
 8001966:	3b01      	subs	r3, #1
 8001968:	4a32      	ldr	r2, [pc, #200]	; (8001a34 <BSP_LCD_InitEx+0x278>)
 800196a:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800196c:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <BSP_LCD_InitEx+0x26c>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	441a      	add	r2, r3
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	4413      	add	r3, r2
 8001978:	3b01      	subs	r3, #1
 800197a:	4a2e      	ldr	r2, [pc, #184]	; (8001a34 <BSP_LCD_InitEx+0x278>)
 800197c:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 800197e:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <BSP_LCD_InitEx+0x26c>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	441a      	add	r2, r3
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	441a      	add	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	4413      	add	r3, r2
 800198e:	3b01      	subs	r3, #1
 8001990:	4a28      	ldr	r2, [pc, #160]	; (8001a34 <BSP_LCD_InitEx+0x278>)
 8001992:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <BSP_LCD_InitEx+0x26c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a26      	ldr	r2, [pc, #152]	; (8001a34 <BSP_LCD_InitEx+0x278>)
 800199a:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <BSP_LCD_InitEx+0x270>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a24      	ldr	r2, [pc, #144]	; (8001a34 <BSP_LCD_InitEx+0x278>)
 80019a2:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80019a4:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <BSP_LCD_InitEx+0x27c>)
 80019a6:	2208      	movs	r2, #8
 80019a8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80019aa:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <BSP_LCD_InitEx+0x27c>)
 80019ac:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80019b0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80019b2:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <BSP_LCD_InitEx+0x27c>)
 80019b4:	2207      	movs	r2, #7
 80019b6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80019b8:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <BSP_LCD_InitEx+0x27c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80019be:	481e      	ldr	r0, [pc, #120]	; (8001a38 <BSP_LCD_InitEx+0x27c>)
 80019c0:	f005 f934 	bl	8006c2c <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <BSP_LCD_InitEx+0x278>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <BSP_LCD_InitEx+0x278>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <BSP_LCD_InitEx+0x278>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <BSP_LCD_InitEx+0x278>)
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <BSP_LCD_InitEx+0x278>)
 80019e4:	4a15      	ldr	r2, [pc, #84]	; (8001a3c <BSP_LCD_InitEx+0x280>)
 80019e6:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 80019e8:	4911      	ldr	r1, [pc, #68]	; (8001a30 <BSP_LCD_InitEx+0x274>)
 80019ea:	4812      	ldr	r0, [pc, #72]	; (8001a34 <BSP_LCD_InitEx+0x278>)
 80019ec:	f003 fd60 	bl	80054b0 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 80019f0:	4810      	ldr	r0, [pc, #64]	; (8001a34 <BSP_LCD_InitEx+0x278>)
 80019f2:	f003 f9f3 	bl	8004ddc <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 80019f6:	4809      	ldr	r0, [pc, #36]	; (8001a1c <BSP_LCD_InitEx+0x260>)
 80019f8:	f002 f900 	bl	8003bfc <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80019fc:	f000 fc6a 	bl	80022d4 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001a00:	480f      	ldr	r0, [pc, #60]	; (8001a40 <BSP_LCD_InitEx+0x284>)
 8001a02:	f000 f911 	bl	8001c28 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f7ff faa8 	bl	8000f60 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3740      	adds	r7, #64	; 0x40
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20009670 	.word	0x20009670
 8001a20:	40016c00 	.word	0x40016c00
 8001a24:	43215e57 	.word	0x43215e57
 8001a28:	20000034 	.word	0x20000034
 8001a2c:	20000038 	.word	0x20000038
 8001a30:	200000b8 	.word	0x200000b8
 8001a34:	200095c8 	.word	0x200095c8
 8001a38:	20000140 	.word	0x20000140
 8001a3c:	40016800 	.word	0x40016800
 8001a40:	2000002c 	.word	0x2000002c

08001a44 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <BSP_LCD_Reset+0x68>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a17      	ldr	r2, [pc, #92]	; (8001aac <BSP_LCD_Reset+0x68>)
 8001a50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <BSP_LCD_Reset+0x68>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8001a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a66:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	4619      	mov	r1, r3
 8001a78:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <BSP_LCD_Reset+0x6c>)
 8001a7a:	f002 f9b5 	bl	8003de8 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a84:	480a      	ldr	r0, [pc, #40]	; (8001ab0 <BSP_LCD_Reset+0x6c>)
 8001a86:	f002 fc63 	bl	8004350 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8001a8a:	2014      	movs	r0, #20
 8001a8c:	f000 fe68 	bl	8002760 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a96:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <BSP_LCD_Reset+0x6c>)
 8001a98:	f002 fc5a 	bl	8004350 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8001a9c:	200a      	movs	r0, #10
 8001a9e:	f000 fe5f 	bl	8002760 <HAL_Delay>
}
 8001aa2:	bf00      	nop
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40022400 	.word	0x40022400

08001ab4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <BSP_LCD_GetXSize+0x14>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000034 	.word	0x20000034

08001acc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <BSP_LCD_GetYSize+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000038 	.word	0x20000038

08001ae4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b090      	sub	sp, #64	; 0x40
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001af4:	f7ff ffde 	bl	8001ab4 <BSP_LCD_GetXSize>
 8001af8:	4603      	mov	r3, r0
 8001afa:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001b00:	f7ff ffe4 	bl	8001acc <BSP_LCD_GetYSize>
 8001b04:	4603      	mov	r3, r0
 8001b06:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001b10:	23ff      	movs	r3, #255	; 0xff
 8001b12:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001b2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001b30:	2307      	movs	r3, #7
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001b34:	f7ff ffbe 	bl	8001ab4 <BSP_LCD_GetXSize>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001b3c:	f7ff ffc6 	bl	8001acc <BSP_LCD_GetYSize>
 8001b40:	4603      	mov	r3, r0
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8001b44:	88fa      	ldrh	r2, [r7, #6]
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4812      	ldr	r0, [pc, #72]	; (8001b98 <BSP_LCD_LayerDefaultInit+0xb4>)
 8001b4e:	f003 fad7 	bl	8005100 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001b52:	88fa      	ldrh	r2, [r7, #6]
 8001b54:	4911      	ldr	r1, [pc, #68]	; (8001b9c <BSP_LCD_LayerDefaultInit+0xb8>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	440b      	add	r3, r1
 8001b60:	3304      	adds	r3, #4
 8001b62:	f04f 32ff 	mov.w	r2, #4294967295
 8001b66:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001b68:	88fa      	ldrh	r2, [r7, #6]
 8001b6a:	490c      	ldr	r1, [pc, #48]	; (8001b9c <BSP_LCD_LayerDefaultInit+0xb8>)
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	3308      	adds	r3, #8
 8001b78:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001b7a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8001b7c:	88fa      	ldrh	r2, [r7, #6]
 8001b7e:	4907      	ldr	r1, [pc, #28]	; (8001b9c <BSP_LCD_LayerDefaultInit+0xb8>)
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001b8e:	601a      	str	r2, [r3, #0]
}
 8001b90:	bf00      	nop
 8001b92:	3740      	adds	r7, #64	; 0x40
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200095c8 	.word	0x200095c8
 8001b9c:	20000128 	.word	0x20000128
 8001ba0:	2000002c 	.word	0x2000002c

08001ba4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <BSP_LCD_SelectLayer+0x1c>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000124 	.word	0x20000124

08001bc4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <BSP_LCD_SetTextColor+0x28>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4907      	ldr	r1, [pc, #28]	; (8001bf0 <BSP_LCD_SetTextColor+0x2c>)
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	601a      	str	r2, [r3, #0]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	20000124 	.word	0x20000124
 8001bf0:	20000128 	.word	0x20000128

08001bf4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <BSP_LCD_SetBackColor+0x2c>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4908      	ldr	r1, [pc, #32]	; (8001c24 <BSP_LCD_SetBackColor+0x30>)
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	601a      	str	r2, [r3, #0]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000124 	.word	0x20000124
 8001c24:	20000128 	.word	0x20000128

08001c28 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <BSP_LCD_SetFont+0x2c>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4908      	ldr	r1, [pc, #32]	; (8001c58 <BSP_LCD_SetFont+0x30>)
 8001c36:	4613      	mov	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	3308      	adds	r3, #8
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	601a      	str	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000124 	.word	0x20000124
 8001c58:	20000128 	.word	0x20000128

08001c5c <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <BSP_LCD_Clear+0x48>)
 8001c66:	681c      	ldr	r4, [r3, #0]
 8001c68:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <BSP_LCD_Clear+0x48>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <BSP_LCD_Clear+0x4c>)
 8001c6e:	2134      	movs	r1, #52	; 0x34
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	335c      	adds	r3, #92	; 0x5c
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	461d      	mov	r5, r3
 8001c7c:	f7ff ff1a 	bl	8001ab4 <BSP_LCD_GetXSize>
 8001c80:	4606      	mov	r6, r0
 8001c82:	f7ff ff23 	bl	8001acc <BSP_LCD_GetYSize>
 8001c86:	4602      	mov	r2, r0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	4613      	mov	r3, r2
 8001c92:	4632      	mov	r2, r6
 8001c94:	4629      	mov	r1, r5
 8001c96:	4620      	mov	r0, r4
 8001c98:	f000 fae4 	bl	8002264 <LL_FillBuffer>
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca4:	20000124 	.word	0x20000124
 8001ca8:	200095c8 	.word	0x200095c8

08001cac <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	80bb      	strh	r3, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <BSP_LCD_DisplayChar+0x80>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	491b      	ldr	r1, [pc, #108]	; (8001d30 <BSP_LCD_DisplayChar+0x84>)
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	3308      	adds	r3, #8
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6819      	ldr	r1, [r3, #0]
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <BSP_LCD_DisplayChar+0x80>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4c14      	ldr	r4, [pc, #80]	; (8001d30 <BSP_LCD_DisplayChar+0x84>)
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4423      	add	r3, r4
 8001cea:	3308      	adds	r3, #8
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001cf0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001cf4:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <BSP_LCD_DisplayChar+0x80>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4c0d      	ldr	r4, [pc, #52]	; (8001d30 <BSP_LCD_DisplayChar+0x84>)
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4423      	add	r3, r4
 8001d04:	3308      	adds	r3, #8
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	889b      	ldrh	r3, [r3, #4]
 8001d0a:	3307      	adds	r3, #7
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	da00      	bge.n	8001d12 <BSP_LCD_DisplayChar+0x66>
 8001d10:	3307      	adds	r3, #7
 8001d12:	10db      	asrs	r3, r3, #3
 8001d14:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001d18:	18ca      	adds	r2, r1, r3
 8001d1a:	88b9      	ldrh	r1, [r7, #4]
 8001d1c:	88fb      	ldrh	r3, [r7, #6]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f9e8 	bl	80020f4 <DrawChar>
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd90      	pop	{r4, r7, pc}
 8001d2c:	20000124 	.word	0x20000124
 8001d30:	20000128 	.word	0x20000128

08001d34 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001d34:	b5b0      	push	{r4, r5, r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60ba      	str	r2, [r7, #8]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4603      	mov	r3, r0
 8001d40:	81fb      	strh	r3, [r7, #14]
 8001d42:	460b      	mov	r3, r1
 8001d44:	81bb      	strh	r3, [r7, #12]
 8001d46:	4613      	mov	r3, r2
 8001d48:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	83fb      	strh	r3, [r7, #30]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8001d5e:	e002      	b.n	8001d66 <BSP_LCD_DisplayStringAt+0x32>
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	3301      	adds	r3, #1
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	617a      	str	r2, [r7, #20]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f6      	bne.n	8001d60 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001d72:	f7ff fe9f 	bl	8001ab4 <BSP_LCD_GetXSize>
 8001d76:	4b4f      	ldr	r3, [pc, #316]	; (8001eb4 <BSP_LCD_DisplayStringAt+0x180>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	494f      	ldr	r1, [pc, #316]	; (8001eb8 <BSP_LCD_DisplayStringAt+0x184>)
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	3308      	adds	r3, #8
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	889b      	ldrh	r3, [r3, #4]
 8001d8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d90:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d01c      	beq.n	8001dd2 <BSP_LCD_DisplayStringAt+0x9e>
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d017      	beq.n	8001dcc <BSP_LCD_DisplayStringAt+0x98>
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d12e      	bne.n	8001dfe <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	1ad1      	subs	r1, r2, r3
 8001da6:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <BSP_LCD_DisplayStringAt+0x180>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4843      	ldr	r0, [pc, #268]	; (8001eb8 <BSP_LCD_DisplayStringAt+0x184>)
 8001dac:	4613      	mov	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4403      	add	r3, r0
 8001db6:	3308      	adds	r3, #8
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	fb03 f301 	mul.w	r3, r3, r1
 8001dc0:	085b      	lsrs	r3, r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	89fb      	ldrh	r3, [r7, #14]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	83fb      	strh	r3, [r7, #30]
      break;
 8001dca:	e01b      	b.n	8001e04 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001dcc:	89fb      	ldrh	r3, [r7, #14]
 8001dce:	83fb      	strh	r3, [r7, #30]
      break;
 8001dd0:	e018      	b.n	8001e04 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	b299      	uxth	r1, r3
 8001dda:	4b36      	ldr	r3, [pc, #216]	; (8001eb4 <BSP_LCD_DisplayStringAt+0x180>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4836      	ldr	r0, [pc, #216]	; (8001eb8 <BSP_LCD_DisplayStringAt+0x184>)
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4403      	add	r3, r0
 8001dea:	3308      	adds	r3, #8
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	889b      	ldrh	r3, [r3, #4]
 8001df0:	fb11 f303 	smulbb	r3, r1, r3
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	89fb      	ldrh	r3, [r7, #14]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	83fb      	strh	r3, [r7, #30]
      break;
 8001dfc:	e002      	b.n	8001e04 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 8001dfe:	89fb      	ldrh	r3, [r7, #14]
 8001e00:	83fb      	strh	r3, [r7, #30]
      break;
 8001e02:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001e04:	8bfb      	ldrh	r3, [r7, #30]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <BSP_LCD_DisplayStringAt+0xde>
 8001e0a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	da1d      	bge.n	8001e4e <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 8001e12:	2301      	movs	r3, #1
 8001e14:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001e16:	e01a      	b.n	8001e4e <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	781a      	ldrb	r2, [r3, #0]
 8001e1c:	89b9      	ldrh	r1, [r7, #12]
 8001e1e:	8bfb      	ldrh	r3, [r7, #30]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff43 	bl	8001cac <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001e26:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <BSP_LCD_DisplayStringAt+0x180>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4923      	ldr	r1, [pc, #140]	; (8001eb8 <BSP_LCD_DisplayStringAt+0x184>)
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	3308      	adds	r3, #8
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	889a      	ldrh	r2, [r3, #4]
 8001e3c:	8bfb      	ldrh	r3, [r7, #30]
 8001e3e:	4413      	add	r3, r2
 8001e40:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3301      	adds	r3, #1
 8001e46:	60bb      	str	r3, [r7, #8]
    i++;
 8001e48:	8bbb      	ldrh	r3, [r7, #28]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	bf14      	ite	ne
 8001e56:	2301      	movne	r3, #1
 8001e58:	2300      	moveq	r3, #0
 8001e5a:	b2dc      	uxtb	r4, r3
 8001e5c:	f7ff fe2a 	bl	8001ab4 <BSP_LCD_GetXSize>
 8001e60:	4605      	mov	r5, r0
 8001e62:	8bb9      	ldrh	r1, [r7, #28]
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <BSP_LCD_DisplayStringAt+0x180>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4813      	ldr	r0, [pc, #76]	; (8001eb8 <BSP_LCD_DisplayStringAt+0x184>)
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4403      	add	r3, r0
 8001e74:	3308      	adds	r3, #8
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	889b      	ldrh	r3, [r3, #4]
 8001e7a:	fb03 f301 	mul.w	r3, r3, r1
 8001e7e:	1aeb      	subs	r3, r5, r3
 8001e80:	b299      	uxth	r1, r3
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <BSP_LCD_DisplayStringAt+0x180>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	480c      	ldr	r0, [pc, #48]	; (8001eb8 <BSP_LCD_DisplayStringAt+0x184>)
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4403      	add	r3, r0
 8001e92:	3308      	adds	r3, #8
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	889b      	ldrh	r3, [r3, #4]
 8001e98:	4299      	cmp	r1, r3
 8001e9a:	bf2c      	ite	cs
 8001e9c:	2301      	movcs	r3, #1
 8001e9e:	2300      	movcc	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	4023      	ands	r3, r4
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1b6      	bne.n	8001e18 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 8001eaa:	bf00      	nop
 8001eac:	3720      	adds	r7, #32
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000124 	.word	0x20000124
 8001eb8:	20000128 	.word	0x20000128

08001ebc <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af02      	add	r7, sp, #8
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	4608      	mov	r0, r1
 8001ec8:	4611      	mov	r1, r2
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4623      	mov	r3, r4
 8001ece:	80fb      	strh	r3, [r7, #6]
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	80bb      	strh	r3, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001ee0:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <BSP_LCD_FillRect+0xa8>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4920      	ldr	r1, [pc, #128]	; (8001f68 <BSP_LCD_FillRect+0xac>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fe66 	bl	8001bc4 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <BSP_LCD_FillRect+0xa8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <BSP_LCD_FillRect+0xb0>)
 8001efe:	2134      	movs	r1, #52	; 0x34
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	335c      	adds	r3, #92	; 0x5c
 8001f08:	681c      	ldr	r4, [r3, #0]
 8001f0a:	f7ff fdd3 	bl	8001ab4 <BSP_LCD_GetXSize>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	88bb      	ldrh	r3, [r7, #4]
 8001f12:	fb03 f202 	mul.w	r2, r3, r2
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4423      	add	r3, r4
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001f20:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <BSP_LCD_FillRect+0xa8>)
 8001f22:	681c      	ldr	r4, [r3, #0]
 8001f24:	68fd      	ldr	r5, [r7, #12]
 8001f26:	887e      	ldrh	r6, [r7, #2]
 8001f28:	f8b7 8000 	ldrh.w	r8, [r7]
 8001f2c:	f7ff fdc2 	bl	8001ab4 <BSP_LCD_GetXSize>
 8001f30:	4602      	mov	r2, r0
 8001f32:	887b      	ldrh	r3, [r7, #2]
 8001f34:	1ad1      	subs	r1, r2, r3
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <BSP_LCD_FillRect+0xa8>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	480b      	ldr	r0, [pc, #44]	; (8001f68 <BSP_LCD_FillRect+0xac>)
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4403      	add	r3, r0
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	9100      	str	r1, [sp, #0]
 8001f4c:	4643      	mov	r3, r8
 8001f4e:	4632      	mov	r2, r6
 8001f50:	4629      	mov	r1, r5
 8001f52:	4620      	mov	r0, r4
 8001f54:	f000 f986 	bl	8002264 <LL_FillBuffer>
}
 8001f58:	bf00      	nop
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f62:	bf00      	nop
 8001f64:	20000124 	.word	0x20000124
 8001f68:	20000128 	.word	0x20000128
 8001f6c:	200095c8 	.word	0x200095c8

08001f70 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af02      	add	r7, sp, #8
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d80d      	bhi.n	8001f9c <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	2215      	movs	r2, #21
 8001f92:	2100      	movs	r1, #0
 8001f94:	480a      	ldr	r0, [pc, #40]	; (8001fc0 <DSI_IO_WriteCmd+0x50>)
 8001f96:	f001 fe6d 	bl	8003c74 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001f9a:	e00d      	b.n	8001fb8 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	9200      	str	r2, [sp, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2239      	movs	r2, #57	; 0x39
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <DSI_IO_WriteCmd+0x50>)
 8001fb4:	f001 fe80 	bl	8003cb8 <HAL_DSI_LongWrite>
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20009670 	.word	0x20009670

08001fc4 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001fc8:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001fda:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	4a31      	ldr	r2, [pc, #196]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8001fe0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe6:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8001ff2:	4b2c      	ldr	r3, [pc, #176]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	4a2b      	ldr	r2, [pc, #172]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8001ff8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ffc:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001ffe:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8002004:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002008:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800200a:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a25      	ldr	r2, [pc, #148]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8002010:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	4a1f      	ldr	r2, [pc, #124]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8002028:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800202c:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8002034:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002038:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 800203a:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a19      	ldr	r2, [pc, #100]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8002040:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	4a13      	ldr	r2, [pc, #76]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8002058:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800205c:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <BSP_LCD_MspInit+0xd0>)
 8002064:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002068:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2103      	movs	r1, #3
 800206e:	2058      	movs	r0, #88	; 0x58
 8002070:	f000 fc50 	bl	8002914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002074:	2058      	movs	r0, #88	; 0x58
 8002076:	f000 fc69 	bl	800294c <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2103      	movs	r1, #3
 800207e:	205a      	movs	r0, #90	; 0x5a
 8002080:	f000 fc48 	bl	8002914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002084:	205a      	movs	r0, #90	; 0x5a
 8002086:	f000 fc61 	bl	800294c <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2103      	movs	r1, #3
 800208e:	2062      	movs	r0, #98	; 0x62
 8002090:	f000 fc40 	bl	8002914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8002094:	2062      	movs	r0, #98	; 0x62
 8002096:	f000 fc59 	bl	800294c <HAL_NVIC_EnableIRQ>
}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800

080020a8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80020a8:	b5b0      	push	{r4, r5, r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	603a      	str	r2, [r7, #0]
 80020b2:	80fb      	strh	r3, [r7, #6]
 80020b4:	460b      	mov	r3, r1
 80020b6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <BSP_LCD_DrawPixel+0x44>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <BSP_LCD_DrawPixel+0x48>)
 80020be:	2134      	movs	r1, #52	; 0x34
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	335c      	adds	r3, #92	; 0x5c
 80020c8:	681c      	ldr	r4, [r3, #0]
 80020ca:	88bd      	ldrh	r5, [r7, #4]
 80020cc:	f7ff fcf2 	bl	8001ab4 <BSP_LCD_GetXSize>
 80020d0:	4603      	mov	r3, r0
 80020d2:	fb03 f205 	mul.w	r2, r3, r5
 80020d6:	88fb      	ldrh	r3, [r7, #6]
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4423      	add	r3, r4
 80020de:	461a      	mov	r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6013      	str	r3, [r2, #0]
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bdb0      	pop	{r4, r5, r7, pc}
 80020ec:	20000124 	.word	0x20000124
 80020f0:	200095c8 	.word	0x200095c8

080020f4 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	603a      	str	r2, [r7, #0]
 80020fe:	80fb      	strh	r3, [r7, #6]
 8002100:	460b      	mov	r3, r1
 8002102:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	61fb      	str	r3, [r7, #28]
 8002108:	2300      	movs	r3, #0
 800210a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 800210c:	4b53      	ldr	r3, [pc, #332]	; (800225c <DrawChar+0x168>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4953      	ldr	r1, [pc, #332]	; (8002260 <DrawChar+0x16c>)
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	3308      	adds	r3, #8
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	88db      	ldrh	r3, [r3, #6]
 8002122:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002124:	4b4d      	ldr	r3, [pc, #308]	; (800225c <DrawChar+0x168>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	494d      	ldr	r1, [pc, #308]	; (8002260 <DrawChar+0x16c>)
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	3308      	adds	r3, #8
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	889b      	ldrh	r3, [r3, #4]
 800213a:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 800213c:	8a3b      	ldrh	r3, [r7, #16]
 800213e:	3307      	adds	r3, #7
 8002140:	2b00      	cmp	r3, #0
 8002142:	da00      	bge.n	8002146 <DrawChar+0x52>
 8002144:	3307      	adds	r3, #7
 8002146:	10db      	asrs	r3, r3, #3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	b2da      	uxtb	r2, r3
 800214e:	8a3b      	ldrh	r3, [r7, #16]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	e076      	b.n	800224a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800215c:	8a3b      	ldrh	r3, [r7, #16]
 800215e:	3307      	adds	r3, #7
 8002160:	2b00      	cmp	r3, #0
 8002162:	da00      	bge.n	8002166 <DrawChar+0x72>
 8002164:	3307      	adds	r3, #7
 8002166:	10db      	asrs	r3, r3, #3
 8002168:	461a      	mov	r2, r3
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fb03 f302 	mul.w	r3, r3, r2
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	4413      	add	r3, r2
 8002174:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002176:	8a3b      	ldrh	r3, [r7, #16]
 8002178:	3307      	adds	r3, #7
 800217a:	2b00      	cmp	r3, #0
 800217c:	da00      	bge.n	8002180 <DrawChar+0x8c>
 800217e:	3307      	adds	r3, #7
 8002180:	10db      	asrs	r3, r3, #3
 8002182:	2b01      	cmp	r3, #1
 8002184:	d002      	beq.n	800218c <DrawChar+0x98>
 8002186:	2b02      	cmp	r3, #2
 8002188:	d004      	beq.n	8002194 <DrawChar+0xa0>
 800218a:	e00c      	b.n	80021a6 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	617b      	str	r3, [r7, #20]
      break;
 8002192:	e016      	b.n	80021c2 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	3201      	adds	r2, #1
 800219e:	7812      	ldrb	r2, [r2, #0]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
      break;
 80021a4:	e00d      	b.n	80021c2 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	041a      	lsls	r2, r3, #16
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	3301      	adds	r3, #1
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	021b      	lsls	r3, r3, #8
 80021b4:	4313      	orrs	r3, r2
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	3202      	adds	r2, #2
 80021ba:	7812      	ldrb	r2, [r2, #0]
 80021bc:	4313      	orrs	r3, r2
 80021be:	617b      	str	r3, [r7, #20]
      break;
 80021c0:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	e036      	b.n	8002236 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 80021c8:	8a3a      	ldrh	r2, [r7, #16]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	1ad2      	subs	r2, r2, r3
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	4413      	add	r3, r2
 80021d2:	3b01      	subs	r3, #1
 80021d4:	2201      	movs	r2, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d012      	beq.n	800220a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	4413      	add	r3, r2
 80021ec:	b298      	uxth	r0, r3
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <DrawChar+0x168>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	491b      	ldr	r1, [pc, #108]	; (8002260 <DrawChar+0x16c>)
 80021f4:	4613      	mov	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	88bb      	ldrh	r3, [r7, #4]
 8002202:	4619      	mov	r1, r3
 8002204:	f7ff ff50 	bl	80020a8 <BSP_LCD_DrawPixel>
 8002208:	e012      	b.n	8002230 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	b29a      	uxth	r2, r3
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	4413      	add	r3, r2
 8002212:	b298      	uxth	r0, r3
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <DrawChar+0x168>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4911      	ldr	r1, [pc, #68]	; (8002260 <DrawChar+0x16c>)
 800221a:	4613      	mov	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	3304      	adds	r3, #4
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	88bb      	ldrh	r3, [r7, #4]
 800222a:	4619      	mov	r1, r3
 800222c:	f7ff ff3c 	bl	80020a8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	3301      	adds	r3, #1
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	8a3b      	ldrh	r3, [r7, #16]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	429a      	cmp	r2, r3
 800223c:	d3c4      	bcc.n	80021c8 <DrawChar+0xd4>
      }
    }
    Ypos++;
 800223e:	88bb      	ldrh	r3, [r7, #4]
 8002240:	3301      	adds	r3, #1
 8002242:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	3301      	adds	r3, #1
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	8a7b      	ldrh	r3, [r7, #18]
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	429a      	cmp	r2, r3
 8002250:	d384      	bcc.n	800215c <DrawChar+0x68>
  }
}
 8002252:	bf00      	nop
 8002254:	3720      	adds	r7, #32
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000124 	.word	0x20000124
 8002260:	20000128 	.word	0x20000128

08002264 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8002272:	4b16      	ldr	r3, [pc, #88]	; (80022cc <LL_FillBuffer+0x68>)
 8002274:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002278:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 800227a:	4b14      	ldr	r3, [pc, #80]	; (80022cc <LL_FillBuffer+0x68>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8002280:	4a12      	ldr	r2, [pc, #72]	; (80022cc <LL_FillBuffer+0x68>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <LL_FillBuffer+0x68>)
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <LL_FillBuffer+0x6c>)
 800228a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 800228c:	480f      	ldr	r0, [pc, #60]	; (80022cc <LL_FillBuffer+0x68>)
 800228e:	f000 fd27 	bl	8002ce0 <HAL_DMA2D_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d115      	bne.n	80022c4 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8002298:	68f9      	ldr	r1, [r7, #12]
 800229a:	480c      	ldr	r0, [pc, #48]	; (80022cc <LL_FillBuffer+0x68>)
 800229c:	f000 ff9e 	bl	80031dc <HAL_DMA2D_ConfigLayer>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10e      	bne.n	80022c4 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69f9      	ldr	r1, [r7, #28]
 80022b0:	4806      	ldr	r0, [pc, #24]	; (80022cc <LL_FillBuffer+0x68>)
 80022b2:	f000 fd6f 	bl	8002d94 <HAL_DMA2D_Start>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d103      	bne.n	80022c4 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 80022bc:	210a      	movs	r1, #10
 80022be:	4803      	ldr	r0, [pc, #12]	; (80022cc <LL_FillBuffer+0x68>)
 80022c0:	f000 fd93 	bl	8002dea <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20009570 	.word	0x20009570
 80022d0:	4002b000 	.word	0x4002b000

080022d4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80022d8:	4b29      	ldr	r3, [pc, #164]	; (8002380 <BSP_SDRAM_Init+0xac>)
 80022da:	4a2a      	ldr	r2, [pc, #168]	; (8002384 <BSP_SDRAM_Init+0xb0>)
 80022dc:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80022de:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <BSP_SDRAM_Init+0xb4>)
 80022e0:	2202      	movs	r2, #2
 80022e2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80022e4:	4b28      	ldr	r3, [pc, #160]	; (8002388 <BSP_SDRAM_Init+0xb4>)
 80022e6:	2207      	movs	r2, #7
 80022e8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80022ea:	4b27      	ldr	r3, [pc, #156]	; (8002388 <BSP_SDRAM_Init+0xb4>)
 80022ec:	2204      	movs	r2, #4
 80022ee:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80022f0:	4b25      	ldr	r3, [pc, #148]	; (8002388 <BSP_SDRAM_Init+0xb4>)
 80022f2:	2207      	movs	r2, #7
 80022f4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80022f6:	4b24      	ldr	r3, [pc, #144]	; (8002388 <BSP_SDRAM_Init+0xb4>)
 80022f8:	2202      	movs	r2, #2
 80022fa:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80022fc:	4b22      	ldr	r3, [pc, #136]	; (8002388 <BSP_SDRAM_Init+0xb4>)
 80022fe:	2202      	movs	r2, #2
 8002300:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002302:	4b21      	ldr	r3, [pc, #132]	; (8002388 <BSP_SDRAM_Init+0xb4>)
 8002304:	2202      	movs	r2, #2
 8002306:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <BSP_SDRAM_Init+0xac>)
 800230a:	2200      	movs	r2, #0
 800230c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800230e:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <BSP_SDRAM_Init+0xac>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <BSP_SDRAM_Init+0xac>)
 8002316:	2204      	movs	r2, #4
 8002318:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800231a:	4b19      	ldr	r3, [pc, #100]	; (8002380 <BSP_SDRAM_Init+0xac>)
 800231c:	2220      	movs	r2, #32
 800231e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002320:	4b17      	ldr	r3, [pc, #92]	; (8002380 <BSP_SDRAM_Init+0xac>)
 8002322:	2240      	movs	r2, #64	; 0x40
 8002324:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <BSP_SDRAM_Init+0xac>)
 8002328:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800232c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <BSP_SDRAM_Init+0xac>)
 8002330:	2200      	movs	r2, #0
 8002332:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <BSP_SDRAM_Init+0xac>)
 8002336:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800233a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800233c:	4b10      	ldr	r3, [pc, #64]	; (8002380 <BSP_SDRAM_Init+0xac>)
 800233e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002342:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <BSP_SDRAM_Init+0xac>)
 8002346:	2200      	movs	r2, #0
 8002348:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800234a:	2100      	movs	r1, #0
 800234c:	480c      	ldr	r0, [pc, #48]	; (8002380 <BSP_SDRAM_Init+0xac>)
 800234e:	f000 f87f 	bl	8002450 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002352:	490d      	ldr	r1, [pc, #52]	; (8002388 <BSP_SDRAM_Init+0xb4>)
 8002354:	480a      	ldr	r0, [pc, #40]	; (8002380 <BSP_SDRAM_Init+0xac>)
 8002356:	f005 f88f 	bl	8007478 <HAL_SDRAM_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <BSP_SDRAM_Init+0xb8>)
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
 8002366:	e002      	b.n	800236e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <BSP_SDRAM_Init+0xb8>)
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800236e:	f240 6003 	movw	r0, #1539	; 0x603
 8002372:	f000 f80d 	bl	8002390 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <BSP_SDRAM_Init+0xb8>)
 8002378:	781b      	ldrb	r3, [r3, #0]
}
 800237a:	4618      	mov	r0, r3
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000968c 	.word	0x2000968c
 8002384:	a0000140 	.word	0xa0000140
 8002388:	200001d0 	.word	0x200001d0
 800238c:	2000003c 	.word	0x2000003c

08002390 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800239c:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80023a2:	4b29      	ldr	r3, [pc, #164]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023a4:	2210      	movs	r2, #16
 80023a6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80023a8:	4b27      	ldr	r3, [pc, #156]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80023ae:	4b26      	ldr	r3, [pc, #152]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80023b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023b8:	4923      	ldr	r1, [pc, #140]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023ba:	4824      	ldr	r0, [pc, #144]	; (800244c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80023bc:	f005 f890 	bl	80074e0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80023c0:	2001      	movs	r0, #1
 80023c2:	f000 f9cd 	bl	8002760 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023c8:	2202      	movs	r2, #2
 80023ca:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80023cc:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023ce:	2210      	movs	r2, #16
 80023d0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80023d2:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80023de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e2:	4919      	ldr	r1, [pc, #100]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023e4:	4819      	ldr	r0, [pc, #100]	; (800244c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80023e6:	f005 f87b 	bl	80074e0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023ec:	2203      	movs	r2, #3
 80023ee:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023f2:	2210      	movs	r2, #16
 80023f4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80023f6:	4b14      	ldr	r3, [pc, #80]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023f8:	2208      	movs	r2, #8
 80023fa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002406:	4910      	ldr	r1, [pc, #64]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002408:	4810      	ldr	r0, [pc, #64]	; (800244c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800240a:	f005 f869 	bl	80074e0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800240e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002412:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002416:	2204      	movs	r2, #4
 8002418:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800241c:	2210      	movs	r2, #16
 800241e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002422:	2201      	movs	r2, #1
 8002424:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4a07      	ldr	r2, [pc, #28]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800242a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800242c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002430:	4905      	ldr	r1, [pc, #20]	; (8002448 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002432:	4806      	ldr	r0, [pc, #24]	; (800244c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002434:	f005 f854 	bl	80074e0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4804      	ldr	r0, [pc, #16]	; (800244c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800243c:	f005 f87b 	bl	8007536 <HAL_SDRAM_ProgramRefreshRate>
}
 8002440:	bf00      	nop
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	200001ec 	.word	0x200001ec
 800244c:	2000968c 	.word	0x2000968c

08002450 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002450:	b580      	push	{r7, lr}
 8002452:	b090      	sub	sp, #64	; 0x40
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800245a:	4b71      	ldr	r3, [pc, #452]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 800245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245e:	4a70      	ldr	r2, [pc, #448]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6393      	str	r3, [r2, #56]	; 0x38
 8002466:	4b6e      	ldr	r3, [pc, #440]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002470:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002472:	4b6b      	ldr	r3, [pc, #428]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a6a      	ldr	r2, [pc, #424]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 8002478:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b68      	ldr	r3, [pc, #416]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800248a:	4b65      	ldr	r3, [pc, #404]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a64      	ldr	r2, [pc, #400]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 8002490:	f043 0308 	orr.w	r3, r3, #8
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b62      	ldr	r3, [pc, #392]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	623b      	str	r3, [r7, #32]
 80024a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024a2:	4b5f      	ldr	r3, [pc, #380]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a5e      	ldr	r2, [pc, #376]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 80024a8:	f043 0310 	orr.w	r3, r3, #16
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b5c      	ldr	r3, [pc, #368]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ba:	4b59      	ldr	r3, [pc, #356]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a58      	ldr	r2, [pc, #352]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 80024c0:	f043 0320 	orr.w	r3, r3, #32
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b56      	ldr	r3, [pc, #344]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024d2:	4b53      	ldr	r3, [pc, #332]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a52      	ldr	r2, [pc, #328]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 80024d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b50      	ldr	r3, [pc, #320]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ea:	4b4d      	ldr	r3, [pc, #308]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a4c      	ldr	r2, [pc, #304]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 80024f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002502:	4b47      	ldr	r3, [pc, #284]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a46      	ldr	r2, [pc, #280]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 8002508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b44      	ldr	r3, [pc, #272]	; (8002620 <BSP_SDRAM_MspInit+0x1d0>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800251e:	2301      	movs	r3, #1
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002522:	2303      	movs	r3, #3
 8002524:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002526:	230c      	movs	r3, #12
 8002528:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800252a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002530:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002534:	4619      	mov	r1, r3
 8002536:	483b      	ldr	r0, [pc, #236]	; (8002624 <BSP_SDRAM_MspInit+0x1d4>)
 8002538:	f001 fc56 	bl	8003de8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800253c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002546:	4619      	mov	r1, r3
 8002548:	4837      	ldr	r0, [pc, #220]	; (8002628 <BSP_SDRAM_MspInit+0x1d8>)
 800254a:	f001 fc4d 	bl	8003de8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800254e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002558:	4619      	mov	r1, r3
 800255a:	4834      	ldr	r0, [pc, #208]	; (800262c <BSP_SDRAM_MspInit+0x1dc>)
 800255c:	f001 fc44 	bl	8003de8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8002560:	f248 1337 	movw	r3, #33079	; 0x8137
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800256a:	4619      	mov	r1, r3
 800256c:	4830      	ldr	r0, [pc, #192]	; (8002630 <BSP_SDRAM_MspInit+0x1e0>)
 800256e:	f001 fc3b 	bl	8003de8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002572:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002578:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800257c:	4619      	mov	r1, r3
 800257e:	482d      	ldr	r0, [pc, #180]	; (8002634 <BSP_SDRAM_MspInit+0x1e4>)
 8002580:	f001 fc32 	bl	8003de8 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002584:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 800258a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800258e:	4619      	mov	r1, r3
 8002590:	4829      	ldr	r0, [pc, #164]	; (8002638 <BSP_SDRAM_MspInit+0x1e8>)
 8002592:	f001 fc29 	bl	8003de8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002596:	4b29      	ldr	r3, [pc, #164]	; (800263c <BSP_SDRAM_MspInit+0x1ec>)
 8002598:	2200      	movs	r2, #0
 800259a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800259c:	4b27      	ldr	r3, [pc, #156]	; (800263c <BSP_SDRAM_MspInit+0x1ec>)
 800259e:	2280      	movs	r2, #128	; 0x80
 80025a0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80025a2:	4b26      	ldr	r3, [pc, #152]	; (800263c <BSP_SDRAM_MspInit+0x1ec>)
 80025a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <BSP_SDRAM_MspInit+0x1ec>)
 80025ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025b0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025b2:	4b22      	ldr	r3, [pc, #136]	; (800263c <BSP_SDRAM_MspInit+0x1ec>)
 80025b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025b8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <BSP_SDRAM_MspInit+0x1ec>)
 80025bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025c0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80025c2:	4b1e      	ldr	r3, [pc, #120]	; (800263c <BSP_SDRAM_MspInit+0x1ec>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80025c8:	4b1c      	ldr	r3, [pc, #112]	; (800263c <BSP_SDRAM_MspInit+0x1ec>)
 80025ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025ce:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80025d0:	4b1a      	ldr	r3, [pc, #104]	; (800263c <BSP_SDRAM_MspInit+0x1ec>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80025d6:	4b19      	ldr	r3, [pc, #100]	; (800263c <BSP_SDRAM_MspInit+0x1ec>)
 80025d8:	2203      	movs	r2, #3
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80025dc:	4b17      	ldr	r3, [pc, #92]	; (800263c <BSP_SDRAM_MspInit+0x1ec>)
 80025de:	2200      	movs	r2, #0
 80025e0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80025e2:	4b16      	ldr	r3, [pc, #88]	; (800263c <BSP_SDRAM_MspInit+0x1ec>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80025e8:	4b14      	ldr	r3, [pc, #80]	; (800263c <BSP_SDRAM_MspInit+0x1ec>)
 80025ea:	4a15      	ldr	r2, [pc, #84]	; (8002640 <BSP_SDRAM_MspInit+0x1f0>)
 80025ec:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a12      	ldr	r2, [pc, #72]	; (800263c <BSP_SDRAM_MspInit+0x1ec>)
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
 80025f4:	4a11      	ldr	r2, [pc, #68]	; (800263c <BSP_SDRAM_MspInit+0x1ec>)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80025fa:	4810      	ldr	r0, [pc, #64]	; (800263c <BSP_SDRAM_MspInit+0x1ec>)
 80025fc:	f000 fa62 	bl	8002ac4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002600:	480e      	ldr	r0, [pc, #56]	; (800263c <BSP_SDRAM_MspInit+0x1ec>)
 8002602:	f000 f9b1 	bl	8002968 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	210f      	movs	r1, #15
 800260a:	2038      	movs	r0, #56	; 0x38
 800260c:	f000 f982 	bl	8002914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002610:	2038      	movs	r0, #56	; 0x38
 8002612:	f000 f99b 	bl	800294c <HAL_NVIC_EnableIRQ>
}
 8002616:	bf00      	nop
 8002618:	3740      	adds	r7, #64	; 0x40
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	40020c00 	.word	0x40020c00
 8002628:	40021000 	.word	0x40021000
 800262c:	40021400 	.word	0x40021400
 8002630:	40021800 	.word	0x40021800
 8002634:	40021c00 	.word	0x40021c00
 8002638:	40022000 	.word	0x40022000
 800263c:	200001fc 	.word	0x200001fc
 8002640:	40026410 	.word	0x40026410

08002644 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	460a      	mov	r2, r1
 800264e:	80fb      	strh	r3, [r7, #6]
 8002650:	4613      	mov	r3, r2
 8002652:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 800265c:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <BSP_TS_Init+0xb0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a25      	ldr	r2, [pc, #148]	; (80026f8 <BSP_TS_Init+0xb4>)
 8002662:	7812      	ldrb	r2, [r2, #0]
 8002664:	b292      	uxth	r2, r2
 8002666:	4610      	mov	r0, r2
 8002668:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 800266a:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <BSP_TS_Init+0xb0>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2054      	movs	r0, #84	; 0x54
 8002670:	4798      	blx	r3
 8002672:	4603      	mov	r3, r0
 8002674:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8002676:	7b7b      	ldrb	r3, [r7, #13]
 8002678:	2b11      	cmp	r3, #17
 800267a:	d009      	beq.n	8002690 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <BSP_TS_Init+0xb0>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2070      	movs	r0, #112	; 0x70
 8002682:	4798      	blx	r3
 8002684:	4603      	mov	r3, r0
 8002686:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <BSP_TS_Init+0xb4>)
 800268a:	2270      	movs	r2, #112	; 0x70
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	e002      	b.n	8002696 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <BSP_TS_Init+0xb4>)
 8002692:	2254      	movs	r2, #84	; 0x54
 8002694:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8002696:	7b7b      	ldrb	r3, [r7, #13]
 8002698:	2b11      	cmp	r3, #17
 800269a:	d002      	beq.n	80026a2 <BSP_TS_Init+0x5e>
 800269c:	7bbb      	ldrb	r3, [r7, #14]
 800269e:	2b11      	cmp	r3, #17
 80026a0:	d121      	bne.n	80026e6 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <BSP_TS_Init+0xb8>)
 80026a4:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <BSP_TS_Init+0xb0>)
 80026a6:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 80026a8:	88fa      	ldrh	r2, [r7, #6]
 80026aa:	88bb      	ldrh	r3, [r7, #4]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d203      	bcs.n	80026b8 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 80026b0:	4b13      	ldr	r3, [pc, #76]	; (8002700 <BSP_TS_Init+0xbc>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	e002      	b.n	80026be <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <BSP_TS_Init+0xbc>)
 80026ba:	220c      	movs	r2, #12
 80026bc:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d112      	bne.n	80026ea <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 80026c4:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <BSP_TS_Init+0xb8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	4a0b      	ldr	r2, [pc, #44]	; (80026f8 <BSP_TS_Init+0xb4>)
 80026cc:	7812      	ldrb	r2, [r2, #0]
 80026ce:	b292      	uxth	r2, r2
 80026d0:	4610      	mov	r0, r2
 80026d2:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <BSP_TS_Init+0xb8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	4a07      	ldr	r2, [pc, #28]	; (80026f8 <BSP_TS_Init+0xb4>)
 80026dc:	7812      	ldrb	r2, [r2, #0]
 80026de:	b292      	uxth	r2, r2
 80026e0:	4610      	mov	r0, r2
 80026e2:	4798      	blx	r3
    if(ts_status == TS_OK)
 80026e4:	e001      	b.n	80026ea <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 80026e6:	2303      	movs	r3, #3
 80026e8:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000004 	.word	0x20000004
 80026f8:	20000261 	.word	0x20000261
 80026fc:	2000025c 	.word	0x2000025c
 8002700:	20000260 	.word	0x20000260

08002704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002708:	2003      	movs	r0, #3
 800270a:	f000 f8f8 	bl	80028fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800270e:	2000      	movs	r0, #0
 8002710:	f7fe f9f4 	bl	8000afc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002714:	f7fe f880 	bl	8000818 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_IncTick+0x20>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_IncTick+0x24>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4413      	add	r3, r2
 8002730:	4a04      	ldr	r2, [pc, #16]	; (8002744 <HAL_IncTick+0x24>)
 8002732:	6013      	str	r3, [r2, #0]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	2000003d 	.word	0x2000003d
 8002744:	200096c0 	.word	0x200096c0

08002748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return uwTick;
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <HAL_GetTick+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	200096c0 	.word	0x200096c0

08002760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002768:	f7ff ffee 	bl	8002748 <HAL_GetTick>
 800276c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d005      	beq.n	8002786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_Delay+0x40>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002786:	bf00      	nop
 8002788:	f7ff ffde 	bl	8002748 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	429a      	cmp	r2, r3
 8002796:	d8f7      	bhi.n	8002788 <HAL_Delay+0x28>
  {
  }
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	2000003d 	.word	0x2000003d

080027a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <__NVIC_SetPriorityGrouping+0x40>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c0:	4013      	ands	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d2:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <__NVIC_SetPriorityGrouping+0x40>)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	60d3      	str	r3, [r2, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00
 80027e8:	05fa0000 	.word	0x05fa0000

080027ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <__NVIC_GetPriorityGrouping+0x18>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	f003 0307 	and.w	r3, r3, #7
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	2b00      	cmp	r3, #0
 8002818:	db0b      	blt.n	8002832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	4907      	ldr	r1, [pc, #28]	; (8002840 <__NVIC_EnableIRQ+0x38>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	2001      	movs	r0, #1
 800282a:	fa00 f202 	lsl.w	r2, r0, r2
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000e100 	.word	0xe000e100

08002844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	db0a      	blt.n	800286e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	490c      	ldr	r1, [pc, #48]	; (8002890 <__NVIC_SetPriority+0x4c>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	0112      	lsls	r2, r2, #4
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	440b      	add	r3, r1
 8002868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800286c:	e00a      	b.n	8002884 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4908      	ldr	r1, [pc, #32]	; (8002894 <__NVIC_SetPriority+0x50>)
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	3b04      	subs	r3, #4
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	440b      	add	r3, r1
 8002882:	761a      	strb	r2, [r3, #24]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000e100 	.word	0xe000e100
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f1c3 0307 	rsb	r3, r3, #7
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	bf28      	it	cs
 80028b6:	2304      	movcs	r3, #4
 80028b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3304      	adds	r3, #4
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d902      	bls.n	80028c8 <NVIC_EncodePriority+0x30>
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3b03      	subs	r3, #3
 80028c6:	e000      	b.n	80028ca <NVIC_EncodePriority+0x32>
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	401a      	ands	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43d9      	mvns	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	4313      	orrs	r3, r2
         );
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3724      	adds	r7, #36	; 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ff4c 	bl	80027a4 <__NVIC_SetPriorityGrouping>
}
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002926:	f7ff ff61 	bl	80027ec <__NVIC_GetPriorityGrouping>
 800292a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	6978      	ldr	r0, [r7, #20]
 8002932:	f7ff ffb1 	bl	8002898 <NVIC_EncodePriority>
 8002936:	4602      	mov	r2, r0
 8002938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff80 	bl	8002844 <__NVIC_SetPriority>
}
 8002944:	bf00      	nop
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ff54 	bl	8002808 <__NVIC_EnableIRQ>
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002974:	f7ff fee8 	bl	8002748 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e099      	b.n	8002ab8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a4:	e00f      	b.n	80029c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029a6:	f7ff fecf 	bl	8002748 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b05      	cmp	r3, #5
 80029b2:	d908      	bls.n	80029c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2220      	movs	r2, #32
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2203      	movs	r2, #3
 80029be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e078      	b.n	8002ab8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e8      	bne.n	80029a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4b38      	ldr	r3, [pc, #224]	; (8002ac0 <HAL_DMA_Init+0x158>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d107      	bne.n	8002a30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f023 0307 	bic.w	r3, r3, #7
 8002a46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d117      	bne.n	8002a8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00e      	beq.n	8002a8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f8bd 	bl	8002bec <DMA_CheckFifoParam>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2240      	movs	r2, #64	; 0x40
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a86:	2301      	movs	r3, #1
 8002a88:	e016      	b.n	8002ab8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f874 	bl	8002b80 <DMA_CalcBaseAndBitshift>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa0:	223f      	movs	r2, #63	; 0x3f
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	e010803f 	.word	0xe010803f

08002ac4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e050      	b.n	8002b78 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d101      	bne.n	8002ae6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e048      	b.n	8002b78 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0201 	bic.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2200      	movs	r2, #0
 8002b04:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2221      	movs	r2, #33	; 0x21
 8002b24:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f82a 	bl	8002b80 <DMA_CalcBaseAndBitshift>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b34:	223f      	movs	r2, #63	; 0x3f
 8002b36:	409a      	lsls	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	3b10      	subs	r3, #16
 8002b90:	4a13      	ldr	r2, [pc, #76]	; (8002be0 <DMA_CalcBaseAndBitshift+0x60>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b9a:	4a12      	ldr	r2, [pc, #72]	; (8002be4 <DMA_CalcBaseAndBitshift+0x64>)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d908      	bls.n	8002bc0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <DMA_CalcBaseAndBitshift+0x68>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	1d1a      	adds	r2, r3, #4
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	659a      	str	r2, [r3, #88]	; 0x58
 8002bbe:	e006      	b.n	8002bce <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <DMA_CalcBaseAndBitshift+0x68>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	aaaaaaab 	.word	0xaaaaaaab
 8002be4:	0800ca44 	.word	0x0800ca44
 8002be8:	fffffc00 	.word	0xfffffc00

08002bec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d11f      	bne.n	8002c46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d855      	bhi.n	8002cb8 <DMA_CheckFifoParam+0xcc>
 8002c0c:	a201      	add	r2, pc, #4	; (adr r2, 8002c14 <DMA_CheckFifoParam+0x28>)
 8002c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c12:	bf00      	nop
 8002c14:	08002c25 	.word	0x08002c25
 8002c18:	08002c37 	.word	0x08002c37
 8002c1c:	08002c25 	.word	0x08002c25
 8002c20:	08002cb9 	.word	0x08002cb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d045      	beq.n	8002cbc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c34:	e042      	b.n	8002cbc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c3e:	d13f      	bne.n	8002cc0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c44:	e03c      	b.n	8002cc0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4e:	d121      	bne.n	8002c94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d836      	bhi.n	8002cc4 <DMA_CheckFifoParam+0xd8>
 8002c56:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <DMA_CheckFifoParam+0x70>)
 8002c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5c:	08002c6d 	.word	0x08002c6d
 8002c60:	08002c73 	.word	0x08002c73
 8002c64:	08002c6d 	.word	0x08002c6d
 8002c68:	08002c85 	.word	0x08002c85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c70:	e02f      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d024      	beq.n	8002cc8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c82:	e021      	b.n	8002cc8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c8c:	d11e      	bne.n	8002ccc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c92:	e01b      	b.n	8002ccc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d902      	bls.n	8002ca0 <DMA_CheckFifoParam+0xb4>
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d003      	beq.n	8002ca6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c9e:	e018      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca4:	e015      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00e      	beq.n	8002cd0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb6:	e00b      	b.n	8002cd0 <DMA_CheckFifoParam+0xe4>
      break;
 8002cb8:	bf00      	nop
 8002cba:	e00a      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002cbc:	bf00      	nop
 8002cbe:	e008      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002cc0:	bf00      	nop
 8002cc2:	e006      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002cc4:	bf00      	nop
 8002cc6:	e004      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002cc8:	bf00      	nop
 8002cca:	e002      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      break;   
 8002ccc:	bf00      	nop
 8002cce:	e000      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002cd0:	bf00      	nop
    }
  } 
  
  return status; 
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e049      	b.n	8002d86 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fd fdae 	bl	8000868 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d30:	f023 0107 	bic.w	r1, r3, #7
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d46:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_DMA2D_Init+0xb0>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68d1      	ldr	r1, [r2, #12]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	430b      	orrs	r3, r1
 8002d54:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	051a      	lsls	r2, r3, #20
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	055b      	lsls	r3, r3, #21
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	ffffc000 	.word	0xffffc000

08002d94 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_DMA2D_Start+0x1c>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e018      	b.n	8002de2 <HAL_DMA2D_Start+0x4e>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 faa4 	bl	8003318 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b086      	sub	sp, #24
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d056      	beq.n	8002eb4 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002e06:	f7ff fc9f 	bl	8002748 <HAL_GetTick>
 8002e0a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002e0c:	e04b      	b.n	8002ea6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d023      	beq.n	8002e68 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	f043 0202 	orr.w	r2, r3, #2
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2221      	movs	r2, #33	; 0x21
 8002e52:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2204      	movs	r2, #4
 8002e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0a5      	b.n	8002fb4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d01a      	beq.n	8002ea6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002e70:	f7ff fc6a 	bl	8002748 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d302      	bcc.n	8002e86 <HAL_DMA2D_PollForTransfer+0x9c>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10f      	bne.n	8002ea6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	f043 0220 	orr.w	r2, r3, #32
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2203      	movs	r2, #3
 8002e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e086      	b.n	8002fb4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ac      	beq.n	8002e0e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d061      	beq.n	8002f9a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ed6:	f7ff fc37 	bl	8002748 <HAL_GetTick>
 8002eda:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002edc:	e056      	b.n	8002f8c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d02e      	beq.n	8002f4e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d005      	beq.n	8002f06 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	f043 0204 	orr.w	r2, r3, #4
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	f043 0202 	orr.w	r2, r3, #2
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2a:	f043 0201 	orr.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2229      	movs	r2, #41	; 0x29
 8002f38:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e032      	b.n	8002fb4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d01a      	beq.n	8002f8c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002f56:	f7ff fbf7 	bl	8002748 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d302      	bcc.n	8002f6c <HAL_DMA2D_PollForTransfer+0x182>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10f      	bne.n	8002f8c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f70:	f043 0220 	orr.w	r2, r3, #32
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e013      	b.n	8002fb4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0a1      	beq.n	8002ede <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2212      	movs	r2, #18
 8002fa0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d026      	beq.n	800302c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d021      	beq.n	800302c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ff6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffc:	f043 0201 	orr.w	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2201      	movs	r2, #1
 800300a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2204      	movs	r2, #4
 8003010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	d026      	beq.n	8003084 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d021      	beq.n	8003084 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800304e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2220      	movs	r2, #32
 8003056:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	f043 0202 	orr.w	r2, r3, #2
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2204      	movs	r2, #4
 8003068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d026      	beq.n	80030dc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003094:	2b00      	cmp	r3, #0
 8003096:	d021      	beq.n	80030dc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030a6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2208      	movs	r2, #8
 80030ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b4:	f043 0204 	orr.w	r2, r3, #4
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2204      	movs	r2, #4
 80030c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d013      	beq.n	800310e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00e      	beq.n	800310e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2204      	movs	r2, #4
 8003106:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f853 	bl	80031b4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d024      	beq.n	8003162 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800311e:	2b00      	cmp	r3, #0
 8003120:	d01f      	beq.n	8003162 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003130:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2202      	movs	r2, #2
 8003138:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferCpltCallback != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b00      	cmp	r3, #0
 800316a:	d01f      	beq.n	80031ac <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d01a      	beq.n	80031ac <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003184:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2210      	movs	r2, #16
 800318c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f80e 	bl	80031c8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80031ac:	bf00      	nop
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_DMA2D_ConfigLayer+0x20>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e084      	b.n	8003306 <HAL_DMA2D_ConfigLayer+0x12a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	3320      	adds	r3, #32
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	4413      	add	r3, r2
 800321c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	041b      	lsls	r3, r3, #16
 8003228:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003230:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800323c:	4b35      	ldr	r3, [pc, #212]	; (8003314 <HAL_DMA2D_ConfigLayer+0x138>)
 800323e:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b0a      	cmp	r3, #10
 8003246:	d003      	beq.n	8003250 <HAL_DMA2D_ConfigLayer+0x74>
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b09      	cmp	r3, #9
 800324e:	d107      	bne.n	8003260 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	e005      	b.n	800326c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	061b      	lsls	r3, r3, #24
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d120      	bne.n	80032b4 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	43db      	mvns	r3, r3
 800327c:	ea02 0103 	and.w	r1, r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	430a      	orrs	r2, r1
 8003288:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b0a      	cmp	r3, #10
 800329a:	d003      	beq.n	80032a4 <HAL_DMA2D_ConfigLayer+0xc8>
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b09      	cmp	r3, #9
 80032a2:	d127      	bne.n	80032f4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80032b0:	629a      	str	r2, [r3, #40]	; 0x28
 80032b2:	e01f      	b.n	80032f4 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	69da      	ldr	r2, [r3, #28]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	43db      	mvns	r3, r3
 80032be:	ea02 0103 	and.w	r1, r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b0a      	cmp	r3, #10
 80032dc:	d003      	beq.n	80032e6 <HAL_DMA2D_ConfigLayer+0x10a>
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b09      	cmp	r3, #9
 80032e4:	d106      	bne.n	80032f4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80032f2:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	ff33000f 	.word	0xff33000f

08003318 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003318:	b480      	push	{r7}
 800331a:	b08b      	sub	sp, #44	; 0x2c
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	041a      	lsls	r2, r3, #16
 8003334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003336:	431a      	orrs	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003350:	d174      	bne.n	800343c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003358:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003360:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003368:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d108      	bne.n	800338a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	431a      	orrs	r2, r3
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	4313      	orrs	r3, r2
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
 8003388:	e053      	b.n	8003432 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d106      	bne.n	80033a0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	4313      	orrs	r3, r2
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
 800339e:	e048      	b.n	8003432 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d111      	bne.n	80033cc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	0cdb      	lsrs	r3, r3, #19
 80033ac:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	0a9b      	lsrs	r3, r3, #10
 80033b2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	08db      	lsrs	r3, r3, #3
 80033b8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	02db      	lsls	r3, r3, #11
 80033c2:	4313      	orrs	r3, r2
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ca:	e032      	b.n	8003432 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2b03      	cmp	r3, #3
 80033d2:	d117      	bne.n	8003404 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	0fdb      	lsrs	r3, r3, #31
 80033d8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	0cdb      	lsrs	r3, r3, #19
 80033de:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	0adb      	lsrs	r3, r3, #11
 80033e4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	08db      	lsrs	r3, r3, #3
 80033ea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	015a      	lsls	r2, r3, #5
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	029b      	lsls	r3, r3, #10
 80033f4:	431a      	orrs	r2, r3
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	03db      	lsls	r3, r3, #15
 80033fa:	4313      	orrs	r3, r2
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
 8003402:	e016      	b.n	8003432 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	0f1b      	lsrs	r3, r3, #28
 8003408:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	0d1b      	lsrs	r3, r3, #20
 800340e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	0b1b      	lsrs	r3, r3, #12
 8003414:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	011a      	lsls	r2, r3, #4
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	431a      	orrs	r2, r3
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	031b      	lsls	r3, r3, #12
 800342a:	4313      	orrs	r3, r2
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003438:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800343a:	e003      	b.n	8003444 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	60da      	str	r2, [r3, #12]
}
 8003444:	bf00      	nop
 8003446:	372c      	adds	r7, #44	; 0x2c
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	019a      	lsls	r2, r3, #6
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	431a      	orrs	r2, r3
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	021b      	lsls	r3, r3, #8
 800346a:	431a      	orrs	r2, r3
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	041b      	lsls	r3, r3, #16
 8003470:	431a      	orrs	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003476:	bf00      	nop
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b086      	sub	sp, #24
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003490:	f7ff f95a 	bl	8002748 <HAL_GetTick>
 8003494:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003496:	e009      	b.n	80034ac <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003498:	f7ff f956 	bl	8002748 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034a6:	d901      	bls.n	80034ac <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e015      	b.n	80034d8 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0ee      	beq.n	8003498 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	019a      	lsls	r2, r3, #6
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	ea42 0103 	orr.w	r1, r2, r3
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	041a      	lsls	r2, r3, #16
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e106      	b.n	8003702 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	7c5b      	ldrb	r3, [r3, #17]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fd f9d8 	bl	80008b4 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2203      	movs	r2, #3
 8003508:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800351e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800352a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003532:	f7ff f909 	bl	8002748 <HAL_GetTick>
 8003536:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003538:	e009      	b.n	800354e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800353a:	f7ff f905 	bl	8002748 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003548:	d901      	bls.n	800354e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e0d9      	b.n	8003702 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003556:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0ed      	beq.n	800353a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	4b68      	ldr	r3, [pc, #416]	; (800370c <HAL_DSI_Init+0x22c>)
 800356c:	400b      	ands	r3, r1
 800356e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	009a      	lsls	r2, r3, #2
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	02db      	lsls	r3, r3, #11
 8003586:	431a      	orrs	r2, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	041b      	lsls	r3, r3, #16
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035c2:	f7ff f8c1 	bl	8002748 <HAL_GetTick>
 80035c6:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80035c8:	e009      	b.n	80035de <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80035ca:	f7ff f8bd 	bl	8002748 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035d8:	d901      	bls.n	80035de <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e091      	b.n	8003702 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0ed      	beq.n	80035ca <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0206 	orr.w	r2, r2, #6
 80035fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0203 	bic.w	r2, r2, #3
 8003612:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0201 	orr.w	r2, r2, #1
 800362c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0203 	bic.w	r2, r2, #3
 8003640:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003668:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6899      	ldr	r1, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <HAL_DSI_Init+0x1aa>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	e000      	b.n	800368c <HAL_DSI_Init+0x1ac>
 800368a:	2301      	movs	r3, #1
 800368c:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	4a1f      	ldr	r2, [pc, #124]	; (8003710 <HAL_DSI_Init+0x230>)
 8003692:	fb02 f203 	mul.w	r2, r2, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	409a      	lsls	r2, r3
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80036c2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	fffc8603 	.word	0xfffc8603
 8003710:	003d0900 	.word	0x003d0900

08003714 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e066      	b.n	80037f4 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2203      	movs	r2, #3
 800372a:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0208 	bic.w	r2, r2, #8
 8003740:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	617b      	str	r3, [r7, #20]
 8003752:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003754:	2300      	movs	r3, #0
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0201 	bic.w	r2, r2, #1
 8003766:	605a      	str	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0206 	bic.w	r2, r2, #6
 8003786:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0201 	bic.w	r2, r2, #1
 800379e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80037c6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80037d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd f8ae 	bl	800093c <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7c1b      	ldrb	r3, [r3, #16]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_DSI_ConfigVideoMode+0x16>
 800380e:	2302      	movs	r3, #2
 8003810:	e1ee      	b.n	8003bf0 <HAL_DSI_ConfigVideoMode+0x3f4>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0203 	bic.w	r2, r2, #3
 800384a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4b8b      	ldr	r3, [pc, #556]	; (8003a98 <HAL_DSI_ConfigVideoMode+0x29c>)
 800386a:	400b      	ands	r3, r1
 800386c:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4b84      	ldr	r3, [pc, #528]	; (8003a9c <HAL_DSI_ConfigVideoMode+0x2a0>)
 800388c:	400b      	ands	r3, r1
 800388e:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4b7b      	ldr	r3, [pc, #492]	; (8003a9c <HAL_DSI_ConfigVideoMode+0x2a0>)
 80038ae:	400b      	ands	r3, r1
 80038b0:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0203 	bic.w	r2, r2, #3
 80038d2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68d9      	ldr	r1, [r3, #12]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0207 	bic.w	r2, r2, #7
 80038f4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6959      	ldr	r1, [r3, #20]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	431a      	orrs	r2, r3
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 020f 	bic.w	r2, r2, #15
 8003922:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6919      	ldr	r1, [r3, #16]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 020e 	bic.w	r2, r2, #14
 8003946:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	005a      	lsls	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b03      	cmp	r3, #3
 8003968:	d110      	bne.n	800398c <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003978:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6919      	ldr	r1, [r3, #16]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4b42      	ldr	r3, [pc, #264]	; (8003aa0 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8003998:	400b      	ands	r3, r1
 800399a:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b39      	ldr	r3, [pc, #228]	; (8003aa0 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80039ba:	400b      	ands	r3, r1
 80039bc:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4b32      	ldr	r3, [pc, #200]	; (8003aa4 <HAL_DSI_ConfigVideoMode+0x2a8>)
 80039dc:	400b      	ands	r3, r1
 80039de:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b2a      	ldr	r3, [pc, #168]	; (8003aa8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80039fe:	400b      	ands	r3, r1
 8003a00:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	4b22      	ldr	r3, [pc, #136]	; (8003aa8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003a20:	400b      	ands	r3, r1
 8003a22:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003a42:	400b      	ands	r3, r1
 8003a44:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <HAL_DSI_ConfigVideoMode+0x29c>)
 8003a64:	400b      	ands	r3, r1
 8003a66:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a88:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a94:	e00a      	b.n	8003aac <HAL_DSI_ConfigVideoMode+0x2b0>
 8003a96:	bf00      	nop
 8003a98:	ffffc000 	.word	0xffffc000
 8003a9c:	ffffe000 	.word	0xffffe000
 8003aa0:	fffff000 	.word	0xfffff000
 8003aa4:	ffff8000 	.word	0xffff8000
 8003aa8:	fffffc00 	.word	0xfffffc00
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003ac2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6999      	ldr	r1, [r3, #24]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ace:	041a      	lsls	r2, r3, #16
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ae6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6999      	ldr	r1, [r3, #24]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b08:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b4c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b90:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bb2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bd4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	7c1b      	ldrb	r3, [r3, #16]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_DSI_Start+0x14>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e02b      	b.n	8003c68 <HAL_DSI_Start+0x6c>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0201 	orr.w	r2, r2, #1
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0208 	orr.w	r2, r2, #8
 8003c4c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	7c1b      	ldrb	r3, [r3, #16]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_DSI_ShortWrite+0x1a>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e010      	b.n	8003cb0 <HAL_DSI_ShortWrite+0x3c>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f7ff fbef 	bl	8003482 <DSI_ShortWrite>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	741a      	strb	r2, [r3, #16]

  return status;
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08c      	sub	sp, #48	; 0x30
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc8:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	7c1b      	ldrb	r3, [r3, #16]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_DSI_LongWrite+0x1e>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e084      	b.n	8003de0 <HAL_DSI_LongWrite+0x128>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cdc:	f7fe fd34 	bl	8002748 <HAL_GetTick>
 8003ce0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003ce2:	e00c      	b.n	8003cfe <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003ce4:	f7fe fd30 	bl	8002748 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cf2:	d904      	bls.n	8003cfe <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e070      	b.n	8003de0 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0eb      	beq.n	8003ce4 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	bf28      	it	cs
 8003d16:	2303      	movcs	r3, #3
 8003d18:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	623b      	str	r3, [r7, #32]
 8003d1e:	e00f      	b.n	8003d40 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	4413      	add	r3, r2
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	623b      	str	r3, [r7, #32]
 8003d40:	6a3a      	ldr	r2, [r7, #32]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d3eb      	bcc.n	8003d20 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003d60:	e028      	b.n	8003db4 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	bf28      	it	cs
 8003d68:	2304      	movcs	r3, #4
 8003d6a:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003d70:	2300      	movs	r3, #0
 8003d72:	623b      	str	r3, [r7, #32]
 8003d74:	e00e      	b.n	8003d94 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	3301      	adds	r3, #1
 8003d92:	623b      	str	r3, [r7, #32]
 8003d94:	6a3a      	ldr	r2, [r7, #32]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d3ec      	bcc.n	8003d76 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69fa      	ldr	r2, [r7, #28]
 8003da2:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4413      	add	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1d3      	bne.n	8003d62 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003dc2:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	68b9      	ldr	r1, [r7, #8]
 8003dd4:	f7ff fb3c 	bl	8003450 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3728      	adds	r7, #40	; 0x28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	; 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	e175      	b.n	80040f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e08:	2201      	movs	r2, #1
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	f040 8164 	bne.w	80040ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d003      	beq.n	8003e36 <HAL_GPIO_Init+0x4e>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b12      	cmp	r3, #18
 8003e34:	d123      	bne.n	8003e7e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	08da      	lsrs	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3208      	adds	r2, #8
 8003e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	220f      	movs	r2, #15
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	43db      	mvns	r3, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4013      	ands	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	691a      	ldr	r2, [r3, #16]
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	08da      	lsrs	r2, r3, #3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3208      	adds	r2, #8
 8003e78:	69b9      	ldr	r1, [r7, #24]
 8003e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	2203      	movs	r2, #3
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4013      	ands	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 0203 	and.w	r2, r3, #3
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d00b      	beq.n	8003ed2 <HAL_GPIO_Init+0xea>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d007      	beq.n	8003ed2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ec6:	2b11      	cmp	r3, #17
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b12      	cmp	r3, #18
 8003ed0:	d130      	bne.n	8003f34 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	2203      	movs	r2, #3
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f08:	2201      	movs	r2, #1
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	f003 0201 	and.w	r2, r3, #1
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	2203      	movs	r2, #3
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80be 	beq.w	80040ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f72:	4b65      	ldr	r3, [pc, #404]	; (8004108 <HAL_GPIO_Init+0x320>)
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	4a64      	ldr	r2, [pc, #400]	; (8004108 <HAL_GPIO_Init+0x320>)
 8003f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f7e:	4b62      	ldr	r3, [pc, #392]	; (8004108 <HAL_GPIO_Init+0x320>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f8a:	4a60      	ldr	r2, [pc, #384]	; (800410c <HAL_GPIO_Init+0x324>)
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	089b      	lsrs	r3, r3, #2
 8003f90:	3302      	adds	r3, #2
 8003f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	220f      	movs	r2, #15
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4013      	ands	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a57      	ldr	r2, [pc, #348]	; (8004110 <HAL_GPIO_Init+0x328>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d037      	beq.n	8004026 <HAL_GPIO_Init+0x23e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a56      	ldr	r2, [pc, #344]	; (8004114 <HAL_GPIO_Init+0x32c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d031      	beq.n	8004022 <HAL_GPIO_Init+0x23a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a55      	ldr	r2, [pc, #340]	; (8004118 <HAL_GPIO_Init+0x330>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d02b      	beq.n	800401e <HAL_GPIO_Init+0x236>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a54      	ldr	r2, [pc, #336]	; (800411c <HAL_GPIO_Init+0x334>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d025      	beq.n	800401a <HAL_GPIO_Init+0x232>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a53      	ldr	r2, [pc, #332]	; (8004120 <HAL_GPIO_Init+0x338>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d01f      	beq.n	8004016 <HAL_GPIO_Init+0x22e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a52      	ldr	r2, [pc, #328]	; (8004124 <HAL_GPIO_Init+0x33c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d019      	beq.n	8004012 <HAL_GPIO_Init+0x22a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a51      	ldr	r2, [pc, #324]	; (8004128 <HAL_GPIO_Init+0x340>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <HAL_GPIO_Init+0x226>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a50      	ldr	r2, [pc, #320]	; (800412c <HAL_GPIO_Init+0x344>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00d      	beq.n	800400a <HAL_GPIO_Init+0x222>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a4f      	ldr	r2, [pc, #316]	; (8004130 <HAL_GPIO_Init+0x348>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d007      	beq.n	8004006 <HAL_GPIO_Init+0x21e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a4e      	ldr	r2, [pc, #312]	; (8004134 <HAL_GPIO_Init+0x34c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d101      	bne.n	8004002 <HAL_GPIO_Init+0x21a>
 8003ffe:	2309      	movs	r3, #9
 8004000:	e012      	b.n	8004028 <HAL_GPIO_Init+0x240>
 8004002:	230a      	movs	r3, #10
 8004004:	e010      	b.n	8004028 <HAL_GPIO_Init+0x240>
 8004006:	2308      	movs	r3, #8
 8004008:	e00e      	b.n	8004028 <HAL_GPIO_Init+0x240>
 800400a:	2307      	movs	r3, #7
 800400c:	e00c      	b.n	8004028 <HAL_GPIO_Init+0x240>
 800400e:	2306      	movs	r3, #6
 8004010:	e00a      	b.n	8004028 <HAL_GPIO_Init+0x240>
 8004012:	2305      	movs	r3, #5
 8004014:	e008      	b.n	8004028 <HAL_GPIO_Init+0x240>
 8004016:	2304      	movs	r3, #4
 8004018:	e006      	b.n	8004028 <HAL_GPIO_Init+0x240>
 800401a:	2303      	movs	r3, #3
 800401c:	e004      	b.n	8004028 <HAL_GPIO_Init+0x240>
 800401e:	2302      	movs	r3, #2
 8004020:	e002      	b.n	8004028 <HAL_GPIO_Init+0x240>
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <HAL_GPIO_Init+0x240>
 8004026:	2300      	movs	r3, #0
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	f002 0203 	and.w	r2, r2, #3
 800402e:	0092      	lsls	r2, r2, #2
 8004030:	4093      	lsls	r3, r2
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4313      	orrs	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004038:	4934      	ldr	r1, [pc, #208]	; (800410c <HAL_GPIO_Init+0x324>)
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	089b      	lsrs	r3, r3, #2
 800403e:	3302      	adds	r3, #2
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004046:	4b3c      	ldr	r3, [pc, #240]	; (8004138 <HAL_GPIO_Init+0x350>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	43db      	mvns	r3, r3
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	4013      	ands	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800406a:	4a33      	ldr	r2, [pc, #204]	; (8004138 <HAL_GPIO_Init+0x350>)
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004070:	4b31      	ldr	r3, [pc, #196]	; (8004138 <HAL_GPIO_Init+0x350>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	43db      	mvns	r3, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004094:	4a28      	ldr	r2, [pc, #160]	; (8004138 <HAL_GPIO_Init+0x350>)
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800409a:	4b27      	ldr	r3, [pc, #156]	; (8004138 <HAL_GPIO_Init+0x350>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	43db      	mvns	r3, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4013      	ands	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040be:	4a1e      	ldr	r2, [pc, #120]	; (8004138 <HAL_GPIO_Init+0x350>)
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040c4:	4b1c      	ldr	r3, [pc, #112]	; (8004138 <HAL_GPIO_Init+0x350>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4013      	ands	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040e8:	4a13      	ldr	r2, [pc, #76]	; (8004138 <HAL_GPIO_Init+0x350>)
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	3301      	adds	r3, #1
 80040f2:	61fb      	str	r3, [r7, #28]
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	2b0f      	cmp	r3, #15
 80040f8:	f67f ae86 	bls.w	8003e08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80040fc:	bf00      	nop
 80040fe:	3724      	adds	r7, #36	; 0x24
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	40023800 	.word	0x40023800
 800410c:	40013800 	.word	0x40013800
 8004110:	40020000 	.word	0x40020000
 8004114:	40020400 	.word	0x40020400
 8004118:	40020800 	.word	0x40020800
 800411c:	40020c00 	.word	0x40020c00
 8004120:	40021000 	.word	0x40021000
 8004124:	40021400 	.word	0x40021400
 8004128:	40021800 	.word	0x40021800
 800412c:	40021c00 	.word	0x40021c00
 8004130:	40022000 	.word	0x40022000
 8004134:	40022400 	.word	0x40022400
 8004138:	40013c00 	.word	0x40013c00

0800413c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004146:	2300      	movs	r3, #0
 8004148:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800414e:	2300      	movs	r3, #0
 8004150:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	e0d9      	b.n	800430c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004158:	2201      	movs	r2, #1
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4013      	ands	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	429a      	cmp	r2, r3
 8004170:	f040 80c9 	bne.w	8004306 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004174:	4a6a      	ldr	r2, [pc, #424]	; (8004320 <HAL_GPIO_DeInit+0x1e4>)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	089b      	lsrs	r3, r3, #2
 800417a:	3302      	adds	r3, #2
 800417c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004180:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f003 0303 	and.w	r3, r3, #3
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	220f      	movs	r2, #15
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	4013      	ands	r3, r2
 8004194:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a62      	ldr	r2, [pc, #392]	; (8004324 <HAL_GPIO_DeInit+0x1e8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d037      	beq.n	800420e <HAL_GPIO_DeInit+0xd2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a61      	ldr	r2, [pc, #388]	; (8004328 <HAL_GPIO_DeInit+0x1ec>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d031      	beq.n	800420a <HAL_GPIO_DeInit+0xce>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a60      	ldr	r2, [pc, #384]	; (800432c <HAL_GPIO_DeInit+0x1f0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d02b      	beq.n	8004206 <HAL_GPIO_DeInit+0xca>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a5f      	ldr	r2, [pc, #380]	; (8004330 <HAL_GPIO_DeInit+0x1f4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d025      	beq.n	8004202 <HAL_GPIO_DeInit+0xc6>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a5e      	ldr	r2, [pc, #376]	; (8004334 <HAL_GPIO_DeInit+0x1f8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01f      	beq.n	80041fe <HAL_GPIO_DeInit+0xc2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a5d      	ldr	r2, [pc, #372]	; (8004338 <HAL_GPIO_DeInit+0x1fc>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d019      	beq.n	80041fa <HAL_GPIO_DeInit+0xbe>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a5c      	ldr	r2, [pc, #368]	; (800433c <HAL_GPIO_DeInit+0x200>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d013      	beq.n	80041f6 <HAL_GPIO_DeInit+0xba>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a5b      	ldr	r2, [pc, #364]	; (8004340 <HAL_GPIO_DeInit+0x204>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00d      	beq.n	80041f2 <HAL_GPIO_DeInit+0xb6>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a5a      	ldr	r2, [pc, #360]	; (8004344 <HAL_GPIO_DeInit+0x208>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d007      	beq.n	80041ee <HAL_GPIO_DeInit+0xb2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a59      	ldr	r2, [pc, #356]	; (8004348 <HAL_GPIO_DeInit+0x20c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d101      	bne.n	80041ea <HAL_GPIO_DeInit+0xae>
 80041e6:	2309      	movs	r3, #9
 80041e8:	e012      	b.n	8004210 <HAL_GPIO_DeInit+0xd4>
 80041ea:	230a      	movs	r3, #10
 80041ec:	e010      	b.n	8004210 <HAL_GPIO_DeInit+0xd4>
 80041ee:	2308      	movs	r3, #8
 80041f0:	e00e      	b.n	8004210 <HAL_GPIO_DeInit+0xd4>
 80041f2:	2307      	movs	r3, #7
 80041f4:	e00c      	b.n	8004210 <HAL_GPIO_DeInit+0xd4>
 80041f6:	2306      	movs	r3, #6
 80041f8:	e00a      	b.n	8004210 <HAL_GPIO_DeInit+0xd4>
 80041fa:	2305      	movs	r3, #5
 80041fc:	e008      	b.n	8004210 <HAL_GPIO_DeInit+0xd4>
 80041fe:	2304      	movs	r3, #4
 8004200:	e006      	b.n	8004210 <HAL_GPIO_DeInit+0xd4>
 8004202:	2303      	movs	r3, #3
 8004204:	e004      	b.n	8004210 <HAL_GPIO_DeInit+0xd4>
 8004206:	2302      	movs	r3, #2
 8004208:	e002      	b.n	8004210 <HAL_GPIO_DeInit+0xd4>
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <HAL_GPIO_DeInit+0xd4>
 800420e:	2300      	movs	r3, #0
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	f002 0203 	and.w	r2, r2, #3
 8004216:	0092      	lsls	r2, r2, #2
 8004218:	4093      	lsls	r3, r2
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	429a      	cmp	r2, r3
 800421e:	d132      	bne.n	8004286 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	220f      	movs	r2, #15
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004230:	4a3b      	ldr	r2, [pc, #236]	; (8004320 <HAL_GPIO_DeInit+0x1e4>)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	089b      	lsrs	r3, r3, #2
 8004236:	3302      	adds	r3, #2
 8004238:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	43da      	mvns	r2, r3
 8004240:	4837      	ldr	r0, [pc, #220]	; (8004320 <HAL_GPIO_DeInit+0x1e4>)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	089b      	lsrs	r3, r3, #2
 8004246:	400a      	ands	r2, r1
 8004248:	3302      	adds	r3, #2
 800424a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800424e:	4b3f      	ldr	r3, [pc, #252]	; (800434c <HAL_GPIO_DeInit+0x210>)
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	43db      	mvns	r3, r3
 8004256:	493d      	ldr	r1, [pc, #244]	; (800434c <HAL_GPIO_DeInit+0x210>)
 8004258:	4013      	ands	r3, r2
 800425a:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800425c:	4b3b      	ldr	r3, [pc, #236]	; (800434c <HAL_GPIO_DeInit+0x210>)
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	43db      	mvns	r3, r3
 8004264:	4939      	ldr	r1, [pc, #228]	; (800434c <HAL_GPIO_DeInit+0x210>)
 8004266:	4013      	ands	r3, r2
 8004268:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800426a:	4b38      	ldr	r3, [pc, #224]	; (800434c <HAL_GPIO_DeInit+0x210>)
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	43db      	mvns	r3, r3
 8004272:	4936      	ldr	r1, [pc, #216]	; (800434c <HAL_GPIO_DeInit+0x210>)
 8004274:	4013      	ands	r3, r2
 8004276:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004278:	4b34      	ldr	r3, [pc, #208]	; (800434c <HAL_GPIO_DeInit+0x210>)
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	43db      	mvns	r3, r3
 8004280:	4932      	ldr	r1, [pc, #200]	; (800434c <HAL_GPIO_DeInit+0x210>)
 8004282:	4013      	ands	r3, r2
 8004284:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	2103      	movs	r1, #3
 8004290:	fa01 f303 	lsl.w	r3, r1, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	401a      	ands	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	08da      	lsrs	r2, r3, #3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3208      	adds	r2, #8
 80042a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	220f      	movs	r2, #15
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	08d2      	lsrs	r2, r2, #3
 80042bc:	4019      	ands	r1, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3208      	adds	r2, #8
 80042c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	2103      	movs	r1, #3
 80042d0:	fa01 f303 	lsl.w	r3, r1, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	401a      	ands	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	2101      	movs	r1, #1
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	fa01 f303 	lsl.w	r3, r1, r3
 80042e8:	43db      	mvns	r3, r3
 80042ea:	401a      	ands	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	2103      	movs	r1, #3
 80042fa:	fa01 f303 	lsl.w	r3, r1, r3
 80042fe:	43db      	mvns	r3, r3
 8004300:	401a      	ands	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	3301      	adds	r3, #1
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2b0f      	cmp	r3, #15
 8004310:	f67f af22 	bls.w	8004158 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004314:	bf00      	nop
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	40013800 	.word	0x40013800
 8004324:	40020000 	.word	0x40020000
 8004328:	40020400 	.word	0x40020400
 800432c:	40020800 	.word	0x40020800
 8004330:	40020c00 	.word	0x40020c00
 8004334:	40021000 	.word	0x40021000
 8004338:	40021400 	.word	0x40021400
 800433c:	40021800 	.word	0x40021800
 8004340:	40021c00 	.word	0x40021c00
 8004344:	40022000 	.word	0x40022000
 8004348:	40022400 	.word	0x40022400
 800434c:	40013c00 	.word	0x40013c00

08004350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	807b      	strh	r3, [r7, #2]
 800435c:	4613      	mov	r3, r2
 800435e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004360:	787b      	ldrb	r3, [r7, #1]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004366:	887a      	ldrh	r2, [r7, #2]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800436c:	e003      	b.n	8004376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800436e:	887b      	ldrh	r3, [r7, #2]
 8004370:	041a      	lsls	r2, r3, #16
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	619a      	str	r2, [r3, #24]
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e07f      	b.n	8004496 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f8a9 	bl	8004502 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2224      	movs	r2, #36	; 0x24
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0201 	bic.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d107      	bne.n	80043fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043fa:	609a      	str	r2, [r3, #8]
 80043fc:	e006      	b.n	800440c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800440a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d104      	bne.n	800441e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800441c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6859      	ldr	r1, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <HAL_I2C_Init+0x11c>)
 800442a:	430b      	orrs	r3, r1
 800442c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800443c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	ea42 0103 	orr.w	r1, r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	021a      	lsls	r2, r3, #8
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69d9      	ldr	r1, [r3, #28]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1a      	ldr	r2, [r3, #32]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	02008000 	.word	0x02008000

080044a4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e021      	b.n	80044fa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2224      	movs	r2, #36	; 0x24
 80044ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0201 	bic.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f821 	bl	8004516 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
	...

0800452c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	4608      	mov	r0, r1
 8004536:	4611      	mov	r1, r2
 8004538:	461a      	mov	r2, r3
 800453a:	4603      	mov	r3, r0
 800453c:	817b      	strh	r3, [r7, #10]
 800453e:	460b      	mov	r3, r1
 8004540:	813b      	strh	r3, [r7, #8]
 8004542:	4613      	mov	r3, r2
 8004544:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b20      	cmp	r3, #32
 8004550:	f040 80f9 	bne.w	8004746 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_I2C_Mem_Write+0x34>
 800455a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800455c:	2b00      	cmp	r3, #0
 800455e:	d105      	bne.n	800456c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004566:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0ed      	b.n	8004748 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_I2C_Mem_Write+0x4e>
 8004576:	2302      	movs	r3, #2
 8004578:	e0e6      	b.n	8004748 <HAL_I2C_Mem_Write+0x21c>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004582:	f7fe f8e1 	bl	8002748 <HAL_GetTick>
 8004586:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	2319      	movs	r3, #25
 800458e:	2201      	movs	r2, #1
 8004590:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 fad1 	bl	8004b3c <I2C_WaitOnFlagUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0d1      	b.n	8004748 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2221      	movs	r2, #33	; 0x21
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2240      	movs	r2, #64	; 0x40
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a3a      	ldr	r2, [r7, #32]
 80045be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045cc:	88f8      	ldrh	r0, [r7, #6]
 80045ce:	893a      	ldrh	r2, [r7, #8]
 80045d0:	8979      	ldrh	r1, [r7, #10]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	9301      	str	r3, [sp, #4]
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	4603      	mov	r3, r0
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f9e1 	bl	80049a4 <I2C_RequestMemoryWrite>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0a9      	b.n	8004748 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2bff      	cmp	r3, #255	; 0xff
 80045fc:	d90e      	bls.n	800461c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	22ff      	movs	r2, #255	; 0xff
 8004602:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004608:	b2da      	uxtb	r2, r3
 800460a:	8979      	ldrh	r1, [r7, #10]
 800460c:	2300      	movs	r3, #0
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 fbb3 	bl	8004d80 <I2C_TransferConfig>
 800461a:	e00f      	b.n	800463c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462a:	b2da      	uxtb	r2, r3
 800462c:	8979      	ldrh	r1, [r7, #10]
 800462e:	2300      	movs	r3, #0
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 fba2 	bl	8004d80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 fabb 	bl	8004bbc <I2C_WaitOnTXISFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e07b      	b.n	8004748 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	781a      	ldrb	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004684:	b29b      	uxth	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d034      	beq.n	80046f4 <HAL_I2C_Mem_Write+0x1c8>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468e:	2b00      	cmp	r3, #0
 8004690:	d130      	bne.n	80046f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004698:	2200      	movs	r2, #0
 800469a:	2180      	movs	r1, #128	; 0x80
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 fa4d 	bl	8004b3c <I2C_WaitOnFlagUntilTimeout>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e04d      	b.n	8004748 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2bff      	cmp	r3, #255	; 0xff
 80046b4:	d90e      	bls.n	80046d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	22ff      	movs	r2, #255	; 0xff
 80046ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	8979      	ldrh	r1, [r7, #10]
 80046c4:	2300      	movs	r3, #0
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 fb57 	bl	8004d80 <I2C_TransferConfig>
 80046d2:	e00f      	b.n	80046f4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	8979      	ldrh	r1, [r7, #10]
 80046e6:	2300      	movs	r3, #0
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fb46 	bl	8004d80 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d19e      	bne.n	800463c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 fa9a 	bl	8004c3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e01a      	b.n	8004748 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2220      	movs	r2, #32
 8004718:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6859      	ldr	r1, [r3, #4]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <HAL_I2C_Mem_Write+0x224>)
 8004726:	400b      	ands	r3, r1
 8004728:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004746:	2302      	movs	r3, #2
  }
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	fe00e800 	.word	0xfe00e800

08004754 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af02      	add	r7, sp, #8
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	4608      	mov	r0, r1
 800475e:	4611      	mov	r1, r2
 8004760:	461a      	mov	r2, r3
 8004762:	4603      	mov	r3, r0
 8004764:	817b      	strh	r3, [r7, #10]
 8004766:	460b      	mov	r3, r1
 8004768:	813b      	strh	r3, [r7, #8]
 800476a:	4613      	mov	r3, r2
 800476c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b20      	cmp	r3, #32
 8004778:	f040 80fd 	bne.w	8004976 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_I2C_Mem_Read+0x34>
 8004782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004784:	2b00      	cmp	r3, #0
 8004786:	d105      	bne.n	8004794 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800478e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0f1      	b.n	8004978 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_I2C_Mem_Read+0x4e>
 800479e:	2302      	movs	r3, #2
 80047a0:	e0ea      	b.n	8004978 <HAL_I2C_Mem_Read+0x224>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047aa:	f7fd ffcd 	bl	8002748 <HAL_GetTick>
 80047ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	2319      	movs	r3, #25
 80047b6:	2201      	movs	r2, #1
 80047b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 f9bd 	bl	8004b3c <I2C_WaitOnFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0d5      	b.n	8004978 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2222      	movs	r2, #34	; 0x22
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2240      	movs	r2, #64	; 0x40
 80047d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a3a      	ldr	r2, [r7, #32]
 80047e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047f4:	88f8      	ldrh	r0, [r7, #6]
 80047f6:	893a      	ldrh	r2, [r7, #8]
 80047f8:	8979      	ldrh	r1, [r7, #10]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	4603      	mov	r3, r0
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f921 	bl	8004a4c <I2C_RequestMemoryRead>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0ad      	b.n	8004978 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004820:	b29b      	uxth	r3, r3
 8004822:	2bff      	cmp	r3, #255	; 0xff
 8004824:	d90e      	bls.n	8004844 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	22ff      	movs	r2, #255	; 0xff
 800482a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004830:	b2da      	uxtb	r2, r3
 8004832:	8979      	ldrh	r1, [r7, #10]
 8004834:	4b52      	ldr	r3, [pc, #328]	; (8004980 <HAL_I2C_Mem_Read+0x22c>)
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 fa9f 	bl	8004d80 <I2C_TransferConfig>
 8004842:	e00f      	b.n	8004864 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004852:	b2da      	uxtb	r2, r3
 8004854:	8979      	ldrh	r1, [r7, #10]
 8004856:	4b4a      	ldr	r3, [pc, #296]	; (8004980 <HAL_I2C_Mem_Read+0x22c>)
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 fa8e 	bl	8004d80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	2200      	movs	r2, #0
 800486c:	2104      	movs	r1, #4
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f964 	bl	8004b3c <I2C_WaitOnFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e07c      	b.n	8004978 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d034      	beq.n	8004924 <HAL_I2C_Mem_Read+0x1d0>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d130      	bne.n	8004924 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c8:	2200      	movs	r2, #0
 80048ca:	2180      	movs	r1, #128	; 0x80
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 f935 	bl	8004b3c <I2C_WaitOnFlagUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e04d      	b.n	8004978 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2bff      	cmp	r3, #255	; 0xff
 80048e4:	d90e      	bls.n	8004904 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	22ff      	movs	r2, #255	; 0xff
 80048ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	8979      	ldrh	r1, [r7, #10]
 80048f4:	2300      	movs	r3, #0
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 fa3f 	bl	8004d80 <I2C_TransferConfig>
 8004902:	e00f      	b.n	8004924 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004912:	b2da      	uxtb	r2, r3
 8004914:	8979      	ldrh	r1, [r7, #10]
 8004916:	2300      	movs	r3, #0
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 fa2e 	bl	8004d80 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d19a      	bne.n	8004864 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 f982 	bl	8004c3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e01a      	b.n	8004978 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2220      	movs	r2, #32
 8004948:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6859      	ldr	r1, [r3, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_I2C_Mem_Read+0x230>)
 8004956:	400b      	ands	r3, r1
 8004958:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	e000      	b.n	8004978 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004976:	2302      	movs	r3, #2
  }
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	80002400 	.word	0x80002400
 8004984:	fe00e800 	.word	0xfe00e800

08004988 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004996:	b2db      	uxtb	r3, r3
}
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	4608      	mov	r0, r1
 80049ae:	4611      	mov	r1, r2
 80049b0:	461a      	mov	r2, r3
 80049b2:	4603      	mov	r3, r0
 80049b4:	817b      	strh	r3, [r7, #10]
 80049b6:	460b      	mov	r3, r1
 80049b8:	813b      	strh	r3, [r7, #8]
 80049ba:	4613      	mov	r3, r2
 80049bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049be:	88fb      	ldrh	r3, [r7, #6]
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	8979      	ldrh	r1, [r7, #10]
 80049c4:	4b20      	ldr	r3, [pc, #128]	; (8004a48 <I2C_RequestMemoryWrite+0xa4>)
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f9d7 	bl	8004d80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	69b9      	ldr	r1, [r7, #24]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f8f0 	bl	8004bbc <I2C_WaitOnTXISFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e02c      	b.n	8004a40 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049e6:	88fb      	ldrh	r3, [r7, #6]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d105      	bne.n	80049f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049ec:	893b      	ldrh	r3, [r7, #8]
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	629a      	str	r2, [r3, #40]	; 0x28
 80049f6:	e015      	b.n	8004a24 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049f8:	893b      	ldrh	r3, [r7, #8]
 80049fa:	0a1b      	lsrs	r3, r3, #8
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a06:	69fa      	ldr	r2, [r7, #28]
 8004a08:	69b9      	ldr	r1, [r7, #24]
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f8d6 	bl	8004bbc <I2C_WaitOnTXISFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e012      	b.n	8004a40 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a1a:	893b      	ldrh	r3, [r7, #8]
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2180      	movs	r1, #128	; 0x80
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 f884 	bl	8004b3c <I2C_WaitOnFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	80002000 	.word	0x80002000

08004a4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af02      	add	r7, sp, #8
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	4608      	mov	r0, r1
 8004a56:	4611      	mov	r1, r2
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	817b      	strh	r3, [r7, #10]
 8004a5e:	460b      	mov	r3, r1
 8004a60:	813b      	strh	r3, [r7, #8]
 8004a62:	4613      	mov	r3, r2
 8004a64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a66:	88fb      	ldrh	r3, [r7, #6]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	8979      	ldrh	r1, [r7, #10]
 8004a6c:	4b20      	ldr	r3, [pc, #128]	; (8004af0 <I2C_RequestMemoryRead+0xa4>)
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	2300      	movs	r3, #0
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f984 	bl	8004d80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	69b9      	ldr	r1, [r7, #24]
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f89d 	bl	8004bbc <I2C_WaitOnTXISFlagUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e02c      	b.n	8004ae6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a8c:	88fb      	ldrh	r3, [r7, #6]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d105      	bne.n	8004a9e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a92:	893b      	ldrh	r3, [r7, #8]
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	629a      	str	r2, [r3, #40]	; 0x28
 8004a9c:	e015      	b.n	8004aca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a9e:	893b      	ldrh	r3, [r7, #8]
 8004aa0:	0a1b      	lsrs	r3, r3, #8
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aac:	69fa      	ldr	r2, [r7, #28]
 8004aae:	69b9      	ldr	r1, [r7, #24]
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 f883 	bl	8004bbc <I2C_WaitOnTXISFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e012      	b.n	8004ae6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ac0:	893b      	ldrh	r3, [r7, #8]
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2140      	movs	r1, #64	; 0x40
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f831 	bl	8004b3c <I2C_WaitOnFlagUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	80002000 	.word	0x80002000

08004af4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d103      	bne.n	8004b12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d007      	beq.n	8004b30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	619a      	str	r2, [r3, #24]
  }
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b4c:	e022      	b.n	8004b94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b54:	d01e      	beq.n	8004b94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b56:	f7fd fdf7 	bl	8002748 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d302      	bcc.n	8004b6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d113      	bne.n	8004b94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b70:	f043 0220 	orr.w	r2, r3, #32
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e00f      	b.n	8004bb4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	461a      	mov	r2, r3
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d0cd      	beq.n	8004b4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bc8:	e02c      	b.n	8004c24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 f870 	bl	8004cb4 <I2C_IsAcknowledgeFailed>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e02a      	b.n	8004c34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d01e      	beq.n	8004c24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be6:	f7fd fdaf 	bl	8002748 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d302      	bcc.n	8004bfc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d113      	bne.n	8004c24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c00:	f043 0220 	orr.w	r2, r3, #32
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e007      	b.n	8004c34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d1cb      	bne.n	8004bca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c48:	e028      	b.n	8004c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	68b9      	ldr	r1, [r7, #8]
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 f830 	bl	8004cb4 <I2C_IsAcknowledgeFailed>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e026      	b.n	8004cac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c5e:	f7fd fd73 	bl	8002748 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d302      	bcc.n	8004c74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d113      	bne.n	8004c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c78:	f043 0220 	orr.w	r2, r3, #32
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e007      	b.n	8004cac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	d1cf      	bne.n	8004c4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	f003 0310 	and.w	r3, r3, #16
 8004cca:	2b10      	cmp	r3, #16
 8004ccc:	d151      	bne.n	8004d72 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cce:	e022      	b.n	8004d16 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d01e      	beq.n	8004d16 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd8:	f7fd fd36 	bl	8002748 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d302      	bcc.n	8004cee <I2C_IsAcknowledgeFailed+0x3a>
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d113      	bne.n	8004d16 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf2:	f043 0220 	orr.w	r2, r3, #32
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e02e      	b.n	8004d74 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	d1d5      	bne.n	8004cd0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2210      	movs	r2, #16
 8004d2a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2220      	movs	r2, #32
 8004d32:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7ff fedd 	bl	8004af4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6859      	ldr	r1, [r3, #4]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <I2C_IsAcknowledgeFailed+0xc8>)
 8004d46:	400b      	ands	r3, r1
 8004d48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4e:	f043 0204 	orr.w	r2, r3, #4
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	fe00e800 	.word	0xfe00e800

08004d80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	817b      	strh	r3, [r7, #10]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	0d5b      	lsrs	r3, r3, #21
 8004d9c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004da0:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <I2C_TransferConfig+0x58>)
 8004da2:	430b      	orrs	r3, r1
 8004da4:	43db      	mvns	r3, r3
 8004da6:	ea02 0103 	and.w	r1, r2, r3
 8004daa:	897b      	ldrh	r3, [r7, #10]
 8004dac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004db0:	7a7b      	ldrb	r3, [r7, #9]
 8004db2:	041b      	lsls	r3, r3, #16
 8004db4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004dca:	bf00      	nop
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	03ff63ff 	.word	0x03ff63ff

08004ddc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e0bf      	b.n	8004f6e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fb fdb8 	bl	8000978 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004e1e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6999      	ldr	r1, [r3, #24]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e34:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6899      	ldr	r1, [r3, #8]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4b4a      	ldr	r3, [pc, #296]	; (8004f78 <HAL_LTDC_Init+0x19c>)
 8004e50:	400b      	ands	r3, r1
 8004e52:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6899      	ldr	r1, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68d9      	ldr	r1, [r3, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	4b3e      	ldr	r3, [pc, #248]	; (8004f78 <HAL_LTDC_Init+0x19c>)
 8004e7e:	400b      	ands	r3, r1
 8004e80:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	041b      	lsls	r3, r3, #16
 8004e88:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68d9      	ldr	r1, [r3, #12]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1a      	ldr	r2, [r3, #32]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6919      	ldr	r1, [r3, #16]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4b33      	ldr	r3, [pc, #204]	; (8004f78 <HAL_LTDC_Init+0x19c>)
 8004eac:	400b      	ands	r3, r1
 8004eae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	041b      	lsls	r3, r3, #16
 8004eb6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6919      	ldr	r1, [r3, #16]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6959      	ldr	r1, [r3, #20]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4b27      	ldr	r3, [pc, #156]	; (8004f78 <HAL_LTDC_Init+0x19c>)
 8004eda:	400b      	ands	r3, r1
 8004edc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	041b      	lsls	r3, r3, #16
 8004ee4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6959      	ldr	r1, [r3, #20]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004f0c:	041b      	lsls	r3, r3, #16
 8004f0e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0206 	orr.w	r2, r2, #6
 8004f4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0201 	orr.w	r2, r2, #1
 8004f5a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	f000f800 	.word	0xf000f800

08004f7c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f92:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d023      	beq.n	8004fe6 <HAL_LTDC_IRQHandler+0x6a>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01e      	beq.n	8004fe6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0204 	bic.w	r2, r2, #4
 8004fb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2204      	movs	r2, #4
 8004fbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fc6:	f043 0201 	orr.w	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2204      	movs	r2, #4
 8004fd4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f86f 	bl	80050c4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d023      	beq.n	8005038 <HAL_LTDC_IRQHandler+0xbc>
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01e      	beq.n	8005038 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0202 	bic.w	r2, r2, #2
 8005008:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2202      	movs	r2, #2
 8005010:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005018:	f043 0202 	orr.w	r2, r3, #2
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2204      	movs	r2, #4
 8005026:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f846 	bl	80050c4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d01b      	beq.n	800507a <HAL_LTDC_IRQHandler+0xfe>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d016      	beq.n	800507a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0201 	bic.w	r2, r2, #1
 800505a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2201      	movs	r2, #1
 8005062:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f82f 	bl	80050d8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01b      	beq.n	80050bc <HAL_LTDC_IRQHandler+0x140>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d016      	beq.n	80050bc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0208 	bic.w	r2, r2, #8
 800509c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2208      	movs	r2, #8
 80050a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f818 	bl	80050ec <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80050bc:	bf00      	nop
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005100:	b5b0      	push	{r4, r5, r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_LTDC_ConfigLayer+0x1a>
 8005116:	2302      	movs	r3, #2
 8005118:	e02c      	b.n	8005174 <HAL_LTDC_ConfigLayer+0x74>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2202      	movs	r2, #2
 8005126:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2134      	movs	r1, #52	; 0x34
 8005130:	fb01 f303 	mul.w	r3, r1, r3
 8005134:	4413      	add	r3, r2
 8005136:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	4614      	mov	r4, r2
 800513e:	461d      	mov	r5, r3
 8005140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800514a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 f811 	bl	800517c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2201      	movs	r2, #1
 8005160:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bdb0      	pop	{r4, r5, r7, pc}

0800517c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800517c:	b480      	push	{r7}
 800517e:	b089      	sub	sp, #36	; 0x24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	0c1b      	lsrs	r3, r3, #16
 8005194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005198:	4413      	add	r3, r2
 800519a:	041b      	lsls	r3, r3, #16
 800519c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	01db      	lsls	r3, r3, #7
 80051a8:	4413      	add	r3, r2
 80051aa:	3384      	adds	r3, #132	; 0x84
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	4611      	mov	r1, r2
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	01d2      	lsls	r2, r2, #7
 80051b8:	440a      	add	r2, r1
 80051ba:	3284      	adds	r2, #132	; 0x84
 80051bc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80051c0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	0c1b      	lsrs	r3, r3, #16
 80051ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d2:	4413      	add	r3, r2
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4619      	mov	r1, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	01db      	lsls	r3, r3, #7
 80051e0:	440b      	add	r3, r1
 80051e2:	3384      	adds	r3, #132	; 0x84
 80051e4:	4619      	mov	r1, r3
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051fa:	4413      	add	r3, r2
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	01db      	lsls	r3, r3, #7
 800520a:	4413      	add	r3, r2
 800520c:	3384      	adds	r3, #132	; 0x84
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	4611      	mov	r1, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	01d2      	lsls	r2, r2, #7
 800521a:	440a      	add	r2, r1
 800521c:	3284      	adds	r2, #132	; 0x84
 800521e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005222:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005232:	4413      	add	r3, r2
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4619      	mov	r1, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	01db      	lsls	r3, r3, #7
 8005240:	440b      	add	r3, r1
 8005242:	3384      	adds	r3, #132	; 0x84
 8005244:	4619      	mov	r1, r3
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4313      	orrs	r3, r2
 800524a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	01db      	lsls	r3, r3, #7
 8005256:	4413      	add	r3, r2
 8005258:	3384      	adds	r3, #132	; 0x84
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	4611      	mov	r1, r2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	01d2      	lsls	r2, r2, #7
 8005266:	440a      	add	r2, r1
 8005268:	3284      	adds	r2, #132	; 0x84
 800526a:	f023 0307 	bic.w	r3, r3, #7
 800526e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	461a      	mov	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	01db      	lsls	r3, r3, #7
 800527a:	4413      	add	r3, r2
 800527c:	3384      	adds	r3, #132	; 0x84
 800527e:	461a      	mov	r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005296:	041b      	lsls	r3, r3, #16
 8005298:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	061b      	lsls	r3, r3, #24
 80052a0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	01db      	lsls	r3, r3, #7
 80052ac:	4413      	add	r3, r2
 80052ae:	3384      	adds	r3, #132	; 0x84
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	01db      	lsls	r3, r3, #7
 80052bc:	4413      	add	r3, r2
 80052be:	3384      	adds	r3, #132	; 0x84
 80052c0:	461a      	mov	r2, r3
 80052c2:	2300      	movs	r3, #0
 80052c4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052cc:	461a      	mov	r2, r3
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	431a      	orrs	r2, r3
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	431a      	orrs	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4619      	mov	r1, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	01db      	lsls	r3, r3, #7
 80052e0:	440b      	add	r3, r1
 80052e2:	3384      	adds	r3, #132	; 0x84
 80052e4:	4619      	mov	r1, r3
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	461a      	mov	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	01db      	lsls	r3, r3, #7
 80052f6:	4413      	add	r3, r2
 80052f8:	3384      	adds	r3, #132	; 0x84
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	4611      	mov	r1, r2
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	01d2      	lsls	r2, r2, #7
 8005306:	440a      	add	r2, r1
 8005308:	3284      	adds	r2, #132	; 0x84
 800530a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800530e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	461a      	mov	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	01db      	lsls	r3, r3, #7
 800531a:	4413      	add	r3, r2
 800531c:	3384      	adds	r3, #132	; 0x84
 800531e:	461a      	mov	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	01db      	lsls	r3, r3, #7
 8005330:	4413      	add	r3, r2
 8005332:	3384      	adds	r3, #132	; 0x84
 8005334:	69da      	ldr	r2, [r3, #28]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4619      	mov	r1, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	01db      	lsls	r3, r3, #7
 8005340:	440b      	add	r3, r1
 8005342:	3384      	adds	r3, #132	; 0x84
 8005344:	4619      	mov	r1, r3
 8005346:	4b58      	ldr	r3, [pc, #352]	; (80054a8 <LTDC_SetConfig+0x32c>)
 8005348:	4013      	ands	r3, r2
 800534a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	68f9      	ldr	r1, [r7, #12]
 8005356:	6809      	ldr	r1, [r1, #0]
 8005358:	4608      	mov	r0, r1
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	01c9      	lsls	r1, r1, #7
 800535e:	4401      	add	r1, r0
 8005360:	3184      	adds	r1, #132	; 0x84
 8005362:	4313      	orrs	r3, r2
 8005364:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	01db      	lsls	r3, r3, #7
 8005370:	4413      	add	r3, r2
 8005372:	3384      	adds	r3, #132	; 0x84
 8005374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	01db      	lsls	r3, r3, #7
 8005380:	4413      	add	r3, r2
 8005382:	3384      	adds	r3, #132	; 0x84
 8005384:	461a      	mov	r2, r3
 8005386:	2300      	movs	r3, #0
 8005388:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	01db      	lsls	r3, r3, #7
 8005394:	4413      	add	r3, r2
 8005396:	3384      	adds	r3, #132	; 0x84
 8005398:	461a      	mov	r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d102      	bne.n	80053ae <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80053a8:	2304      	movs	r3, #4
 80053aa:	61fb      	str	r3, [r7, #28]
 80053ac:	e01b      	b.n	80053e6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d102      	bne.n	80053bc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80053b6:	2303      	movs	r3, #3
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	e014      	b.n	80053e6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d00b      	beq.n	80053dc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d007      	beq.n	80053dc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d003      	beq.n	80053dc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80053d8:	2b07      	cmp	r3, #7
 80053da:	d102      	bne.n	80053e2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80053dc:	2302      	movs	r3, #2
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	e001      	b.n	80053e6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80053e2:	2301      	movs	r3, #1
 80053e4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	01db      	lsls	r3, r3, #7
 80053f0:	4413      	add	r3, r2
 80053f2:	3384      	adds	r3, #132	; 0x84
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	4611      	mov	r1, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	01d2      	lsls	r2, r2, #7
 8005400:	440a      	add	r2, r1
 8005402:	3284      	adds	r2, #132	; 0x84
 8005404:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005408:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	69fa      	ldr	r2, [r7, #28]
 8005410:	fb02 f303 	mul.w	r3, r2, r3
 8005414:	041a      	lsls	r2, r3, #16
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	6859      	ldr	r1, [r3, #4]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	1acb      	subs	r3, r1, r3
 8005420:	69f9      	ldr	r1, [r7, #28]
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	3303      	adds	r3, #3
 8005428:	68f9      	ldr	r1, [r7, #12]
 800542a:	6809      	ldr	r1, [r1, #0]
 800542c:	4608      	mov	r0, r1
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	01c9      	lsls	r1, r1, #7
 8005432:	4401      	add	r1, r0
 8005434:	3184      	adds	r1, #132	; 0x84
 8005436:	4313      	orrs	r3, r2
 8005438:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	01db      	lsls	r3, r3, #7
 8005444:	4413      	add	r3, r2
 8005446:	3384      	adds	r3, #132	; 0x84
 8005448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4619      	mov	r1, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	01db      	lsls	r3, r3, #7
 8005454:	440b      	add	r3, r1
 8005456:	3384      	adds	r3, #132	; 0x84
 8005458:	4619      	mov	r1, r3
 800545a:	4b14      	ldr	r3, [pc, #80]	; (80054ac <LTDC_SetConfig+0x330>)
 800545c:	4013      	ands	r3, r2
 800545e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	461a      	mov	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	01db      	lsls	r3, r3, #7
 800546a:	4413      	add	r3, r2
 800546c:	3384      	adds	r3, #132	; 0x84
 800546e:	461a      	mov	r2, r3
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	01db      	lsls	r3, r3, #7
 8005480:	4413      	add	r3, r2
 8005482:	3384      	adds	r3, #132	; 0x84
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	6812      	ldr	r2, [r2, #0]
 800548a:	4611      	mov	r1, r2
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	01d2      	lsls	r2, r2, #7
 8005490:	440a      	add	r2, r1
 8005492:	3284      	adds	r2, #132	; 0x84
 8005494:	f043 0301 	orr.w	r3, r3, #1
 8005498:	6013      	str	r3, [r2, #0]
}
 800549a:	bf00      	nop
 800549c:	3724      	adds	r7, #36	; 0x24
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	fffff8f8 	.word	0xfffff8f8
 80054ac:	fffff800 	.word	0xfffff800

080054b0 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 80054c2:	2200      	movs	r2, #0
 80054c4:	e001      	b.n	80054ca <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 80054c6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d102      	bne.n	80054dc <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 80054d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80054da:	e000      	b.n	80054de <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 80054dc:	2200      	movs	r2, #0
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d102      	bne.n	80054f0 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 80054ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054ee:	e000      	b.n	80054f2 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 80054f0:	2200      	movs	r2, #0
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fa:	1e5a      	subs	r2, r3, #1
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005508:	4413      	add	r3, r2
 800550a:	1e5a      	subs	r2, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	441a      	add	r2, r3
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	4413      	add	r3, r2
 8005520:	1e5a      	subs	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552e:	441a      	add	r2, r3
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	441a      	add	r2, r3
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553a:	4413      	add	r3, r2
 800553c:	1e5a      	subs	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005550:	b590      	push	{r4, r7, lr}
 8005552:	b08d      	sub	sp, #52	; 0x34
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f002 fd6c 	bl	8008048 <USB_GetMode>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	f040 83bd 	bne.w	8005cf2 <HAL_PCD_IRQHandler+0x7a2>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4618      	mov	r0, r3
 800557e:	f002 fcd0 	bl	8007f22 <USB_ReadInterrupts>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 83b3 	beq.w	8005cf0 <HAL_PCD_IRQHandler+0x7a0>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4618      	mov	r0, r3
 8005590:	f002 fcc7 	bl	8007f22 <USB_ReadInterrupts>
 8005594:	4603      	mov	r3, r0
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b02      	cmp	r3, #2
 800559c:	d107      	bne.n	80055ae <HAL_PCD_IRQHandler+0x5e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695a      	ldr	r2, [r3, #20]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f002 0202 	and.w	r2, r2, #2
 80055ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f002 fcb5 	bl	8007f22 <USB_ReadInterrupts>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055c2:	d17b      	bne.n	80056bc <HAL_PCD_IRQHandler+0x16c>
    {
      epnum = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f002 fcbb 	bl	8007f48 <USB_ReadDevAllOutEpInterrupt>
 80055d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80055d4:	e06f      	b.n	80056b6 <HAL_PCD_IRQHandler+0x166>
      {
        if ((ep_intr & 0x1U) != 0U)
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d064      	beq.n	80056aa <HAL_PCD_IRQHandler+0x15a>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	4611      	mov	r1, r2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f002 fce0 	bl	8007fb0 <USB_ReadDevOutEPInterrupt>
 80055f0:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00c      	beq.n	8005616 <HAL_PCD_IRQHandler+0xc6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005608:	461a      	mov	r2, r3
 800560a:	2301      	movs	r3, #1
 800560c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800560e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fc75 	bl	8005f00 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00c      	beq.n	800563a <HAL_PCD_IRQHandler+0xea>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fd74 	bl	8006110 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005634:	461a      	mov	r2, r3
 8005636:	2308      	movs	r3, #8
 8005638:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	f003 0310 	and.w	r3, r3, #16
 8005640:	2b00      	cmp	r3, #0
 8005642:	d008      	beq.n	8005656 <HAL_PCD_IRQHandler+0x106>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005650:	461a      	mov	r2, r3
 8005652:	2310      	movs	r3, #16
 8005654:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b00      	cmp	r3, #0
 800565e:	d015      	beq.n	800568c <HAL_PCD_IRQHandler+0x13c>
          {
            if (hpcd->Init.dma_enable == 1U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d108      	bne.n	800567a <HAL_PCD_IRQHandler+0x12a>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005672:	461a      	mov	r2, r3
 8005674:	2101      	movs	r1, #1
 8005676:	f002 fd2b 	bl	80080d0 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005686:	461a      	mov	r2, r3
 8005688:	2320      	movs	r3, #32
 800568a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d009      	beq.n	80056aa <HAL_PCD_IRQHandler+0x15a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a2:	461a      	mov	r2, r3
 80056a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	3301      	adds	r3, #1
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80056b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d18c      	bne.n	80055d6 <HAL_PCD_IRQHandler+0x86>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f002 fc2e 	bl	8007f22 <USB_ReadInterrupts>
 80056c6:	4603      	mov	r3, r0
 80056c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056d0:	f040 80c4 	bne.w	800585c <HAL_PCD_IRQHandler+0x30c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4618      	mov	r0, r3
 80056da:	f002 fc4f 	bl	8007f7c <USB_ReadDevAllInEpInterrupt>
 80056de:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80056e4:	e0b6      	b.n	8005854 <HAL_PCD_IRQHandler+0x304>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80ab 	beq.w	8005848 <HAL_PCD_IRQHandler+0x2f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	4611      	mov	r1, r2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f002 fc75 	bl	8007fec <USB_ReadDevInEPInterrupt>
 8005702:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d05b      	beq.n	80057c6 <HAL_PCD_IRQHandler+0x276>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	2201      	movs	r2, #1
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	43db      	mvns	r3, r3
 8005728:	69f9      	ldr	r1, [r7, #28]
 800572a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800572e:	4013      	ands	r3, r2
 8005730:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573e:	461a      	mov	r2, r3
 8005740:	2301      	movs	r3, #1
 8005742:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d11b      	bne.n	8005784 <HAL_PCD_IRQHandler+0x234>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005750:	4613      	mov	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	1a9b      	subs	r3, r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	3348      	adds	r3, #72	; 0x48
 800575c:	6819      	ldr	r1, [r3, #0]
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005762:	4613      	mov	r3, r2
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	1a9b      	subs	r3, r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4403      	add	r3, r0
 800576c:	3344      	adds	r3, #68	; 0x44
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4419      	add	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005776:	4613      	mov	r3, r2
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	1a9b      	subs	r3, r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4403      	add	r3, r0
 8005780:	3348      	adds	r3, #72	; 0x48
 8005782:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	b2db      	uxtb	r3, r3
 8005788:	4619      	mov	r1, r3
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fac0 	bl	8005d10 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d116      	bne.n	80057c6 <HAL_PCD_IRQHandler+0x276>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	2b00      	cmp	r3, #0
 800579c:	d113      	bne.n	80057c6 <HAL_PCD_IRQHandler+0x276>
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a2:	4613      	mov	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	1a9b      	subs	r3, r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	440b      	add	r3, r1
 80057ac:	3350      	adds	r3, #80	; 0x50
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d108      	bne.n	80057c6 <HAL_PCD_IRQHandler+0x276>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6818      	ldr	r0, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80057be:	461a      	mov	r2, r3
 80057c0:	2101      	movs	r1, #1
 80057c2:	f002 fc85 	bl	80080d0 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	f003 0308 	and.w	r3, r3, #8
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d008      	beq.n	80057e2 <HAL_PCD_IRQHandler+0x292>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057dc:	461a      	mov	r2, r3
 80057de:	2308      	movs	r3, #8
 80057e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <HAL_PCD_IRQHandler+0x2ae>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f8:	461a      	mov	r2, r3
 80057fa:	2310      	movs	r3, #16
 80057fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005804:	2b00      	cmp	r3, #0
 8005806:	d008      	beq.n	800581a <HAL_PCD_IRQHandler+0x2ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005814:	461a      	mov	r2, r3
 8005816:	2340      	movs	r3, #64	; 0x40
 8005818:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d008      	beq.n	8005836 <HAL_PCD_IRQHandler+0x2e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005830:	461a      	mov	r2, r3
 8005832:	2302      	movs	r3, #2
 8005834:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <HAL_PCD_IRQHandler+0x2f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 face 	bl	8005de4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	3301      	adds	r3, #1
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005850:	085b      	lsrs	r3, r3, #1
 8005852:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	2b00      	cmp	r3, #0
 8005858:	f47f af45 	bne.w	80056e6 <HAL_PCD_IRQHandler+0x196>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f002 fb5e 	bl	8007f22 <USB_ReadInterrupts>
 8005866:	4603      	mov	r3, r0
 8005868:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800586c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005870:	d122      	bne.n	80058b8 <HAL_PCD_IRQHandler+0x368>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005880:	f023 0301 	bic.w	r3, r3, #1
 8005884:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800588c:	2b01      	cmp	r3, #1
 800588e:	d108      	bne.n	80058a2 <HAL_PCD_IRQHandler+0x352>
      {
        hpcd->LPM_State = LPM_L0;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005898:	2100      	movs	r1, #0
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fc98 	bl	80061d0 <HAL_PCDEx_LPM_Callback>
 80058a0:	e002      	b.n	80058a8 <HAL_PCD_IRQHandler+0x358>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fa68 	bl	8005d78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695a      	ldr	r2, [r3, #20]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80058b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f002 fb30 	bl	8007f22 <USB_ReadInterrupts>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058cc:	d112      	bne.n	80058f4 <HAL_PCD_IRQHandler+0x3a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d102      	bne.n	80058e4 <HAL_PCD_IRQHandler+0x394>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fa40 	bl	8005d64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695a      	ldr	r2, [r3, #20]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80058f2:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f002 fb12 	bl	8007f22 <USB_ReadInterrupts>
 80058fe:	4603      	mov	r3, r0
 8005900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005908:	d121      	bne.n	800594e <HAL_PCD_IRQHandler+0x3fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695a      	ldr	r2, [r3, #20]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005918:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d111      	bne.n	8005948 <HAL_PCD_IRQHandler+0x3f8>
      {
        hpcd->LPM_State = LPM_L1;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005932:	089b      	lsrs	r3, r3, #2
 8005934:	f003 020f 	and.w	r2, r3, #15
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800593e:	2101      	movs	r1, #1
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fc45 	bl	80061d0 <HAL_PCDEx_LPM_Callback>
 8005946:	e002      	b.n	800594e <HAL_PCD_IRQHandler+0x3fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fa0b 	bl	8005d64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f002 fae5 	bl	8007f22 <USB_ReadInterrupts>
 8005958:	4603      	mov	r3, r0
 800595a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800595e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005962:	f040 80a7 	bne.w	8005ab4 <HAL_PCD_IRQHandler+0x564>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	69fa      	ldr	r2, [r7, #28]
 8005970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005974:	f023 0301 	bic.w	r3, r3, #1
 8005978:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2110      	movs	r1, #16
 8005980:	4618      	mov	r0, r3
 8005982:	f002 fa25 	bl	8007dd0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005986:	2300      	movs	r3, #0
 8005988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800598a:	e036      	b.n	80059fa <HAL_PCD_IRQHandler+0x4aa>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800598c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	461a      	mov	r2, r3
 800599a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800599e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059cc:	461a      	mov	r2, r3
 80059ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059d2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059e4:	0151      	lsls	r1, r2, #5
 80059e6:	69fa      	ldr	r2, [r7, #28]
 80059e8:	440a      	add	r2, r1
 80059ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059f2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	3301      	adds	r3, #1
 80059f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d3c3      	bcc.n	800598c <HAL_PCD_IRQHandler+0x43c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	69fa      	ldr	r2, [r7, #28]
 8005a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a12:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005a16:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d016      	beq.n	8005a4e <HAL_PCD_IRQHandler+0x4fe>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a30:	f043 030b 	orr.w	r3, r3, #11
 8005a34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a40:	69fa      	ldr	r2, [r7, #28]
 8005a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a46:	f043 030b 	orr.w	r3, r3, #11
 8005a4a:	6453      	str	r3, [r2, #68]	; 0x44
 8005a4c:	e015      	b.n	8005a7a <HAL_PCD_IRQHandler+0x52a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a54:	695a      	ldr	r2, [r3, #20]
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	f242 032b 	movw	r3, #8235	; 0x202b
 8005a62:	4313      	orrs	r3, r2
 8005a64:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a74:	f043 030b 	orr.w	r3, r3, #11
 8005a78:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69fa      	ldr	r2, [r7, #28]
 8005a84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a8c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f002 fb16 	bl	80080d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695a      	ldr	r2, [r3, #20]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f002 fa32 	bl	8007f22 <USB_ReadInterrupts>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ac8:	d12a      	bne.n	8005b20 <HAL_PCD_IRQHandler+0x5d0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f002 fac8 	bl	8008064 <USB_ActivateSetup>

      if (USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f002 f99f 	bl	8007e1c <USB_GetDevSpeed>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d103      	bne.n	8005aec <HAL_PCD_IRQHandler+0x59c>
      {
        hpcd->Init.speed = USB_OTG_SPEED_HIGH;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	60da      	str	r2, [r3, #12]
 8005aea:	e002      	b.n	8005af2 <HAL_PCD_IRQHandler+0x5a2>
      }
      else
      {
        hpcd->Init.speed = USB_OTG_SPEED_FULL;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2203      	movs	r2, #3
 8005af0:	60da      	str	r2, [r3, #12]
      }

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681c      	ldr	r4, [r3, #0]
 8005af6:	f001 f847 	bl	8006b88 <HAL_RCC_GetHCLKFreq>
 8005afa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	4620      	mov	r0, r4
 8005b06:	f002 f8c1 	bl	8007c8c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f920 	bl	8005d50 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695a      	ldr	r2, [r3, #20]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005b1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f002 f9fc 	bl	8007f22 <USB_ReadInterrupts>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	2b10      	cmp	r3, #16
 8005b32:	d161      	bne.n	8005bf8 <HAL_PCD_IRQHandler+0x6a8>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699a      	ldr	r2, [r3, #24]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0210 	bic.w	r2, r2, #16
 8005b42:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f003 020f 	and.w	r2, r3, #15
 8005b50:	4613      	mov	r3, r2
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	1a9b      	subs	r3, r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	4413      	add	r3, r2
 8005b60:	3304      	adds	r3, #4
 8005b62:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	0c5b      	lsrs	r3, r3, #17
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d124      	bne.n	8005bba <HAL_PCD_IRQHandler+0x66a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005b76:	4013      	ands	r3, r2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d035      	beq.n	8005be8 <HAL_PCD_IRQHandler+0x698>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	091b      	lsrs	r3, r3, #4
 8005b84:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6a38      	ldr	r0, [r7, #32]
 8005b90:	f002 f99e 	bl	8007ed0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	091b      	lsrs	r3, r3, #4
 8005b9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ba0:	441a      	add	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	091b      	lsrs	r3, r3, #4
 8005bae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bb2:	441a      	add	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	619a      	str	r2, [r3, #24]
 8005bb8:	e016      	b.n	8005be8 <HAL_PCD_IRQHandler+0x698>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	0c5b      	lsrs	r3, r3, #17
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	2b06      	cmp	r3, #6
 8005bc4:	d110      	bne.n	8005be8 <HAL_PCD_IRQHandler+0x698>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005bcc:	2208      	movs	r2, #8
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6a38      	ldr	r0, [r7, #32]
 8005bd2:	f002 f97d 	bl	8007ed0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	091b      	lsrs	r3, r3, #4
 8005bde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005be2:	441a      	add	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0210 	orr.w	r2, r2, #16
 8005bf6:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f002 f990 	bl	8007f22 <USB_ReadInterrupts>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f003 0308 	and.w	r3, r3, #8
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d10a      	bne.n	8005c22 <HAL_PCD_IRQHandler+0x6d2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f895 	bl	8005d3c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	695a      	ldr	r2, [r3, #20]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f002 0208 	and.w	r2, r2, #8
 8005c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f002 f97b 	bl	8007f22 <USB_ReadInterrupts>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c36:	d10d      	bne.n	8005c54 <HAL_PCD_IRQHandler+0x704>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f8b0 	bl	8005da4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695a      	ldr	r2, [r3, #20]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005c52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f002 f962 	bl	8007f22 <USB_ReadInterrupts>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c68:	d10d      	bne.n	8005c86 <HAL_PCD_IRQHandler+0x736>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	4619      	mov	r1, r3
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f88b 	bl	8005d8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	695a      	ldr	r2, [r3, #20]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005c84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f002 f949 	bl	8007f22 <USB_ReadInterrupts>
 8005c90:	4603      	mov	r3, r0
 8005c92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9a:	d10a      	bne.n	8005cb2 <HAL_PCD_IRQHandler+0x762>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f88d 	bl	8005dbc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695a      	ldr	r2, [r3, #20]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f002 f933 	bl	8007f22 <USB_ReadInterrupts>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d115      	bne.n	8005cf2 <HAL_PCD_IRQHandler+0x7a2>
    {
      temp = hpcd->Instance->GOTGINT;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <HAL_PCD_IRQHandler+0x78e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f879 	bl	8005dd0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6859      	ldr	r1, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	605a      	str	r2, [r3, #4]
 8005cee:	e000      	b.n	8005cf2 <HAL_PCD_IRQHandler+0x7a2>
      return;
 8005cf0:	bf00      	nop
    }
  }
}
 8005cf2:	3734      	adds	r7, #52	; 0x34
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd90      	pop	{r4, r7, pc}

08005cf8 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08a      	sub	sp, #40	; 0x28
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	1a9b      	subs	r3, r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	3338      	adds	r3, #56	; 0x38
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	4413      	add	r3, r2
 8005e08:	3304      	adds	r3, #4
 8005e0a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	699a      	ldr	r2, [r3, #24]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d901      	bls.n	8005e1c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e06c      	b.n	8005ef6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	695a      	ldr	r2, [r3, #20]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d902      	bls.n	8005e38 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	3303      	adds	r3, #3
 8005e3c:	089b      	lsrs	r3, r3, #2
 8005e3e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e40:	e02b      	b.n	8005e9a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	695a      	ldr	r2, [r3, #20]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	69fa      	ldr	r2, [r7, #28]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d902      	bls.n	8005e5e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	3303      	adds	r3, #3
 8005e62:	089b      	lsrs	r3, r3, #2
 8005e64:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	68d9      	ldr	r1, [r3, #12]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	6978      	ldr	r0, [r7, #20]
 8005e7e:	f001 fff2 	bl	8007e66 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	441a      	add	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	441a      	add	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d809      	bhi.n	8005ec4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	699a      	ldr	r2, [r3, #24]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d203      	bcs.n	8005ec4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1be      	bne.n	8005e42 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	695a      	ldr	r2, [r3, #20]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d811      	bhi.n	8005ef4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8005edc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	6939      	ldr	r1, [r7, #16]
 8005eec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3720      	adds	r7, #32
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
	...

08005f00 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	333c      	adds	r3, #60	; 0x3c
 8005f18:	3304      	adds	r3, #4
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	f040 80b3 	bne.w	800609e <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f003 0308 	and.w	r3, r3, #8
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d028      	beq.n	8005f94 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4a70      	ldr	r2, [pc, #448]	; (8006108 <PCD_EP_OutXfrComplete_int+0x208>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d90e      	bls.n	8005f68 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d009      	beq.n	8005f68 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f60:	461a      	mov	r2, r3
 8005f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f66:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff fedd 	bl	8005d28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005f78:	461a      	mov	r2, r3
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	f002 f8a8 	bl	80080d0 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	2308      	movs	r3, #8
 8005f90:	6093      	str	r3, [r2, #8]
 8005f92:	e0b3      	b.n	80060fc <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f003 0320 	and.w	r3, r3, #32
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d009      	beq.n	8005fb2 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005faa:	461a      	mov	r2, r3
 8005fac:	2320      	movs	r3, #32
 8005fae:	6093      	str	r3, [r2, #8]
 8005fb0:	e0a4      	b.n	80060fc <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f040 809f 	bne.w	80060fc <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4a51      	ldr	r2, [pc, #324]	; (8006108 <PCD_EP_OutXfrComplete_int+0x208>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d90f      	bls.n	8005fe6 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00a      	beq.n	8005fe6 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fe2:	6093      	str	r3, [r2, #8]
 8005fe4:	e08a      	b.n	80060fc <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	4613      	mov	r3, r2
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	1a9b      	subs	r3, r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ff8:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	0159      	lsls	r1, r3, #5
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	440b      	add	r3, r1
 8006002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800600c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	4613      	mov	r3, r2
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	1a9b      	subs	r3, r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4403      	add	r3, r0
 800601c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006020:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	4613      	mov	r3, r2
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	440b      	add	r3, r1
 8006030:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006034:	6819      	ldr	r1, [r3, #0]
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	4613      	mov	r3, r2
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	1a9b      	subs	r3, r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4403      	add	r3, r0
 8006044:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4419      	add	r1, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	4613      	mov	r3, r2
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4403      	add	r3, r0
 800605a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800605e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	b2db      	uxtb	r3, r3
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7ff fe46 	bl	8005cf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d144      	bne.n	80060fc <PCD_EP_OutXfrComplete_int+0x1fc>
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	4613      	mov	r3, r2
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	1a9b      	subs	r3, r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	440b      	add	r3, r1
 8006080:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d138      	bne.n	80060fc <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6818      	ldr	r0, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006094:	461a      	mov	r2, r3
 8006096:	2101      	movs	r1, #1
 8006098:	f002 f81a 	bl	80080d0 <USB_EP0_OutStart>
 800609c:	e02e      	b.n	80060fc <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4a1a      	ldr	r2, [pc, #104]	; (800610c <PCD_EP_OutXfrComplete_int+0x20c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d124      	bne.n	80060f0 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060bc:	461a      	mov	r2, r3
 80060be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060c2:	6093      	str	r3, [r2, #8]
 80060c4:	e01a      	b.n	80060fc <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f003 0320 	and.w	r3, r3, #32
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060dc:	461a      	mov	r2, r3
 80060de:	2320      	movs	r3, #32
 80060e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7ff fe05 	bl	8005cf8 <HAL_PCD_DataOutStageCallback>
 80060ee:	e005      	b.n	80060fc <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	4619      	mov	r1, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff fdfe 	bl	8005cf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	4f54300a 	.word	0x4f54300a
 800610c:	4f54310a 	.word	0x4f54310a

08006110 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	333c      	adds	r3, #60	; 0x3c
 8006128:	3304      	adds	r3, #4
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d113      	bne.n	800616e <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4a1f      	ldr	r2, [pc, #124]	; (80061c8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d922      	bls.n	8006194 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01d      	beq.n	8006194 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006164:	461a      	mov	r2, r3
 8006166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800616a:	6093      	str	r3, [r2, #8]
 800616c:	e012      	b.n	8006194 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4a16      	ldr	r2, [pc, #88]	; (80061cc <PCD_EP_OutSetupPacket_int+0xbc>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d10e      	bne.n	8006194 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800617c:	2b00      	cmp	r3, #0
 800617e:	d009      	beq.n	8006194 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618c:	461a      	mov	r2, r3
 800618e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006192:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7ff fdc7 	bl	8005d28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4a0a      	ldr	r2, [pc, #40]	; (80061c8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d90c      	bls.n	80061bc <PCD_EP_OutSetupPacket_int+0xac>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d108      	bne.n	80061bc <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80061b4:	461a      	mov	r2, r3
 80061b6:	2101      	movs	r1, #1
 80061b8:	f001 ff8a 	bl	80080d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3718      	adds	r7, #24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	4f54300a 	.word	0x4f54300a
 80061cc:	4f54310a 	.word	0x4f54310a

080061d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061ec:	4b05      	ldr	r3, [pc, #20]	; (8006204 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a04      	ldr	r2, [pc, #16]	; (8006204 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80061f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f6:	6013      	str	r3, [r2, #0]
}
 80061f8:	bf00      	nop
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	40007000 	.word	0x40007000

08006208 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800620e:	2300      	movs	r3, #0
 8006210:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006212:	4b23      	ldr	r3, [pc, #140]	; (80062a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	4a22      	ldr	r2, [pc, #136]	; (80062a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800621c:	6413      	str	r3, [r2, #64]	; 0x40
 800621e:	4b20      	ldr	r3, [pc, #128]	; (80062a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800622a:	4b1e      	ldr	r3, [pc, #120]	; (80062a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a1d      	ldr	r2, [pc, #116]	; (80062a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006234:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006236:	f7fc fa87 	bl	8002748 <HAL_GetTick>
 800623a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800623c:	e009      	b.n	8006252 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800623e:	f7fc fa83 	bl	8002748 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800624c:	d901      	bls.n	8006252 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e022      	b.n	8006298 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006252:	4b14      	ldr	r3, [pc, #80]	; (80062a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800625a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800625e:	d1ee      	bne.n	800623e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006260:	4b10      	ldr	r3, [pc, #64]	; (80062a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a0f      	ldr	r2, [pc, #60]	; (80062a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800626a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800626c:	f7fc fa6c 	bl	8002748 <HAL_GetTick>
 8006270:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006272:	e009      	b.n	8006288 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006274:	f7fc fa68 	bl	8002748 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006282:	d901      	bls.n	8006288 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e007      	b.n	8006298 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006288:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006290:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006294:	d1ee      	bne.n	8006274 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	40023800 	.word	0x40023800
 80062a4:	40007000 	.word	0x40007000

080062a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80062b0:	2300      	movs	r3, #0
 80062b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e25e      	b.n	800677c <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 8087 	beq.w	80063da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062cc:	4b96      	ldr	r3, [pc, #600]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 030c 	and.w	r3, r3, #12
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d00c      	beq.n	80062f2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062d8:	4b93      	ldr	r3, [pc, #588]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f003 030c 	and.w	r3, r3, #12
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d112      	bne.n	800630a <HAL_RCC_OscConfig+0x62>
 80062e4:	4b90      	ldr	r3, [pc, #576]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062f0:	d10b      	bne.n	800630a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f2:	4b8d      	ldr	r3, [pc, #564]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d06c      	beq.n	80063d8 <HAL_RCC_OscConfig+0x130>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d168      	bne.n	80063d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e238      	b.n	800677c <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006312:	d106      	bne.n	8006322 <HAL_RCC_OscConfig+0x7a>
 8006314:	4b84      	ldr	r3, [pc, #528]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a83      	ldr	r2, [pc, #524]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 800631a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800631e:	6013      	str	r3, [r2, #0]
 8006320:	e02e      	b.n	8006380 <HAL_RCC_OscConfig+0xd8>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10c      	bne.n	8006344 <HAL_RCC_OscConfig+0x9c>
 800632a:	4b7f      	ldr	r3, [pc, #508]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a7e      	ldr	r2, [pc, #504]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 8006330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	4b7c      	ldr	r3, [pc, #496]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a7b      	ldr	r2, [pc, #492]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 800633c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	e01d      	b.n	8006380 <HAL_RCC_OscConfig+0xd8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800634c:	d10c      	bne.n	8006368 <HAL_RCC_OscConfig+0xc0>
 800634e:	4b76      	ldr	r3, [pc, #472]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a75      	ldr	r2, [pc, #468]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 8006354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	4b73      	ldr	r3, [pc, #460]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a72      	ldr	r2, [pc, #456]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 8006360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e00b      	b.n	8006380 <HAL_RCC_OscConfig+0xd8>
 8006368:	4b6f      	ldr	r3, [pc, #444]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a6e      	ldr	r2, [pc, #440]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 800636e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006372:	6013      	str	r3, [r2, #0]
 8006374:	4b6c      	ldr	r3, [pc, #432]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a6b      	ldr	r2, [pc, #428]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 800637a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800637e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d013      	beq.n	80063b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006388:	f7fc f9de 	bl	8002748 <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006390:	f7fc f9da 	bl	8002748 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b64      	cmp	r3, #100	; 0x64
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e1ec      	b.n	800677c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063a2:	4b61      	ldr	r3, [pc, #388]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0f0      	beq.n	8006390 <HAL_RCC_OscConfig+0xe8>
 80063ae:	e014      	b.n	80063da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b0:	f7fc f9ca 	bl	8002748 <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063b8:	f7fc f9c6 	bl	8002748 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b64      	cmp	r3, #100	; 0x64
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e1d8      	b.n	800677c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063ca:	4b57      	ldr	r3, [pc, #348]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f0      	bne.n	80063b8 <HAL_RCC_OscConfig+0x110>
 80063d6:	e000      	b.n	80063da <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d069      	beq.n	80064ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063e6:	4b50      	ldr	r3, [pc, #320]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 030c 	and.w	r3, r3, #12
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00b      	beq.n	800640a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063f2:	4b4d      	ldr	r3, [pc, #308]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 030c 	and.w	r3, r3, #12
 80063fa:	2b08      	cmp	r3, #8
 80063fc:	d11c      	bne.n	8006438 <HAL_RCC_OscConfig+0x190>
 80063fe:	4b4a      	ldr	r3, [pc, #296]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d116      	bne.n	8006438 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800640a:	4b47      	ldr	r3, [pc, #284]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d005      	beq.n	8006422 <HAL_RCC_OscConfig+0x17a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d001      	beq.n	8006422 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e1ac      	b.n	800677c <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006422:	4b41      	ldr	r3, [pc, #260]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	493d      	ldr	r1, [pc, #244]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 8006432:	4313      	orrs	r3, r2
 8006434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006436:	e040      	b.n	80064ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d023      	beq.n	8006488 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006440:	4b39      	ldr	r3, [pc, #228]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a38      	ldr	r2, [pc, #224]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 8006446:	f043 0301 	orr.w	r3, r3, #1
 800644a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644c:	f7fc f97c 	bl	8002748 <HAL_GetTick>
 8006450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006452:	e008      	b.n	8006466 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006454:	f7fc f978 	bl	8002748 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e18a      	b.n	800677c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006466:	4b30      	ldr	r3, [pc, #192]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0f0      	beq.n	8006454 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006472:	4b2d      	ldr	r3, [pc, #180]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	00db      	lsls	r3, r3, #3
 8006480:	4929      	ldr	r1, [pc, #164]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 8006482:	4313      	orrs	r3, r2
 8006484:	600b      	str	r3, [r1, #0]
 8006486:	e018      	b.n	80064ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006488:	4b27      	ldr	r3, [pc, #156]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a26      	ldr	r2, [pc, #152]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 800648e:	f023 0301 	bic.w	r3, r3, #1
 8006492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006494:	f7fc f958 	bl	8002748 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800649c:	f7fc f954 	bl	8002748 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e166      	b.n	800677c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ae:	4b1e      	ldr	r3, [pc, #120]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f0      	bne.n	800649c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0308 	and.w	r3, r3, #8
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d038      	beq.n	8006538 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d019      	beq.n	8006502 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064ce:	4b16      	ldr	r3, [pc, #88]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 80064d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064d2:	4a15      	ldr	r2, [pc, #84]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 80064d4:	f043 0301 	orr.w	r3, r3, #1
 80064d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064da:	f7fc f935 	bl	8002748 <HAL_GetTick>
 80064de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064e0:	e008      	b.n	80064f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064e2:	f7fc f931 	bl	8002748 <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d901      	bls.n	80064f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e143      	b.n	800677c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064f4:	4b0c      	ldr	r3, [pc, #48]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 80064f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0f0      	beq.n	80064e2 <HAL_RCC_OscConfig+0x23a>
 8006500:	e01a      	b.n	8006538 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006502:	4b09      	ldr	r3, [pc, #36]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 8006504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006506:	4a08      	ldr	r2, [pc, #32]	; (8006528 <HAL_RCC_OscConfig+0x280>)
 8006508:	f023 0301 	bic.w	r3, r3, #1
 800650c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800650e:	f7fc f91b 	bl	8002748 <HAL_GetTick>
 8006512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006514:	e00a      	b.n	800652c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006516:	f7fc f917 	bl	8002748 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	2b02      	cmp	r3, #2
 8006522:	d903      	bls.n	800652c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e129      	b.n	800677c <HAL_RCC_OscConfig+0x4d4>
 8006528:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800652c:	4b95      	ldr	r3, [pc, #596]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 800652e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1ee      	bne.n	8006516 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 80a4 	beq.w	800668e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006546:	4b8f      	ldr	r3, [pc, #572]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10d      	bne.n	800656e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006552:	4b8c      	ldr	r3, [pc, #560]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	4a8b      	ldr	r2, [pc, #556]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 8006558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800655c:	6413      	str	r3, [r2, #64]	; 0x40
 800655e:	4b89      	ldr	r3, [pc, #548]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800656a:	2301      	movs	r3, #1
 800656c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800656e:	4b86      	ldr	r3, [pc, #536]	; (8006788 <HAL_RCC_OscConfig+0x4e0>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006576:	2b00      	cmp	r3, #0
 8006578:	d118      	bne.n	80065ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800657a:	4b83      	ldr	r3, [pc, #524]	; (8006788 <HAL_RCC_OscConfig+0x4e0>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a82      	ldr	r2, [pc, #520]	; (8006788 <HAL_RCC_OscConfig+0x4e0>)
 8006580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006586:	f7fc f8df 	bl	8002748 <HAL_GetTick>
 800658a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800658c:	e008      	b.n	80065a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800658e:	f7fc f8db 	bl	8002748 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b64      	cmp	r3, #100	; 0x64
 800659a:	d901      	bls.n	80065a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e0ed      	b.n	800677c <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065a0:	4b79      	ldr	r3, [pc, #484]	; (8006788 <HAL_RCC_OscConfig+0x4e0>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0f0      	beq.n	800658e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d106      	bne.n	80065c2 <HAL_RCC_OscConfig+0x31a>
 80065b4:	4b73      	ldr	r3, [pc, #460]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 80065b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b8:	4a72      	ldr	r2, [pc, #456]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 80065ba:	f043 0301 	orr.w	r3, r3, #1
 80065be:	6713      	str	r3, [r2, #112]	; 0x70
 80065c0:	e02d      	b.n	800661e <HAL_RCC_OscConfig+0x376>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10c      	bne.n	80065e4 <HAL_RCC_OscConfig+0x33c>
 80065ca:	4b6e      	ldr	r3, [pc, #440]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 80065cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ce:	4a6d      	ldr	r2, [pc, #436]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 80065d0:	f023 0301 	bic.w	r3, r3, #1
 80065d4:	6713      	str	r3, [r2, #112]	; 0x70
 80065d6:	4b6b      	ldr	r3, [pc, #428]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 80065d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065da:	4a6a      	ldr	r2, [pc, #424]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 80065dc:	f023 0304 	bic.w	r3, r3, #4
 80065e0:	6713      	str	r3, [r2, #112]	; 0x70
 80065e2:	e01c      	b.n	800661e <HAL_RCC_OscConfig+0x376>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	2b05      	cmp	r3, #5
 80065ea:	d10c      	bne.n	8006606 <HAL_RCC_OscConfig+0x35e>
 80065ec:	4b65      	ldr	r3, [pc, #404]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 80065ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f0:	4a64      	ldr	r2, [pc, #400]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 80065f2:	f043 0304 	orr.w	r3, r3, #4
 80065f6:	6713      	str	r3, [r2, #112]	; 0x70
 80065f8:	4b62      	ldr	r3, [pc, #392]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 80065fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fc:	4a61      	ldr	r2, [pc, #388]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 80065fe:	f043 0301 	orr.w	r3, r3, #1
 8006602:	6713      	str	r3, [r2, #112]	; 0x70
 8006604:	e00b      	b.n	800661e <HAL_RCC_OscConfig+0x376>
 8006606:	4b5f      	ldr	r3, [pc, #380]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 8006608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660a:	4a5e      	ldr	r2, [pc, #376]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 800660c:	f023 0301 	bic.w	r3, r3, #1
 8006610:	6713      	str	r3, [r2, #112]	; 0x70
 8006612:	4b5c      	ldr	r3, [pc, #368]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 8006614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006616:	4a5b      	ldr	r2, [pc, #364]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 8006618:	f023 0304 	bic.w	r3, r3, #4
 800661c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d015      	beq.n	8006652 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006626:	f7fc f88f 	bl	8002748 <HAL_GetTick>
 800662a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800662c:	e00a      	b.n	8006644 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800662e:	f7fc f88b 	bl	8002748 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	f241 3288 	movw	r2, #5000	; 0x1388
 800663c:	4293      	cmp	r3, r2
 800663e:	d901      	bls.n	8006644 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e09b      	b.n	800677c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006644:	4b4f      	ldr	r3, [pc, #316]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 8006646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0ee      	beq.n	800662e <HAL_RCC_OscConfig+0x386>
 8006650:	e014      	b.n	800667c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006652:	f7fc f879 	bl	8002748 <HAL_GetTick>
 8006656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006658:	e00a      	b.n	8006670 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800665a:	f7fc f875 	bl	8002748 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	f241 3288 	movw	r2, #5000	; 0x1388
 8006668:	4293      	cmp	r3, r2
 800666a:	d901      	bls.n	8006670 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e085      	b.n	800677c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006670:	4b44      	ldr	r3, [pc, #272]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 8006672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1ee      	bne.n	800665a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800667c:	7dfb      	ldrb	r3, [r7, #23]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d105      	bne.n	800668e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006682:	4b40      	ldr	r3, [pc, #256]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	4a3f      	ldr	r2, [pc, #252]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 8006688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800668c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d071      	beq.n	800677a <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006696:	4b3b      	ldr	r3, [pc, #236]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 030c 	and.w	r3, r3, #12
 800669e:	2b08      	cmp	r3, #8
 80066a0:	d069      	beq.n	8006776 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d14b      	bne.n	8006742 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066aa:	4b36      	ldr	r3, [pc, #216]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a35      	ldr	r2, [pc, #212]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 80066b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b6:	f7fc f847 	bl	8002748 <HAL_GetTick>
 80066ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066bc:	e008      	b.n	80066d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066be:	f7fc f843 	bl	8002748 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e055      	b.n	800677c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066d0:	4b2c      	ldr	r3, [pc, #176]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1f0      	bne.n	80066be <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	69da      	ldr	r2, [r3, #28]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	431a      	orrs	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	019b      	lsls	r3, r3, #6
 80066ec:	431a      	orrs	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f2:	085b      	lsrs	r3, r3, #1
 80066f4:	3b01      	subs	r3, #1
 80066f6:	041b      	lsls	r3, r3, #16
 80066f8:	431a      	orrs	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fe:	061b      	lsls	r3, r3, #24
 8006700:	431a      	orrs	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006706:	071b      	lsls	r3, r3, #28
 8006708:	491e      	ldr	r1, [pc, #120]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 800670a:	4313      	orrs	r3, r2
 800670c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800670e:	4b1d      	ldr	r3, [pc, #116]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1c      	ldr	r2, [pc, #112]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 8006714:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671a:	f7fc f815 	bl	8002748 <HAL_GetTick>
 800671e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006720:	e008      	b.n	8006734 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006722:	f7fc f811 	bl	8002748 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d901      	bls.n	8006734 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e023      	b.n	800677c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006734:	4b13      	ldr	r3, [pc, #76]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0f0      	beq.n	8006722 <HAL_RCC_OscConfig+0x47a>
 8006740:	e01b      	b.n	800677a <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006742:	4b10      	ldr	r3, [pc, #64]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a0f      	ldr	r2, [pc, #60]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 8006748:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800674c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674e:	f7fb fffb 	bl	8002748 <HAL_GetTick>
 8006752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006754:	e008      	b.n	8006768 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006756:	f7fb fff7 	bl	8002748 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d901      	bls.n	8006768 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e009      	b.n	800677c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006768:	4b06      	ldr	r3, [pc, #24]	; (8006784 <HAL_RCC_OscConfig+0x4dc>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1f0      	bne.n	8006756 <HAL_RCC_OscConfig+0x4ae>
 8006774:	e001      	b.n	800677a <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e000      	b.n	800677c <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3718      	adds	r7, #24
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	40023800 	.word	0x40023800
 8006788:	40007000 	.word	0x40007000

0800678c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e0ce      	b.n	8006942 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067a4:	4b69      	ldr	r3, [pc, #420]	; (800694c <HAL_RCC_ClockConfig+0x1c0>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 030f 	and.w	r3, r3, #15
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d910      	bls.n	80067d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067b2:	4b66      	ldr	r3, [pc, #408]	; (800694c <HAL_RCC_ClockConfig+0x1c0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f023 020f 	bic.w	r2, r3, #15
 80067ba:	4964      	ldr	r1, [pc, #400]	; (800694c <HAL_RCC_ClockConfig+0x1c0>)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	4313      	orrs	r3, r2
 80067c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067c2:	4b62      	ldr	r3, [pc, #392]	; (800694c <HAL_RCC_ClockConfig+0x1c0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d001      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e0b6      	b.n	8006942 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d020      	beq.n	8006822 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d005      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067ec:	4b58      	ldr	r3, [pc, #352]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	4a57      	ldr	r2, [pc, #348]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 80067f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0308 	and.w	r3, r3, #8
 8006800:	2b00      	cmp	r3, #0
 8006802:	d005      	beq.n	8006810 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006804:	4b52      	ldr	r3, [pc, #328]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	4a51      	ldr	r2, [pc, #324]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 800680a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800680e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006810:	4b4f      	ldr	r3, [pc, #316]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	494c      	ldr	r1, [pc, #304]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 800681e:	4313      	orrs	r3, r2
 8006820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d040      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d107      	bne.n	8006846 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006836:	4b46      	ldr	r3, [pc, #280]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d115      	bne.n	800686e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e07d      	b.n	8006942 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2b02      	cmp	r3, #2
 800684c:	d107      	bne.n	800685e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800684e:	4b40      	ldr	r3, [pc, #256]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d109      	bne.n	800686e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e071      	b.n	8006942 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800685e:	4b3c      	ldr	r3, [pc, #240]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e069      	b.n	8006942 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800686e:	4b38      	ldr	r3, [pc, #224]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f023 0203 	bic.w	r2, r3, #3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	4935      	ldr	r1, [pc, #212]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 800687c:	4313      	orrs	r3, r2
 800687e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006880:	f7fb ff62 	bl	8002748 <HAL_GetTick>
 8006884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006886:	e00a      	b.n	800689e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006888:	f7fb ff5e 	bl	8002748 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	f241 3288 	movw	r2, #5000	; 0x1388
 8006896:	4293      	cmp	r3, r2
 8006898:	d901      	bls.n	800689e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e051      	b.n	8006942 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800689e:	4b2c      	ldr	r3, [pc, #176]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f003 020c 	and.w	r2, r3, #12
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d1eb      	bne.n	8006888 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068b0:	4b26      	ldr	r3, [pc, #152]	; (800694c <HAL_RCC_ClockConfig+0x1c0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 030f 	and.w	r3, r3, #15
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d210      	bcs.n	80068e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068be:	4b23      	ldr	r3, [pc, #140]	; (800694c <HAL_RCC_ClockConfig+0x1c0>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f023 020f 	bic.w	r2, r3, #15
 80068c6:	4921      	ldr	r1, [pc, #132]	; (800694c <HAL_RCC_ClockConfig+0x1c0>)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ce:	4b1f      	ldr	r3, [pc, #124]	; (800694c <HAL_RCC_ClockConfig+0x1c0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d001      	beq.n	80068e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e030      	b.n	8006942 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d008      	beq.n	80068fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068ec:	4b18      	ldr	r3, [pc, #96]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	4915      	ldr	r1, [pc, #84]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d009      	beq.n	800691e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800690a:	4b11      	ldr	r3, [pc, #68]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	00db      	lsls	r3, r3, #3
 8006918:	490d      	ldr	r1, [pc, #52]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 800691a:	4313      	orrs	r3, r2
 800691c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800691e:	f000 f881 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 8006922:	4601      	mov	r1, r0
 8006924:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	091b      	lsrs	r3, r3, #4
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	4a09      	ldr	r2, [pc, #36]	; (8006954 <HAL_RCC_ClockConfig+0x1c8>)
 8006930:	5cd3      	ldrb	r3, [r2, r3]
 8006932:	fa21 f303 	lsr.w	r3, r1, r3
 8006936:	4a08      	ldr	r2, [pc, #32]	; (8006958 <HAL_RCC_ClockConfig+0x1cc>)
 8006938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800693a:	2000      	movs	r0, #0
 800693c:	f7fa f8de 	bl	8000afc <HAL_InitTick>

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	40023c00 	.word	0x40023c00
 8006950:	40023800 	.word	0x40023800
 8006954:	0800ad60 	.word	0x0800ad60
 8006958:	20000000 	.word	0x20000000

0800695c <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b08c      	sub	sp, #48	; 0x30
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d127      	bne.n	80069be <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800696e:	4b2a      	ldr	r3, [pc, #168]	; (8006a18 <HAL_RCC_MCOConfig+0xbc>)
 8006970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006972:	4a29      	ldr	r2, [pc, #164]	; (8006a18 <HAL_RCC_MCOConfig+0xbc>)
 8006974:	f043 0301 	orr.w	r3, r3, #1
 8006978:	6313      	str	r3, [r2, #48]	; 0x30
 800697a:	4b27      	ldr	r3, [pc, #156]	; (8006a18 <HAL_RCC_MCOConfig+0xbc>)
 800697c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	61bb      	str	r3, [r7, #24]
 8006984:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006986:	f44f 7380 	mov.w	r3, #256	; 0x100
 800698a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800698c:	2302      	movs	r3, #2
 800698e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8006990:	2303      	movs	r3, #3
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006994:	2300      	movs	r3, #0
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006998:	2300      	movs	r3, #0
 800699a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800699c:	f107 031c 	add.w	r3, r7, #28
 80069a0:	4619      	mov	r1, r3
 80069a2:	481e      	ldr	r0, [pc, #120]	; (8006a1c <HAL_RCC_MCOConfig+0xc0>)
 80069a4:	f7fd fa20 	bl	8003de8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80069a8:	4b1b      	ldr	r3, [pc, #108]	; (8006a18 <HAL_RCC_MCOConfig+0xbc>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80069b0:	68b9      	ldr	r1, [r7, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	430b      	orrs	r3, r1
 80069b6:	4918      	ldr	r1, [pc, #96]	; (8006a18 <HAL_RCC_MCOConfig+0xbc>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 80069bc:	e027      	b.n	8006a0e <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 80069be:	4b16      	ldr	r3, [pc, #88]	; (8006a18 <HAL_RCC_MCOConfig+0xbc>)
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	4a15      	ldr	r2, [pc, #84]	; (8006a18 <HAL_RCC_MCOConfig+0xbc>)
 80069c4:	f043 0304 	orr.w	r3, r3, #4
 80069c8:	6313      	str	r3, [r2, #48]	; 0x30
 80069ca:	4b13      	ldr	r3, [pc, #76]	; (8006a18 <HAL_RCC_MCOConfig+0xbc>)
 80069cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80069d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069dc:	2302      	movs	r3, #2
 80069de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80069e0:	2303      	movs	r3, #3
 80069e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e4:	2300      	movs	r3, #0
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80069e8:	2300      	movs	r3, #0
 80069ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80069ec:	f107 031c 	add.w	r3, r7, #28
 80069f0:	4619      	mov	r1, r3
 80069f2:	480b      	ldr	r0, [pc, #44]	; (8006a20 <HAL_RCC_MCOConfig+0xc4>)
 80069f4:	f7fd f9f8 	bl	8003de8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 80069f8:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <HAL_RCC_MCOConfig+0xbc>)
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	00d9      	lsls	r1, r3, #3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	430b      	orrs	r3, r1
 8006a08:	4903      	ldr	r1, [pc, #12]	; (8006a18 <HAL_RCC_MCOConfig+0xbc>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	608b      	str	r3, [r1, #8]
}
 8006a0e:	bf00      	nop
 8006a10:	3730      	adds	r7, #48	; 0x30
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	40020000 	.word	0x40020000
 8006a20:	40020800 	.word	0x40020800

08006a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	607b      	str	r3, [r7, #4]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	2300      	movs	r3, #0
 8006a34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a3a:	4b50      	ldr	r3, [pc, #320]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x158>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 030c 	and.w	r3, r3, #12
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d007      	beq.n	8006a56 <HAL_RCC_GetSysClockFreq+0x32>
 8006a46:	2b08      	cmp	r3, #8
 8006a48:	d008      	beq.n	8006a5c <HAL_RCC_GetSysClockFreq+0x38>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f040 808d 	bne.w	8006b6a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a50:	4b4b      	ldr	r3, [pc, #300]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006a52:	60bb      	str	r3, [r7, #8]
       break;
 8006a54:	e08c      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a56:	4b4b      	ldr	r3, [pc, #300]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a58:	60bb      	str	r3, [r7, #8]
      break;
 8006a5a:	e089      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a5c:	4b47      	ldr	r3, [pc, #284]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x158>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a64:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006a66:	4b45      	ldr	r3, [pc, #276]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x158>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d023      	beq.n	8006aba <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a72:	4b42      	ldr	r3, [pc, #264]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x158>)
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	099b      	lsrs	r3, r3, #6
 8006a78:	f04f 0400 	mov.w	r4, #0
 8006a7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006a80:	f04f 0200 	mov.w	r2, #0
 8006a84:	ea03 0501 	and.w	r5, r3, r1
 8006a88:	ea04 0602 	and.w	r6, r4, r2
 8006a8c:	4a3d      	ldr	r2, [pc, #244]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a8e:	fb02 f106 	mul.w	r1, r2, r6
 8006a92:	2200      	movs	r2, #0
 8006a94:	fb02 f205 	mul.w	r2, r2, r5
 8006a98:	440a      	add	r2, r1
 8006a9a:	493a      	ldr	r1, [pc, #232]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a9c:	fba5 0101 	umull	r0, r1, r5, r1
 8006aa0:	1853      	adds	r3, r2, r1
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f04f 0400 	mov.w	r4, #0
 8006aaa:	461a      	mov	r2, r3
 8006aac:	4623      	mov	r3, r4
 8006aae:	f7f9 fbc7 	bl	8000240 <__aeabi_uldivmod>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	e049      	b.n	8006b4e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aba:	4b30      	ldr	r3, [pc, #192]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x158>)
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	099b      	lsrs	r3, r3, #6
 8006ac0:	f04f 0400 	mov.w	r4, #0
 8006ac4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006ac8:	f04f 0200 	mov.w	r2, #0
 8006acc:	ea03 0501 	and.w	r5, r3, r1
 8006ad0:	ea04 0602 	and.w	r6, r4, r2
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	4632      	mov	r2, r6
 8006ad8:	f04f 0300 	mov.w	r3, #0
 8006adc:	f04f 0400 	mov.w	r4, #0
 8006ae0:	0154      	lsls	r4, r2, #5
 8006ae2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006ae6:	014b      	lsls	r3, r1, #5
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4622      	mov	r2, r4
 8006aec:	1b49      	subs	r1, r1, r5
 8006aee:	eb62 0206 	sbc.w	r2, r2, r6
 8006af2:	f04f 0300 	mov.w	r3, #0
 8006af6:	f04f 0400 	mov.w	r4, #0
 8006afa:	0194      	lsls	r4, r2, #6
 8006afc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006b00:	018b      	lsls	r3, r1, #6
 8006b02:	1a5b      	subs	r3, r3, r1
 8006b04:	eb64 0402 	sbc.w	r4, r4, r2
 8006b08:	f04f 0100 	mov.w	r1, #0
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	00e2      	lsls	r2, r4, #3
 8006b12:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006b16:	00d9      	lsls	r1, r3, #3
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4614      	mov	r4, r2
 8006b1c:	195b      	adds	r3, r3, r5
 8006b1e:	eb44 0406 	adc.w	r4, r4, r6
 8006b22:	f04f 0100 	mov.w	r1, #0
 8006b26:	f04f 0200 	mov.w	r2, #0
 8006b2a:	02a2      	lsls	r2, r4, #10
 8006b2c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006b30:	0299      	lsls	r1, r3, #10
 8006b32:	460b      	mov	r3, r1
 8006b34:	4614      	mov	r4, r2
 8006b36:	4618      	mov	r0, r3
 8006b38:	4621      	mov	r1, r4
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f04f 0400 	mov.w	r4, #0
 8006b40:	461a      	mov	r2, r3
 8006b42:	4623      	mov	r3, r4
 8006b44:	f7f9 fb7c 	bl	8000240 <__aeabi_uldivmod>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006b4e:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x158>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	0c1b      	lsrs	r3, r3, #16
 8006b54:	f003 0303 	and.w	r3, r3, #3
 8006b58:	3301      	adds	r3, #1
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b66:	60bb      	str	r3, [r7, #8]
      break;
 8006b68:	e002      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b6a:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006b6c:	60bb      	str	r3, [r7, #8]
      break;
 8006b6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b70:	68bb      	ldr	r3, [r7, #8]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40023800 	.word	0x40023800
 8006b80:	00f42400 	.word	0x00f42400
 8006b84:	017d7840 	.word	0x017d7840

08006b88 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b8c:	4b03      	ldr	r3, [pc, #12]	; (8006b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	20000000 	.word	0x20000000

08006ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ba4:	f7ff fff0 	bl	8006b88 <HAL_RCC_GetHCLKFreq>
 8006ba8:	4601      	mov	r1, r0
 8006baa:	4b05      	ldr	r3, [pc, #20]	; (8006bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	0a9b      	lsrs	r3, r3, #10
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	4a03      	ldr	r2, [pc, #12]	; (8006bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bb6:	5cd3      	ldrb	r3, [r2, r3]
 8006bb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	40023800 	.word	0x40023800
 8006bc4:	0800ad70 	.word	0x0800ad70

08006bc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	220f      	movs	r2, #15
 8006bd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006bd8:	4b12      	ldr	r3, [pc, #72]	; (8006c24 <HAL_RCC_GetClockConfig+0x5c>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f003 0203 	and.w	r2, r3, #3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006be4:	4b0f      	ldr	r3, [pc, #60]	; (8006c24 <HAL_RCC_GetClockConfig+0x5c>)
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006bf0:	4b0c      	ldr	r3, [pc, #48]	; (8006c24 <HAL_RCC_GetClockConfig+0x5c>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006bfc:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <HAL_RCC_GetClockConfig+0x5c>)
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	08db      	lsrs	r3, r3, #3
 8006c02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c0a:	4b07      	ldr	r3, [pc, #28]	; (8006c28 <HAL_RCC_GetClockConfig+0x60>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 020f 	and.w	r2, r3, #15
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	601a      	str	r2, [r3, #0]
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	40023800 	.word	0x40023800
 8006c28:	40023c00 	.word	0x40023c00

08006c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006c34:	2300      	movs	r3, #0
 8006c36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006c40:	2300      	movs	r3, #0
 8006c42:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d012      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c54:	4b69      	ldr	r3, [pc, #420]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	4a68      	ldr	r2, [pc, #416]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006c5e:	6093      	str	r3, [r2, #8]
 8006c60:	4b66      	ldr	r3, [pc, #408]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c68:	4964      	ldr	r1, [pc, #400]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006c76:	2301      	movs	r3, #1
 8006c78:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d017      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c86:	4b5d      	ldr	r3, [pc, #372]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c94:	4959      	ldr	r1, [pc, #356]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ca4:	d101      	bne.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d017      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006cc2:	4b4e      	ldr	r3, [pc, #312]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd0:	494a      	ldr	r1, [pc, #296]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ce0:	d101      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0320 	and.w	r3, r3, #32
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 808b 	beq.w	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d10:	4b3a      	ldr	r3, [pc, #232]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d14:	4a39      	ldr	r2, [pc, #228]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8006d1c:	4b37      	ldr	r3, [pc, #220]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d24:	60bb      	str	r3, [r7, #8]
 8006d26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d28:	4b35      	ldr	r3, [pc, #212]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a34      	ldr	r2, [pc, #208]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d34:	f7fb fd08 	bl	8002748 <HAL_GetTick>
 8006d38:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006d3a:	e008      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d3c:	f7fb fd04 	bl	8002748 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b64      	cmp	r3, #100	; 0x64
 8006d48:	d901      	bls.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e38d      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006d4e:	4b2c      	ldr	r3, [pc, #176]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0f0      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d5a:	4b28      	ldr	r3, [pc, #160]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d62:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d035      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d02e      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d78:	4b20      	ldr	r3, [pc, #128]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d80:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d82:	4b1e      	ldr	r3, [pc, #120]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d86:	4a1d      	ldr	r2, [pc, #116]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d8c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d8e:	4b1b      	ldr	r3, [pc, #108]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d92:	4a1a      	ldr	r2, [pc, #104]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006d9a:	4a18      	ldr	r2, [pc, #96]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006da0:	4b16      	ldr	r3, [pc, #88]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d114      	bne.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dac:	f7fb fccc 	bl	8002748 <HAL_GetTick>
 8006db0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db2:	e00a      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006db4:	f7fb fcc8 	bl	8002748 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e34f      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dca:	4b0c      	ldr	r3, [pc, #48]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0ee      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006de2:	d111      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006de4:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006df0:	4b04      	ldr	r3, [pc, #16]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006df2:	400b      	ands	r3, r1
 8006df4:	4901      	ldr	r1, [pc, #4]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	608b      	str	r3, [r1, #8]
 8006dfa:	e00b      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006dfc:	40023800 	.word	0x40023800
 8006e00:	40007000 	.word	0x40007000
 8006e04:	0ffffcff 	.word	0x0ffffcff
 8006e08:	4bb3      	ldr	r3, [pc, #716]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	4ab2      	ldr	r2, [pc, #712]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e0e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e12:	6093      	str	r3, [r2, #8]
 8006e14:	4bb0      	ldr	r3, [pc, #704]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e20:	49ad      	ldr	r1, [pc, #692]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0310 	and.w	r3, r3, #16
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d010      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e32:	4ba9      	ldr	r3, [pc, #676]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e38:	4aa7      	ldr	r2, [pc, #668]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006e42:	4ba5      	ldr	r3, [pc, #660]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e44:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4c:	49a2      	ldr	r1, [pc, #648]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00a      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e60:	4b9d      	ldr	r3, [pc, #628]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e6e:	499a      	ldr	r1, [pc, #616]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00a      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e82:	4b95      	ldr	r3, [pc, #596]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e90:	4991      	ldr	r1, [pc, #580]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00a      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ea4:	4b8c      	ldr	r3, [pc, #560]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eb2:	4989      	ldr	r1, [pc, #548]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00a      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ec6:	4b84      	ldr	r3, [pc, #528]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ecc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed4:	4980      	ldr	r1, [pc, #512]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00a      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ee8:	4b7b      	ldr	r3, [pc, #492]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eee:	f023 0203 	bic.w	r2, r3, #3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef6:	4978      	ldr	r1, [pc, #480]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f0a:	4b73      	ldr	r3, [pc, #460]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f10:	f023 020c 	bic.w	r2, r3, #12
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f18:	496f      	ldr	r1, [pc, #444]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00a      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f2c:	4b6a      	ldr	r3, [pc, #424]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3a:	4967      	ldr	r1, [pc, #412]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00a      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f4e:	4b62      	ldr	r3, [pc, #392]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f54:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f5c:	495e      	ldr	r1, [pc, #376]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00a      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006f70:	4b59      	ldr	r3, [pc, #356]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7e:	4956      	ldr	r1, [pc, #344]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00a      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006f92:	4b51      	ldr	r3, [pc, #324]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa0:	494d      	ldr	r1, [pc, #308]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00a      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006fb4:	4b48      	ldr	r3, [pc, #288]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc2:	4945      	ldr	r1, [pc, #276]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006fd6:	4b40      	ldr	r3, [pc, #256]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe4:	493c      	ldr	r1, [pc, #240]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ff8:	4b37      	ldr	r3, [pc, #220]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007006:	4934      	ldr	r1, [pc, #208]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007008:	4313      	orrs	r3, r2
 800700a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d011      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800701a:	4b2f      	ldr	r3, [pc, #188]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800701c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007020:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007028:	492b      	ldr	r1, [pc, #172]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800702a:	4313      	orrs	r3, r2
 800702c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007034:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007038:	d101      	bne.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800703a:	2301      	movs	r3, #1
 800703c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800704a:	2301      	movs	r3, #1
 800704c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800705a:	4b1f      	ldr	r3, [pc, #124]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800705c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007060:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007068:	491b      	ldr	r1, [pc, #108]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800706a:	4313      	orrs	r3, r2
 800706c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00b      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800707c:	4b16      	ldr	r3, [pc, #88]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800707e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007082:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800708c:	4912      	ldr	r1, [pc, #72]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800708e:	4313      	orrs	r3, r2
 8007090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00b      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80070a0:	4b0d      	ldr	r3, [pc, #52]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070b0:	4909      	ldr	r1, [pc, #36]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00f      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80070c4:	4b04      	ldr	r3, [pc, #16]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d4:	e002      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80070d6:	bf00      	nop
 80070d8:	40023800 	.word	0x40023800
 80070dc:	4985      	ldr	r1, [pc, #532]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00b      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80070f0:	4b80      	ldr	r3, [pc, #512]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007100:	497c      	ldr	r1, [pc, #496]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007102:	4313      	orrs	r3, r2
 8007104:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d005      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007116:	f040 80d6 	bne.w	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800711a:	4b76      	ldr	r3, [pc, #472]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a75      	ldr	r2, [pc, #468]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007120:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007126:	f7fb fb0f 	bl	8002748 <HAL_GetTick>
 800712a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800712c:	e008      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800712e:	f7fb fb0b 	bl	8002748 <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b64      	cmp	r3, #100	; 0x64
 800713a:	d901      	bls.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e194      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007140:	4b6c      	ldr	r3, [pc, #432]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1f0      	bne.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d021      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715c:	2b00      	cmp	r3, #0
 800715e:	d11d      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007160:	4b64      	ldr	r3, [pc, #400]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007166:	0c1b      	lsrs	r3, r3, #16
 8007168:	f003 0303 	and.w	r3, r3, #3
 800716c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800716e:	4b61      	ldr	r3, [pc, #388]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007174:	0e1b      	lsrs	r3, r3, #24
 8007176:	f003 030f 	and.w	r3, r3, #15
 800717a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	019a      	lsls	r2, r3, #6
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	041b      	lsls	r3, r3, #16
 8007186:	431a      	orrs	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	061b      	lsls	r3, r3, #24
 800718c:	431a      	orrs	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	071b      	lsls	r3, r3, #28
 8007194:	4957      	ldr	r1, [pc, #348]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007196:	4313      	orrs	r3, r2
 8007198:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d004      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071b0:	d00a      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d02e      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071c6:	d129      	bne.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80071c8:	4b4a      	ldr	r3, [pc, #296]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ce:	0c1b      	lsrs	r3, r3, #16
 80071d0:	f003 0303 	and.w	r3, r3, #3
 80071d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80071d6:	4b47      	ldr	r3, [pc, #284]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071dc:	0f1b      	lsrs	r3, r3, #28
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	019a      	lsls	r2, r3, #6
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	041b      	lsls	r3, r3, #16
 80071ee:	431a      	orrs	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	061b      	lsls	r3, r3, #24
 80071f6:	431a      	orrs	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	071b      	lsls	r3, r3, #28
 80071fc:	493d      	ldr	r1, [pc, #244]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007204:	4b3b      	ldr	r3, [pc, #236]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800720a:	f023 021f 	bic.w	r2, r3, #31
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007212:	3b01      	subs	r3, #1
 8007214:	4937      	ldr	r1, [pc, #220]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007216:	4313      	orrs	r3, r2
 8007218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01d      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007228:	4b32      	ldr	r3, [pc, #200]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800722a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800722e:	0e1b      	lsrs	r3, r3, #24
 8007230:	f003 030f 	and.w	r3, r3, #15
 8007234:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007236:	4b2f      	ldr	r3, [pc, #188]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800723c:	0f1b      	lsrs	r3, r3, #28
 800723e:	f003 0307 	and.w	r3, r3, #7
 8007242:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	019a      	lsls	r2, r3, #6
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	041b      	lsls	r3, r3, #16
 8007250:	431a      	orrs	r2, r3
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	061b      	lsls	r3, r3, #24
 8007256:	431a      	orrs	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	071b      	lsls	r3, r3, #28
 800725c:	4925      	ldr	r1, [pc, #148]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800725e:	4313      	orrs	r3, r2
 8007260:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d011      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	019a      	lsls	r2, r3, #6
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	041b      	lsls	r3, r3, #16
 800727c:	431a      	orrs	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	061b      	lsls	r3, r3, #24
 8007284:	431a      	orrs	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	071b      	lsls	r3, r3, #28
 800728c:	4919      	ldr	r1, [pc, #100]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800728e:	4313      	orrs	r3, r2
 8007290:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007294:	4b17      	ldr	r3, [pc, #92]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a16      	ldr	r2, [pc, #88]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800729a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800729e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072a0:	f7fb fa52 	bl	8002748 <HAL_GetTick>
 80072a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072a6:	e008      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80072a8:	f7fb fa4e 	bl	8002748 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b64      	cmp	r3, #100	; 0x64
 80072b4:	d901      	bls.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e0d7      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072ba:	4b0e      	ldr	r3, [pc, #56]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d0f0      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	f040 80cd 	bne.w	8007468 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80072ce:	4b09      	ldr	r3, [pc, #36]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a08      	ldr	r2, [pc, #32]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072da:	f7fb fa35 	bl	8002748 <HAL_GetTick>
 80072de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80072e0:	e00a      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80072e2:	f7fb fa31 	bl	8002748 <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	2b64      	cmp	r3, #100	; 0x64
 80072ee:	d903      	bls.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e0ba      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80072f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80072f8:	4b5e      	ldr	r3, [pc, #376]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007304:	d0ed      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d009      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007322:	2b00      	cmp	r3, #0
 8007324:	d02e      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	2b00      	cmp	r3, #0
 800732c:	d12a      	bne.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800732e:	4b51      	ldr	r3, [pc, #324]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007334:	0c1b      	lsrs	r3, r3, #16
 8007336:	f003 0303 	and.w	r3, r3, #3
 800733a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800733c:	4b4d      	ldr	r3, [pc, #308]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800733e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007342:	0f1b      	lsrs	r3, r3, #28
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	019a      	lsls	r2, r3, #6
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	041b      	lsls	r3, r3, #16
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	061b      	lsls	r3, r3, #24
 800735c:	431a      	orrs	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	071b      	lsls	r3, r3, #28
 8007362:	4944      	ldr	r1, [pc, #272]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007364:	4313      	orrs	r3, r2
 8007366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800736a:	4b42      	ldr	r3, [pc, #264]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800736c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007370:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007378:	3b01      	subs	r3, #1
 800737a:	021b      	lsls	r3, r3, #8
 800737c:	493d      	ldr	r1, [pc, #244]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800737e:	4313      	orrs	r3, r2
 8007380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d022      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007398:	d11d      	bne.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800739a:	4b36      	ldr	r3, [pc, #216]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800739c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a0:	0e1b      	lsrs	r3, r3, #24
 80073a2:	f003 030f 	and.w	r3, r3, #15
 80073a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80073a8:	4b32      	ldr	r3, [pc, #200]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ae:	0f1b      	lsrs	r3, r3, #28
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	019a      	lsls	r2, r3, #6
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	041b      	lsls	r3, r3, #16
 80073c2:	431a      	orrs	r2, r3
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	061b      	lsls	r3, r3, #24
 80073c8:	431a      	orrs	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	071b      	lsls	r3, r3, #28
 80073ce:	4929      	ldr	r1, [pc, #164]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0308 	and.w	r3, r3, #8
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d028      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80073e2:	4b24      	ldr	r3, [pc, #144]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e8:	0e1b      	lsrs	r3, r3, #24
 80073ea:	f003 030f 	and.w	r3, r3, #15
 80073ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80073f0:	4b20      	ldr	r3, [pc, #128]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f6:	0c1b      	lsrs	r3, r3, #16
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	019a      	lsls	r2, r3, #6
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	041b      	lsls	r3, r3, #16
 8007408:	431a      	orrs	r2, r3
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	061b      	lsls	r3, r3, #24
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	071b      	lsls	r3, r3, #28
 8007416:	4917      	ldr	r1, [pc, #92]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007418:	4313      	orrs	r3, r2
 800741a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800741e:	4b15      	ldr	r3, [pc, #84]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007424:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742c:	4911      	ldr	r1, [pc, #68]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800742e:	4313      	orrs	r3, r2
 8007430:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007434:	4b0f      	ldr	r3, [pc, #60]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a0e      	ldr	r2, [pc, #56]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800743a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800743e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007440:	f7fb f982 	bl	8002748 <HAL_GetTick>
 8007444:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007446:	e008      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007448:	f7fb f97e 	bl	8002748 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b64      	cmp	r3, #100	; 0x64
 8007454:	d901      	bls.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e007      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800745a:	4b06      	ldr	r3, [pc, #24]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007466:	d1ef      	bne.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3720      	adds	r7, #32
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	40023800 	.word	0x40023800

08007478 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e025      	b.n	80074d8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b00      	cmp	r3, #0
 8007496:	d106      	bne.n	80074a6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7f9 fb21 	bl	8000ae8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2202      	movs	r2, #2
 80074aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3304      	adds	r3, #4
 80074b6:	4619      	mov	r1, r3
 80074b8:	4610      	mov	r0, r2
 80074ba:	f000 fac1 	bl	8007a40 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6818      	ldr	r0, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	461a      	mov	r2, r3
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	f000 fb2b 	bl	8007b24 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d101      	bne.n	80074fc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80074f8:	2302      	movs	r3, #2
 80074fa:	e018      	b.n	800752e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	68b9      	ldr	r1, [r7, #8]
 800750c:	4618      	mov	r0, r3
 800750e:	f000 fb89 	bl	8007c24 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d104      	bne.n	8007524 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2205      	movs	r2, #5
 800751e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007522:	e003      	b.n	800752c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b082      	sub	sp, #8
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	d101      	bne.n	8007550 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800754c:	2302      	movs	r3, #2
 800754e:	e00e      	b.n	800756e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2202      	movs	r2, #2
 8007554:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	4618      	mov	r0, r3
 8007560:	f000 fb81 	bl	8007c66 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e01d      	b.n	80075c4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b00      	cmp	r3, #0
 8007592:	d106      	bne.n	80075a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f815 	bl	80075cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2202      	movs	r2, #2
 80075a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3304      	adds	r3, #4
 80075b2:	4619      	mov	r1, r3
 80075b4:	4610      	mov	r0, r2
 80075b6:	f000 f985 	bl	80078c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0201 	orr.w	r2, r2, #1
 80075f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	4b0c      	ldr	r3, [pc, #48]	; (8007630 <HAL_TIM_Base_Start_IT+0x50>)
 8007600:	4013      	ands	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b06      	cmp	r3, #6
 8007608:	d00b      	beq.n	8007622 <HAL_TIM_Base_Start_IT+0x42>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007610:	d007      	beq.n	8007622 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0201 	orr.w	r2, r2, #1
 8007620:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	00010007 	.word	0x00010007

08007634 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b02      	cmp	r3, #2
 8007648:	d122      	bne.n	8007690 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f003 0302 	and.w	r3, r3, #2
 8007654:	2b02      	cmp	r3, #2
 8007656:	d11b      	bne.n	8007690 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f06f 0202 	mvn.w	r2, #2
 8007660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	f003 0303 	and.w	r3, r3, #3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f905 	bl	8007886 <HAL_TIM_IC_CaptureCallback>
 800767c:	e005      	b.n	800768a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f8f7 	bl	8007872 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f908 	bl	800789a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f003 0304 	and.w	r3, r3, #4
 800769a:	2b04      	cmp	r3, #4
 800769c:	d122      	bne.n	80076e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f003 0304 	and.w	r3, r3, #4
 80076a8:	2b04      	cmp	r3, #4
 80076aa:	d11b      	bne.n	80076e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f06f 0204 	mvn.w	r2, #4
 80076b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2202      	movs	r2, #2
 80076ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f8db 	bl	8007886 <HAL_TIM_IC_CaptureCallback>
 80076d0:	e005      	b.n	80076de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f8cd 	bl	8007872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f8de 	bl	800789a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	f003 0308 	and.w	r3, r3, #8
 80076ee:	2b08      	cmp	r3, #8
 80076f0:	d122      	bne.n	8007738 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f003 0308 	and.w	r3, r3, #8
 80076fc:	2b08      	cmp	r3, #8
 80076fe:	d11b      	bne.n	8007738 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f06f 0208 	mvn.w	r2, #8
 8007708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2204      	movs	r2, #4
 800770e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	f003 0303 	and.w	r3, r3, #3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f8b1 	bl	8007886 <HAL_TIM_IC_CaptureCallback>
 8007724:	e005      	b.n	8007732 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f8a3 	bl	8007872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f8b4 	bl	800789a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	f003 0310 	and.w	r3, r3, #16
 8007742:	2b10      	cmp	r3, #16
 8007744:	d122      	bne.n	800778c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f003 0310 	and.w	r3, r3, #16
 8007750:	2b10      	cmp	r3, #16
 8007752:	d11b      	bne.n	800778c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f06f 0210 	mvn.w	r2, #16
 800775c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2208      	movs	r2, #8
 8007762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f887 	bl	8007886 <HAL_TIM_IC_CaptureCallback>
 8007778:	e005      	b.n	8007786 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f879 	bl	8007872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f88a 	bl	800789a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b01      	cmp	r3, #1
 8007798:	d10e      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d107      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f06f 0201 	mvn.w	r2, #1
 80077b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7f9 f816 	bl	80007e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c2:	2b80      	cmp	r3, #128	; 0x80
 80077c4:	d10e      	bne.n	80077e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d0:	2b80      	cmp	r3, #128	; 0x80
 80077d2:	d107      	bne.n	80077e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f91a 	bl	8007a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077f2:	d10e      	bne.n	8007812 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077fe:	2b80      	cmp	r3, #128	; 0x80
 8007800:	d107      	bne.n	8007812 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800780a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f90d 	bl	8007a2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781c:	2b40      	cmp	r3, #64	; 0x40
 800781e:	d10e      	bne.n	800783e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782a:	2b40      	cmp	r3, #64	; 0x40
 800782c:	d107      	bne.n	800783e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f838 	bl	80078ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	f003 0320 	and.w	r3, r3, #32
 8007848:	2b20      	cmp	r3, #32
 800784a:	d10e      	bne.n	800786a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f003 0320 	and.w	r3, r3, #32
 8007856:	2b20      	cmp	r3, #32
 8007858:	d107      	bne.n	800786a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f06f 0220 	mvn.w	r2, #32
 8007862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f8cd 	bl	8007a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800786a:	bf00      	nop
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007886:	b480      	push	{r7}
 8007888:	b083      	sub	sp, #12
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800788e:	bf00      	nop
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078a2:	bf00      	nop
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
	...

080078c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a40      	ldr	r2, [pc, #256]	; (80079d8 <TIM_Base_SetConfig+0x114>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d013      	beq.n	8007904 <TIM_Base_SetConfig+0x40>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e2:	d00f      	beq.n	8007904 <TIM_Base_SetConfig+0x40>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a3d      	ldr	r2, [pc, #244]	; (80079dc <TIM_Base_SetConfig+0x118>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d00b      	beq.n	8007904 <TIM_Base_SetConfig+0x40>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a3c      	ldr	r2, [pc, #240]	; (80079e0 <TIM_Base_SetConfig+0x11c>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d007      	beq.n	8007904 <TIM_Base_SetConfig+0x40>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a3b      	ldr	r2, [pc, #236]	; (80079e4 <TIM_Base_SetConfig+0x120>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d003      	beq.n	8007904 <TIM_Base_SetConfig+0x40>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a3a      	ldr	r2, [pc, #232]	; (80079e8 <TIM_Base_SetConfig+0x124>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d108      	bne.n	8007916 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	4313      	orrs	r3, r2
 8007914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a2f      	ldr	r2, [pc, #188]	; (80079d8 <TIM_Base_SetConfig+0x114>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d02b      	beq.n	8007976 <TIM_Base_SetConfig+0xb2>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007924:	d027      	beq.n	8007976 <TIM_Base_SetConfig+0xb2>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a2c      	ldr	r2, [pc, #176]	; (80079dc <TIM_Base_SetConfig+0x118>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d023      	beq.n	8007976 <TIM_Base_SetConfig+0xb2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a2b      	ldr	r2, [pc, #172]	; (80079e0 <TIM_Base_SetConfig+0x11c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d01f      	beq.n	8007976 <TIM_Base_SetConfig+0xb2>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a2a      	ldr	r2, [pc, #168]	; (80079e4 <TIM_Base_SetConfig+0x120>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d01b      	beq.n	8007976 <TIM_Base_SetConfig+0xb2>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a29      	ldr	r2, [pc, #164]	; (80079e8 <TIM_Base_SetConfig+0x124>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d017      	beq.n	8007976 <TIM_Base_SetConfig+0xb2>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a28      	ldr	r2, [pc, #160]	; (80079ec <TIM_Base_SetConfig+0x128>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d013      	beq.n	8007976 <TIM_Base_SetConfig+0xb2>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a27      	ldr	r2, [pc, #156]	; (80079f0 <TIM_Base_SetConfig+0x12c>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d00f      	beq.n	8007976 <TIM_Base_SetConfig+0xb2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a26      	ldr	r2, [pc, #152]	; (80079f4 <TIM_Base_SetConfig+0x130>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d00b      	beq.n	8007976 <TIM_Base_SetConfig+0xb2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a25      	ldr	r2, [pc, #148]	; (80079f8 <TIM_Base_SetConfig+0x134>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d007      	beq.n	8007976 <TIM_Base_SetConfig+0xb2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a24      	ldr	r2, [pc, #144]	; (80079fc <TIM_Base_SetConfig+0x138>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d003      	beq.n	8007976 <TIM_Base_SetConfig+0xb2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a23      	ldr	r2, [pc, #140]	; (8007a00 <TIM_Base_SetConfig+0x13c>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d108      	bne.n	8007988 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800797c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	4313      	orrs	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	4313      	orrs	r3, r2
 8007994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	689a      	ldr	r2, [r3, #8]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a0a      	ldr	r2, [pc, #40]	; (80079d8 <TIM_Base_SetConfig+0x114>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d003      	beq.n	80079bc <TIM_Base_SetConfig+0xf8>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a0c      	ldr	r2, [pc, #48]	; (80079e8 <TIM_Base_SetConfig+0x124>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d103      	bne.n	80079c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	691a      	ldr	r2, [r3, #16]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	615a      	str	r2, [r3, #20]
}
 80079ca:	bf00      	nop
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	40010000 	.word	0x40010000
 80079dc:	40000400 	.word	0x40000400
 80079e0:	40000800 	.word	0x40000800
 80079e4:	40000c00 	.word	0x40000c00
 80079e8:	40010400 	.word	0x40010400
 80079ec:	40014000 	.word	0x40014000
 80079f0:	40014400 	.word	0x40014400
 80079f4:	40014800 	.word	0x40014800
 80079f8:	40001800 	.word	0x40001800
 80079fc:	40001c00 	.word	0x40001c00
 8007a00:	40002000 	.word	0x40002000

08007a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d027      	beq.n	8007aaa <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	4b2f      	ldr	r3, [pc, #188]	; (8007b20 <FMC_SDRAM_Init+0xe0>)
 8007a64:	4013      	ands	r3, r2
 8007a66:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a70:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8007a76:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8007a7c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8007a82:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8007a88:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8007a8e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8007a94:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007a9a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	e032      	b.n	8007b10 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ab6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007ac0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007ac6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	4b12      	ldr	r3, [pc, #72]	; (8007b20 <FMC_SDRAM_Init+0xe0>)
 8007ad8:	4013      	ands	r3, r2
 8007ada:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ae4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8007aea:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007af0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8007af6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8007afc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	ffff8000 	.word	0xffff8000

08007b24 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b087      	sub	sp, #28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8007b30:	2300      	movs	r3, #0
 8007b32:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d02e      	beq.n	8007b9c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b4a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007b5a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	3b01      	subs	r3, #1
 8007b62:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007b64:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007b6e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	3b01      	subs	r3, #1
 8007b76:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007b78:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007b82:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	609a      	str	r2, [r3, #8]
 8007b9a:	e039      	b.n	8007c10 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	4b1e      	ldr	r3, [pc, #120]	; (8007c20 <FMC_SDRAM_Timing_Init+0xfc>)
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007bce:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007bde:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	3b01      	subs	r3, #1
 8007be6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007be8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007bf2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	371c      	adds	r7, #28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	ff0f0fff 	.word	0xff0f0fff

08007c24 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b087      	sub	sp, #28
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007c3c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	3b01      	subs	r3, #1
 8007c44:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007c46:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	695a      	ldr	r2, [r3, #20]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	4613      	mov	r3, r2
 8007c98:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USB_OTG_SPEED_FULL)
 8007c9a:	79fb      	ldrb	r3, [r7, #7]
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d165      	bne.n	8007d6c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	4a41      	ldr	r2, [pc, #260]	; (8007da8 <USB_SetTurnaroundTime+0x11c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d906      	bls.n	8007cb6 <USB_SetTurnaroundTime+0x2a>
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4a40      	ldr	r2, [pc, #256]	; (8007dac <USB_SetTurnaroundTime+0x120>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d802      	bhi.n	8007cb6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007cb0:	230f      	movs	r3, #15
 8007cb2:	617b      	str	r3, [r7, #20]
 8007cb4:	e062      	b.n	8007d7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	4a3c      	ldr	r2, [pc, #240]	; (8007dac <USB_SetTurnaroundTime+0x120>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d906      	bls.n	8007ccc <USB_SetTurnaroundTime+0x40>
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	4a3b      	ldr	r2, [pc, #236]	; (8007db0 <USB_SetTurnaroundTime+0x124>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d802      	bhi.n	8007ccc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007cc6:	230e      	movs	r3, #14
 8007cc8:	617b      	str	r3, [r7, #20]
 8007cca:	e057      	b.n	8007d7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	4a38      	ldr	r2, [pc, #224]	; (8007db0 <USB_SetTurnaroundTime+0x124>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d906      	bls.n	8007ce2 <USB_SetTurnaroundTime+0x56>
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	4a37      	ldr	r2, [pc, #220]	; (8007db4 <USB_SetTurnaroundTime+0x128>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d802      	bhi.n	8007ce2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007cdc:	230d      	movs	r3, #13
 8007cde:	617b      	str	r3, [r7, #20]
 8007ce0:	e04c      	b.n	8007d7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	4a33      	ldr	r2, [pc, #204]	; (8007db4 <USB_SetTurnaroundTime+0x128>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d906      	bls.n	8007cf8 <USB_SetTurnaroundTime+0x6c>
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	4a32      	ldr	r2, [pc, #200]	; (8007db8 <USB_SetTurnaroundTime+0x12c>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d802      	bhi.n	8007cf8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007cf2:	230c      	movs	r3, #12
 8007cf4:	617b      	str	r3, [r7, #20]
 8007cf6:	e041      	b.n	8007d7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	4a2f      	ldr	r2, [pc, #188]	; (8007db8 <USB_SetTurnaroundTime+0x12c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d906      	bls.n	8007d0e <USB_SetTurnaroundTime+0x82>
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	4a2e      	ldr	r2, [pc, #184]	; (8007dbc <USB_SetTurnaroundTime+0x130>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d802      	bhi.n	8007d0e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007d08:	230b      	movs	r3, #11
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	e036      	b.n	8007d7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	4a2a      	ldr	r2, [pc, #168]	; (8007dbc <USB_SetTurnaroundTime+0x130>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d906      	bls.n	8007d24 <USB_SetTurnaroundTime+0x98>
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	4a29      	ldr	r2, [pc, #164]	; (8007dc0 <USB_SetTurnaroundTime+0x134>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d802      	bhi.n	8007d24 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007d1e:	230a      	movs	r3, #10
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	e02b      	b.n	8007d7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	4a26      	ldr	r2, [pc, #152]	; (8007dc0 <USB_SetTurnaroundTime+0x134>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d906      	bls.n	8007d3a <USB_SetTurnaroundTime+0xae>
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4a25      	ldr	r2, [pc, #148]	; (8007dc4 <USB_SetTurnaroundTime+0x138>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d802      	bhi.n	8007d3a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007d34:	2309      	movs	r3, #9
 8007d36:	617b      	str	r3, [r7, #20]
 8007d38:	e020      	b.n	8007d7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	4a21      	ldr	r2, [pc, #132]	; (8007dc4 <USB_SetTurnaroundTime+0x138>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d906      	bls.n	8007d50 <USB_SetTurnaroundTime+0xc4>
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	4a20      	ldr	r2, [pc, #128]	; (8007dc8 <USB_SetTurnaroundTime+0x13c>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d802      	bhi.n	8007d50 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007d4a:	2308      	movs	r3, #8
 8007d4c:	617b      	str	r3, [r7, #20]
 8007d4e:	e015      	b.n	8007d7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	4a1d      	ldr	r2, [pc, #116]	; (8007dc8 <USB_SetTurnaroundTime+0x13c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d906      	bls.n	8007d66 <USB_SetTurnaroundTime+0xda>
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4a1c      	ldr	r2, [pc, #112]	; (8007dcc <USB_SetTurnaroundTime+0x140>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d802      	bhi.n	8007d66 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007d60:	2307      	movs	r3, #7
 8007d62:	617b      	str	r3, [r7, #20]
 8007d64:	e00a      	b.n	8007d7c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007d66:	2306      	movs	r3, #6
 8007d68:	617b      	str	r3, [r7, #20]
 8007d6a:	e007      	b.n	8007d7c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USB_OTG_SPEED_HIGH)
 8007d6c:	79fb      	ldrb	r3, [r7, #7]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d102      	bne.n	8007d78 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007d72:	2309      	movs	r3, #9
 8007d74:	617b      	str	r3, [r7, #20]
 8007d76:	e001      	b.n	8007d7c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007d78:	2309      	movs	r3, #9
 8007d7a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	68da      	ldr	r2, [r3, #12]
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	029b      	lsls	r3, r3, #10
 8007d90:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007d94:	431a      	orrs	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	371c      	adds	r7, #28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr
 8007da8:	00d8acbf 	.word	0x00d8acbf
 8007dac:	00e4e1bf 	.word	0x00e4e1bf
 8007db0:	00f423ff 	.word	0x00f423ff
 8007db4:	0106737f 	.word	0x0106737f
 8007db8:	011a499f 	.word	0x011a499f
 8007dbc:	01312cff 	.word	0x01312cff
 8007dc0:	014ca43f 	.word	0x014ca43f
 8007dc4:	016e35ff 	.word	0x016e35ff
 8007dc8:	01a6ab1f 	.word	0x01a6ab1f
 8007dcc:	01e847ff 	.word	0x01e847ff

08007dd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	019b      	lsls	r3, r3, #6
 8007de2:	f043 0220 	orr.w	r2, r3, #32
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3301      	adds	r3, #1
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4a09      	ldr	r2, [pc, #36]	; (8007e18 <USB_FlushTxFifo+0x48>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d901      	bls.n	8007dfc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e006      	b.n	8007e0a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	f003 0320 	and.w	r3, r3, #32
 8007e04:	2b20      	cmp	r3, #32
 8007e06:	d0f0      	beq.n	8007dea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	00030d40 	.word	0x00030d40

08007e1c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f003 0306 	and.w	r3, r3, #6
 8007e34:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d102      	bne.n	8007e42 <USB_GetDevSpeed+0x26>
  {
    speed = USB_OTG_SPEED_HIGH;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	75fb      	strb	r3, [r7, #23]
 8007e40:	e00a      	b.n	8007e58 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d002      	beq.n	8007e4e <USB_GetDevSpeed+0x32>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2b06      	cmp	r3, #6
 8007e4c:	d102      	bne.n	8007e54 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	75fb      	strb	r3, [r7, #23]
 8007e52:	e001      	b.n	8007e58 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0U;
 8007e54:	2300      	movs	r3, #0
 8007e56:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	371c      	adds	r7, #28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b089      	sub	sp, #36	; 0x24
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	60f8      	str	r0, [r7, #12]
 8007e6e:	60b9      	str	r1, [r7, #8]
 8007e70:	4611      	mov	r1, r2
 8007e72:	461a      	mov	r2, r3
 8007e74:	460b      	mov	r3, r1
 8007e76:	71fb      	strb	r3, [r7, #7]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007e84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d11a      	bne.n	8007ec2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e8c:	88bb      	ldrh	r3, [r7, #4]
 8007e8e:	3303      	adds	r3, #3
 8007e90:	089b      	lsrs	r3, r3, #2
 8007e92:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e94:	2300      	movs	r3, #0
 8007e96:	61bb      	str	r3, [r7, #24]
 8007e98:	e00f      	b.n	8007eba <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8007e9a:	79fb      	ldrb	r3, [r7, #7]
 8007e9c:	031a      	lsls	r2, r3, #12
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	3304      	adds	r3, #4
 8007eb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	61bb      	str	r3, [r7, #24]
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d3eb      	bcc.n	8007e9a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3724      	adds	r7, #36	; 0x24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b089      	sub	sp, #36	; 0x24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	4613      	mov	r3, r2
 8007edc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007ee6:	88fb      	ldrh	r3, [r7, #6]
 8007ee8:	3303      	adds	r3, #3
 8007eea:	089b      	lsrs	r3, r3, #2
 8007eec:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007eee:	2300      	movs	r3, #0
 8007ef0:	61bb      	str	r3, [r7, #24]
 8007ef2:	e00b      	b.n	8007f0c <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	3304      	adds	r3, #4
 8007f04:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	61bb      	str	r3, [r7, #24]
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d3ef      	bcc.n	8007ef4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007f14:	69fb      	ldr	r3, [r7, #28]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3724      	adds	r7, #36	; 0x24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b085      	sub	sp, #20
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4013      	ands	r3, r2
 8007f38:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	68ba      	ldr	r2, [r7, #8]
 8007f68:	4013      	ands	r3, r2
 8007f6a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	0c1b      	lsrs	r3, r3, #16
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	b29b      	uxth	r3, r3
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007fde:	68bb      	ldr	r3, [r7, #8]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	f003 030f 	and.w	r3, r3, #15
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	fa22 f303 	lsr.w	r3, r2, r3
 800801c:	01db      	lsls	r3, r3, #7
 800801e:	b2db      	uxtb	r3, r3
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	4313      	orrs	r3, r2
 8008024:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008026:	78fb      	ldrb	r3, [r7, #3]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	4413      	add	r3, r2
 800802e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	4013      	ands	r3, r2
 8008038:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800803a:	68bb      	ldr	r3, [r7, #8]
}
 800803c:	4618      	mov	r0, r3
 800803e:	371c      	adds	r7, #28
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	f003 0301 	and.w	r3, r3, #1
}
 8008058:	4618      	mov	r0, r3
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807e:	4619      	mov	r1, r3
 8008080:	4b12      	ldr	r3, [pc, #72]	; (80080cc <USB_ActivateSetup+0x68>)
 8008082:	4013      	ands	r3, r2
 8008084:	600b      	str	r3, [r1, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f003 0306 	and.w	r3, r3, #6
 8008092:	2b04      	cmp	r3, #4
 8008094:	d109      	bne.n	80080aa <USB_ActivateSetup+0x46>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080a4:	f043 0303 	orr.w	r3, r3, #3
 80080a8:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3714      	adds	r7, #20
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	fffff800 	.word	0xfffff800

080080d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	460b      	mov	r3, r1
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	333c      	adds	r3, #60	; 0x3c
 80080e6:	3304      	adds	r3, #4
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	4a26      	ldr	r2, [pc, #152]	; (8008188 <USB_EP0_OutStart+0xb8>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d90a      	bls.n	800810a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008100:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008104:	d101      	bne.n	800810a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008106:	2300      	movs	r3, #0
 8008108:	e037      	b.n	800817a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008110:	461a      	mov	r2, r3
 8008112:	2300      	movs	r3, #0
 8008114:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008124:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008128:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008138:	f043 0318 	orr.w	r3, r3, #24
 800813c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800814c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008150:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008152:	7afb      	ldrb	r3, [r7, #11]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d10f      	bne.n	8008178 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815e:	461a      	mov	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008172:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008176:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	371c      	adds	r7, #28
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	4f54300a 	.word	0x4f54300a

0800818c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008192:	f3ef 8305 	mrs	r3, IPSR
 8008196:	60bb      	str	r3, [r7, #8]
  return(result);
 8008198:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10f      	bne.n	80081be <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800819e:	f3ef 8310 	mrs	r3, PRIMASK
 80081a2:	607b      	str	r3, [r7, #4]
  return(result);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d109      	bne.n	80081be <osKernelInitialize+0x32>
 80081aa:	4b11      	ldr	r3, [pc, #68]	; (80081f0 <osKernelInitialize+0x64>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d109      	bne.n	80081c6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80081b2:	f3ef 8311 	mrs	r3, BASEPRI
 80081b6:	603b      	str	r3, [r7, #0]
  return(result);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80081be:	f06f 0305 	mvn.w	r3, #5
 80081c2:	60fb      	str	r3, [r7, #12]
 80081c4:	e00c      	b.n	80081e0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081c6:	4b0a      	ldr	r3, [pc, #40]	; (80081f0 <osKernelInitialize+0x64>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d105      	bne.n	80081da <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80081ce:	4b08      	ldr	r3, [pc, #32]	; (80081f0 <osKernelInitialize+0x64>)
 80081d0:	2201      	movs	r2, #1
 80081d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	e002      	b.n	80081e0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80081da:	f04f 33ff 	mov.w	r3, #4294967295
 80081de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80081e0:	68fb      	ldr	r3, [r7, #12]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	20000264 	.word	0x20000264

080081f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081fa:	f3ef 8305 	mrs	r3, IPSR
 80081fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8008200:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10f      	bne.n	8008226 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008206:	f3ef 8310 	mrs	r3, PRIMASK
 800820a:	607b      	str	r3, [r7, #4]
  return(result);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d109      	bne.n	8008226 <osKernelStart+0x32>
 8008212:	4b11      	ldr	r3, [pc, #68]	; (8008258 <osKernelStart+0x64>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b02      	cmp	r3, #2
 8008218:	d109      	bne.n	800822e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800821a:	f3ef 8311 	mrs	r3, BASEPRI
 800821e:	603b      	str	r3, [r7, #0]
  return(result);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <osKernelStart+0x3a>
    stat = osErrorISR;
 8008226:	f06f 0305 	mvn.w	r3, #5
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	e00e      	b.n	800824c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800822e:	4b0a      	ldr	r3, [pc, #40]	; (8008258 <osKernelStart+0x64>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d107      	bne.n	8008246 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8008236:	4b08      	ldr	r3, [pc, #32]	; (8008258 <osKernelStart+0x64>)
 8008238:	2202      	movs	r2, #2
 800823a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800823c:	f001 f89a 	bl	8009374 <vTaskStartScheduler>
      stat = osOK;
 8008240:	2300      	movs	r3, #0
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	e002      	b.n	800824c <osKernelStart+0x58>
    } else {
      stat = osError;
 8008246:	f04f 33ff 	mov.w	r3, #4294967295
 800824a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800824c:	68fb      	ldr	r3, [r7, #12]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20000264 	.word	0x20000264

0800825c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800825c:	b580      	push	{r7, lr}
 800825e:	b092      	sub	sp, #72	; 0x48
 8008260:	af04      	add	r7, sp, #16
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800826c:	f3ef 8305 	mrs	r3, IPSR
 8008270:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008274:	2b00      	cmp	r3, #0
 8008276:	f040 8094 	bne.w	80083a2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800827a:	f3ef 8310 	mrs	r3, PRIMASK
 800827e:	623b      	str	r3, [r7, #32]
  return(result);
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f040 808d 	bne.w	80083a2 <osThreadNew+0x146>
 8008288:	4b48      	ldr	r3, [pc, #288]	; (80083ac <osThreadNew+0x150>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b02      	cmp	r3, #2
 800828e:	d106      	bne.n	800829e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008290:	f3ef 8311 	mrs	r3, BASEPRI
 8008294:	61fb      	str	r3, [r7, #28]
  return(result);
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	2b00      	cmp	r3, #0
 800829a:	f040 8082 	bne.w	80083a2 <osThreadNew+0x146>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d07e      	beq.n	80083a2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80082a4:	2380      	movs	r3, #128	; 0x80
 80082a6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80082a8:	2318      	movs	r3, #24
 80082aa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80082ac:	2300      	movs	r3, #0
 80082ae:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80082b0:	f107 031b 	add.w	r3, r7, #27
 80082b4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80082b6:	f04f 33ff 	mov.w	r3, #4294967295
 80082ba:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d045      	beq.n	800834e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d002      	beq.n	80082d0 <osThreadNew+0x74>
        name = attr->name;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d008      	beq.n	80082f6 <osThreadNew+0x9a>
 80082e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e6:	2b38      	cmp	r3, #56	; 0x38
 80082e8:	d805      	bhi.n	80082f6 <osThreadNew+0x9a>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <osThreadNew+0x9e>
        return (NULL);
 80082f6:	2300      	movs	r3, #0
 80082f8:	e054      	b.n	80083a4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	089b      	lsrs	r3, r3, #2
 8008308:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00e      	beq.n	8008330 <osThreadNew+0xd4>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	2b5f      	cmp	r3, #95	; 0x5f
 8008318:	d90a      	bls.n	8008330 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800831e:	2b00      	cmp	r3, #0
 8008320:	d006      	beq.n	8008330 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d002      	beq.n	8008330 <osThreadNew+0xd4>
        mem = 1;
 800832a:	2301      	movs	r3, #1
 800832c:	62bb      	str	r3, [r7, #40]	; 0x28
 800832e:	e010      	b.n	8008352 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10c      	bne.n	8008352 <osThreadNew+0xf6>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d108      	bne.n	8008352 <osThreadNew+0xf6>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d104      	bne.n	8008352 <osThreadNew+0xf6>
          mem = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	62bb      	str	r3, [r7, #40]	; 0x28
 800834c:	e001      	b.n	8008352 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800834e:	2300      	movs	r3, #0
 8008350:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008354:	2b01      	cmp	r3, #1
 8008356:	d110      	bne.n	800837a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008360:	9202      	str	r2, [sp, #8]
 8008362:	9301      	str	r3, [sp, #4]
 8008364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800836c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f000 fe2a 	bl	8008fc8 <xTaskCreateStatic>
 8008374:	4603      	mov	r3, r0
 8008376:	617b      	str	r3, [r7, #20]
 8008378:	e013      	b.n	80083a2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	2b00      	cmp	r3, #0
 800837e:	d110      	bne.n	80083a2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008382:	b29a      	uxth	r2, r3
 8008384:	f107 0314 	add.w	r3, r7, #20
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f000 fe77 	bl	8009086 <xTaskCreate>
 8008398:	4603      	mov	r3, r0
 800839a:	2b01      	cmp	r3, #1
 800839c:	d001      	beq.n	80083a2 <osThreadNew+0x146>
          hTask = NULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80083a2:	697b      	ldr	r3, [r7, #20]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3738      	adds	r7, #56	; 0x38
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	20000264 	.word	0x20000264

080083b0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083b8:	f3ef 8305 	mrs	r3, IPSR
 80083bc:	613b      	str	r3, [r7, #16]
  return(result);
 80083be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10f      	bne.n	80083e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083c4:	f3ef 8310 	mrs	r3, PRIMASK
 80083c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d109      	bne.n	80083e4 <osDelay+0x34>
 80083d0:	4b0d      	ldr	r3, [pc, #52]	; (8008408 <osDelay+0x58>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d109      	bne.n	80083ec <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083d8:	f3ef 8311 	mrs	r3, BASEPRI
 80083dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d003      	beq.n	80083ec <osDelay+0x3c>
    stat = osErrorISR;
 80083e4:	f06f 0305 	mvn.w	r3, #5
 80083e8:	617b      	str	r3, [r7, #20]
 80083ea:	e007      	b.n	80083fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80083ec:	2300      	movs	r3, #0
 80083ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <osDelay+0x4c>
      vTaskDelay(ticks);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 ff86 	bl	8009308 <vTaskDelay>
    }
  }

  return (stat);
 80083fc:	697b      	ldr	r3, [r7, #20]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000264 	.word	0x20000264

0800840c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4a07      	ldr	r2, [pc, #28]	; (8008438 <vApplicationGetIdleTaskMemory+0x2c>)
 800841c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	4a06      	ldr	r2, [pc, #24]	; (800843c <vApplicationGetIdleTaskMemory+0x30>)
 8008422:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2280      	movs	r2, #128	; 0x80
 8008428:	601a      	str	r2, [r3, #0]
}
 800842a:	bf00      	nop
 800842c:	3714      	adds	r7, #20
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	20000268 	.word	0x20000268
 800843c:	200002c8 	.word	0x200002c8

08008440 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	4a07      	ldr	r2, [pc, #28]	; (800846c <vApplicationGetTimerTaskMemory+0x2c>)
 8008450:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	4a06      	ldr	r2, [pc, #24]	; (8008470 <vApplicationGetTimerTaskMemory+0x30>)
 8008456:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800845e:	601a      	str	r2, [r3, #0]
}
 8008460:	bf00      	nop
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	200004c8 	.word	0x200004c8
 8008470:	20000528 	.word	0x20000528

08008474 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f103 0208 	add.w	r2, r3, #8
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f04f 32ff 	mov.w	r2, #4294967295
 800848c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f103 0208 	add.w	r2, r3, #8
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f103 0208 	add.w	r2, r3, #8
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80084c2:	bf00      	nop
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084ce:	b480      	push	{r7}
 80084d0:	b085      	sub	sp, #20
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	683a      	ldr	r2, [r7, #0]
 80084f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	1c5a      	adds	r2, r3, #1
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	601a      	str	r2, [r3, #0]
}
 800850a:	bf00      	nop
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008516:	b480      	push	{r7}
 8008518:	b085      	sub	sp, #20
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852c:	d103      	bne.n	8008536 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	60fb      	str	r3, [r7, #12]
 8008534:	e00c      	b.n	8008550 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	3308      	adds	r3, #8
 800853a:	60fb      	str	r3, [r7, #12]
 800853c:	e002      	b.n	8008544 <vListInsert+0x2e>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	429a      	cmp	r2, r3
 800854e:	d2f6      	bcs.n	800853e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	1c5a      	adds	r2, r3, #1
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	601a      	str	r2, [r3, #0]
}
 800857c:	bf00      	nop
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	6892      	ldr	r2, [r2, #8]
 800859e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	6852      	ldr	r2, [r2, #4]
 80085a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d103      	bne.n	80085bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	689a      	ldr	r2, [r3, #8]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	1e5a      	subs	r2, r3, #1
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10b      	bne.n	8008608 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	b672      	cpsid	i
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	b662      	cpsie	i
 8008604:	60bb      	str	r3, [r7, #8]
 8008606:	e7fe      	b.n	8008606 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8008608:	f002 f836 	bl	800a678 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008614:	68f9      	ldr	r1, [r7, #12]
 8008616:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008618:	fb01 f303 	mul.w	r3, r1, r3
 800861c:	441a      	add	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008638:	3b01      	subs	r3, #1
 800863a:	68f9      	ldr	r1, [r7, #12]
 800863c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800863e:	fb01 f303 	mul.w	r3, r1, r3
 8008642:	441a      	add	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	22ff      	movs	r2, #255	; 0xff
 800864c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	22ff      	movs	r2, #255	; 0xff
 8008654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d114      	bne.n	8008688 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d01a      	beq.n	800869c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3310      	adds	r3, #16
 800866a:	4618      	mov	r0, r3
 800866c:	f001 f93c 	bl	80098e8 <xTaskRemoveFromEventList>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d012      	beq.n	800869c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008676:	4b0d      	ldr	r3, [pc, #52]	; (80086ac <xQueueGenericReset+0xd0>)
 8008678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	e009      	b.n	800869c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	3310      	adds	r3, #16
 800868c:	4618      	mov	r0, r3
 800868e:	f7ff fef1 	bl	8008474 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3324      	adds	r3, #36	; 0x24
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff feec 	bl	8008474 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800869c:	f002 f81e 	bl	800a6dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80086a0:	2301      	movs	r3, #1
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	e000ed04 	.word	0xe000ed04

080086b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08e      	sub	sp, #56	; 0x38
 80086b4:	af02      	add	r7, sp, #8
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
 80086bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10b      	bne.n	80086dc <xQueueGenericCreateStatic+0x2c>
 80086c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c8:	b672      	cpsid	i
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	b662      	cpsie	i
 80086d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80086da:	e7fe      	b.n	80086da <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10b      	bne.n	80086fa <xQueueGenericCreateStatic+0x4a>
 80086e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e6:	b672      	cpsid	i
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	b662      	cpsie	i
 80086f6:	627b      	str	r3, [r7, #36]	; 0x24
 80086f8:	e7fe      	b.n	80086f8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <xQueueGenericCreateStatic+0x56>
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <xQueueGenericCreateStatic+0x5a>
 8008706:	2301      	movs	r3, #1
 8008708:	e000      	b.n	800870c <xQueueGenericCreateStatic+0x5c>
 800870a:	2300      	movs	r3, #0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10b      	bne.n	8008728 <xQueueGenericCreateStatic+0x78>
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	b672      	cpsid	i
 8008716:	f383 8811 	msr	BASEPRI, r3
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	b662      	cpsie	i
 8008724:	623b      	str	r3, [r7, #32]
 8008726:	e7fe      	b.n	8008726 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d102      	bne.n	8008734 <xQueueGenericCreateStatic+0x84>
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d101      	bne.n	8008738 <xQueueGenericCreateStatic+0x88>
 8008734:	2301      	movs	r3, #1
 8008736:	e000      	b.n	800873a <xQueueGenericCreateStatic+0x8a>
 8008738:	2300      	movs	r3, #0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10b      	bne.n	8008756 <xQueueGenericCreateStatic+0xa6>
 800873e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008742:	b672      	cpsid	i
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	b662      	cpsie	i
 8008752:	61fb      	str	r3, [r7, #28]
 8008754:	e7fe      	b.n	8008754 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008756:	2350      	movs	r3, #80	; 0x50
 8008758:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	2b50      	cmp	r3, #80	; 0x50
 800875e:	d00b      	beq.n	8008778 <xQueueGenericCreateStatic+0xc8>
 8008760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008764:	b672      	cpsid	i
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	b662      	cpsie	i
 8008774:	61bb      	str	r3, [r7, #24]
 8008776:	e7fe      	b.n	8008776 <xQueueGenericCreateStatic+0xc6>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800877c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00d      	beq.n	800879e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008784:	2201      	movs	r2, #1
 8008786:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800878a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800878e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	4613      	mov	r3, r2
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	68b9      	ldr	r1, [r7, #8]
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f000 f805 	bl	80087a8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800879e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3730      	adds	r7, #48	; 0x30
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
 80087b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d103      	bne.n	80087c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	e002      	b.n	80087ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087d6:	2101      	movs	r1, #1
 80087d8:	69b8      	ldr	r0, [r7, #24]
 80087da:	f7ff feff 	bl	80085dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	78fa      	ldrb	r2, [r7, #3]
 80087e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087e6:	bf00      	nop
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08e      	sub	sp, #56	; 0x38
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
 80087fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80087fe:	2300      	movs	r3, #0
 8008800:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10b      	bne.n	8008824 <xQueueGenericSend+0x34>
 800880c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008810:	b672      	cpsid	i
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	b662      	cpsie	i
 8008820:	62bb      	str	r3, [r7, #40]	; 0x28
 8008822:	e7fe      	b.n	8008822 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d103      	bne.n	8008832 <xQueueGenericSend+0x42>
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <xQueueGenericSend+0x46>
 8008832:	2301      	movs	r3, #1
 8008834:	e000      	b.n	8008838 <xQueueGenericSend+0x48>
 8008836:	2300      	movs	r3, #0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10b      	bne.n	8008854 <xQueueGenericSend+0x64>
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	b672      	cpsid	i
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	b662      	cpsie	i
 8008850:	627b      	str	r3, [r7, #36]	; 0x24
 8008852:	e7fe      	b.n	8008852 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2b02      	cmp	r3, #2
 8008858:	d103      	bne.n	8008862 <xQueueGenericSend+0x72>
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885e:	2b01      	cmp	r3, #1
 8008860:	d101      	bne.n	8008866 <xQueueGenericSend+0x76>
 8008862:	2301      	movs	r3, #1
 8008864:	e000      	b.n	8008868 <xQueueGenericSend+0x78>
 8008866:	2300      	movs	r3, #0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10b      	bne.n	8008884 <xQueueGenericSend+0x94>
 800886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008870:	b672      	cpsid	i
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	b662      	cpsie	i
 8008880:	623b      	str	r3, [r7, #32]
 8008882:	e7fe      	b.n	8008882 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008884:	f001 f9f6 	bl	8009c74 <xTaskGetSchedulerState>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d102      	bne.n	8008894 <xQueueGenericSend+0xa4>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d101      	bne.n	8008898 <xQueueGenericSend+0xa8>
 8008894:	2301      	movs	r3, #1
 8008896:	e000      	b.n	800889a <xQueueGenericSend+0xaa>
 8008898:	2300      	movs	r3, #0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10b      	bne.n	80088b6 <xQueueGenericSend+0xc6>
 800889e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a2:	b672      	cpsid	i
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	b662      	cpsie	i
 80088b2:	61fb      	str	r3, [r7, #28]
 80088b4:	e7fe      	b.n	80088b4 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088b6:	f001 fedf 	bl	800a678 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d302      	bcc.n	80088cc <xQueueGenericSend+0xdc>
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d129      	bne.n	8008920 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	68b9      	ldr	r1, [r7, #8]
 80088d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088d2:	f000 fa0d 	bl	8008cf0 <prvCopyDataToQueue>
 80088d6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d010      	beq.n	8008902 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	3324      	adds	r3, #36	; 0x24
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 ffff 	bl	80098e8 <xTaskRemoveFromEventList>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d013      	beq.n	8008918 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088f0:	4b3f      	ldr	r3, [pc, #252]	; (80089f0 <xQueueGenericSend+0x200>)
 80088f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088f6:	601a      	str	r2, [r3, #0]
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	e00a      	b.n	8008918 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008904:	2b00      	cmp	r3, #0
 8008906:	d007      	beq.n	8008918 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008908:	4b39      	ldr	r3, [pc, #228]	; (80089f0 <xQueueGenericSend+0x200>)
 800890a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008918:	f001 fee0 	bl	800a6dc <vPortExitCritical>
				return pdPASS;
 800891c:	2301      	movs	r3, #1
 800891e:	e063      	b.n	80089e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d103      	bne.n	800892e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008926:	f001 fed9 	bl	800a6dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800892a:	2300      	movs	r3, #0
 800892c:	e05c      	b.n	80089e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800892e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008930:	2b00      	cmp	r3, #0
 8008932:	d106      	bne.n	8008942 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008934:	f107 0314 	add.w	r3, r7, #20
 8008938:	4618      	mov	r0, r3
 800893a:	f001 f839 	bl	80099b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800893e:	2301      	movs	r3, #1
 8008940:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008942:	f001 fecb 	bl	800a6dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008946:	f000 fd7d 	bl	8009444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800894a:	f001 fe95 	bl	800a678 <vPortEnterCritical>
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008954:	b25b      	sxtb	r3, r3
 8008956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895a:	d103      	bne.n	8008964 <xQueueGenericSend+0x174>
 800895c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895e:	2200      	movs	r2, #0
 8008960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008966:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800896a:	b25b      	sxtb	r3, r3
 800896c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008970:	d103      	bne.n	800897a <xQueueGenericSend+0x18a>
 8008972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008974:	2200      	movs	r2, #0
 8008976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800897a:	f001 feaf 	bl	800a6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800897e:	1d3a      	adds	r2, r7, #4
 8008980:	f107 0314 	add.w	r3, r7, #20
 8008984:	4611      	mov	r1, r2
 8008986:	4618      	mov	r0, r3
 8008988:	f001 f828 	bl	80099dc <xTaskCheckForTimeOut>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d124      	bne.n	80089dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008992:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008994:	f000 faa4 	bl	8008ee0 <prvIsQueueFull>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d018      	beq.n	80089d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800899e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a0:	3310      	adds	r3, #16
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	4611      	mov	r1, r2
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 ff4c 	bl	8009844 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80089ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089ae:	f000 fa2f 	bl	8008e10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80089b2:	f000 fd55 	bl	8009460 <xTaskResumeAll>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f47f af7c 	bne.w	80088b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80089be:	4b0c      	ldr	r3, [pc, #48]	; (80089f0 <xQueueGenericSend+0x200>)
 80089c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c4:	601a      	str	r2, [r3, #0]
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	e772      	b.n	80088b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089d2:	f000 fa1d 	bl	8008e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089d6:	f000 fd43 	bl	8009460 <xTaskResumeAll>
 80089da:	e76c      	b.n	80088b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80089dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089de:	f000 fa17 	bl	8008e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089e2:	f000 fd3d 	bl	8009460 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80089e6:	2300      	movs	r3, #0
		}
	}
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3738      	adds	r7, #56	; 0x38
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	e000ed04 	.word	0xe000ed04

080089f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b08e      	sub	sp, #56	; 0x38
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
 8008a00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10b      	bne.n	8008a24 <xQueueGenericSendFromISR+0x30>
 8008a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a10:	b672      	cpsid	i
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	b662      	cpsie	i
 8008a20:	627b      	str	r3, [r7, #36]	; 0x24
 8008a22:	e7fe      	b.n	8008a22 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d103      	bne.n	8008a32 <xQueueGenericSendFromISR+0x3e>
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <xQueueGenericSendFromISR+0x42>
 8008a32:	2301      	movs	r3, #1
 8008a34:	e000      	b.n	8008a38 <xQueueGenericSendFromISR+0x44>
 8008a36:	2300      	movs	r3, #0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10b      	bne.n	8008a54 <xQueueGenericSendFromISR+0x60>
 8008a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a40:	b672      	cpsid	i
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	b662      	cpsie	i
 8008a50:	623b      	str	r3, [r7, #32]
 8008a52:	e7fe      	b.n	8008a52 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d103      	bne.n	8008a62 <xQueueGenericSendFromISR+0x6e>
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d101      	bne.n	8008a66 <xQueueGenericSendFromISR+0x72>
 8008a62:	2301      	movs	r3, #1
 8008a64:	e000      	b.n	8008a68 <xQueueGenericSendFromISR+0x74>
 8008a66:	2300      	movs	r3, #0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10b      	bne.n	8008a84 <xQueueGenericSendFromISR+0x90>
 8008a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a70:	b672      	cpsid	i
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	b662      	cpsie	i
 8008a80:	61fb      	str	r3, [r7, #28]
 8008a82:	e7fe      	b.n	8008a82 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a84:	f001 fed8 	bl	800a838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a88:	f3ef 8211 	mrs	r2, BASEPRI
 8008a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a90:	b672      	cpsid	i
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	b662      	cpsie	i
 8008aa0:	61ba      	str	r2, [r7, #24]
 8008aa2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008aa4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d302      	bcc.n	8008aba <xQueueGenericSendFromISR+0xc6>
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d12c      	bne.n	8008b14 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	68b9      	ldr	r1, [r7, #8]
 8008ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aca:	f000 f911 	bl	8008cf0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ace:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad6:	d112      	bne.n	8008afe <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d016      	beq.n	8008b0e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae2:	3324      	adds	r3, #36	; 0x24
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f000 feff 	bl	80098e8 <xTaskRemoveFromEventList>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00e      	beq.n	8008b0e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00b      	beq.n	8008b0e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	601a      	str	r2, [r3, #0]
 8008afc:	e007      	b.n	8008b0e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008afe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b02:	3301      	adds	r3, #1
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	b25a      	sxtb	r2, r3
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008b12:	e001      	b.n	8008b18 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b14:	2300      	movs	r3, #0
 8008b16:	637b      	str	r3, [r7, #52]	; 0x34
 8008b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3738      	adds	r7, #56	; 0x38
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b08c      	sub	sp, #48	; 0x30
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10b      	bne.n	8008b5e <xQueueReceive+0x32>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4a:	b672      	cpsid	i
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	b662      	cpsie	i
 8008b5a:	623b      	str	r3, [r7, #32]
 8008b5c:	e7fe      	b.n	8008b5c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d103      	bne.n	8008b6c <xQueueReceive+0x40>
 8008b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d101      	bne.n	8008b70 <xQueueReceive+0x44>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e000      	b.n	8008b72 <xQueueReceive+0x46>
 8008b70:	2300      	movs	r3, #0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10b      	bne.n	8008b8e <xQueueReceive+0x62>
 8008b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7a:	b672      	cpsid	i
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	b662      	cpsie	i
 8008b8a:	61fb      	str	r3, [r7, #28]
 8008b8c:	e7fe      	b.n	8008b8c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b8e:	f001 f871 	bl	8009c74 <xTaskGetSchedulerState>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d102      	bne.n	8008b9e <xQueueReceive+0x72>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <xQueueReceive+0x76>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e000      	b.n	8008ba4 <xQueueReceive+0x78>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10b      	bne.n	8008bc0 <xQueueReceive+0x94>
 8008ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bac:	b672      	cpsid	i
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	b662      	cpsie	i
 8008bbc:	61bb      	str	r3, [r7, #24]
 8008bbe:	e7fe      	b.n	8008bbe <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bc0:	f001 fd5a 	bl	800a678 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d01f      	beq.n	8008c10 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008bd0:	68b9      	ldr	r1, [r7, #8]
 8008bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bd4:	f000 f8f6 	bl	8008dc4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	1e5a      	subs	r2, r3, #1
 8008bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bde:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00f      	beq.n	8008c08 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bea:	3310      	adds	r3, #16
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 fe7b 	bl	80098e8 <xTaskRemoveFromEventList>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d007      	beq.n	8008c08 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008bf8:	4b3c      	ldr	r3, [pc, #240]	; (8008cec <xQueueReceive+0x1c0>)
 8008bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bfe:	601a      	str	r2, [r3, #0]
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c08:	f001 fd68 	bl	800a6dc <vPortExitCritical>
				return pdPASS;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e069      	b.n	8008ce4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d103      	bne.n	8008c1e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c16:	f001 fd61 	bl	800a6dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	e062      	b.n	8008ce4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d106      	bne.n	8008c32 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c24:	f107 0310 	add.w	r3, r7, #16
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 fec1 	bl	80099b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c32:	f001 fd53 	bl	800a6dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c36:	f000 fc05 	bl	8009444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c3a:	f001 fd1d 	bl	800a678 <vPortEnterCritical>
 8008c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c44:	b25b      	sxtb	r3, r3
 8008c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4a:	d103      	bne.n	8008c54 <xQueueReceive+0x128>
 8008c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c5a:	b25b      	sxtb	r3, r3
 8008c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c60:	d103      	bne.n	8008c6a <xQueueReceive+0x13e>
 8008c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c6a:	f001 fd37 	bl	800a6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c6e:	1d3a      	adds	r2, r7, #4
 8008c70:	f107 0310 	add.w	r3, r7, #16
 8008c74:	4611      	mov	r1, r2
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 feb0 	bl	80099dc <xTaskCheckForTimeOut>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d123      	bne.n	8008cca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c84:	f000 f916 	bl	8008eb4 <prvIsQueueEmpty>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d017      	beq.n	8008cbe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c90:	3324      	adds	r3, #36	; 0x24
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	4611      	mov	r1, r2
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 fdd4 	bl	8009844 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c9e:	f000 f8b7 	bl	8008e10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ca2:	f000 fbdd 	bl	8009460 <xTaskResumeAll>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d189      	bne.n	8008bc0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008cac:	4b0f      	ldr	r3, [pc, #60]	; (8008cec <xQueueReceive+0x1c0>)
 8008cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	e780      	b.n	8008bc0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cc0:	f000 f8a6 	bl	8008e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cc4:	f000 fbcc 	bl	8009460 <xTaskResumeAll>
 8008cc8:	e77a      	b.n	8008bc0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008cca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ccc:	f000 f8a0 	bl	8008e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cd0:	f000 fbc6 	bl	8009460 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cd6:	f000 f8ed 	bl	8008eb4 <prvIsQueueEmpty>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f43f af6f 	beq.w	8008bc0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ce2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3730      	adds	r7, #48	; 0x30
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	e000ed04 	.word	0xe000ed04

08008cf0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10d      	bne.n	8008d2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d14d      	bne.n	8008db2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 ffc8 	bl	8009cb0 <xTaskPriorityDisinherit>
 8008d20:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	605a      	str	r2, [r3, #4]
 8008d28:	e043      	b.n	8008db2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d119      	bne.n	8008d64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6898      	ldr	r0, [r3, #8]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d38:	461a      	mov	r2, r3
 8008d3a:	68b9      	ldr	r1, [r7, #8]
 8008d3c:	f001 ffc6 	bl	800accc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d48:	441a      	add	r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	689a      	ldr	r2, [r3, #8]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d32b      	bcc.n	8008db2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	609a      	str	r2, [r3, #8]
 8008d62:	e026      	b.n	8008db2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	68d8      	ldr	r0, [r3, #12]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	f001 ffac 	bl	800accc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	68da      	ldr	r2, [r3, #12]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7c:	425b      	negs	r3, r3
 8008d7e:	441a      	add	r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	68da      	ldr	r2, [r3, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d207      	bcs.n	8008da0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	685a      	ldr	r2, [r3, #4]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d98:	425b      	negs	r3, r3
 8008d9a:	441a      	add	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d105      	bne.n	8008db2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	3b01      	subs	r3, #1
 8008db0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	1c5a      	adds	r2, r3, #1
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008dba:	697b      	ldr	r3, [r7, #20]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d018      	beq.n	8008e08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68da      	ldr	r2, [r3, #12]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dde:	441a      	add	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	68da      	ldr	r2, [r3, #12]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d303      	bcc.n	8008df8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68d9      	ldr	r1, [r3, #12]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e00:	461a      	mov	r2, r3
 8008e02:	6838      	ldr	r0, [r7, #0]
 8008e04:	f001 ff62 	bl	800accc <memcpy>
	}
}
 8008e08:	bf00      	nop
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e18:	f001 fc2e 	bl	800a678 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e24:	e011      	b.n	8008e4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d012      	beq.n	8008e54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	3324      	adds	r3, #36	; 0x24
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 fd58 	bl	80098e8 <xTaskRemoveFromEventList>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e3e:	f000 fe31 	bl	8009aa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
 8008e44:	3b01      	subs	r3, #1
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	dce9      	bgt.n	8008e26 <prvUnlockQueue+0x16>
 8008e52:	e000      	b.n	8008e56 <prvUnlockQueue+0x46>
					break;
 8008e54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	22ff      	movs	r2, #255	; 0xff
 8008e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e5e:	f001 fc3d 	bl	800a6dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e62:	f001 fc09 	bl	800a678 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e6e:	e011      	b.n	8008e94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d012      	beq.n	8008e9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	3310      	adds	r3, #16
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f000 fd33 	bl	80098e8 <xTaskRemoveFromEventList>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e88:	f000 fe0c 	bl	8009aa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e8c:	7bbb      	ldrb	r3, [r7, #14]
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	dce9      	bgt.n	8008e70 <prvUnlockQueue+0x60>
 8008e9c:	e000      	b.n	8008ea0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	22ff      	movs	r2, #255	; 0xff
 8008ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008ea8:	f001 fc18 	bl	800a6dc <vPortExitCritical>
}
 8008eac:	bf00      	nop
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ebc:	f001 fbdc 	bl	800a678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d102      	bne.n	8008ece <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	e001      	b.n	8008ed2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ed2:	f001 fc03 	bl	800a6dc <vPortExitCritical>

	return xReturn;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ee8:	f001 fbc6 	bl	800a678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d102      	bne.n	8008efe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	60fb      	str	r3, [r7, #12]
 8008efc:	e001      	b.n	8008f02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008efe:	2300      	movs	r3, #0
 8008f00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f02:	f001 fbeb 	bl	800a6dc <vPortExitCritical>

	return xReturn;
 8008f06:	68fb      	ldr	r3, [r7, #12]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	e014      	b.n	8008f4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f20:	4a0e      	ldr	r2, [pc, #56]	; (8008f5c <vQueueAddToRegistry+0x4c>)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10b      	bne.n	8008f44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f2c:	490b      	ldr	r1, [pc, #44]	; (8008f5c <vQueueAddToRegistry+0x4c>)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f36:	4a09      	ldr	r2, [pc, #36]	; (8008f5c <vQueueAddToRegistry+0x4c>)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	00db      	lsls	r3, r3, #3
 8008f3c:	4413      	add	r3, r2
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f42:	e005      	b.n	8008f50 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	3301      	adds	r3, #1
 8008f48:	60fb      	str	r3, [r7, #12]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2b07      	cmp	r3, #7
 8008f4e:	d9e7      	bls.n	8008f20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f50:	bf00      	nop
 8008f52:	3714      	adds	r7, #20
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	200096c4 	.word	0x200096c4

08008f60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f70:	f001 fb82 	bl	800a678 <vPortEnterCritical>
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f7a:	b25b      	sxtb	r3, r3
 8008f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f80:	d103      	bne.n	8008f8a <vQueueWaitForMessageRestricted+0x2a>
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f90:	b25b      	sxtb	r3, r3
 8008f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f96:	d103      	bne.n	8008fa0 <vQueueWaitForMessageRestricted+0x40>
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fa0:	f001 fb9c 	bl	800a6dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d106      	bne.n	8008fba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	3324      	adds	r3, #36	; 0x24
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	68b9      	ldr	r1, [r7, #8]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f000 fc6b 	bl	8009890 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008fba:	6978      	ldr	r0, [r7, #20]
 8008fbc:	f7ff ff28 	bl	8008e10 <prvUnlockQueue>
	}
 8008fc0:	bf00      	nop
 8008fc2:	3718      	adds	r7, #24
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08e      	sub	sp, #56	; 0x38
 8008fcc:	af04      	add	r7, sp, #16
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
 8008fd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10b      	bne.n	8008ff4 <xTaskCreateStatic+0x2c>
 8008fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe0:	b672      	cpsid	i
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	b662      	cpsie	i
 8008ff0:	623b      	str	r3, [r7, #32]
 8008ff2:	e7fe      	b.n	8008ff2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8008ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10b      	bne.n	8009012 <xTaskCreateStatic+0x4a>
 8008ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffe:	b672      	cpsid	i
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	b662      	cpsie	i
 800900e:	61fb      	str	r3, [r7, #28]
 8009010:	e7fe      	b.n	8009010 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009012:	2360      	movs	r3, #96	; 0x60
 8009014:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	2b60      	cmp	r3, #96	; 0x60
 800901a:	d00b      	beq.n	8009034 <xTaskCreateStatic+0x6c>
 800901c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009020:	b672      	cpsid	i
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	b662      	cpsie	i
 8009030:	61bb      	str	r3, [r7, #24]
 8009032:	e7fe      	b.n	8009032 <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009036:	2b00      	cmp	r3, #0
 8009038:	d01e      	beq.n	8009078 <xTaskCreateStatic+0xb0>
 800903a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903c:	2b00      	cmp	r3, #0
 800903e:	d01b      	beq.n	8009078 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009048:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	2202      	movs	r2, #2
 800904e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009052:	2300      	movs	r3, #0
 8009054:	9303      	str	r3, [sp, #12]
 8009056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009058:	9302      	str	r3, [sp, #8]
 800905a:	f107 0314 	add.w	r3, r7, #20
 800905e:	9301      	str	r3, [sp, #4]
 8009060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	68b9      	ldr	r1, [r7, #8]
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 f850 	bl	8009110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009072:	f000 f8d9 	bl	8009228 <prvAddNewTaskToReadyList>
 8009076:	e001      	b.n	800907c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8009078:	2300      	movs	r3, #0
 800907a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800907c:	697b      	ldr	r3, [r7, #20]
	}
 800907e:	4618      	mov	r0, r3
 8009080:	3728      	adds	r7, #40	; 0x28
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009086:	b580      	push	{r7, lr}
 8009088:	b08c      	sub	sp, #48	; 0x30
 800908a:	af04      	add	r7, sp, #16
 800908c:	60f8      	str	r0, [r7, #12]
 800908e:	60b9      	str	r1, [r7, #8]
 8009090:	603b      	str	r3, [r7, #0]
 8009092:	4613      	mov	r3, r2
 8009094:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009096:	88fb      	ldrh	r3, [r7, #6]
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4618      	mov	r0, r3
 800909c:	f001 fc0e 	bl	800a8bc <pvPortMalloc>
 80090a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00e      	beq.n	80090c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80090a8:	2060      	movs	r0, #96	; 0x60
 80090aa:	f001 fc07 	bl	800a8bc <pvPortMalloc>
 80090ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d003      	beq.n	80090be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	631a      	str	r2, [r3, #48]	; 0x30
 80090bc:	e005      	b.n	80090ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80090be:	6978      	ldr	r0, [r7, #20]
 80090c0:	f001 fcc8 	bl	800aa54 <vPortFree>
 80090c4:	e001      	b.n	80090ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80090c6:	2300      	movs	r3, #0
 80090c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d017      	beq.n	8009100 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090d8:	88fa      	ldrh	r2, [r7, #6]
 80090da:	2300      	movs	r3, #0
 80090dc:	9303      	str	r3, [sp, #12]
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	9302      	str	r3, [sp, #8]
 80090e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e4:	9301      	str	r3, [sp, #4]
 80090e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	68b9      	ldr	r1, [r7, #8]
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f000 f80e 	bl	8009110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090f4:	69f8      	ldr	r0, [r7, #28]
 80090f6:	f000 f897 	bl	8009228 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80090fa:	2301      	movs	r3, #1
 80090fc:	61bb      	str	r3, [r7, #24]
 80090fe:	e002      	b.n	8009106 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009100:	f04f 33ff 	mov.w	r3, #4294967295
 8009104:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009106:	69bb      	ldr	r3, [r7, #24]
	}
 8009108:	4618      	mov	r0, r3
 800910a:	3720      	adds	r7, #32
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b088      	sub	sp, #32
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
 800911c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009120:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	461a      	mov	r2, r3
 8009128:	21a5      	movs	r1, #165	; 0xa5
 800912a:	f001 fdda 	bl	800ace2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800912e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009132:	6879      	ldr	r1, [r7, #4]
 8009134:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009138:	440b      	add	r3, r1
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	f023 0307 	bic.w	r3, r3, #7
 8009146:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	f003 0307 	and.w	r3, r3, #7
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00b      	beq.n	800916a <prvInitialiseNewTask+0x5a>
 8009152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009156:	b672      	cpsid	i
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	b662      	cpsie	i
 8009166:	617b      	str	r3, [r7, #20]
 8009168:	e7fe      	b.n	8009168 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800916a:	2300      	movs	r3, #0
 800916c:	61fb      	str	r3, [r7, #28]
 800916e:	e012      	b.n	8009196 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	4413      	add	r3, r2
 8009176:	7819      	ldrb	r1, [r3, #0]
 8009178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	4413      	add	r3, r2
 800917e:	3334      	adds	r3, #52	; 0x34
 8009180:	460a      	mov	r2, r1
 8009182:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	4413      	add	r3, r2
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d006      	beq.n	800919e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	3301      	adds	r3, #1
 8009194:	61fb      	str	r3, [r7, #28]
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	2b0f      	cmp	r3, #15
 800919a:	d9e9      	bls.n	8009170 <prvInitialiseNewTask+0x60>
 800919c:	e000      	b.n	80091a0 <prvInitialiseNewTask+0x90>
		{
			break;
 800919e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80091a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80091a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091aa:	2b37      	cmp	r3, #55	; 0x37
 80091ac:	d901      	bls.n	80091b2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80091ae:	2337      	movs	r3, #55	; 0x37
 80091b0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80091b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091bc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80091be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c0:	2200      	movs	r2, #0
 80091c2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80091c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c6:	3304      	adds	r3, #4
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7ff f973 	bl	80084b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80091ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d0:	3318      	adds	r3, #24
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7ff f96e 	bl	80084b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80091d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80091e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80091ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f0:	2200      	movs	r2, #0
 80091f2:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80091f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f6:	2200      	movs	r2, #0
 80091f8:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	68f9      	ldr	r1, [r7, #12]
 8009206:	69b8      	ldr	r0, [r7, #24]
 8009208:	f001 f92e 	bl	800a468 <pxPortInitialiseStack>
 800920c:	4602      	mov	r2, r0
 800920e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009210:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800921c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800921e:	bf00      	nop
 8009220:	3720      	adds	r7, #32
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009230:	f001 fa22 	bl	800a678 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009234:	4b2d      	ldr	r3, [pc, #180]	; (80092ec <prvAddNewTaskToReadyList+0xc4>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3301      	adds	r3, #1
 800923a:	4a2c      	ldr	r2, [pc, #176]	; (80092ec <prvAddNewTaskToReadyList+0xc4>)
 800923c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800923e:	4b2c      	ldr	r3, [pc, #176]	; (80092f0 <prvAddNewTaskToReadyList+0xc8>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d109      	bne.n	800925a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009246:	4a2a      	ldr	r2, [pc, #168]	; (80092f0 <prvAddNewTaskToReadyList+0xc8>)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800924c:	4b27      	ldr	r3, [pc, #156]	; (80092ec <prvAddNewTaskToReadyList+0xc4>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d110      	bne.n	8009276 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009254:	f000 fc4c 	bl	8009af0 <prvInitialiseTaskLists>
 8009258:	e00d      	b.n	8009276 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800925a:	4b26      	ldr	r3, [pc, #152]	; (80092f4 <prvAddNewTaskToReadyList+0xcc>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d109      	bne.n	8009276 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009262:	4b23      	ldr	r3, [pc, #140]	; (80092f0 <prvAddNewTaskToReadyList+0xc8>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926c:	429a      	cmp	r2, r3
 800926e:	d802      	bhi.n	8009276 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009270:	4a1f      	ldr	r2, [pc, #124]	; (80092f0 <prvAddNewTaskToReadyList+0xc8>)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009276:	4b20      	ldr	r3, [pc, #128]	; (80092f8 <prvAddNewTaskToReadyList+0xd0>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3301      	adds	r3, #1
 800927c:	4a1e      	ldr	r2, [pc, #120]	; (80092f8 <prvAddNewTaskToReadyList+0xd0>)
 800927e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009280:	4b1d      	ldr	r3, [pc, #116]	; (80092f8 <prvAddNewTaskToReadyList+0xd0>)
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800928c:	4b1b      	ldr	r3, [pc, #108]	; (80092fc <prvAddNewTaskToReadyList+0xd4>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	429a      	cmp	r2, r3
 8009292:	d903      	bls.n	800929c <prvAddNewTaskToReadyList+0x74>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009298:	4a18      	ldr	r2, [pc, #96]	; (80092fc <prvAddNewTaskToReadyList+0xd4>)
 800929a:	6013      	str	r3, [r2, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a0:	4613      	mov	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4413      	add	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4a15      	ldr	r2, [pc, #84]	; (8009300 <prvAddNewTaskToReadyList+0xd8>)
 80092aa:	441a      	add	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	3304      	adds	r3, #4
 80092b0:	4619      	mov	r1, r3
 80092b2:	4610      	mov	r0, r2
 80092b4:	f7ff f90b 	bl	80084ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80092b8:	f001 fa10 	bl	800a6dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80092bc:	4b0d      	ldr	r3, [pc, #52]	; (80092f4 <prvAddNewTaskToReadyList+0xcc>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00e      	beq.n	80092e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80092c4:	4b0a      	ldr	r3, [pc, #40]	; (80092f0 <prvAddNewTaskToReadyList+0xc8>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d207      	bcs.n	80092e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80092d2:	4b0c      	ldr	r3, [pc, #48]	; (8009304 <prvAddNewTaskToReadyList+0xdc>)
 80092d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092d8:	601a      	str	r2, [r3, #0]
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092e2:	bf00      	nop
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	20000dfc 	.word	0x20000dfc
 80092f0:	20000928 	.word	0x20000928
 80092f4:	20000e08 	.word	0x20000e08
 80092f8:	20000e18 	.word	0x20000e18
 80092fc:	20000e04 	.word	0x20000e04
 8009300:	2000092c 	.word	0x2000092c
 8009304:	e000ed04 	.word	0xe000ed04

08009308 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009310:	2300      	movs	r3, #0
 8009312:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d018      	beq.n	800934c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800931a:	4b14      	ldr	r3, [pc, #80]	; (800936c <vTaskDelay+0x64>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00b      	beq.n	800933a <vTaskDelay+0x32>
 8009322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009326:	b672      	cpsid	i
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	b662      	cpsie	i
 8009336:	60bb      	str	r3, [r7, #8]
 8009338:	e7fe      	b.n	8009338 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800933a:	f000 f883 	bl	8009444 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800933e:	2100      	movs	r1, #0
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 fd25 	bl	8009d90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009346:	f000 f88b 	bl	8009460 <xTaskResumeAll>
 800934a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d107      	bne.n	8009362 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009352:	4b07      	ldr	r3, [pc, #28]	; (8009370 <vTaskDelay+0x68>)
 8009354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009362:	bf00      	nop
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20000e24 	.word	0x20000e24
 8009370:	e000ed04 	.word	0xe000ed04

08009374 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b08a      	sub	sp, #40	; 0x28
 8009378:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800937a:	2300      	movs	r3, #0
 800937c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800937e:	2300      	movs	r3, #0
 8009380:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009382:	463a      	mov	r2, r7
 8009384:	1d39      	adds	r1, r7, #4
 8009386:	f107 0308 	add.w	r3, r7, #8
 800938a:	4618      	mov	r0, r3
 800938c:	f7ff f83e 	bl	800840c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	9202      	str	r2, [sp, #8]
 8009398:	9301      	str	r3, [sp, #4]
 800939a:	2300      	movs	r3, #0
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	2300      	movs	r3, #0
 80093a0:	460a      	mov	r2, r1
 80093a2:	4922      	ldr	r1, [pc, #136]	; (800942c <vTaskStartScheduler+0xb8>)
 80093a4:	4822      	ldr	r0, [pc, #136]	; (8009430 <vTaskStartScheduler+0xbc>)
 80093a6:	f7ff fe0f 	bl	8008fc8 <xTaskCreateStatic>
 80093aa:	4602      	mov	r2, r0
 80093ac:	4b21      	ldr	r3, [pc, #132]	; (8009434 <vTaskStartScheduler+0xc0>)
 80093ae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80093b0:	4b20      	ldr	r3, [pc, #128]	; (8009434 <vTaskStartScheduler+0xc0>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80093b8:	2301      	movs	r3, #1
 80093ba:	617b      	str	r3, [r7, #20]
 80093bc:	e001      	b.n	80093c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80093be:	2300      	movs	r3, #0
 80093c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d102      	bne.n	80093ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80093c8:	f000 fd36 	bl	8009e38 <xTimerCreateTimerTask>
 80093cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d117      	bne.n	8009404 <vTaskStartScheduler+0x90>
 80093d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d8:	b672      	cpsid	i
 80093da:	f383 8811 	msr	BASEPRI, r3
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	b662      	cpsie	i
 80093e8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80093ea:	4b13      	ldr	r3, [pc, #76]	; (8009438 <vTaskStartScheduler+0xc4>)
 80093ec:	f04f 32ff 	mov.w	r2, #4294967295
 80093f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093f2:	4b12      	ldr	r3, [pc, #72]	; (800943c <vTaskStartScheduler+0xc8>)
 80093f4:	2201      	movs	r2, #1
 80093f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80093f8:	4b11      	ldr	r3, [pc, #68]	; (8009440 <vTaskStartScheduler+0xcc>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80093fe:	f001 f8bf 	bl	800a580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009402:	e00f      	b.n	8009424 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940a:	d10b      	bne.n	8009424 <vTaskStartScheduler+0xb0>
 800940c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009410:	b672      	cpsid	i
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	b662      	cpsie	i
 8009420:	60fb      	str	r3, [r7, #12]
 8009422:	e7fe      	b.n	8009422 <vTaskStartScheduler+0xae>
}
 8009424:	bf00      	nop
 8009426:	3718      	adds	r7, #24
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	0800ad48 	.word	0x0800ad48
 8009430:	08009abd 	.word	0x08009abd
 8009434:	20000e20 	.word	0x20000e20
 8009438:	20000e1c 	.word	0x20000e1c
 800943c:	20000e08 	.word	0x20000e08
 8009440:	20000e00 	.word	0x20000e00

08009444 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009444:	b480      	push	{r7}
 8009446:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009448:	4b04      	ldr	r3, [pc, #16]	; (800945c <vTaskSuspendAll+0x18>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3301      	adds	r3, #1
 800944e:	4a03      	ldr	r2, [pc, #12]	; (800945c <vTaskSuspendAll+0x18>)
 8009450:	6013      	str	r3, [r2, #0]
}
 8009452:	bf00      	nop
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	20000e24 	.word	0x20000e24

08009460 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009466:	2300      	movs	r3, #0
 8009468:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800946a:	2300      	movs	r3, #0
 800946c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800946e:	4b42      	ldr	r3, [pc, #264]	; (8009578 <xTaskResumeAll+0x118>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10b      	bne.n	800948e <xTaskResumeAll+0x2e>
 8009476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947a:	b672      	cpsid	i
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	b662      	cpsie	i
 800948a:	603b      	str	r3, [r7, #0]
 800948c:	e7fe      	b.n	800948c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800948e:	f001 f8f3 	bl	800a678 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009492:	4b39      	ldr	r3, [pc, #228]	; (8009578 <xTaskResumeAll+0x118>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3b01      	subs	r3, #1
 8009498:	4a37      	ldr	r2, [pc, #220]	; (8009578 <xTaskResumeAll+0x118>)
 800949a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800949c:	4b36      	ldr	r3, [pc, #216]	; (8009578 <xTaskResumeAll+0x118>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d162      	bne.n	800956a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80094a4:	4b35      	ldr	r3, [pc, #212]	; (800957c <xTaskResumeAll+0x11c>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d05e      	beq.n	800956a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094ac:	e02f      	b.n	800950e <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80094ae:	4b34      	ldr	r3, [pc, #208]	; (8009580 <xTaskResumeAll+0x120>)
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	3318      	adds	r3, #24
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7ff f864 	bl	8008588 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	3304      	adds	r3, #4
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7ff f85f 	bl	8008588 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ce:	4b2d      	ldr	r3, [pc, #180]	; (8009584 <xTaskResumeAll+0x124>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d903      	bls.n	80094de <xTaskResumeAll+0x7e>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094da:	4a2a      	ldr	r2, [pc, #168]	; (8009584 <xTaskResumeAll+0x124>)
 80094dc:	6013      	str	r3, [r2, #0]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e2:	4613      	mov	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4413      	add	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4a27      	ldr	r2, [pc, #156]	; (8009588 <xTaskResumeAll+0x128>)
 80094ec:	441a      	add	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3304      	adds	r3, #4
 80094f2:	4619      	mov	r1, r3
 80094f4:	4610      	mov	r0, r2
 80094f6:	f7fe ffea 	bl	80084ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094fe:	4b23      	ldr	r3, [pc, #140]	; (800958c <xTaskResumeAll+0x12c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009504:	429a      	cmp	r2, r3
 8009506:	d302      	bcc.n	800950e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009508:	4b21      	ldr	r3, [pc, #132]	; (8009590 <xTaskResumeAll+0x130>)
 800950a:	2201      	movs	r2, #1
 800950c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800950e:	4b1c      	ldr	r3, [pc, #112]	; (8009580 <xTaskResumeAll+0x120>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1cb      	bne.n	80094ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d001      	beq.n	8009520 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800951c:	f000 fb84 	bl	8009c28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009520:	4b1c      	ldr	r3, [pc, #112]	; (8009594 <xTaskResumeAll+0x134>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d010      	beq.n	800954e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800952c:	f000 f846 	bl	80095bc <xTaskIncrementTick>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d002      	beq.n	800953c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009536:	4b16      	ldr	r3, [pc, #88]	; (8009590 <xTaskResumeAll+0x130>)
 8009538:	2201      	movs	r2, #1
 800953a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	3b01      	subs	r3, #1
 8009540:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1f1      	bne.n	800952c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009548:	4b12      	ldr	r3, [pc, #72]	; (8009594 <xTaskResumeAll+0x134>)
 800954a:	2200      	movs	r2, #0
 800954c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800954e:	4b10      	ldr	r3, [pc, #64]	; (8009590 <xTaskResumeAll+0x130>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d009      	beq.n	800956a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009556:	2301      	movs	r3, #1
 8009558:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800955a:	4b0f      	ldr	r3, [pc, #60]	; (8009598 <xTaskResumeAll+0x138>)
 800955c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009560:	601a      	str	r2, [r3, #0]
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800956a:	f001 f8b7 	bl	800a6dc <vPortExitCritical>

	return xAlreadyYielded;
 800956e:	68bb      	ldr	r3, [r7, #8]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	20000e24 	.word	0x20000e24
 800957c:	20000dfc 	.word	0x20000dfc
 8009580:	20000dbc 	.word	0x20000dbc
 8009584:	20000e04 	.word	0x20000e04
 8009588:	2000092c 	.word	0x2000092c
 800958c:	20000928 	.word	0x20000928
 8009590:	20000e10 	.word	0x20000e10
 8009594:	20000e0c 	.word	0x20000e0c
 8009598:	e000ed04 	.word	0xe000ed04

0800959c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80095a2:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <xTaskGetTickCount+0x1c>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80095a8:	687b      	ldr	r3, [r7, #4]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	20000e00 	.word	0x20000e00

080095bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80095c2:	2300      	movs	r3, #0
 80095c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095c6:	4b52      	ldr	r3, [pc, #328]	; (8009710 <xTaskIncrementTick+0x154>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f040 808f 	bne.w	80096ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80095d0:	4b50      	ldr	r3, [pc, #320]	; (8009714 <xTaskIncrementTick+0x158>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3301      	adds	r3, #1
 80095d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80095d8:	4a4e      	ldr	r2, [pc, #312]	; (8009714 <xTaskIncrementTick+0x158>)
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d121      	bne.n	8009628 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80095e4:	4b4c      	ldr	r3, [pc, #304]	; (8009718 <xTaskIncrementTick+0x15c>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00b      	beq.n	8009606 <xTaskIncrementTick+0x4a>
 80095ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f2:	b672      	cpsid	i
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	b662      	cpsie	i
 8009602:	603b      	str	r3, [r7, #0]
 8009604:	e7fe      	b.n	8009604 <xTaskIncrementTick+0x48>
 8009606:	4b44      	ldr	r3, [pc, #272]	; (8009718 <xTaskIncrementTick+0x15c>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60fb      	str	r3, [r7, #12]
 800960c:	4b43      	ldr	r3, [pc, #268]	; (800971c <xTaskIncrementTick+0x160>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a41      	ldr	r2, [pc, #260]	; (8009718 <xTaskIncrementTick+0x15c>)
 8009612:	6013      	str	r3, [r2, #0]
 8009614:	4a41      	ldr	r2, [pc, #260]	; (800971c <xTaskIncrementTick+0x160>)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6013      	str	r3, [r2, #0]
 800961a:	4b41      	ldr	r3, [pc, #260]	; (8009720 <xTaskIncrementTick+0x164>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	3301      	adds	r3, #1
 8009620:	4a3f      	ldr	r2, [pc, #252]	; (8009720 <xTaskIncrementTick+0x164>)
 8009622:	6013      	str	r3, [r2, #0]
 8009624:	f000 fb00 	bl	8009c28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009628:	4b3e      	ldr	r3, [pc, #248]	; (8009724 <xTaskIncrementTick+0x168>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	429a      	cmp	r2, r3
 8009630:	d34e      	bcc.n	80096d0 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009632:	4b39      	ldr	r3, [pc, #228]	; (8009718 <xTaskIncrementTick+0x15c>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d101      	bne.n	8009640 <xTaskIncrementTick+0x84>
 800963c:	2301      	movs	r3, #1
 800963e:	e000      	b.n	8009642 <xTaskIncrementTick+0x86>
 8009640:	2300      	movs	r3, #0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d004      	beq.n	8009650 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009646:	4b37      	ldr	r3, [pc, #220]	; (8009724 <xTaskIncrementTick+0x168>)
 8009648:	f04f 32ff 	mov.w	r2, #4294967295
 800964c:	601a      	str	r2, [r3, #0]
					break;
 800964e:	e03f      	b.n	80096d0 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009650:	4b31      	ldr	r3, [pc, #196]	; (8009718 <xTaskIncrementTick+0x15c>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009660:	693a      	ldr	r2, [r7, #16]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	429a      	cmp	r2, r3
 8009666:	d203      	bcs.n	8009670 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009668:	4a2e      	ldr	r2, [pc, #184]	; (8009724 <xTaskIncrementTick+0x168>)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6013      	str	r3, [r2, #0]
						break;
 800966e:	e02f      	b.n	80096d0 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	3304      	adds	r3, #4
 8009674:	4618      	mov	r0, r3
 8009676:	f7fe ff87 	bl	8008588 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967e:	2b00      	cmp	r3, #0
 8009680:	d004      	beq.n	800968c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	3318      	adds	r3, #24
 8009686:	4618      	mov	r0, r3
 8009688:	f7fe ff7e 	bl	8008588 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009690:	4b25      	ldr	r3, [pc, #148]	; (8009728 <xTaskIncrementTick+0x16c>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	429a      	cmp	r2, r3
 8009696:	d903      	bls.n	80096a0 <xTaskIncrementTick+0xe4>
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969c:	4a22      	ldr	r2, [pc, #136]	; (8009728 <xTaskIncrementTick+0x16c>)
 800969e:	6013      	str	r3, [r2, #0]
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a4:	4613      	mov	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4a1f      	ldr	r2, [pc, #124]	; (800972c <xTaskIncrementTick+0x170>)
 80096ae:	441a      	add	r2, r3
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	3304      	adds	r3, #4
 80096b4:	4619      	mov	r1, r3
 80096b6:	4610      	mov	r0, r2
 80096b8:	f7fe ff09 	bl	80084ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c0:	4b1b      	ldr	r3, [pc, #108]	; (8009730 <xTaskIncrementTick+0x174>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d3b3      	bcc.n	8009632 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80096ca:	2301      	movs	r3, #1
 80096cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096ce:	e7b0      	b.n	8009632 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80096d0:	4b17      	ldr	r3, [pc, #92]	; (8009730 <xTaskIncrementTick+0x174>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d6:	4915      	ldr	r1, [pc, #84]	; (800972c <xTaskIncrementTick+0x170>)
 80096d8:	4613      	mov	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	4413      	add	r3, r2
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	440b      	add	r3, r1
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d907      	bls.n	80096f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80096e8:	2301      	movs	r3, #1
 80096ea:	617b      	str	r3, [r7, #20]
 80096ec:	e004      	b.n	80096f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80096ee:	4b11      	ldr	r3, [pc, #68]	; (8009734 <xTaskIncrementTick+0x178>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3301      	adds	r3, #1
 80096f4:	4a0f      	ldr	r2, [pc, #60]	; (8009734 <xTaskIncrementTick+0x178>)
 80096f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80096f8:	4b0f      	ldr	r3, [pc, #60]	; (8009738 <xTaskIncrementTick+0x17c>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d001      	beq.n	8009704 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8009700:	2301      	movs	r3, #1
 8009702:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009704:	697b      	ldr	r3, [r7, #20]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	20000e24 	.word	0x20000e24
 8009714:	20000e00 	.word	0x20000e00
 8009718:	20000db4 	.word	0x20000db4
 800971c:	20000db8 	.word	0x20000db8
 8009720:	20000e14 	.word	0x20000e14
 8009724:	20000e1c 	.word	0x20000e1c
 8009728:	20000e04 	.word	0x20000e04
 800972c:	2000092c 	.word	0x2000092c
 8009730:	20000928 	.word	0x20000928
 8009734:	20000e0c 	.word	0x20000e0c
 8009738:	20000e10 	.word	0x20000e10

0800973c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b086      	sub	sp, #24
 8009740:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009742:	4b3b      	ldr	r3, [pc, #236]	; (8009830 <vTaskSwitchContext+0xf4>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d003      	beq.n	8009752 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800974a:	4b3a      	ldr	r3, [pc, #232]	; (8009834 <vTaskSwitchContext+0xf8>)
 800974c:	2201      	movs	r2, #1
 800974e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009750:	e069      	b.n	8009826 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8009752:	4b38      	ldr	r3, [pc, #224]	; (8009834 <vTaskSwitchContext+0xf8>)
 8009754:	2200      	movs	r2, #0
 8009756:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009758:	4b37      	ldr	r3, [pc, #220]	; (8009838 <vTaskSwitchContext+0xfc>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975e:	613b      	str	r3, [r7, #16]
 8009760:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009764:	60fb      	str	r3, [r7, #12]
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	429a      	cmp	r2, r3
 800976e:	d111      	bne.n	8009794 <vTaskSwitchContext+0x58>
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	3304      	adds	r3, #4
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	429a      	cmp	r2, r3
 800977a:	d10b      	bne.n	8009794 <vTaskSwitchContext+0x58>
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	3308      	adds	r3, #8
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	429a      	cmp	r2, r3
 8009786:	d105      	bne.n	8009794 <vTaskSwitchContext+0x58>
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	330c      	adds	r3, #12
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	429a      	cmp	r2, r3
 8009792:	d008      	beq.n	80097a6 <vTaskSwitchContext+0x6a>
 8009794:	4b28      	ldr	r3, [pc, #160]	; (8009838 <vTaskSwitchContext+0xfc>)
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	4b27      	ldr	r3, [pc, #156]	; (8009838 <vTaskSwitchContext+0xfc>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	3334      	adds	r3, #52	; 0x34
 800979e:	4619      	mov	r1, r3
 80097a0:	4610      	mov	r0, r2
 80097a2:	f7f6 fed4 	bl	800054e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80097a6:	4b25      	ldr	r3, [pc, #148]	; (800983c <vTaskSwitchContext+0x100>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	617b      	str	r3, [r7, #20]
 80097ac:	e011      	b.n	80097d2 <vTaskSwitchContext+0x96>
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10b      	bne.n	80097cc <vTaskSwitchContext+0x90>
 80097b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b8:	b672      	cpsid	i
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	b662      	cpsie	i
 80097c8:	607b      	str	r3, [r7, #4]
 80097ca:	e7fe      	b.n	80097ca <vTaskSwitchContext+0x8e>
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	3b01      	subs	r3, #1
 80097d0:	617b      	str	r3, [r7, #20]
 80097d2:	491b      	ldr	r1, [pc, #108]	; (8009840 <vTaskSwitchContext+0x104>)
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	4613      	mov	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4413      	add	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	440b      	add	r3, r1
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0e3      	beq.n	80097ae <vTaskSwitchContext+0x72>
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	4613      	mov	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4a13      	ldr	r2, [pc, #76]	; (8009840 <vTaskSwitchContext+0x104>)
 80097f2:	4413      	add	r3, r2
 80097f4:	60bb      	str	r3, [r7, #8]
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	605a      	str	r2, [r3, #4]
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	685a      	ldr	r2, [r3, #4]
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	3308      	adds	r3, #8
 8009808:	429a      	cmp	r2, r3
 800980a:	d104      	bne.n	8009816 <vTaskSwitchContext+0xda>
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	685a      	ldr	r2, [r3, #4]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	605a      	str	r2, [r3, #4]
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	4a06      	ldr	r2, [pc, #24]	; (8009838 <vTaskSwitchContext+0xfc>)
 800981e:	6013      	str	r3, [r2, #0]
 8009820:	4a06      	ldr	r2, [pc, #24]	; (800983c <vTaskSwitchContext+0x100>)
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	6013      	str	r3, [r2, #0]
}
 8009826:	bf00      	nop
 8009828:	3718      	adds	r7, #24
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	20000e24 	.word	0x20000e24
 8009834:	20000e10 	.word	0x20000e10
 8009838:	20000928 	.word	0x20000928
 800983c:	20000e04 	.word	0x20000e04
 8009840:	2000092c 	.word	0x2000092c

08009844 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10b      	bne.n	800986c <vTaskPlaceOnEventList+0x28>
 8009854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009858:	b672      	cpsid	i
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	b662      	cpsie	i
 8009868:	60fb      	str	r3, [r7, #12]
 800986a:	e7fe      	b.n	800986a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800986c:	4b07      	ldr	r3, [pc, #28]	; (800988c <vTaskPlaceOnEventList+0x48>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	3318      	adds	r3, #24
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7fe fe4e 	bl	8008516 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800987a:	2101      	movs	r1, #1
 800987c:	6838      	ldr	r0, [r7, #0]
 800987e:	f000 fa87 	bl	8009d90 <prvAddCurrentTaskToDelayedList>
}
 8009882:	bf00      	nop
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	20000928 	.word	0x20000928

08009890 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10b      	bne.n	80098ba <vTaskPlaceOnEventListRestricted+0x2a>
 80098a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a6:	b672      	cpsid	i
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	b662      	cpsie	i
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	e7fe      	b.n	80098b8 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098ba:	4b0a      	ldr	r3, [pc, #40]	; (80098e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3318      	adds	r3, #24
 80098c0:	4619      	mov	r1, r3
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	f7fe fe03 	bl	80084ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d002      	beq.n	80098d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80098ce:	f04f 33ff 	mov.w	r3, #4294967295
 80098d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80098d4:	6879      	ldr	r1, [r7, #4]
 80098d6:	68b8      	ldr	r0, [r7, #8]
 80098d8:	f000 fa5a 	bl	8009d90 <prvAddCurrentTaskToDelayedList>
	}
 80098dc:	bf00      	nop
 80098de:	3718      	adds	r7, #24
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	20000928 	.word	0x20000928

080098e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d10b      	bne.n	8009916 <xTaskRemoveFromEventList+0x2e>
 80098fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009902:	b672      	cpsid	i
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	b662      	cpsie	i
 8009912:	60fb      	str	r3, [r7, #12]
 8009914:	e7fe      	b.n	8009914 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	3318      	adds	r3, #24
 800991a:	4618      	mov	r0, r3
 800991c:	f7fe fe34 	bl	8008588 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009920:	4b1d      	ldr	r3, [pc, #116]	; (8009998 <xTaskRemoveFromEventList+0xb0>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d11d      	bne.n	8009964 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	3304      	adds	r3, #4
 800992c:	4618      	mov	r0, r3
 800992e:	f7fe fe2b 	bl	8008588 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009936:	4b19      	ldr	r3, [pc, #100]	; (800999c <xTaskRemoveFromEventList+0xb4>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	429a      	cmp	r2, r3
 800993c:	d903      	bls.n	8009946 <xTaskRemoveFromEventList+0x5e>
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009942:	4a16      	ldr	r2, [pc, #88]	; (800999c <xTaskRemoveFromEventList+0xb4>)
 8009944:	6013      	str	r3, [r2, #0]
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800994a:	4613      	mov	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4a13      	ldr	r2, [pc, #76]	; (80099a0 <xTaskRemoveFromEventList+0xb8>)
 8009954:	441a      	add	r2, r3
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	3304      	adds	r3, #4
 800995a:	4619      	mov	r1, r3
 800995c:	4610      	mov	r0, r2
 800995e:	f7fe fdb6 	bl	80084ce <vListInsertEnd>
 8009962:	e005      	b.n	8009970 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	3318      	adds	r3, #24
 8009968:	4619      	mov	r1, r3
 800996a:	480e      	ldr	r0, [pc, #56]	; (80099a4 <xTaskRemoveFromEventList+0xbc>)
 800996c:	f7fe fdaf 	bl	80084ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009974:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <xTaskRemoveFromEventList+0xc0>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997a:	429a      	cmp	r2, r3
 800997c:	d905      	bls.n	800998a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800997e:	2301      	movs	r3, #1
 8009980:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009982:	4b0a      	ldr	r3, [pc, #40]	; (80099ac <xTaskRemoveFromEventList+0xc4>)
 8009984:	2201      	movs	r2, #1
 8009986:	601a      	str	r2, [r3, #0]
 8009988:	e001      	b.n	800998e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800998a:	2300      	movs	r3, #0
 800998c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800998e:	697b      	ldr	r3, [r7, #20]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3718      	adds	r7, #24
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	20000e24 	.word	0x20000e24
 800999c:	20000e04 	.word	0x20000e04
 80099a0:	2000092c 	.word	0x2000092c
 80099a4:	20000dbc 	.word	0x20000dbc
 80099a8:	20000928 	.word	0x20000928
 80099ac:	20000e10 	.word	0x20000e10

080099b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099b8:	4b06      	ldr	r3, [pc, #24]	; (80099d4 <vTaskInternalSetTimeOutState+0x24>)
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80099c0:	4b05      	ldr	r3, [pc, #20]	; (80099d8 <vTaskInternalSetTimeOutState+0x28>)
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	605a      	str	r2, [r3, #4]
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr
 80099d4:	20000e14 	.word	0x20000e14
 80099d8:	20000e00 	.word	0x20000e00

080099dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b088      	sub	sp, #32
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10b      	bne.n	8009a04 <xTaskCheckForTimeOut+0x28>
 80099ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f0:	b672      	cpsid	i
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	b662      	cpsie	i
 8009a00:	613b      	str	r3, [r7, #16]
 8009a02:	e7fe      	b.n	8009a02 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10b      	bne.n	8009a22 <xTaskCheckForTimeOut+0x46>
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	b672      	cpsid	i
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	b662      	cpsie	i
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	e7fe      	b.n	8009a20 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8009a22:	f000 fe29 	bl	800a678 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a26:	4b1d      	ldr	r3, [pc, #116]	; (8009a9c <xTaskCheckForTimeOut+0xc0>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	69ba      	ldr	r2, [r7, #24]
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a3e:	d102      	bne.n	8009a46 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a40:	2300      	movs	r3, #0
 8009a42:	61fb      	str	r3, [r7, #28]
 8009a44:	e023      	b.n	8009a8e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	4b15      	ldr	r3, [pc, #84]	; (8009aa0 <xTaskCheckForTimeOut+0xc4>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d007      	beq.n	8009a62 <xTaskCheckForTimeOut+0x86>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	69ba      	ldr	r2, [r7, #24]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d302      	bcc.n	8009a62 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	61fb      	str	r3, [r7, #28]
 8009a60:	e015      	b.n	8009a8e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d20b      	bcs.n	8009a84 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	1ad2      	subs	r2, r2, r3
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7ff ff99 	bl	80099b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	61fb      	str	r3, [r7, #28]
 8009a82:	e004      	b.n	8009a8e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2200      	movs	r2, #0
 8009a88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a8e:	f000 fe25 	bl	800a6dc <vPortExitCritical>

	return xReturn;
 8009a92:	69fb      	ldr	r3, [r7, #28]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3720      	adds	r7, #32
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	20000e00 	.word	0x20000e00
 8009aa0:	20000e14 	.word	0x20000e14

08009aa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009aa8:	4b03      	ldr	r3, [pc, #12]	; (8009ab8 <vTaskMissedYield+0x14>)
 8009aaa:	2201      	movs	r2, #1
 8009aac:	601a      	str	r2, [r3, #0]
}
 8009aae:	bf00      	nop
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	20000e10 	.word	0x20000e10

08009abc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ac4:	f000 f854 	bl	8009b70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ac8:	4b07      	ldr	r3, [pc, #28]	; (8009ae8 <prvIdleTask+0x2c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d907      	bls.n	8009ae0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8009ad0:	4b06      	ldr	r3, [pc, #24]	; (8009aec <prvIdleTask+0x30>)
 8009ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8009ae0:	f7f6 fd2e 	bl	8000540 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009ae4:	e7ee      	b.n	8009ac4 <prvIdleTask+0x8>
 8009ae6:	bf00      	nop
 8009ae8:	2000092c 	.word	0x2000092c
 8009aec:	e000ed04 	.word	0xe000ed04

08009af0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009af6:	2300      	movs	r3, #0
 8009af8:	607b      	str	r3, [r7, #4]
 8009afa:	e00c      	b.n	8009b16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	4613      	mov	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4a12      	ldr	r2, [pc, #72]	; (8009b50 <prvInitialiseTaskLists+0x60>)
 8009b08:	4413      	add	r3, r2
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe fcb2 	bl	8008474 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	3301      	adds	r3, #1
 8009b14:	607b      	str	r3, [r7, #4]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2b37      	cmp	r3, #55	; 0x37
 8009b1a:	d9ef      	bls.n	8009afc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b1c:	480d      	ldr	r0, [pc, #52]	; (8009b54 <prvInitialiseTaskLists+0x64>)
 8009b1e:	f7fe fca9 	bl	8008474 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b22:	480d      	ldr	r0, [pc, #52]	; (8009b58 <prvInitialiseTaskLists+0x68>)
 8009b24:	f7fe fca6 	bl	8008474 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b28:	480c      	ldr	r0, [pc, #48]	; (8009b5c <prvInitialiseTaskLists+0x6c>)
 8009b2a:	f7fe fca3 	bl	8008474 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b2e:	480c      	ldr	r0, [pc, #48]	; (8009b60 <prvInitialiseTaskLists+0x70>)
 8009b30:	f7fe fca0 	bl	8008474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b34:	480b      	ldr	r0, [pc, #44]	; (8009b64 <prvInitialiseTaskLists+0x74>)
 8009b36:	f7fe fc9d 	bl	8008474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b3a:	4b0b      	ldr	r3, [pc, #44]	; (8009b68 <prvInitialiseTaskLists+0x78>)
 8009b3c:	4a05      	ldr	r2, [pc, #20]	; (8009b54 <prvInitialiseTaskLists+0x64>)
 8009b3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b40:	4b0a      	ldr	r3, [pc, #40]	; (8009b6c <prvInitialiseTaskLists+0x7c>)
 8009b42:	4a05      	ldr	r2, [pc, #20]	; (8009b58 <prvInitialiseTaskLists+0x68>)
 8009b44:	601a      	str	r2, [r3, #0]
}
 8009b46:	bf00      	nop
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	2000092c 	.word	0x2000092c
 8009b54:	20000d8c 	.word	0x20000d8c
 8009b58:	20000da0 	.word	0x20000da0
 8009b5c:	20000dbc 	.word	0x20000dbc
 8009b60:	20000dd0 	.word	0x20000dd0
 8009b64:	20000de8 	.word	0x20000de8
 8009b68:	20000db4 	.word	0x20000db4
 8009b6c:	20000db8 	.word	0x20000db8

08009b70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b76:	e019      	b.n	8009bac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b78:	f000 fd7e 	bl	800a678 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009b7c:	4b0f      	ldr	r3, [pc, #60]	; (8009bbc <prvCheckTasksWaitingTermination+0x4c>)
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	3304      	adds	r3, #4
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7fe fcfd 	bl	8008588 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b8e:	4b0c      	ldr	r3, [pc, #48]	; (8009bc0 <prvCheckTasksWaitingTermination+0x50>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	3b01      	subs	r3, #1
 8009b94:	4a0a      	ldr	r2, [pc, #40]	; (8009bc0 <prvCheckTasksWaitingTermination+0x50>)
 8009b96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b98:	4b0a      	ldr	r3, [pc, #40]	; (8009bc4 <prvCheckTasksWaitingTermination+0x54>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	4a09      	ldr	r2, [pc, #36]	; (8009bc4 <prvCheckTasksWaitingTermination+0x54>)
 8009ba0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ba2:	f000 fd9b 	bl	800a6dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f80e 	bl	8009bc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bac:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <prvCheckTasksWaitingTermination+0x54>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1e1      	bne.n	8009b78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009bb4:	bf00      	nop
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	20000dd0 	.word	0x20000dd0
 8009bc0:	20000dfc 	.word	0x20000dfc
 8009bc4:	20000de4 	.word	0x20000de4

08009bc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d108      	bne.n	8009bec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bde:	4618      	mov	r0, r3
 8009be0:	f000 ff38 	bl	800aa54 <vPortFree>
				vPortFree( pxTCB );
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 ff35 	bl	800aa54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009bea:	e019      	b.n	8009c20 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d103      	bne.n	8009bfe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 ff2c 	bl	800aa54 <vPortFree>
	}
 8009bfc:	e010      	b.n	8009c20 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d00b      	beq.n	8009c20 <prvDeleteTCB+0x58>
 8009c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0c:	b672      	cpsid	i
 8009c0e:	f383 8811 	msr	BASEPRI, r3
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	b662      	cpsie	i
 8009c1c:	60fb      	str	r3, [r7, #12]
 8009c1e:	e7fe      	b.n	8009c1e <prvDeleteTCB+0x56>
	}
 8009c20:	bf00      	nop
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c2e:	4b0f      	ldr	r3, [pc, #60]	; (8009c6c <prvResetNextTaskUnblockTime+0x44>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <prvResetNextTaskUnblockTime+0x14>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e000      	b.n	8009c3e <prvResetNextTaskUnblockTime+0x16>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d004      	beq.n	8009c4c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c42:	4b0b      	ldr	r3, [pc, #44]	; (8009c70 <prvResetNextTaskUnblockTime+0x48>)
 8009c44:	f04f 32ff 	mov.w	r2, #4294967295
 8009c48:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c4a:	e008      	b.n	8009c5e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009c4c:	4b07      	ldr	r3, [pc, #28]	; (8009c6c <prvResetNextTaskUnblockTime+0x44>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	4a05      	ldr	r2, [pc, #20]	; (8009c70 <prvResetNextTaskUnblockTime+0x48>)
 8009c5c:	6013      	str	r3, [r2, #0]
}
 8009c5e:	bf00      	nop
 8009c60:	370c      	adds	r7, #12
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	20000db4 	.word	0x20000db4
 8009c70:	20000e1c 	.word	0x20000e1c

08009c74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ca8 <xTaskGetSchedulerState+0x34>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d102      	bne.n	8009c88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c82:	2301      	movs	r3, #1
 8009c84:	607b      	str	r3, [r7, #4]
 8009c86:	e008      	b.n	8009c9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c88:	4b08      	ldr	r3, [pc, #32]	; (8009cac <xTaskGetSchedulerState+0x38>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d102      	bne.n	8009c96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c90:	2302      	movs	r3, #2
 8009c92:	607b      	str	r3, [r7, #4]
 8009c94:	e001      	b.n	8009c9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c96:	2300      	movs	r3, #0
 8009c98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c9a:	687b      	ldr	r3, [r7, #4]
	}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	20000e08 	.word	0x20000e08
 8009cac:	20000e24 	.word	0x20000e24

08009cb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d058      	beq.n	8009d78 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009cc6:	4b2f      	ldr	r3, [pc, #188]	; (8009d84 <xTaskPriorityDisinherit+0xd4>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d00b      	beq.n	8009ce8 <xTaskPriorityDisinherit+0x38>
 8009cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd4:	b672      	cpsid	i
 8009cd6:	f383 8811 	msr	BASEPRI, r3
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	b662      	cpsie	i
 8009ce4:	60fb      	str	r3, [r7, #12]
 8009ce6:	e7fe      	b.n	8009ce6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10b      	bne.n	8009d08 <xTaskPriorityDisinherit+0x58>
 8009cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf4:	b672      	cpsid	i
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	b662      	cpsie	i
 8009d04:	60bb      	str	r3, [r7, #8]
 8009d06:	e7fe      	b.n	8009d06 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d0c:	1e5a      	subs	r2, r3, #1
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d02c      	beq.n	8009d78 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d128      	bne.n	8009d78 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	3304      	adds	r3, #4
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fe fc2c 	bl	8008588 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d48:	4b0f      	ldr	r3, [pc, #60]	; (8009d88 <xTaskPriorityDisinherit+0xd8>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d903      	bls.n	8009d58 <xTaskPriorityDisinherit+0xa8>
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d54:	4a0c      	ldr	r2, [pc, #48]	; (8009d88 <xTaskPriorityDisinherit+0xd8>)
 8009d56:	6013      	str	r3, [r2, #0]
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	4413      	add	r3, r2
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	4a09      	ldr	r2, [pc, #36]	; (8009d8c <xTaskPriorityDisinherit+0xdc>)
 8009d66:	441a      	add	r2, r3
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	3304      	adds	r3, #4
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	4610      	mov	r0, r2
 8009d70:	f7fe fbad 	bl	80084ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d74:	2301      	movs	r3, #1
 8009d76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d78:	697b      	ldr	r3, [r7, #20]
	}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3718      	adds	r7, #24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	20000928 	.word	0x20000928
 8009d88:	20000e04 	.word	0x20000e04
 8009d8c:	2000092c 	.word	0x2000092c

08009d90 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d9a:	4b21      	ldr	r3, [pc, #132]	; (8009e20 <prvAddCurrentTaskToDelayedList+0x90>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009da0:	4b20      	ldr	r3, [pc, #128]	; (8009e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3304      	adds	r3, #4
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fe fbee 	bl	8008588 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db2:	d10a      	bne.n	8009dca <prvAddCurrentTaskToDelayedList+0x3a>
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d007      	beq.n	8009dca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dba:	4b1a      	ldr	r3, [pc, #104]	; (8009e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3304      	adds	r3, #4
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	4819      	ldr	r0, [pc, #100]	; (8009e28 <prvAddCurrentTaskToDelayedList+0x98>)
 8009dc4:	f7fe fb83 	bl	80084ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009dc8:	e026      	b.n	8009e18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4413      	add	r3, r2
 8009dd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009dd2:	4b14      	ldr	r3, [pc, #80]	; (8009e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d209      	bcs.n	8009df6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009de2:	4b12      	ldr	r3, [pc, #72]	; (8009e2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	4b0f      	ldr	r3, [pc, #60]	; (8009e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	3304      	adds	r3, #4
 8009dec:	4619      	mov	r1, r3
 8009dee:	4610      	mov	r0, r2
 8009df0:	f7fe fb91 	bl	8008516 <vListInsert>
}
 8009df4:	e010      	b.n	8009e18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009df6:	4b0e      	ldr	r3, [pc, #56]	; (8009e30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	4b0a      	ldr	r3, [pc, #40]	; (8009e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3304      	adds	r3, #4
 8009e00:	4619      	mov	r1, r3
 8009e02:	4610      	mov	r0, r2
 8009e04:	f7fe fb87 	bl	8008516 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e08:	4b0a      	ldr	r3, [pc, #40]	; (8009e34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d202      	bcs.n	8009e18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009e12:	4a08      	ldr	r2, [pc, #32]	; (8009e34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	6013      	str	r3, [r2, #0]
}
 8009e18:	bf00      	nop
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	20000e00 	.word	0x20000e00
 8009e24:	20000928 	.word	0x20000928
 8009e28:	20000de8 	.word	0x20000de8
 8009e2c:	20000db8 	.word	0x20000db8
 8009e30:	20000db4 	.word	0x20000db4
 8009e34:	20000e1c 	.word	0x20000e1c

08009e38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b08a      	sub	sp, #40	; 0x28
 8009e3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009e42:	f000 fad1 	bl	800a3e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009e46:	4b1d      	ldr	r3, [pc, #116]	; (8009ebc <xTimerCreateTimerTask+0x84>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d021      	beq.n	8009e92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009e56:	1d3a      	adds	r2, r7, #4
 8009e58:	f107 0108 	add.w	r1, r7, #8
 8009e5c:	f107 030c 	add.w	r3, r7, #12
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fe faed 	bl	8008440 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e66:	6879      	ldr	r1, [r7, #4]
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	9202      	str	r2, [sp, #8]
 8009e6e:	9301      	str	r3, [sp, #4]
 8009e70:	2302      	movs	r3, #2
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	2300      	movs	r3, #0
 8009e76:	460a      	mov	r2, r1
 8009e78:	4911      	ldr	r1, [pc, #68]	; (8009ec0 <xTimerCreateTimerTask+0x88>)
 8009e7a:	4812      	ldr	r0, [pc, #72]	; (8009ec4 <xTimerCreateTimerTask+0x8c>)
 8009e7c:	f7ff f8a4 	bl	8008fc8 <xTaskCreateStatic>
 8009e80:	4602      	mov	r2, r0
 8009e82:	4b11      	ldr	r3, [pc, #68]	; (8009ec8 <xTimerCreateTimerTask+0x90>)
 8009e84:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e86:	4b10      	ldr	r3, [pc, #64]	; (8009ec8 <xTimerCreateTimerTask+0x90>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d001      	beq.n	8009e92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10b      	bne.n	8009eb0 <xTimerCreateTimerTask+0x78>
 8009e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9c:	b672      	cpsid	i
 8009e9e:	f383 8811 	msr	BASEPRI, r3
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	b662      	cpsie	i
 8009eac:	613b      	str	r3, [r7, #16]
 8009eae:	e7fe      	b.n	8009eae <xTimerCreateTimerTask+0x76>
	return xReturn;
 8009eb0:	697b      	ldr	r3, [r7, #20]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3718      	adds	r7, #24
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20000e58 	.word	0x20000e58
 8009ec0:	0800ad50 	.word	0x0800ad50
 8009ec4:	08009fed 	.word	0x08009fed
 8009ec8:	20000e5c 	.word	0x20000e5c

08009ecc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b08a      	sub	sp, #40	; 0x28
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	607a      	str	r2, [r7, #4]
 8009ed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009eda:	2300      	movs	r3, #0
 8009edc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10b      	bne.n	8009efc <xTimerGenericCommand+0x30>
 8009ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee8:	b672      	cpsid	i
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	b662      	cpsie	i
 8009ef8:	623b      	str	r3, [r7, #32]
 8009efa:	e7fe      	b.n	8009efa <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009efc:	4b19      	ldr	r3, [pc, #100]	; (8009f64 <xTimerGenericCommand+0x98>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d02a      	beq.n	8009f5a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	2b05      	cmp	r3, #5
 8009f14:	dc18      	bgt.n	8009f48 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009f16:	f7ff fead 	bl	8009c74 <xTaskGetSchedulerState>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d109      	bne.n	8009f34 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009f20:	4b10      	ldr	r3, [pc, #64]	; (8009f64 <xTimerGenericCommand+0x98>)
 8009f22:	6818      	ldr	r0, [r3, #0]
 8009f24:	f107 0110 	add.w	r1, r7, #16
 8009f28:	2300      	movs	r3, #0
 8009f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f2c:	f7fe fc60 	bl	80087f0 <xQueueGenericSend>
 8009f30:	6278      	str	r0, [r7, #36]	; 0x24
 8009f32:	e012      	b.n	8009f5a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009f34:	4b0b      	ldr	r3, [pc, #44]	; (8009f64 <xTimerGenericCommand+0x98>)
 8009f36:	6818      	ldr	r0, [r3, #0]
 8009f38:	f107 0110 	add.w	r1, r7, #16
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f7fe fc56 	bl	80087f0 <xQueueGenericSend>
 8009f44:	6278      	str	r0, [r7, #36]	; 0x24
 8009f46:	e008      	b.n	8009f5a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009f48:	4b06      	ldr	r3, [pc, #24]	; (8009f64 <xTimerGenericCommand+0x98>)
 8009f4a:	6818      	ldr	r0, [r3, #0]
 8009f4c:	f107 0110 	add.w	r1, r7, #16
 8009f50:	2300      	movs	r3, #0
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	f7fe fd4e 	bl	80089f4 <xQueueGenericSendFromISR>
 8009f58:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3728      	adds	r7, #40	; 0x28
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	20000e58 	.word	0x20000e58

08009f68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b088      	sub	sp, #32
 8009f6c:	af02      	add	r7, sp, #8
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f72:	4b1d      	ldr	r3, [pc, #116]	; (8009fe8 <prvProcessExpiredTimer+0x80>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	3304      	adds	r3, #4
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7fe fb01 	bl	8008588 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	69db      	ldr	r3, [r3, #28]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d123      	bne.n	8009fd6 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	699a      	ldr	r2, [r3, #24]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	18d1      	adds	r1, r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	683a      	ldr	r2, [r7, #0]
 8009f9a:	6978      	ldr	r0, [r7, #20]
 8009f9c:	f000 f8ca 	bl	800a134 <prvInsertTimerInActiveList>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d017      	beq.n	8009fd6 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	2300      	movs	r3, #0
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	2100      	movs	r1, #0
 8009fb0:	6978      	ldr	r0, [r7, #20]
 8009fb2:	f7ff ff8b 	bl	8009ecc <xTimerGenericCommand>
 8009fb6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10b      	bne.n	8009fd6 <prvProcessExpiredTimer+0x6e>
 8009fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc2:	b672      	cpsid	i
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	b662      	cpsie	i
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	e7fe      	b.n	8009fd4 <prvProcessExpiredTimer+0x6c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fda:	6978      	ldr	r0, [r7, #20]
 8009fdc:	4798      	blx	r3
}
 8009fde:	bf00      	nop
 8009fe0:	3718      	adds	r7, #24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20000e50 	.word	0x20000e50

08009fec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ff4:	f107 0308 	add.w	r3, r7, #8
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f000 f857 	bl	800a0ac <prvGetNextExpireTime>
 8009ffe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	4619      	mov	r1, r3
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f000 f803 	bl	800a010 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a00a:	f000 f8d5 	bl	800a1b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a00e:	e7f1      	b.n	8009ff4 <prvTimerTask+0x8>

0800a010 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a01a:	f7ff fa13 	bl	8009444 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a01e:	f107 0308 	add.w	r3, r7, #8
 800a022:	4618      	mov	r0, r3
 800a024:	f000 f866 	bl	800a0f4 <prvSampleTimeNow>
 800a028:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d130      	bne.n	800a092 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10a      	bne.n	800a04c <prvProcessTimerOrBlockTask+0x3c>
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d806      	bhi.n	800a04c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a03e:	f7ff fa0f 	bl	8009460 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a042:	68f9      	ldr	r1, [r7, #12]
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7ff ff8f 	bl	8009f68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a04a:	e024      	b.n	800a096 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d008      	beq.n	800a064 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a052:	4b13      	ldr	r3, [pc, #76]	; (800a0a0 <prvProcessTimerOrBlockTask+0x90>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	bf0c      	ite	eq
 800a05c:	2301      	moveq	r3, #1
 800a05e:	2300      	movne	r3, #0
 800a060:	b2db      	uxtb	r3, r3
 800a062:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a064:	4b0f      	ldr	r3, [pc, #60]	; (800a0a4 <prvProcessTimerOrBlockTask+0x94>)
 800a066:	6818      	ldr	r0, [r3, #0]
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	683a      	ldr	r2, [r7, #0]
 800a070:	4619      	mov	r1, r3
 800a072:	f7fe ff75 	bl	8008f60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a076:	f7ff f9f3 	bl	8009460 <xTaskResumeAll>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10a      	bne.n	800a096 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a080:	4b09      	ldr	r3, [pc, #36]	; (800a0a8 <prvProcessTimerOrBlockTask+0x98>)
 800a082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a086:	601a      	str	r2, [r3, #0]
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	f3bf 8f6f 	isb	sy
}
 800a090:	e001      	b.n	800a096 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a092:	f7ff f9e5 	bl	8009460 <xTaskResumeAll>
}
 800a096:	bf00      	nop
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	20000e54 	.word	0x20000e54
 800a0a4:	20000e58 	.word	0x20000e58
 800a0a8:	e000ed04 	.word	0xe000ed04

0800a0ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a0b4:	4b0e      	ldr	r3, [pc, #56]	; (800a0f0 <prvGetNextExpireTime+0x44>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	bf0c      	ite	eq
 800a0be:	2301      	moveq	r3, #1
 800a0c0:	2300      	movne	r3, #0
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d105      	bne.n	800a0de <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0d2:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <prvGetNextExpireTime+0x44>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	60fb      	str	r3, [r7, #12]
 800a0dc:	e001      	b.n	800a0e2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3714      	adds	r7, #20
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr
 800a0f0:	20000e50 	.word	0x20000e50

0800a0f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a0fc:	f7ff fa4e 	bl	800959c <xTaskGetTickCount>
 800a100:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a102:	4b0b      	ldr	r3, [pc, #44]	; (800a130 <prvSampleTimeNow+0x3c>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d205      	bcs.n	800a118 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a10c:	f000 f90a 	bl	800a324 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	601a      	str	r2, [r3, #0]
 800a116:	e002      	b.n	800a11e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a11e:	4a04      	ldr	r2, [pc, #16]	; (800a130 <prvSampleTimeNow+0x3c>)
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a124:	68fb      	ldr	r3, [r7, #12]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	20000e60 	.word	0x20000e60

0800a134 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a142:	2300      	movs	r3, #0
 800a144:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	429a      	cmp	r2, r3
 800a158:	d812      	bhi.n	800a180 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	1ad2      	subs	r2, r2, r3
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	429a      	cmp	r2, r3
 800a166:	d302      	bcc.n	800a16e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a168:	2301      	movs	r3, #1
 800a16a:	617b      	str	r3, [r7, #20]
 800a16c:	e01b      	b.n	800a1a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a16e:	4b10      	ldr	r3, [pc, #64]	; (800a1b0 <prvInsertTimerInActiveList+0x7c>)
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	3304      	adds	r3, #4
 800a176:	4619      	mov	r1, r3
 800a178:	4610      	mov	r0, r2
 800a17a:	f7fe f9cc 	bl	8008516 <vListInsert>
 800a17e:	e012      	b.n	800a1a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	429a      	cmp	r2, r3
 800a186:	d206      	bcs.n	800a196 <prvInsertTimerInActiveList+0x62>
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d302      	bcc.n	800a196 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a190:	2301      	movs	r3, #1
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	e007      	b.n	800a1a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a196:	4b07      	ldr	r3, [pc, #28]	; (800a1b4 <prvInsertTimerInActiveList+0x80>)
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	3304      	adds	r3, #4
 800a19e:	4619      	mov	r1, r3
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	f7fe f9b8 	bl	8008516 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a1a6:	697b      	ldr	r3, [r7, #20]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3718      	adds	r7, #24
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	20000e54 	.word	0x20000e54
 800a1b4:	20000e50 	.word	0x20000e50

0800a1b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b08e      	sub	sp, #56	; 0x38
 800a1bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1be:	e09f      	b.n	800a300 <prvProcessReceivedCommands+0x148>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	da19      	bge.n	800a1fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a1c6:	1d3b      	adds	r3, r7, #4
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10b      	bne.n	800a1ea <prvProcessReceivedCommands+0x32>
 800a1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d6:	b672      	cpsid	i
 800a1d8:	f383 8811 	msr	BASEPRI, r3
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	b662      	cpsie	i
 800a1e6:	61fb      	str	r3, [r7, #28]
 800a1e8:	e7fe      	b.n	800a1e8 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1f0:	6850      	ldr	r0, [r2, #4]
 800a1f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1f4:	6892      	ldr	r2, [r2, #8]
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	db7e      	blt.n	800a2fe <prvProcessReceivedCommands+0x146>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a206:	695b      	ldr	r3, [r3, #20]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d004      	beq.n	800a216 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20e:	3304      	adds	r3, #4
 800a210:	4618      	mov	r0, r3
 800a212:	f7fe f9b9 	bl	8008588 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a216:	463b      	mov	r3, r7
 800a218:	4618      	mov	r0, r3
 800a21a:	f7ff ff6b 	bl	800a0f4 <prvSampleTimeNow>
 800a21e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2b09      	cmp	r3, #9
 800a224:	d86c      	bhi.n	800a300 <prvProcessReceivedCommands+0x148>
 800a226:	a201      	add	r2, pc, #4	; (adr r2, 800a22c <prvProcessReceivedCommands+0x74>)
 800a228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22c:	0800a255 	.word	0x0800a255
 800a230:	0800a255 	.word	0x0800a255
 800a234:	0800a255 	.word	0x0800a255
 800a238:	0800a301 	.word	0x0800a301
 800a23c:	0800a2b3 	.word	0x0800a2b3
 800a240:	0800a2ed 	.word	0x0800a2ed
 800a244:	0800a255 	.word	0x0800a255
 800a248:	0800a255 	.word	0x0800a255
 800a24c:	0800a301 	.word	0x0800a301
 800a250:	0800a2b3 	.word	0x0800a2b3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	18d1      	adds	r1, r2, r3
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a262:	f7ff ff67 	bl	800a134 <prvInsertTimerInActiveList>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d049      	beq.n	800a300 <prvProcessReceivedCommands+0x148>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a272:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a276:	69db      	ldr	r3, [r3, #28]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d141      	bne.n	800a300 <prvProcessReceivedCommands+0x148>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	441a      	add	r2, r3
 800a284:	2300      	movs	r3, #0
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	2300      	movs	r3, #0
 800a28a:	2100      	movs	r1, #0
 800a28c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a28e:	f7ff fe1d 	bl	8009ecc <xTimerGenericCommand>
 800a292:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a294:	6a3b      	ldr	r3, [r7, #32]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d132      	bne.n	800a300 <prvProcessReceivedCommands+0x148>
 800a29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29e:	b672      	cpsid	i
 800a2a0:	f383 8811 	msr	BASEPRI, r3
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	f3bf 8f4f 	dsb	sy
 800a2ac:	b662      	cpsie	i
 800a2ae:	61bb      	str	r3, [r7, #24]
 800a2b0:	e7fe      	b.n	800a2b0 <prvProcessReceivedCommands+0xf8>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ba:	699b      	ldr	r3, [r3, #24]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d10b      	bne.n	800a2d8 <prvProcessReceivedCommands+0x120>
 800a2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c4:	b672      	cpsid	i
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	b662      	cpsie	i
 800a2d4:	617b      	str	r3, [r7, #20]
 800a2d6:	e7fe      	b.n	800a2d6 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2da:	699a      	ldr	r2, [r3, #24]
 800a2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2de:	18d1      	adds	r1, r2, r3
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2e6:	f7ff ff25 	bl	800a134 <prvInsertTimerInActiveList>
					break;
 800a2ea:	e009      	b.n	800a300 <prvProcessReceivedCommands+0x148>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d104      	bne.n	800a300 <prvProcessReceivedCommands+0x148>
						{
							vPortFree( pxTimer );
 800a2f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2f8:	f000 fbac 	bl	800aa54 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a2fc:	e000      	b.n	800a300 <prvProcessReceivedCommands+0x148>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a2fe:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a300:	4b07      	ldr	r3, [pc, #28]	; (800a320 <prvProcessReceivedCommands+0x168>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	1d39      	adds	r1, r7, #4
 800a306:	2200      	movs	r2, #0
 800a308:	4618      	mov	r0, r3
 800a30a:	f7fe fc0f 	bl	8008b2c <xQueueReceive>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	f47f af55 	bne.w	800a1c0 <prvProcessReceivedCommands+0x8>
	}
}
 800a316:	bf00      	nop
 800a318:	3730      	adds	r7, #48	; 0x30
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20000e58 	.word	0x20000e58

0800a324 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b088      	sub	sp, #32
 800a328:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a32a:	e046      	b.n	800a3ba <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a32c:	4b2c      	ldr	r3, [pc, #176]	; (800a3e0 <prvSwitchTimerLists+0xbc>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a336:	4b2a      	ldr	r3, [pc, #168]	; (800a3e0 <prvSwitchTimerLists+0xbc>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	3304      	adds	r3, #4
 800a344:	4618      	mov	r0, r3
 800a346:	f7fe f91f 	bl	8008588 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	69db      	ldr	r3, [r3, #28]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d12f      	bne.n	800a3ba <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	4413      	add	r3, r2
 800a362:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a364:	68ba      	ldr	r2, [r7, #8]
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d90e      	bls.n	800a38a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a378:	4b19      	ldr	r3, [pc, #100]	; (800a3e0 <prvSwitchTimerLists+0xbc>)
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	3304      	adds	r3, #4
 800a380:	4619      	mov	r1, r3
 800a382:	4610      	mov	r0, r2
 800a384:	f7fe f8c7 	bl	8008516 <vListInsert>
 800a388:	e017      	b.n	800a3ba <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a38a:	2300      	movs	r3, #0
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	2300      	movs	r3, #0
 800a390:	693a      	ldr	r2, [r7, #16]
 800a392:	2100      	movs	r1, #0
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f7ff fd99 	bl	8009ecc <xTimerGenericCommand>
 800a39a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d10b      	bne.n	800a3ba <prvSwitchTimerLists+0x96>
 800a3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a6:	b672      	cpsid	i
 800a3a8:	f383 8811 	msr	BASEPRI, r3
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	b662      	cpsie	i
 800a3b6:	603b      	str	r3, [r7, #0]
 800a3b8:	e7fe      	b.n	800a3b8 <prvSwitchTimerLists+0x94>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3ba:	4b09      	ldr	r3, [pc, #36]	; (800a3e0 <prvSwitchTimerLists+0xbc>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1b3      	bne.n	800a32c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a3c4:	4b06      	ldr	r3, [pc, #24]	; (800a3e0 <prvSwitchTimerLists+0xbc>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a3ca:	4b06      	ldr	r3, [pc, #24]	; (800a3e4 <prvSwitchTimerLists+0xc0>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a04      	ldr	r2, [pc, #16]	; (800a3e0 <prvSwitchTimerLists+0xbc>)
 800a3d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a3d2:	4a04      	ldr	r2, [pc, #16]	; (800a3e4 <prvSwitchTimerLists+0xc0>)
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	6013      	str	r3, [r2, #0]
}
 800a3d8:	bf00      	nop
 800a3da:	3718      	adds	r7, #24
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	20000e50 	.word	0x20000e50
 800a3e4:	20000e54 	.word	0x20000e54

0800a3e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a3ee:	f000 f943 	bl	800a678 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a3f2:	4b15      	ldr	r3, [pc, #84]	; (800a448 <prvCheckForValidListAndQueue+0x60>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d120      	bne.n	800a43c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a3fa:	4814      	ldr	r0, [pc, #80]	; (800a44c <prvCheckForValidListAndQueue+0x64>)
 800a3fc:	f7fe f83a 	bl	8008474 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a400:	4813      	ldr	r0, [pc, #76]	; (800a450 <prvCheckForValidListAndQueue+0x68>)
 800a402:	f7fe f837 	bl	8008474 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a406:	4b13      	ldr	r3, [pc, #76]	; (800a454 <prvCheckForValidListAndQueue+0x6c>)
 800a408:	4a10      	ldr	r2, [pc, #64]	; (800a44c <prvCheckForValidListAndQueue+0x64>)
 800a40a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a40c:	4b12      	ldr	r3, [pc, #72]	; (800a458 <prvCheckForValidListAndQueue+0x70>)
 800a40e:	4a10      	ldr	r2, [pc, #64]	; (800a450 <prvCheckForValidListAndQueue+0x68>)
 800a410:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a412:	2300      	movs	r3, #0
 800a414:	9300      	str	r3, [sp, #0]
 800a416:	4b11      	ldr	r3, [pc, #68]	; (800a45c <prvCheckForValidListAndQueue+0x74>)
 800a418:	4a11      	ldr	r2, [pc, #68]	; (800a460 <prvCheckForValidListAndQueue+0x78>)
 800a41a:	2110      	movs	r1, #16
 800a41c:	200a      	movs	r0, #10
 800a41e:	f7fe f947 	bl	80086b0 <xQueueGenericCreateStatic>
 800a422:	4602      	mov	r2, r0
 800a424:	4b08      	ldr	r3, [pc, #32]	; (800a448 <prvCheckForValidListAndQueue+0x60>)
 800a426:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a428:	4b07      	ldr	r3, [pc, #28]	; (800a448 <prvCheckForValidListAndQueue+0x60>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d005      	beq.n	800a43c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a430:	4b05      	ldr	r3, [pc, #20]	; (800a448 <prvCheckForValidListAndQueue+0x60>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	490b      	ldr	r1, [pc, #44]	; (800a464 <prvCheckForValidListAndQueue+0x7c>)
 800a436:	4618      	mov	r0, r3
 800a438:	f7fe fd6a 	bl	8008f10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a43c:	f000 f94e 	bl	800a6dc <vPortExitCritical>
}
 800a440:	bf00      	nop
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	20000e58 	.word	0x20000e58
 800a44c:	20000e28 	.word	0x20000e28
 800a450:	20000e3c 	.word	0x20000e3c
 800a454:	20000e50 	.word	0x20000e50
 800a458:	20000e54 	.word	0x20000e54
 800a45c:	20000f04 	.word	0x20000f04
 800a460:	20000e64 	.word	0x20000e64
 800a464:	0800ad58 	.word	0x0800ad58

0800a468 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	3b04      	subs	r3, #4
 800a478:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a480:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	3b04      	subs	r3, #4
 800a486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	f023 0201 	bic.w	r2, r3, #1
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3b04      	subs	r3, #4
 800a496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a498:	4a0c      	ldr	r2, [pc, #48]	; (800a4cc <pxPortInitialiseStack+0x64>)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	3b14      	subs	r3, #20
 800a4a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	3b04      	subs	r3, #4
 800a4ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f06f 0202 	mvn.w	r2, #2
 800a4b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	3b20      	subs	r3, #32
 800a4bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a4be:	68fb      	ldr	r3, [r7, #12]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3714      	adds	r7, #20
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr
 800a4cc:	0800a4d1 	.word	0x0800a4d1

0800a4d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b085      	sub	sp, #20
 800a4d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4da:	4b13      	ldr	r3, [pc, #76]	; (800a528 <prvTaskExitError+0x58>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e2:	d00b      	beq.n	800a4fc <prvTaskExitError+0x2c>
 800a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e8:	b672      	cpsid	i
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	b662      	cpsie	i
 800a4f8:	60fb      	str	r3, [r7, #12]
 800a4fa:	e7fe      	b.n	800a4fa <prvTaskExitError+0x2a>
 800a4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a500:	b672      	cpsid	i
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	b662      	cpsie	i
 800a510:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a512:	bf00      	nop
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d0fc      	beq.n	800a514 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a51a:	bf00      	nop
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	20000040 	.word	0x20000040
 800a52c:	00000000 	.word	0x00000000

0800a530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a530:	4b07      	ldr	r3, [pc, #28]	; (800a550 <pxCurrentTCBConst2>)
 800a532:	6819      	ldr	r1, [r3, #0]
 800a534:	6808      	ldr	r0, [r1, #0]
 800a536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a53a:	f380 8809 	msr	PSP, r0
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f04f 0000 	mov.w	r0, #0
 800a546:	f380 8811 	msr	BASEPRI, r0
 800a54a:	4770      	bx	lr
 800a54c:	f3af 8000 	nop.w

0800a550 <pxCurrentTCBConst2>:
 800a550:	20000928 	.word	0x20000928
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a554:	bf00      	nop
 800a556:	bf00      	nop

0800a558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a558:	4808      	ldr	r0, [pc, #32]	; (800a57c <prvPortStartFirstTask+0x24>)
 800a55a:	6800      	ldr	r0, [r0, #0]
 800a55c:	6800      	ldr	r0, [r0, #0]
 800a55e:	f380 8808 	msr	MSP, r0
 800a562:	f04f 0000 	mov.w	r0, #0
 800a566:	f380 8814 	msr	CONTROL, r0
 800a56a:	b662      	cpsie	i
 800a56c:	b661      	cpsie	f
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	df00      	svc	0
 800a578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a57a:	bf00      	nop
 800a57c:	e000ed08 	.word	0xe000ed08

0800a580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a586:	4b36      	ldr	r3, [pc, #216]	; (800a660 <xPortStartScheduler+0xe0>)
 800a588:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	22ff      	movs	r2, #255	; 0xff
 800a596:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a5a0:	78fb      	ldrb	r3, [r7, #3]
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	4b2e      	ldr	r3, [pc, #184]	; (800a664 <xPortStartScheduler+0xe4>)
 800a5ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a5ae:	4b2e      	ldr	r3, [pc, #184]	; (800a668 <xPortStartScheduler+0xe8>)
 800a5b0:	2207      	movs	r2, #7
 800a5b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5b4:	e009      	b.n	800a5ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a5b6:	4b2c      	ldr	r3, [pc, #176]	; (800a668 <xPortStartScheduler+0xe8>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	4a2a      	ldr	r2, [pc, #168]	; (800a668 <xPortStartScheduler+0xe8>)
 800a5be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a5c0:	78fb      	ldrb	r3, [r7, #3]
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5ca:	78fb      	ldrb	r3, [r7, #3]
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5d2:	2b80      	cmp	r3, #128	; 0x80
 800a5d4:	d0ef      	beq.n	800a5b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a5d6:	4b24      	ldr	r3, [pc, #144]	; (800a668 <xPortStartScheduler+0xe8>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f1c3 0307 	rsb	r3, r3, #7
 800a5de:	2b04      	cmp	r3, #4
 800a5e0:	d00b      	beq.n	800a5fa <xPortStartScheduler+0x7a>
 800a5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e6:	b672      	cpsid	i
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	b662      	cpsie	i
 800a5f6:	60bb      	str	r3, [r7, #8]
 800a5f8:	e7fe      	b.n	800a5f8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a5fa:	4b1b      	ldr	r3, [pc, #108]	; (800a668 <xPortStartScheduler+0xe8>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	021b      	lsls	r3, r3, #8
 800a600:	4a19      	ldr	r2, [pc, #100]	; (800a668 <xPortStartScheduler+0xe8>)
 800a602:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a604:	4b18      	ldr	r3, [pc, #96]	; (800a668 <xPortStartScheduler+0xe8>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a60c:	4a16      	ldr	r2, [pc, #88]	; (800a668 <xPortStartScheduler+0xe8>)
 800a60e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	b2da      	uxtb	r2, r3
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a618:	4b14      	ldr	r3, [pc, #80]	; (800a66c <xPortStartScheduler+0xec>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a13      	ldr	r2, [pc, #76]	; (800a66c <xPortStartScheduler+0xec>)
 800a61e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a622:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a624:	4b11      	ldr	r3, [pc, #68]	; (800a66c <xPortStartScheduler+0xec>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a10      	ldr	r2, [pc, #64]	; (800a66c <xPortStartScheduler+0xec>)
 800a62a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a62e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a630:	f000 f8d4 	bl	800a7dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a634:	4b0e      	ldr	r3, [pc, #56]	; (800a670 <xPortStartScheduler+0xf0>)
 800a636:	2200      	movs	r2, #0
 800a638:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a63a:	f000 f8f3 	bl	800a824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a63e:	4b0d      	ldr	r3, [pc, #52]	; (800a674 <xPortStartScheduler+0xf4>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a0c      	ldr	r2, [pc, #48]	; (800a674 <xPortStartScheduler+0xf4>)
 800a644:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a648:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a64a:	f7ff ff85 	bl	800a558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a64e:	f7ff f875 	bl	800973c <vTaskSwitchContext>
	prvTaskExitError();
 800a652:	f7ff ff3d 	bl	800a4d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	e000e400 	.word	0xe000e400
 800a664:	20000f54 	.word	0x20000f54
 800a668:	20000f58 	.word	0x20000f58
 800a66c:	e000ed20 	.word	0xe000ed20
 800a670:	20000040 	.word	0x20000040
 800a674:	e000ef34 	.word	0xe000ef34

0800a678 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a682:	b672      	cpsid	i
 800a684:	f383 8811 	msr	BASEPRI, r3
 800a688:	f3bf 8f6f 	isb	sy
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	b662      	cpsie	i
 800a692:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a694:	4b0f      	ldr	r3, [pc, #60]	; (800a6d4 <vPortEnterCritical+0x5c>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	3301      	adds	r3, #1
 800a69a:	4a0e      	ldr	r2, [pc, #56]	; (800a6d4 <vPortEnterCritical+0x5c>)
 800a69c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a69e:	4b0d      	ldr	r3, [pc, #52]	; (800a6d4 <vPortEnterCritical+0x5c>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d110      	bne.n	800a6c8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a6a6:	4b0c      	ldr	r3, [pc, #48]	; (800a6d8 <vPortEnterCritical+0x60>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00b      	beq.n	800a6c8 <vPortEnterCritical+0x50>
 800a6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b4:	b672      	cpsid	i
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	b662      	cpsie	i
 800a6c4:	603b      	str	r3, [r7, #0]
 800a6c6:	e7fe      	b.n	800a6c6 <vPortEnterCritical+0x4e>
	}
}
 800a6c8:	bf00      	nop
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	20000040 	.word	0x20000040
 800a6d8:	e000ed04 	.word	0xe000ed04

0800a6dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a6e2:	4b12      	ldr	r3, [pc, #72]	; (800a72c <vPortExitCritical+0x50>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10b      	bne.n	800a702 <vPortExitCritical+0x26>
 800a6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ee:	b672      	cpsid	i
 800a6f0:	f383 8811 	msr	BASEPRI, r3
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	b662      	cpsie	i
 800a6fe:	607b      	str	r3, [r7, #4]
 800a700:	e7fe      	b.n	800a700 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800a702:	4b0a      	ldr	r3, [pc, #40]	; (800a72c <vPortExitCritical+0x50>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	3b01      	subs	r3, #1
 800a708:	4a08      	ldr	r2, [pc, #32]	; (800a72c <vPortExitCritical+0x50>)
 800a70a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a70c:	4b07      	ldr	r3, [pc, #28]	; (800a72c <vPortExitCritical+0x50>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d104      	bne.n	800a71e <vPortExitCritical+0x42>
 800a714:	2300      	movs	r3, #0
 800a716:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a71e:	bf00      	nop
 800a720:	370c      	adds	r7, #12
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	20000040 	.word	0x20000040

0800a730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a730:	f3ef 8009 	mrs	r0, PSP
 800a734:	f3bf 8f6f 	isb	sy
 800a738:	4b15      	ldr	r3, [pc, #84]	; (800a790 <pxCurrentTCBConst>)
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	f01e 0f10 	tst.w	lr, #16
 800a740:	bf08      	it	eq
 800a742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74a:	6010      	str	r0, [r2, #0]
 800a74c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a750:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a754:	b672      	cpsid	i
 800a756:	f380 8811 	msr	BASEPRI, r0
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	b662      	cpsie	i
 800a764:	f7fe ffea 	bl	800973c <vTaskSwitchContext>
 800a768:	f04f 0000 	mov.w	r0, #0
 800a76c:	f380 8811 	msr	BASEPRI, r0
 800a770:	bc09      	pop	{r0, r3}
 800a772:	6819      	ldr	r1, [r3, #0]
 800a774:	6808      	ldr	r0, [r1, #0]
 800a776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77a:	f01e 0f10 	tst.w	lr, #16
 800a77e:	bf08      	it	eq
 800a780:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a784:	f380 8809 	msr	PSP, r0
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop

0800a790 <pxCurrentTCBConst>:
 800a790:	20000928 	.word	0x20000928
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a794:	bf00      	nop
 800a796:	bf00      	nop

0800a798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	b672      	cpsid	i
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	b662      	cpsie	i
 800a7b2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a7b4:	f7fe ff02 	bl	80095bc <xTaskIncrementTick>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d003      	beq.n	800a7c6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a7be:	4b06      	ldr	r3, [pc, #24]	; (800a7d8 <SysTick_Handler+0x40>)
 800a7c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7c4:	601a      	str	r2, [r3, #0]
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a7d0:	bf00      	nop
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	e000ed04 	.word	0xe000ed04

0800a7dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a7e0:	4b0b      	ldr	r3, [pc, #44]	; (800a810 <vPortSetupTimerInterrupt+0x34>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a7e6:	4b0b      	ldr	r3, [pc, #44]	; (800a814 <vPortSetupTimerInterrupt+0x38>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a7ec:	4b0a      	ldr	r3, [pc, #40]	; (800a818 <vPortSetupTimerInterrupt+0x3c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a0a      	ldr	r2, [pc, #40]	; (800a81c <vPortSetupTimerInterrupt+0x40>)
 800a7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7f6:	099b      	lsrs	r3, r3, #6
 800a7f8:	4a09      	ldr	r2, [pc, #36]	; (800a820 <vPortSetupTimerInterrupt+0x44>)
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a7fe:	4b04      	ldr	r3, [pc, #16]	; (800a810 <vPortSetupTimerInterrupt+0x34>)
 800a800:	2207      	movs	r2, #7
 800a802:	601a      	str	r2, [r3, #0]
}
 800a804:	bf00      	nop
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	e000e010 	.word	0xe000e010
 800a814:	e000e018 	.word	0xe000e018
 800a818:	20000000 	.word	0x20000000
 800a81c:	10624dd3 	.word	0x10624dd3
 800a820:	e000e014 	.word	0xe000e014

0800a824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a834 <vPortEnableVFP+0x10>
 800a828:	6801      	ldr	r1, [r0, #0]
 800a82a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a82e:	6001      	str	r1, [r0, #0]
 800a830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a832:	bf00      	nop
 800a834:	e000ed88 	.word	0xe000ed88

0800a838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a83e:	f3ef 8305 	mrs	r3, IPSR
 800a842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2b0f      	cmp	r3, #15
 800a848:	d915      	bls.n	800a876 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a84a:	4a18      	ldr	r2, [pc, #96]	; (800a8ac <vPortValidateInterruptPriority+0x74>)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	4413      	add	r3, r2
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a854:	4b16      	ldr	r3, [pc, #88]	; (800a8b0 <vPortValidateInterruptPriority+0x78>)
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	7afa      	ldrb	r2, [r7, #11]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d20b      	bcs.n	800a876 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a862:	b672      	cpsid	i
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	b662      	cpsie	i
 800a872:	607b      	str	r3, [r7, #4]
 800a874:	e7fe      	b.n	800a874 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a876:	4b0f      	ldr	r3, [pc, #60]	; (800a8b4 <vPortValidateInterruptPriority+0x7c>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a87e:	4b0e      	ldr	r3, [pc, #56]	; (800a8b8 <vPortValidateInterruptPriority+0x80>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	429a      	cmp	r2, r3
 800a884:	d90b      	bls.n	800a89e <vPortValidateInterruptPriority+0x66>
 800a886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88a:	b672      	cpsid	i
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	b662      	cpsie	i
 800a89a:	603b      	str	r3, [r7, #0]
 800a89c:	e7fe      	b.n	800a89c <vPortValidateInterruptPriority+0x64>
	}
 800a89e:	bf00      	nop
 800a8a0:	3714      	adds	r7, #20
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	e000e3f0 	.word	0xe000e3f0
 800a8b0:	20000f54 	.word	0x20000f54
 800a8b4:	e000ed0c 	.word	0xe000ed0c
 800a8b8:	20000f58 	.word	0x20000f58

0800a8bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b08a      	sub	sp, #40	; 0x28
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a8c8:	f7fe fdbc 	bl	8009444 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a8cc:	4b5c      	ldr	r3, [pc, #368]	; (800aa40 <pvPortMalloc+0x184>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d101      	bne.n	800a8d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a8d4:	f000 f91a 	bl	800ab0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a8d8:	4b5a      	ldr	r3, [pc, #360]	; (800aa44 <pvPortMalloc+0x188>)
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4013      	ands	r3, r2
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f040 8090 	bne.w	800aa06 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d01e      	beq.n	800a92a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a8ec:	2208      	movs	r2, #8
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f003 0307 	and.w	r3, r3, #7
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d015      	beq.n	800a92a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f023 0307 	bic.w	r3, r3, #7
 800a904:	3308      	adds	r3, #8
 800a906:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f003 0307 	and.w	r3, r3, #7
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00b      	beq.n	800a92a <pvPortMalloc+0x6e>
 800a912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a916:	b672      	cpsid	i
 800a918:	f383 8811 	msr	BASEPRI, r3
 800a91c:	f3bf 8f6f 	isb	sy
 800a920:	f3bf 8f4f 	dsb	sy
 800a924:	b662      	cpsie	i
 800a926:	617b      	str	r3, [r7, #20]
 800a928:	e7fe      	b.n	800a928 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d06a      	beq.n	800aa06 <pvPortMalloc+0x14a>
 800a930:	4b45      	ldr	r3, [pc, #276]	; (800aa48 <pvPortMalloc+0x18c>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	429a      	cmp	r2, r3
 800a938:	d865      	bhi.n	800aa06 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a93a:	4b44      	ldr	r3, [pc, #272]	; (800aa4c <pvPortMalloc+0x190>)
 800a93c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a93e:	4b43      	ldr	r3, [pc, #268]	; (800aa4c <pvPortMalloc+0x190>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a944:	e004      	b.n	800a950 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	429a      	cmp	r2, r3
 800a958:	d903      	bls.n	800a962 <pvPortMalloc+0xa6>
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1f1      	bne.n	800a946 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a962:	4b37      	ldr	r3, [pc, #220]	; (800aa40 <pvPortMalloc+0x184>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a968:	429a      	cmp	r2, r3
 800a96a:	d04c      	beq.n	800aa06 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a96c:	6a3b      	ldr	r3, [r7, #32]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2208      	movs	r2, #8
 800a972:	4413      	add	r3, r2
 800a974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	6a3b      	ldr	r3, [r7, #32]
 800a97c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a980:	685a      	ldr	r2, [r3, #4]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	1ad2      	subs	r2, r2, r3
 800a986:	2308      	movs	r3, #8
 800a988:	005b      	lsls	r3, r3, #1
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d920      	bls.n	800a9d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a98e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	4413      	add	r3, r2
 800a994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	f003 0307 	and.w	r3, r3, #7
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00b      	beq.n	800a9b8 <pvPortMalloc+0xfc>
 800a9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a4:	b672      	cpsid	i
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	b662      	cpsie	i
 800a9b4:	613b      	str	r3, [r7, #16]
 800a9b6:	e7fe      	b.n	800a9b6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ba:	685a      	ldr	r2, [r3, #4]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	1ad2      	subs	r2, r2, r3
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a9ca:	69b8      	ldr	r0, [r7, #24]
 800a9cc:	f000 f900 	bl	800abd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a9d0:	4b1d      	ldr	r3, [pc, #116]	; (800aa48 <pvPortMalloc+0x18c>)
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	4a1b      	ldr	r2, [pc, #108]	; (800aa48 <pvPortMalloc+0x18c>)
 800a9dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a9de:	4b1a      	ldr	r3, [pc, #104]	; (800aa48 <pvPortMalloc+0x18c>)
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	4b1b      	ldr	r3, [pc, #108]	; (800aa50 <pvPortMalloc+0x194>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d203      	bcs.n	800a9f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a9ea:	4b17      	ldr	r3, [pc, #92]	; (800aa48 <pvPortMalloc+0x18c>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a18      	ldr	r2, [pc, #96]	; (800aa50 <pvPortMalloc+0x194>)
 800a9f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f4:	685a      	ldr	r2, [r3, #4]
 800a9f6:	4b13      	ldr	r3, [pc, #76]	; (800aa44 <pvPortMalloc+0x188>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	431a      	orrs	r2, r3
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	2200      	movs	r2, #0
 800aa04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa06:	f7fe fd2b 	bl	8009460 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d101      	bne.n	800aa14 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800aa10:	f7f5 fda8 	bl	8000564 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	f003 0307 	and.w	r3, r3, #7
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00b      	beq.n	800aa36 <pvPortMalloc+0x17a>
 800aa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa22:	b672      	cpsid	i
 800aa24:	f383 8811 	msr	BASEPRI, r3
 800aa28:	f3bf 8f6f 	isb	sy
 800aa2c:	f3bf 8f4f 	dsb	sy
 800aa30:	b662      	cpsie	i
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	e7fe      	b.n	800aa34 <pvPortMalloc+0x178>
	return pvReturn;
 800aa36:	69fb      	ldr	r3, [r7, #28]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3728      	adds	r7, #40	; 0x28
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	20008f64 	.word	0x20008f64
 800aa44:	20008f70 	.word	0x20008f70
 800aa48:	20008f68 	.word	0x20008f68
 800aa4c:	20008f5c 	.word	0x20008f5c
 800aa50:	20008f6c 	.word	0x20008f6c

0800aa54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d04a      	beq.n	800aafc <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa66:	2308      	movs	r3, #8
 800aa68:	425b      	negs	r3, r3
 800aa6a:	697a      	ldr	r2, [r7, #20]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	685a      	ldr	r2, [r3, #4]
 800aa78:	4b22      	ldr	r3, [pc, #136]	; (800ab04 <vPortFree+0xb0>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4013      	ands	r3, r2
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10b      	bne.n	800aa9a <vPortFree+0x46>
 800aa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa86:	b672      	cpsid	i
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	b662      	cpsie	i
 800aa96:	60fb      	str	r3, [r7, #12]
 800aa98:	e7fe      	b.n	800aa98 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00b      	beq.n	800aaba <vPortFree+0x66>
 800aaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa6:	b672      	cpsid	i
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	b662      	cpsie	i
 800aab6:	60bb      	str	r3, [r7, #8]
 800aab8:	e7fe      	b.n	800aab8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	4b11      	ldr	r3, [pc, #68]	; (800ab04 <vPortFree+0xb0>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4013      	ands	r3, r2
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d019      	beq.n	800aafc <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d115      	bne.n	800aafc <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	685a      	ldr	r2, [r3, #4]
 800aad4:	4b0b      	ldr	r3, [pc, #44]	; (800ab04 <vPortFree+0xb0>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	43db      	mvns	r3, r3
 800aada:	401a      	ands	r2, r3
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aae0:	f7fe fcb0 	bl	8009444 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	685a      	ldr	r2, [r3, #4]
 800aae8:	4b07      	ldr	r3, [pc, #28]	; (800ab08 <vPortFree+0xb4>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4413      	add	r3, r2
 800aaee:	4a06      	ldr	r2, [pc, #24]	; (800ab08 <vPortFree+0xb4>)
 800aaf0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aaf2:	6938      	ldr	r0, [r7, #16]
 800aaf4:	f000 f86c 	bl	800abd0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800aaf8:	f7fe fcb2 	bl	8009460 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aafc:	bf00      	nop
 800aafe:	3718      	adds	r7, #24
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	20008f70 	.word	0x20008f70
 800ab08:	20008f68 	.word	0x20008f68

0800ab0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab18:	4b27      	ldr	r3, [pc, #156]	; (800abb8 <prvHeapInit+0xac>)
 800ab1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f003 0307 	and.w	r3, r3, #7
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d00c      	beq.n	800ab40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	3307      	adds	r3, #7
 800ab2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f023 0307 	bic.w	r3, r3, #7
 800ab32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	1ad3      	subs	r3, r2, r3
 800ab3a:	4a1f      	ldr	r2, [pc, #124]	; (800abb8 <prvHeapInit+0xac>)
 800ab3c:	4413      	add	r3, r2
 800ab3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab44:	4a1d      	ldr	r2, [pc, #116]	; (800abbc <prvHeapInit+0xb0>)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab4a:	4b1c      	ldr	r3, [pc, #112]	; (800abbc <prvHeapInit+0xb0>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	4413      	add	r3, r2
 800ab56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab58:	2208      	movs	r2, #8
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	1a9b      	subs	r3, r3, r2
 800ab5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f023 0307 	bic.w	r3, r3, #7
 800ab66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	4a15      	ldr	r2, [pc, #84]	; (800abc0 <prvHeapInit+0xb4>)
 800ab6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab6e:	4b14      	ldr	r3, [pc, #80]	; (800abc0 <prvHeapInit+0xb4>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2200      	movs	r2, #0
 800ab74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab76:	4b12      	ldr	r3, [pc, #72]	; (800abc0 <prvHeapInit+0xb4>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	1ad2      	subs	r2, r2, r3
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab8c:	4b0c      	ldr	r3, [pc, #48]	; (800abc0 <prvHeapInit+0xb4>)
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	4a0a      	ldr	r2, [pc, #40]	; (800abc4 <prvHeapInit+0xb8>)
 800ab9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	4a09      	ldr	r2, [pc, #36]	; (800abc8 <prvHeapInit+0xbc>)
 800aba2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aba4:	4b09      	ldr	r3, [pc, #36]	; (800abcc <prvHeapInit+0xc0>)
 800aba6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800abaa:	601a      	str	r2, [r3, #0]
}
 800abac:	bf00      	nop
 800abae:	3714      	adds	r7, #20
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr
 800abb8:	20000f5c 	.word	0x20000f5c
 800abbc:	20008f5c 	.word	0x20008f5c
 800abc0:	20008f64 	.word	0x20008f64
 800abc4:	20008f6c 	.word	0x20008f6c
 800abc8:	20008f68 	.word	0x20008f68
 800abcc:	20008f70 	.word	0x20008f70

0800abd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800abd0:	b480      	push	{r7}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800abd8:	4b28      	ldr	r3, [pc, #160]	; (800ac7c <prvInsertBlockIntoFreeList+0xac>)
 800abda:	60fb      	str	r3, [r7, #12]
 800abdc:	e002      	b.n	800abe4 <prvInsertBlockIntoFreeList+0x14>
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	60fb      	str	r3, [r7, #12]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	429a      	cmp	r2, r3
 800abec:	d8f7      	bhi.n	800abde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	68ba      	ldr	r2, [r7, #8]
 800abf8:	4413      	add	r3, r2
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d108      	bne.n	800ac12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	685a      	ldr	r2, [r3, #4]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	441a      	add	r2, r3
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	441a      	add	r2, r3
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d118      	bne.n	800ac58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	4b15      	ldr	r3, [pc, #84]	; (800ac80 <prvInsertBlockIntoFreeList+0xb0>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d00d      	beq.n	800ac4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685a      	ldr	r2, [r3, #4]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	441a      	add	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	601a      	str	r2, [r3, #0]
 800ac4c:	e008      	b.n	800ac60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac4e:	4b0c      	ldr	r3, [pc, #48]	; (800ac80 <prvInsertBlockIntoFreeList+0xb0>)
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	601a      	str	r2, [r3, #0]
 800ac56:	e003      	b.n	800ac60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d002      	beq.n	800ac6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac6e:	bf00      	nop
 800ac70:	3714      	adds	r7, #20
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	20008f5c 	.word	0x20008f5c
 800ac80:	20008f64 	.word	0x20008f64

0800ac84 <__libc_init_array>:
 800ac84:	b570      	push	{r4, r5, r6, lr}
 800ac86:	4e0d      	ldr	r6, [pc, #52]	; (800acbc <__libc_init_array+0x38>)
 800ac88:	4c0d      	ldr	r4, [pc, #52]	; (800acc0 <__libc_init_array+0x3c>)
 800ac8a:	1ba4      	subs	r4, r4, r6
 800ac8c:	10a4      	asrs	r4, r4, #2
 800ac8e:	2500      	movs	r5, #0
 800ac90:	42a5      	cmp	r5, r4
 800ac92:	d109      	bne.n	800aca8 <__libc_init_array+0x24>
 800ac94:	4e0b      	ldr	r6, [pc, #44]	; (800acc4 <__libc_init_array+0x40>)
 800ac96:	4c0c      	ldr	r4, [pc, #48]	; (800acc8 <__libc_init_array+0x44>)
 800ac98:	f000 f82c 	bl	800acf4 <_init>
 800ac9c:	1ba4      	subs	r4, r4, r6
 800ac9e:	10a4      	asrs	r4, r4, #2
 800aca0:	2500      	movs	r5, #0
 800aca2:	42a5      	cmp	r5, r4
 800aca4:	d105      	bne.n	800acb2 <__libc_init_array+0x2e>
 800aca6:	bd70      	pop	{r4, r5, r6, pc}
 800aca8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800acac:	4798      	blx	r3
 800acae:	3501      	adds	r5, #1
 800acb0:	e7ee      	b.n	800ac90 <__libc_init_array+0xc>
 800acb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800acb6:	4798      	blx	r3
 800acb8:	3501      	adds	r5, #1
 800acba:	e7f2      	b.n	800aca2 <__libc_init_array+0x1e>
 800acbc:	0800ca54 	.word	0x0800ca54
 800acc0:	0800ca54 	.word	0x0800ca54
 800acc4:	0800ca54 	.word	0x0800ca54
 800acc8:	0800ca58 	.word	0x0800ca58

0800accc <memcpy>:
 800accc:	b510      	push	{r4, lr}
 800acce:	1e43      	subs	r3, r0, #1
 800acd0:	440a      	add	r2, r1
 800acd2:	4291      	cmp	r1, r2
 800acd4:	d100      	bne.n	800acd8 <memcpy+0xc>
 800acd6:	bd10      	pop	{r4, pc}
 800acd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ace0:	e7f7      	b.n	800acd2 <memcpy+0x6>

0800ace2 <memset>:
 800ace2:	4402      	add	r2, r0
 800ace4:	4603      	mov	r3, r0
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d100      	bne.n	800acec <memset+0xa>
 800acea:	4770      	bx	lr
 800acec:	f803 1b01 	strb.w	r1, [r3], #1
 800acf0:	e7f9      	b.n	800ace6 <memset+0x4>
	...

0800acf4 <_init>:
 800acf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf6:	bf00      	nop
 800acf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acfa:	bc08      	pop	{r3}
 800acfc:	469e      	mov	lr, r3
 800acfe:	4770      	bx	lr

0800ad00 <_fini>:
 800ad00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad02:	bf00      	nop
 800ad04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad06:	bc08      	pop	{r3}
 800ad08:	469e      	mov	lr, r3
 800ad0a:	4770      	bx	lr
