
STM32F769_LCD_SDCARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d948  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ea0  0800db48  0800db48  0001db48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9e8  0800f9e8  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9e8  0800f9e8  0001f9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9f0  0800f9f0  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9f0  0800f9f0  0001f9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9f4  0800f9f4  0001f9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800f9f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000acc  200000a4  0800fa9c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b70  0800fa9c  00020b70  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c2b7  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000511a  00000000  00000000  0004c389  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021d8  00000000  00000000  000514a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f38  00000000  00000000  00053680  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354d3  00000000  00000000  000555b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e09b  00000000  00000000  0008aa8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012c9c8  00000000  00000000  000a8b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d54ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096a4  00000000  00000000  001d556c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a4 	.word	0x200000a4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800db30 	.word	0x0800db30

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000a8 	.word	0x200000a8
 800023c:	0800db30 	.word	0x0800db30

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
 80005f6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f003 f8d2 	bl	80037a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f8a4 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fb9c 	bl	8000d3c <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000604:	f000 f946 	bl	8000894 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8000608:	f000 f97c 	bl	8000904 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 800060c:	f000 fb48 	bl	8000ca0 <MX_FMC_Init>
  MX_LTDC_Init();
 8000610:	f000 fa78 	bl	8000b04 <MX_LTDC_Init>
  MX_SDMMC2_SD_Init();
 8000614:	f000 faf4 	bl	8000c00 <MX_SDMMC2_SD_Init>
  MX_USART1_UART_Init();
 8000618:	f000 fb12 	bl	8000c40 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800061c:	f00a fb14 	bl	800ac48 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000620:	f002 f911 	bl	8002846 <BSP_LCD_Init>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000624:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000628:	2000      	movs	r0, #0
 800062a:	f002 faa9 	bl	8002b80 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 800062e:	2000      	movs	r0, #0
 8000630:	f002 fb06 	bl	8002c40 <BSP_LCD_SelectLayer>

  /* Touchscreen initialization */
  if (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize()) == TS_ERROR) {
 8000634:	f002 fa8c 	bl	8002b50 <BSP_LCD_GetXSize>
 8000638:	4603      	mov	r3, r0
 800063a:	b29c      	uxth	r4, r3
 800063c:	f002 fa94 	bl	8002b68 <BSP_LCD_GetYSize>
 8000640:	4603      	mov	r3, r0
 8000642:	b29b      	uxth	r3, r3
 8000644:	4619      	mov	r1, r3
 8000646:	4620      	mov	r0, r4
 8000648:	f003 f84a 	bl	80036e0 <BSP_TS_Init>
	  //printf("BSP_TS_Init error\n");
  }

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	f002 fb52 	bl	8002cf8 <BSP_LCD_Clear>

  /* Set Touchscreen Demo1 description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000654:	4834      	ldr	r0, [pc, #208]	; (8000728 <main+0x138>)
 8000656:	f002 fb03 	bl	8002c60 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 40);
 800065a:	f002 fa79 	bl	8002b50 <BSP_LCD_GetXSize>
 800065e:	4603      	mov	r3, r0
 8000660:	b29a      	uxth	r2, r3
 8000662:	2328      	movs	r3, #40	; 0x28
 8000664:	2100      	movs	r1, #0
 8000666:	2000      	movs	r0, #0
 8000668:	f002 fc76 	bl	8002f58 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
 8000670:	f002 faf6 	bl	8002c60 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8000674:	482c      	ldr	r0, [pc, #176]	; (8000728 <main+0x138>)
 8000676:	f002 fb0b 	bl	8002c90 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 800067a:	482c      	ldr	r0, [pc, #176]	; (800072c <main+0x13c>)
 800067c:	f002 fb22 	bl	8002cc4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"Touchscreen basic test", CENTER_MODE);
 8000680:	2301      	movs	r3, #1
 8000682:	4a2b      	ldr	r2, [pc, #172]	; (8000730 <main+0x140>)
 8000684:	2100      	movs	r1, #0
 8000686:	2000      	movs	r0, #0
 8000688:	f002 fba2 	bl	8002dd0 <BSP_LCD_DisplayStringAt>

  if(BSP_SD_IsDetected() == SD_PRESENT) {
 800068c:	f00a fb60 	bl	800ad50 <BSP_SD_IsDetected>
 8000690:	4603      	mov	r3, r0
 8000692:	2b01      	cmp	r3, #1
 8000694:	d10e      	bne.n	80006b4 <main+0xc4>
	  HAL_UART_Transmit(&huart1, (uint8_t *)"SDCARD OK", 9, HAL_MAX_DELAY);
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	2209      	movs	r2, #9
 800069c:	4925      	ldr	r1, [pc, #148]	; (8000734 <main+0x144>)
 800069e:	4826      	ldr	r0, [pc, #152]	; (8000738 <main+0x148>)
 80006a0:	f009 f842 	bl	8009728 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t *) "\n\r", 2, HAL_MAX_DELAY);
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	2202      	movs	r2, #2
 80006aa:	4924      	ldr	r1, [pc, #144]	; (800073c <main+0x14c>)
 80006ac:	4822      	ldr	r0, [pc, #136]	; (8000738 <main+0x148>)
 80006ae:	f009 f83b 	bl	8009728 <HAL_UART_Transmit>
 80006b2:	e00d      	b.n	80006d0 <main+0xe0>

  } else {
	  HAL_UART_Transmit(&huart1, (uint8_t *)"SDCARD NOK", 10, HAL_MAX_DELAY);
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	220a      	movs	r2, #10
 80006ba:	4921      	ldr	r1, [pc, #132]	; (8000740 <main+0x150>)
 80006bc:	481e      	ldr	r0, [pc, #120]	; (8000738 <main+0x148>)
 80006be:	f009 f833 	bl	8009728 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t *) "\n\r", 2, HAL_MAX_DELAY);
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	2202      	movs	r2, #2
 80006c8:	491c      	ldr	r1, [pc, #112]	; (800073c <main+0x14c>)
 80006ca:	481b      	ldr	r0, [pc, #108]	; (8000738 <main+0x148>)
 80006cc:	f009 f82c 	bl	8009728 <HAL_UART_Transmit>
  FRESULT res;
  FATFS SDFatFs;
  char buff[256];


  res = BSP_SD_Init();
 80006d0:	f00a facc 	bl	800ac6c <BSP_SD_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
  if(res != FR_OK) {
 80006da:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <main+0xf6>
	  Error_Handler();
 80006e2:	f000 ff5b 	bl	800159c <Error_Handler>
  }

  res = f_mount(&SDFatFs, "", 1);
 80006e6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80006ea:	2201      	movs	r2, #1
 80006ec:	4915      	ldr	r1, [pc, #84]	; (8000744 <main+0x154>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f00b ffcc 	bl	800c68c <f_mount>
 80006f4:	4603      	mov	r3, r0
 80006f6:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
  if(res != FR_OK) {
 80006fa:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <main+0x116>
	  Error_Handler();
 8000702:	f000 ff4b 	bl	800159c <Error_Handler>
  }

  strcpy(buff, "/");
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	222f      	movs	r2, #47	; 0x2f
 800070a:	801a      	strh	r2, [r3, #0]
  res = scan_files(buff);
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fea6 	bl	8001460 <scan_files>
 8000714:	4603      	mov	r3, r0
 8000716:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
  if(res != FR_OK) {
 800071a:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <main+0x136>
	  Error_Handler();
 8000722:	f000 ff3b 	bl	800159c <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000726:	e7fe      	b.n	8000726 <main+0x136>
 8000728:	ff0000ff 	.word	0xff0000ff
 800072c:	2000002c 	.word	0x2000002c
 8000730:	0800db48 	.word	0x0800db48
 8000734:	0800db60 	.word	0x0800db60
 8000738:	20000498 	.word	0x20000498
 800073c:	0800db6c 	.word	0x0800db6c
 8000740:	0800db70 	.word	0x0800db70
 8000744:	0800db7c 	.word	0x0800db7c

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b0b8      	sub	sp, #224	; 0xe0
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000752:	2234      	movs	r2, #52	; 0x34
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f00c f93a 	bl	800c9d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	2290      	movs	r2, #144	; 0x90
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f00c f92b 	bl	800c9d0 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800077a:	f006 fc0b 	bl	8006f94 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b42      	ldr	r3, [pc, #264]	; (8000888 <SystemClock_Config+0x140>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	4a41      	ldr	r2, [pc, #260]	; (8000888 <SystemClock_Config+0x140>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	6413      	str	r3, [r2, #64]	; 0x40
 800078a:	4b3f      	ldr	r3, [pc, #252]	; (8000888 <SystemClock_Config+0x140>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000796:	4b3d      	ldr	r3, [pc, #244]	; (800088c <SystemClock_Config+0x144>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a3c      	ldr	r2, [pc, #240]	; (800088c <SystemClock_Config+0x144>)
 800079c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	4b3a      	ldr	r3, [pc, #232]	; (800088c <SystemClock_Config+0x144>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ae:	2301      	movs	r3, #1
 80007b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007bc:	2302      	movs	r3, #2
 80007be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007ca:	2319      	movs	r3, #25
 80007cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 80007d0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80007d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007de:	2304      	movs	r3, #4
 80007e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007e8:	4618      	mov	r0, r3
 80007ea:	f006 fc33 	bl	8007054 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80007f4:	f000 fed2 	bl	800159c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007f8:	f006 fbdc 	bl	8006fb4 <HAL_PWREx_EnableOverDrive>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000802:	f000 fecb 	bl	800159c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000806:	230f      	movs	r3, #15
 8000808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080c:	2302      	movs	r3, #2
 800080e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000818:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800081c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000824:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000828:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800082c:	2107      	movs	r1, #7
 800082e:	4618      	mov	r0, r3
 8000830:	f006 fe82 	bl	8007538 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800083a:	f000 feaf 	bl	800159c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <SystemClock_Config+0x148>)
 8000840:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDMMC2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000842:	23c0      	movs	r3, #192	; 0xc0
 8000844:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 800084a:	2303      	movs	r3, #3
 800084c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800084e:	2301      	movs	r3, #1
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000852:	2301      	movs	r3, #1
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000856:	2300      	movs	r3, #0
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800085a:	2300      	movs	r3, #0
 800085c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800085e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000862:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	4618      	mov	r0, r3
 8000872:	f007 f861 	bl	8007938 <HAL_RCCEx_PeriphCLKConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x138>
  {
    Error_Handler();
 800087c:	f000 fe8e 	bl	800159c <Error_Handler>
  }
}
 8000880:	bf00      	nop
 8000882:	37e0      	adds	r7, #224	; 0xe0
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40023800 	.word	0x40023800
 800088c:	40007000 	.word	0x40007000
 8000890:	04200048 	.word	0x04200048

08000894 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_DMA2D_Init+0x68>)
 800089a:	4a19      	ldr	r2, [pc, #100]	; (8000900 <MX_DMA2D_Init+0x6c>)
 800089c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008be:	2200      	movs	r2, #0
 80008c0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008d4:	4809      	ldr	r0, [pc, #36]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008d6:	f003 fa81 	bl	8003ddc <HAL_DMA2D_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 80008e0:	f000 fe5c 	bl	800159c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008e4:	2101      	movs	r1, #1
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008e8:	f003 fcf6 	bl	80042d8 <HAL_DMA2D_ConfigLayer>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 80008f2:	f000 fe53 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000518 	.word	0x20000518
 8000900:	4002b000 	.word	0x4002b000

08000904 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b0aa      	sub	sp, #168	; 0xa8
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800090a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000916:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800091a:	2224      	movs	r2, #36	; 0x24
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f00c f856 	bl	800c9d0 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000924:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
 8000934:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000936:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800093a:	2234      	movs	r2, #52	; 0x34
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f00c f846 	bl	800c9d0 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000944:	463b      	mov	r3, r7
 8000946:	222c      	movs	r2, #44	; 0x2c
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f00c f840 	bl	800c9d0 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000950:	4b6a      	ldr	r3, [pc, #424]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000952:	4a6b      	ldr	r2, [pc, #428]	; (8000b00 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000954:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000956:	4b69      	ldr	r3, [pc, #420]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800095c:	4b67      	ldr	r3, [pc, #412]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 800095e:	2204      	movs	r2, #4
 8000960:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000962:	4b66      	ldr	r3, [pc, #408]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000964:	2201      	movs	r2, #1
 8000966:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8000968:	2314      	movs	r3, #20
 800096a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800096e:	2301      	movs	r3, #1
 8000970:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800097a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800097e:	4619      	mov	r1, r3
 8000980:	485e      	ldr	r0, [pc, #376]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000982:	f003 fe2b 	bl	80045dc <HAL_DSI_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 800098c:	f000 fe06 	bl	800159c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009c2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80009c6:	4619      	mov	r1, r3
 80009c8:	484c      	ldr	r0, [pc, #304]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 80009ca:	f004 fd2b 	bl	8005424 <HAL_DSI_ConfigHostTimeouts>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 80009d4:	f000 fde2 	bl	800159c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80009d8:	231c      	movs	r3, #28
 80009da:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 80009dc:	2321      	movs	r3, #33	; 0x21
 80009de:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 80009e0:	230f      	movs	r3, #15
 80009e2:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 80009e4:	2319      	movs	r3, #25
 80009e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 10;
 80009ec:	230a      	movs	r3, #10
 80009ee:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80009f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009f4:	4619      	mov	r1, r3
 80009f6:	4841      	ldr	r0, [pc, #260]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 80009f8:	f004 fcaa 	bl	8005350 <HAL_DSI_ConfigPhyTimer>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000a02:	f000 fdcb 	bl	800159c <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a06:	2104      	movs	r1, #4
 8000a08:	483c      	ldr	r0, [pc, #240]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a0a:	f004 fc79 	bl	8005300 <HAL_DSI_ConfigFlowControl>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000a14:	f000 fdc2 	bl	800159c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a18:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a1c:	4837      	ldr	r0, [pc, #220]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a1e:	f004 febf 	bl	80057a0 <HAL_DSI_SetLowPowerRXFilter>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000a28:	f000 fdb8 	bl	800159c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4833      	ldr	r0, [pc, #204]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a30:	f003 ff62 	bl	80048f8 <HAL_DSI_ConfigErrorMonitor>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000a3a:	f000 fdaf 	bl	800159c <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a4e:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a54:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a60:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000a62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a66:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6c:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000a6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a72:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a78:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000a7a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a7e:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a84:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8e:	4619      	mov	r1, r3
 8000a90:	481a      	ldr	r0, [pc, #104]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a92:	f004 fbd7 	bl	8005244 <HAL_DSI_ConfigCommand>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000a9c:	f000 fd7e 	bl	800159c <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000aa4:	2305      	movs	r3, #5
 8000aa6:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 400;
 8000aa8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000aac:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_DSILINK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000ac6:	2340      	movs	r3, #64	; 0x40
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000aca:	2301      	movs	r3, #1
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480a      	ldr	r0, [pc, #40]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ad4:	f004 fadc 	bl	8005090 <HAL_DSI_ConfigAdaptedCommandMode>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_DSIHOST_DSI_Init+0x1de>
  {
    Error_Handler();
 8000ade:	f000 fd5d 	bl	800159c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ae6:	f004 f8aa 	bl	8004c3e <HAL_DSI_SetGenericVCID>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_DSIHOST_DSI_Init+0x1f0>
  {
    Error_Handler();
 8000af0:	f000 fd54 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	37a8      	adds	r7, #168	; 0xa8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000031c 	.word	0x2000031c
 8000b00:	40016c00 	.word	0x40016c00

08000b04 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2234      	movs	r2, #52	; 0x34
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f00b ff5d 	bl	800c9d0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b16:	4b38      	ldr	r3, [pc, #224]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b18:	4a38      	ldr	r2, [pc, #224]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b1a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b1c:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b22:	4b35      	ldr	r3, [pc, #212]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b28:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b2e:	4b32      	ldr	r3, [pc, #200]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000b34:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000b40:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000b46:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b4e:	22c9      	movs	r2, #201	; 0xc9
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000b52:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b54:	f240 12e1 	movw	r2, #481	; 0x1e1
 8000b58:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 202;
 8000b5a:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b5c:	22ca      	movs	r2, #202	; 0xca
 8000b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000b60:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b62:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000b66:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b68:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b70:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b80:	481d      	ldr	r0, [pc, #116]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b82:	f005 fe4d 	bl	8006820 <HAL_LTDC_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000b8c:	f000 fd06 	bl	800159c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000b94:	23c8      	movs	r3, #200	; 0xc8
 8000b96:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000b9c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ba0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000ba6:	23ff      	movs	r3, #255	; 0xff
 8000ba8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000bae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bb2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000bb8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 8000bbe:	23c8      	movs	r3, #200	; 0xc8
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8000bc2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000be2:	f005 ffaf 	bl	8006b44 <HAL_LTDC_ConfigLayer>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000bec:	f000 fcd6 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3738      	adds	r7, #56	; 0x38
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200003bc 	.word	0x200003bc
 8000bfc:	40016800 	.word	0x40016800

08000c00 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_SDMMC2_SD_Init+0x38>)
 8000c06:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <MX_SDMMC2_SD_Init+0x3c>)
 8000c08:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_SDMMC2_SD_Init+0x38>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_SDMMC2_SD_Init+0x38>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MX_SDMMC2_SD_Init+0x38>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_SDMMC2_SD_Init+0x38>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <MX_SDMMC2_SD_Init+0x38>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <MX_SDMMC2_SD_Init+0x38>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	20000338 	.word	0x20000338
 8000c3c:	40011c00 	.word	0x40011c00

08000c40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c46:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <MX_USART1_UART_Init+0x5c>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c84:	f008 fd02 	bl	800968c <HAL_UART_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c8e:	f000 fc85 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000498 	.word	0x20000498
 8000c9c:	40011000 	.word	0x40011000

08000ca0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
 8000cb4:	615a      	str	r2, [r3, #20]
 8000cb6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cba:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <MX_FMC_Init+0x98>)
 8000cbc:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK1;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_FMC_Init+0x94>)
 8000ccc:	2204      	movs	r2, #4
 8000cce:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cd8:	2240      	movs	r2, #64	; 0x40
 8000cda:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_FMC_Init+0x94>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000cfe:	2310      	movs	r3, #16
 8000d00:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000d02:	2310      	movs	r3, #16
 8000d04:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000d06:	2310      	movs	r3, #16
 8000d08:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000d0e:	2310      	movs	r3, #16
 8000d10:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000d12:	2310      	movs	r3, #16
 8000d14:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <MX_FMC_Init+0x94>)
 8000d1c:	f008 f9d2 	bl	80090c4 <HAL_SDRAM_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000d26:	f000 fc39 	bl	800159c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3720      	adds	r7, #32
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000464 	.word	0x20000464
 8000d38:	a0000140 	.word	0xa0000140

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b090      	sub	sp, #64	; 0x40
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d52:	4bac      	ldr	r3, [pc, #688]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4aab      	ldr	r2, [pc, #684]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4ba9      	ldr	r3, [pc, #676]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d6a:	4ba6      	ldr	r3, [pc, #664]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4aa5      	ldr	r2, [pc, #660]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4ba3      	ldr	r3, [pc, #652]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	4ba0      	ldr	r3, [pc, #640]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a9f      	ldr	r2, [pc, #636]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b9d      	ldr	r3, [pc, #628]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	623b      	str	r3, [r7, #32]
 8000d98:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9a:	4b9a      	ldr	r3, [pc, #616]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a99      	ldr	r2, [pc, #612]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000da0:	f043 0308 	orr.w	r3, r3, #8
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b97      	ldr	r3, [pc, #604]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	61fb      	str	r3, [r7, #28]
 8000db0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	4b94      	ldr	r3, [pc, #592]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a93      	ldr	r2, [pc, #588]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b91      	ldr	r3, [pc, #580]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	61bb      	str	r3, [r7, #24]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b8e      	ldr	r3, [pc, #568]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a8d      	ldr	r2, [pc, #564]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b8b      	ldr	r3, [pc, #556]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000de2:	4b88      	ldr	r3, [pc, #544]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a87      	ldr	r2, [pc, #540]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000de8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b85      	ldr	r3, [pc, #532]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dfa:	4b82      	ldr	r3, [pc, #520]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a81      	ldr	r2, [pc, #516]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b7f      	ldr	r3, [pc, #508]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e12:	4b7c      	ldr	r3, [pc, #496]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a7b      	ldr	r2, [pc, #492]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b79      	ldr	r3, [pc, #484]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e2a:	4b76      	ldr	r3, [pc, #472]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a75      	ldr	r2, [pc, #468]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e30:	f043 0320 	orr.w	r3, r3, #32
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b73      	ldr	r3, [pc, #460]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0320 	and.w	r3, r3, #32
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e42:	4b70      	ldr	r3, [pc, #448]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a6f      	ldr	r2, [pc, #444]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b6d      	ldr	r3, [pc, #436]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e60:	4869      	ldr	r0, [pc, #420]	; (8001008 <MX_GPIO_Init+0x2cc>)
 8000e62:	f004 ff97 	bl	8005d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_SCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8000e66:	2378      	movs	r3, #120	; 0x78
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000e76:	2306      	movs	r3, #6
 8000e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4862      	ldr	r0, [pc, #392]	; (800100c <MX_GPIO_Init+0x2d0>)
 8000e82:	f004 fcbb 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000e86:	2304      	movs	r3, #4
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e96:	2309      	movs	r3, #9
 8000e98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	485a      	ldr	r0, [pc, #360]	; (800100c <MX_GPIO_Init+0x2d0>)
 8000ea2:	f004 fcab 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000ea6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb8:	230b      	movs	r3, #11
 8000eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4853      	ldr	r0, [pc, #332]	; (8001010 <MX_GPIO_Init+0x2d4>)
 8000ec4:	f004 fc9a 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000ec8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ece:	2312      	movs	r3, #18
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eda:	2304      	movs	r3, #4
 8000edc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	484b      	ldr	r0, [pc, #300]	; (8001014 <MX_GPIO_Init+0x2d8>)
 8000ee6:	f004 fc89 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8000eea:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000efc:	230a      	movs	r3, #10
 8000efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f04:	4619      	mov	r1, r3
 8000f06:	4843      	ldr	r0, [pc, #268]	; (8001014 <MX_GPIO_Init+0x2d8>)
 8000f08:	f004 fc78 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RX_Pin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8000f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f1e:	2308      	movs	r3, #8
 8000f20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f26:	4619      	mov	r1, r3
 8000f28:	483b      	ldr	r0, [pc, #236]	; (8001018 <MX_GPIO_Init+0x2dc>)
 8000f2a:	f004 fc67 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_Pin */
  GPIO_InitStruct.Pin = CEC_Pin;
 8000f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f34:	2312      	movs	r3, #18
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8000f40:	2304      	movs	r3, #4
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4834      	ldr	r0, [pc, #208]	; (800101c <MX_GPIO_Init+0x2e0>)
 8000f4c:	f004 fc56 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SDA_Pin */
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f54:	2312      	movs	r3, #18
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8000f60:	230b      	movs	r3, #11
 8000f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f68:	4619      	mov	r1, r3
 8000f6a:	482a      	ldr	r0, [pc, #168]	; (8001014 <MX_GPIO_Init+0x2d8>)
 8000f6c:	f004 fc46 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000f70:	2340      	movs	r3, #64	; 0x40
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f80:	230a      	movs	r3, #10
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4822      	ldr	r0, [pc, #136]	; (8001014 <MX_GPIO_Init+0x2d8>)
 8000f8c:	f004 fc36 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_USER1_Pin Audio_INT_Pin WIFI_RST_Pin ARD_D8_Pin 
                           LD_USER2_Pin ARD_D7_Pin ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin 
 8000f90:	f247 033b 	movw	r3, #28731	; 0x703b
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f96:	2300      	movs	r3, #0
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4818      	ldr	r0, [pc, #96]	; (8001008 <MX_GPIO_Init+0x2cc>)
 8000fa6:	f004 fc29 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN5_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 8000faa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4814      	ldr	r0, [pc, #80]	; (8001018 <MX_GPIO_Init+0x2dc>)
 8000fc8:	f004 fc18 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8000fcc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fde:	2309      	movs	r3, #9
 8000fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480b      	ldr	r0, [pc, #44]	; (8001018 <MX_GPIO_Init+0x2dc>)
 8000fea:	f004 fc07 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_SCK_Pin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8000fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001000:	2305      	movs	r3, #5
 8001002:	e00d      	b.n	8001020 <MX_GPIO_Init+0x2e4>
 8001004:	40023800 	.word	0x40023800
 8001008:	40022400 	.word	0x40022400
 800100c:	40021000 	.word	0x40021000
 8001010:	40021800 	.word	0x40021800
 8001014:	40020400 	.word	0x40020400
 8001018:	40020800 	.word	0x40020800
 800101c:	40020000 	.word	0x40020000
 8001020:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001026:	4619      	mov	r1, r3
 8001028:	48bb      	ldr	r0, [pc, #748]	; (8001318 <MX_GPIO_Init+0x5dc>)
 800102a:	f004 fbe7 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin uSD_Detect_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 800102e:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001034:	2300      	movs	r3, #0
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800103c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001040:	4619      	mov	r1, r3
 8001042:	48b6      	ldr	r0, [pc, #728]	; (800131c <MX_GPIO_Init+0x5e0>)
 8001044:	f004 fbda 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin 
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin 
 8001048:	23f8      	movs	r3, #248	; 0xf8
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104c:	2300      	movs	r3, #0
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001058:	4619      	mov	r1, r3
 800105a:	48b1      	ldr	r0, [pc, #708]	; (8001320 <MX_GPIO_Init+0x5e4>)
 800105c:	f004 fbce 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8001060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8001072:	2307      	movs	r3, #7
 8001074:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800107a:	4619      	mov	r1, r3
 800107c:	48a9      	ldr	r0, [pc, #676]	; (8001324 <MX_GPIO_Init+0x5e8>)
 800107e:	f004 fbbd 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8001082:	2330      	movs	r3, #48	; 0x30
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001086:	2300      	movs	r3, #0
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001092:	4619      	mov	r1, r3
 8001094:	48a4      	ldr	r0, [pc, #656]	; (8001328 <MX_GPIO_Init+0x5ec>)
 8001096:	f004 fbb1 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 800109a:	2308      	movs	r3, #8
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80010aa:	2303      	movs	r3, #3
 80010ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b2:	4619      	mov	r1, r3
 80010b4:	489c      	ldr	r0, [pc, #624]	; (8001328 <MX_GPIO_Init+0x5ec>)
 80010b6:	f004 fba1 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 80010ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010cc:	2305      	movs	r3, #5
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d4:	4619      	mov	r1, r3
 80010d6:	4890      	ldr	r0, [pc, #576]	; (8001318 <MX_GPIO_Init+0x5dc>)
 80010d8:	f004 fb90 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_RESET_Pin */
  GPIO_InitStruct.Pin = DSI_RESET_Pin;
 80010dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 80010ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f2:	4619      	mov	r1, r3
 80010f4:	488d      	ldr	r0, [pc, #564]	; (800132c <MX_GPIO_Init+0x5f0>)
 80010f6:	f004 fb81 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_TX_Pin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 80010fa:	2304      	movs	r3, #4
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800110a:	2308      	movs	r3, #8
 800110c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001112:	4619      	mov	r1, r3
 8001114:	4884      	ldr	r0, [pc, #528]	; (8001328 <MX_GPIO_Init+0x5ec>)
 8001116:	f004 fb71 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 800111a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800112c:	230a      	movs	r3, #10
 800112e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001134:	4619      	mov	r1, r3
 8001136:	4879      	ldr	r0, [pc, #484]	; (800131c <MX_GPIO_Init+0x5e0>)
 8001138:	f004 fb60 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CLK_Pin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 800113c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800114e:	2300      	movs	r3, #0
 8001150:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001156:	4619      	mov	r1, r3
 8001158:	486f      	ldr	r0, [pc, #444]	; (8001318 <MX_GPIO_Init+0x5dc>)
 800115a:	f004 fb4f 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800115e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001164:	4b72      	ldr	r3, [pc, #456]	; (8001330 <MX_GPIO_Init+0x5f4>)
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001170:	4619      	mov	r1, r3
 8001172:	486a      	ldr	r0, [pc, #424]	; (800131c <MX_GPIO_Init+0x5e0>)
 8001174:	f004 fb42 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8001178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800118a:	2302      	movs	r3, #2
 800118c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001192:	4619      	mov	r1, r3
 8001194:	4867      	ldr	r0, [pc, #412]	; (8001334 <MX_GPIO_Init+0x5f8>)
 8001196:	f004 fb31 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_RX_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 800119a:	23c0      	movs	r3, #192	; 0xc0
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011aa:	2308      	movs	r3, #8
 80011ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b2:	4619      	mov	r1, r3
 80011b4:	485f      	ldr	r0, [pc, #380]	; (8001334 <MX_GPIO_Init+0x5f8>)
 80011b6:	f004 fb21 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80011ba:	2310      	movs	r3, #16
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80011ca:	230a      	movs	r3, #10
 80011cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d2:	4619      	mov	r1, r3
 80011d4:	4858      	ldr	r0, [pc, #352]	; (8001338 <MX_GPIO_Init+0x5fc>)
 80011d6:	f004 fb11 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_MCLKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80011ea:	2306      	movs	r3, #6
 80011ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f2:	4619      	mov	r1, r3
 80011f4:	484b      	ldr	r0, [pc, #300]	; (8001324 <MX_GPIO_Init+0x5e8>)
 80011f6:	f004 fb01 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 80011fa:	2348      	movs	r3, #72	; 0x48
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001206:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800120a:	4619      	mov	r1, r3
 800120c:	4845      	ldr	r0, [pc, #276]	; (8001324 <MX_GPIO_Init+0x5e8>)
 800120e:	f004 faf5 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001222:	2303      	movs	r3, #3
 8001224:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800122a:	4619      	mov	r1, r3
 800122c:	4843      	ldr	r0, [pc, #268]	; (800133c <MX_GPIO_Init+0x600>)
 800122e:	f004 fae5 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8001232:	2340      	movs	r3, #64	; 0x40
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001242:	2303      	movs	r3, #3
 8001244:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124a:	4619      	mov	r1, r3
 800124c:	483b      	ldr	r0, [pc, #236]	; (800133c <MX_GPIO_Init+0x600>)
 800124e:	f004 fad5 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001252:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001258:	2303      	movs	r3, #3
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001260:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001264:	4619      	mov	r1, r3
 8001266:	4835      	ldr	r0, [pc, #212]	; (800133c <MX_GPIO_Init+0x600>)
 8001268:	f004 fac8 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_STP_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 800126c:	2301      	movs	r3, #1
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800127c:	230a      	movs	r3, #10
 800127e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001284:	4619      	mov	r1, r3
 8001286:	482b      	ldr	r0, [pc, #172]	; (8001334 <MX_GPIO_Init+0x5f8>)
 8001288:	f004 fab8 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800128c:	2332      	movs	r3, #50	; 0x32
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129c:	230b      	movs	r3, #11
 800129e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a4:	4619      	mov	r1, r3
 80012a6:	4823      	ldr	r0, [pc, #140]	; (8001334 <MX_GPIO_Init+0x5f8>)
 80012a8:	f004 faa8 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin;
 80012ac:	2304      	movs	r3, #4
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b0:	2303      	movs	r3, #3
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012bc:	4619      	mov	r1, r3
 80012be:	481d      	ldr	r0, [pc, #116]	; (8001334 <MX_GPIO_Init+0x5f8>)
 80012c0:	f004 fa9c 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012c4:	2304      	movs	r3, #4
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012d4:	2309      	movs	r3, #9
 80012d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012dc:	4619      	mov	r1, r3
 80012de:	4818      	ldr	r0, [pc, #96]	; (8001340 <MX_GPIO_Init+0x604>)
 80012e0:	f004 fa8c 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SCL_Pin */
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ea:	2312      	movs	r3, #18
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80012f6:	2304      	movs	r3, #4
 80012f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012fe:	4619      	mov	r1, r3
 8001300:	4809      	ldr	r0, [pc, #36]	; (8001328 <MX_GPIO_Init+0x5ec>)
 8001302:	f004 fa7b 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8001306:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	637b      	str	r3, [r7, #52]	; 0x34
 8001314:	e016      	b.n	8001344 <MX_GPIO_Init+0x608>
 8001316:	bf00      	nop
 8001318:	40020000 	.word	0x40020000
 800131c:	40022000 	.word	0x40022000
 8001320:	40022800 	.word	0x40022800
 8001324:	40021800 	.word	0x40021800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40022400 	.word	0x40022400
 8001330:	10120000 	.word	0x10120000
 8001334:	40020800 	.word	0x40020800
 8001338:	40021c00 	.word	0x40021c00
 800133c:	40021400 	.word	0x40021400
 8001340:	40020400 	.word	0x40020400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001348:	2309      	movs	r3, #9
 800134a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001350:	4619      	mov	r1, r3
 8001352:	483e      	ldr	r0, [pc, #248]	; (800144c <MX_GPIO_Init+0x710>)
 8001354:	f004 fa52 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001358:	2386      	movs	r3, #134	; 0x86
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001368:	230b      	movs	r3, #11
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001370:	4619      	mov	r1, r3
 8001372:	4837      	ldr	r0, [pc, #220]	; (8001450 <MX_GPIO_Init+0x714>)
 8001374:	f004 fa42 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001378:	2301      	movs	r3, #1
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137c:	4b35      	ldr	r3, [pc, #212]	; (8001454 <MX_GPIO_Init+0x718>)
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001388:	4619      	mov	r1, r3
 800138a:	4831      	ldr	r0, [pc, #196]	; (8001450 <MX_GPIO_Init+0x714>)
 800138c:	f004 fa36 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8001390:	2350      	movs	r3, #80	; 0x50
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001394:	2303      	movs	r3, #3
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a0:	4619      	mov	r1, r3
 80013a2:	482b      	ldr	r0, [pc, #172]	; (8001450 <MX_GPIO_Init+0x714>)
 80013a4:	f004 fa2a 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_TX_Pin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 80013a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80013ba:	230a      	movs	r3, #10
 80013bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c2:	4619      	mov	r1, r3
 80013c4:	4821      	ldr	r0, [pc, #132]	; (800144c <MX_GPIO_Init+0x710>)
 80013c6:	f004 fa19 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ce:	2300      	movs	r3, #0
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013da:	4619      	mov	r1, r3
 80013dc:	481e      	ldr	r0, [pc, #120]	; (8001458 <MX_GPIO_Init+0x71c>)
 80013de:	f004 fa0d 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80013e2:	2328      	movs	r3, #40	; 0x28
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80013f2:	230a      	movs	r3, #10
 80013f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013fa:	4619      	mov	r1, r3
 80013fc:	4814      	ldr	r0, [pc, #80]	; (8001450 <MX_GPIO_Init+0x714>)
 80013fe:	f004 f9fd 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001402:	2340      	movs	r3, #64	; 0x40
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001412:	2309      	movs	r3, #9
 8001414:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800141a:	4619      	mov	r1, r3
 800141c:	480e      	ldr	r0, [pc, #56]	; (8001458 <MX_GPIO_Init+0x71c>)
 800141e:	f004 f9ed 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001422:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001434:	2305      	movs	r3, #5
 8001436:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143c:	4619      	mov	r1, r3
 800143e:	4807      	ldr	r0, [pc, #28]	; (800145c <MX_GPIO_Init+0x720>)
 8001440:	f004 f9dc 	bl	80057fc <HAL_GPIO_Init>

}
 8001444:	bf00      	nop
 8001446:	3740      	adds	r7, #64	; 0x40
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40020c00 	.word	0x40020c00
 8001450:	40020000 	.word	0x40020000
 8001454:	10110000 	.word	0x10110000
 8001458:	40021c00 	.word	0x40021c00
 800145c:	40020400 	.word	0x40020400

08001460 <scan_files>:

/* USER CODE BEGIN 4 */
FRESULT scan_files (
    char* path        /* Start node to be scanned (***also used as work area***) */
)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b091      	sub	sp, #68	; 0x44
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    static FILINFO fno;


    res = f_opendir(&dir, path);                       /* Open the directory */
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4618      	mov	r0, r3
 8001470:	f00b f952 	bl	800c718 <f_opendir>
 8001474:	4603      	mov	r3, r0
 8001476:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (res == FR_OK) {
 800147a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800147e:	2b00      	cmp	r3, #0
 8001480:	d168      	bne.n	8001554 <scan_files+0xf4>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	4936      	ldr	r1, [pc, #216]	; (8001560 <scan_files+0x100>)
 8001488:	4618      	mov	r0, r3
 800148a:	f00b f9de 	bl	800c84a <f_readdir>
 800148e:	4603      	mov	r3, r0
 8001490:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001494:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001498:	2b00      	cmp	r3, #0
 800149a:	d156      	bne.n	800154a <scan_files+0xea>
 800149c:	4b30      	ldr	r3, [pc, #192]	; (8001560 <scan_files+0x100>)
 800149e:	7a5b      	ldrb	r3, [r3, #9]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d052      	beq.n	800154a <scan_files+0xea>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 80014a4:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <scan_files+0x100>)
 80014a6:	7a1b      	ldrb	r3, [r3, #8]
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d033      	beq.n	8001518 <scan_files+0xb8>
                i = strlen(path);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7fe fec5 	bl	8000240 <strlen>
 80014b6:	63b8      	str	r0, [r7, #56]	; 0x38
                sprintf(&path[i], "/%s", fno.fname);
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014bc:	4413      	add	r3, r2
 80014be:	4a29      	ldr	r2, [pc, #164]	; (8001564 <scan_files+0x104>)
 80014c0:	4929      	ldr	r1, [pc, #164]	; (8001568 <scan_files+0x108>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	f00b faa4 	bl	800ca10 <siprintf>
                HAL_UART_Transmit(&huart1, &path[i], strlen(&path[i]), HAL_MAX_DELAY);
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014cc:	18d4      	adds	r4, r2, r3
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014d2:	4413      	add	r3, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe feb3 	bl	8000240 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	b29a      	uxth	r2, r3
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	4621      	mov	r1, r4
 80014e4:	4821      	ldr	r0, [pc, #132]	; (800156c <scan_files+0x10c>)
 80014e6:	f008 f91f 	bl	8009728 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart1, (uint8_t *) "\n\r", 2, HAL_MAX_DELAY);
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	2202      	movs	r2, #2
 80014f0:	491f      	ldr	r1, [pc, #124]	; (8001570 <scan_files+0x110>)
 80014f2:	481e      	ldr	r0, [pc, #120]	; (800156c <scan_files+0x10c>)
 80014f4:	f008 f918 	bl	8009728 <HAL_UART_Transmit>
                res = scan_files(path);                    /* Enter the directory */
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ffb1 	bl	8001460 <scan_files>
 80014fe:	4603      	mov	r3, r0
 8001500:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                if (res != FR_OK) break;
 8001504:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001508:	2b00      	cmp	r3, #0
 800150a:	d11d      	bne.n	8001548 <scan_files+0xe8>
                path[i] = 0;
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001510:	4413      	add	r3, r2
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	e7b4      	b.n	8001482 <scan_files+0x22>
            } else {                                       /* It is a file. */
                printf("%s/%s\n", path, fno.fname);
 8001518:	4a12      	ldr	r2, [pc, #72]	; (8001564 <scan_files+0x104>)
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4815      	ldr	r0, [pc, #84]	; (8001574 <scan_files+0x114>)
 800151e:	f00b fa5f 	bl	800c9e0 <iprintf>
                HAL_UART_Transmit(&huart1, fno.fname, strlen(fno.fname), HAL_MAX_DELAY);
 8001522:	4810      	ldr	r0, [pc, #64]	; (8001564 <scan_files+0x104>)
 8001524:	f7fe fe8c 	bl	8000240 <strlen>
 8001528:	4603      	mov	r3, r0
 800152a:	b29a      	uxth	r2, r3
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <scan_files+0x104>)
 8001532:	480e      	ldr	r0, [pc, #56]	; (800156c <scan_files+0x10c>)
 8001534:	f008 f8f8 	bl	8009728 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart1, (uint8_t *) "\n\r", 2, HAL_MAX_DELAY);
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
 800153c:	2202      	movs	r2, #2
 800153e:	490c      	ldr	r1, [pc, #48]	; (8001570 <scan_files+0x110>)
 8001540:	480a      	ldr	r0, [pc, #40]	; (800156c <scan_files+0x10c>)
 8001542:	f008 f8f1 	bl	8009728 <HAL_UART_Transmit>
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001546:	e79c      	b.n	8001482 <scan_files+0x22>
                if (res != FR_OK) break;
 8001548:	bf00      	nop

            }
        }
        f_closedir(&dir);
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	4618      	mov	r0, r3
 8001550:	f00b f955 	bl	800c7fe <f_closedir>
    }

    return res;
 8001554:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8001558:	4618      	mov	r0, r3
 800155a:	3744      	adds	r7, #68	; 0x44
 800155c:	46bd      	mov	sp, r7
 800155e:	bd90      	pop	{r4, r7, pc}
 8001560:	200000c0 	.word	0x200000c0
 8001564:	200000c9 	.word	0x200000c9
 8001568:	0800db80 	.word	0x0800db80
 800156c:	20000498 	.word	0x20000498
 8001570:	0800db6c 	.word	0x0800db6c
 8001574:	0800db84 	.word	0x0800db84

08001578 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d101      	bne.n	800158e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800158a:	f002 f917 	bl	80037bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40001000 	.word	0x40001000

0800159c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_MspInit+0x44>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <HAL_MspInit+0x44>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <HAL_MspInit+0x44>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_MspInit+0x44>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <HAL_MspInit+0x44>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	6453      	str	r3, [r2, #68]	; 0x44
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_MspInit+0x44>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800

080015f4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <HAL_DMA2D_MspInit+0x44>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d113      	bne.n	800162e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_DMA2D_MspInit+0x48>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a0c      	ldr	r2, [pc, #48]	; (800163c <HAL_DMA2D_MspInit+0x48>)
 800160c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <HAL_DMA2D_MspInit+0x48>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	205a      	movs	r0, #90	; 0x5a
 8001624:	f002 f9e6 	bl	80039f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001628:	205a      	movs	r0, #90	; 0x5a
 800162a:	f002 f9ff 	bl	8003a2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	4002b000 	.word	0x4002b000
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a1b      	ldr	r2, [pc, #108]	; (80016cc <HAL_DSI_MspInit+0x8c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d12f      	bne.n	80016c2 <HAL_DSI_MspInit+0x82>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <HAL_DSI_MspInit+0x90>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	4a1a      	ldr	r2, [pc, #104]	; (80016d0 <HAL_DSI_MspInit+0x90>)
 8001668:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800166c:	6453      	str	r3, [r2, #68]	; 0x44
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_DSI_MspInit+0x90>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_DSI_MspInit+0x90>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <HAL_DSI_MspInit+0x90>)
 8001680:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_DSI_MspInit+0x90>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 8001692:	2304      	movs	r3, #4
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80016a2:	230d      	movs	r3, #13
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4809      	ldr	r0, [pc, #36]	; (80016d4 <HAL_DSI_MspInit+0x94>)
 80016ae:	f004 f8a5 	bl	80057fc <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2062      	movs	r0, #98	; 0x62
 80016b8:	f002 f99c 	bl	80039f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80016bc:	2062      	movs	r0, #98	; 0x62
 80016be:	f002 f9b5 	bl	8003a2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80016c2:	bf00      	nop
 80016c4:	3728      	adds	r7, #40	; 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40016c00 	.word	0x40016c00
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40022400 	.word	0x40022400

080016d8 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a09      	ldr	r2, [pc, #36]	; (800170c <HAL_DSI_MspDeInit+0x34>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d10c      	bne.n	8001704 <HAL_DSI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_DSI_MspDeInit+0x38>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_DSI_MspDeInit+0x38>)
 80016f0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(DSIHOST_TE_GPIO_Port, DSIHOST_TE_Pin);
 80016f6:	2104      	movs	r1, #4
 80016f8:	4806      	ldr	r0, [pc, #24]	; (8001714 <HAL_DSI_MspDeInit+0x3c>)
 80016fa:	f004 fa29 	bl	8005b50 <HAL_GPIO_DeInit>

    /* DSI interrupt DeInit */
    HAL_NVIC_DisableIRQ(DSI_IRQn);
 80016fe:	2062      	movs	r0, #98	; 0x62
 8001700:	f002 f9a2 	bl	8003a48 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40016c00 	.word	0x40016c00
 8001710:	40023800 	.word	0x40023800
 8001714:	40022400 	.word	0x40022400

08001718 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0d      	ldr	r2, [pc, #52]	; (800175c <HAL_LTDC_MspInit+0x44>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d113      	bne.n	8001752 <HAL_LTDC_MspInit+0x3a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800172a:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <HAL_LTDC_MspInit+0x48>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	4a0c      	ldr	r2, [pc, #48]	; (8001760 <HAL_LTDC_MspInit+0x48>)
 8001730:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001734:	6453      	str	r3, [r2, #68]	; 0x44
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_LTDC_MspInit+0x48>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	2058      	movs	r0, #88	; 0x58
 8001748:	f002 f954 	bl	80039f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800174c:	2058      	movs	r0, #88	; 0x58
 800174e:	f002 f96d 	bl	8003a2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40016800 	.word	0x40016800
 8001760:	40023800 	.word	0x40023800

08001764 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	; 0x30
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a33      	ldr	r2, [pc, #204]	; (8001850 <HAL_SD_MspInit+0xec>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d160      	bne.n	8001848 <HAL_SD_MspInit+0xe4>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8001786:	4b33      	ldr	r3, [pc, #204]	; (8001854 <HAL_SD_MspInit+0xf0>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	4a32      	ldr	r2, [pc, #200]	; (8001854 <HAL_SD_MspInit+0xf0>)
 800178c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001790:	6453      	str	r3, [r2, #68]	; 0x44
 8001792:	4b30      	ldr	r3, [pc, #192]	; (8001854 <HAL_SD_MspInit+0xf0>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <HAL_SD_MspInit+0xf0>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a2c      	ldr	r2, [pc, #176]	; (8001854 <HAL_SD_MspInit+0xf0>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <HAL_SD_MspInit+0xf0>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b6:	4b27      	ldr	r3, [pc, #156]	; (8001854 <HAL_SD_MspInit+0xf0>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a26      	ldr	r2, [pc, #152]	; (8001854 <HAL_SD_MspInit+0xf0>)
 80017bc:	f043 0308 	orr.w	r3, r3, #8
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b24      	ldr	r3, [pc, #144]	; (8001854 <HAL_SD_MspInit+0xf0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017ce:	4b21      	ldr	r3, [pc, #132]	; (8001854 <HAL_SD_MspInit+0xf0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a20      	ldr	r2, [pc, #128]	; (8001854 <HAL_SD_MspInit+0xf0>)
 80017d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <HAL_SD_MspInit+0xf0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0 
    */
    GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 80017e6:	2318      	movs	r3, #24
 80017e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80017f6:	230a      	movs	r3, #10
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	4619      	mov	r1, r3
 8001800:	4815      	ldr	r0, [pc, #84]	; (8001858 <HAL_SD_MspInit+0xf4>)
 8001802:	f003 fffb 	bl	80057fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8001806:	23c0      	movs	r3, #192	; 0xc0
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001816:	230b      	movs	r3, #11
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181a:	f107 031c 	add.w	r3, r7, #28
 800181e:	4619      	mov	r1, r3
 8001820:	480e      	ldr	r0, [pc, #56]	; (800185c <HAL_SD_MspInit+0xf8>)
 8001822:	f003 ffeb 	bl	80057fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8001826:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800182a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001838:	230b      	movs	r3, #11
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	4619      	mov	r1, r3
 8001842:	4807      	ldr	r0, [pc, #28]	; (8001860 <HAL_SD_MspInit+0xfc>)
 8001844:	f003 ffda 	bl	80057fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8001848:	bf00      	nop
 800184a:	3730      	adds	r7, #48	; 0x30
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40011c00 	.word	0x40011c00
 8001854:	40023800 	.word	0x40023800
 8001858:	40020400 	.word	0x40020400
 800185c:	40020c00 	.word	0x40020c00
 8001860:	40021800 	.word	0x40021800

08001864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a20      	ldr	r2, [pc, #128]	; (8001904 <HAL_UART_MspInit+0xa0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d139      	bne.n	80018fa <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_UART_MspInit+0xa4>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	4a1f      	ldr	r2, [pc, #124]	; (8001908 <HAL_UART_MspInit+0xa4>)
 800188c:	f043 0310 	orr.w	r3, r3, #16
 8001890:	6453      	str	r3, [r2, #68]	; 0x44
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <HAL_UART_MspInit+0xa4>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <HAL_UART_MspInit+0xa4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a19      	ldr	r2, [pc, #100]	; (8001908 <HAL_UART_MspInit+0xa4>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_UART_MspInit+0xa4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80018b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018c8:	2307      	movs	r3, #7
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	4619      	mov	r1, r3
 80018d2:	480e      	ldr	r0, [pc, #56]	; (800190c <HAL_UART_MspInit+0xa8>)
 80018d4:	f003 ff92 	bl	80057fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80018d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018ea:	2307      	movs	r3, #7
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_UART_MspInit+0xa8>)
 80018f6:	f003 ff81 	bl	80057fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018fa:	bf00      	nop
 80018fc:	3728      	adds	r7, #40	; 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40011000 	.word	0x40011000
 8001908:	40023800 	.word	0x40023800
 800190c:	40020000 	.word	0x40020000

08001910 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001924:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <HAL_FMC_MspInit+0x104>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d16f      	bne.n	8001a0c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800192c:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <HAL_FMC_MspInit+0x104>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001932:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <HAL_FMC_MspInit+0x108>)
 8001934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001936:	4a38      	ldr	r2, [pc, #224]	; (8001a18 <HAL_FMC_MspInit+0x108>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6393      	str	r3, [r2, #56]	; 0x38
 800193e:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <HAL_FMC_MspInit+0x108>)
 8001940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800194a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800194e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800195c:	230c      	movs	r3, #12
 800195e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	4619      	mov	r1, r3
 8001964:	482d      	ldr	r0, [pc, #180]	; (8001a1c <HAL_FMC_MspInit+0x10c>)
 8001966:	f003 ff49 	bl	80057fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin 
 800196a:	f248 1337 	movw	r3, #33079	; 0x8137
 800196e:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800197c:	230c      	movs	r3, #12
 800197e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	4619      	mov	r1, r3
 8001984:	4826      	ldr	r0, [pc, #152]	; (8001a20 <HAL_FMC_MspInit+0x110>)
 8001986:	f003 ff39 	bl	80057fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800198a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800198e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800199c:	230c      	movs	r3, #12
 800199e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	4619      	mov	r1, r3
 80019a4:	481f      	ldr	r0, [pc, #124]	; (8001a24 <HAL_FMC_MspInit+0x114>)
 80019a6:	f003 ff29 	bl	80057fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 80019aa:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80019ae:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin 
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019bc:	230c      	movs	r3, #12
 80019be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	4619      	mov	r1, r3
 80019c4:	4818      	ldr	r0, [pc, #96]	; (8001a28 <HAL_FMC_MspInit+0x118>)
 80019c6:	f003 ff19 	bl	80057fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80019ca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80019ce:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019dc:	230c      	movs	r3, #12
 80019de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	4811      	ldr	r0, [pc, #68]	; (8001a2c <HAL_FMC_MspInit+0x11c>)
 80019e6:	f003 ff09 	bl	80057fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin 
 80019ea:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80019ee:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin 
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019fc:	230c      	movs	r3, #12
 80019fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	4619      	mov	r1, r3
 8001a04:	480a      	ldr	r0, [pc, #40]	; (8001a30 <HAL_FMC_MspInit+0x120>)
 8001a06:	f003 fef9 	bl	80057fc <HAL_GPIO_Init>
 8001a0a:	e000      	b.n	8001a0e <HAL_FMC_MspInit+0xfe>
    return;
 8001a0c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200000d8 	.word	0x200000d8
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40021800 	.word	0x40021800
 8001a24:	40020c00 	.word	0x40020c00
 8001a28:	40022000 	.word	0x40022000
 8001a2c:	40021400 	.word	0x40021400
 8001a30:	40021c00 	.word	0x40021c00

08001a34 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001a3c:	f7ff ff68 	bl	8001910 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	; 0x30
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	2036      	movs	r0, #54	; 0x36
 8001a5e:	f001 ffc9 	bl	80039f4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001a62:	2036      	movs	r0, #54	; 0x36
 8001a64:	f001 ffe2 	bl	8003a2c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a68:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <HAL_InitTick+0xa0>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ae8 <HAL_InitTick+0xa0>)
 8001a6e:	f043 0310 	orr.w	r3, r3, #16
 8001a72:	6413      	str	r3, [r2, #64]	; 0x40
 8001a74:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <HAL_InitTick+0xa0>)
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f003 0310 	and.w	r3, r3, #16
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a80:	f107 0210 	add.w	r2, r7, #16
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f005 ff22 	bl	80078d4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001a90:	f005 fef8 	bl	8007884 <HAL_RCC_GetPCLK1Freq>
 8001a94:	4603      	mov	r3, r0
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9c:	4a13      	ldr	r2, [pc, #76]	; (8001aec <HAL_InitTick+0xa4>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	0c9b      	lsrs	r3, r3, #18
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_InitTick+0xa8>)
 8001aaa:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <HAL_InitTick+0xac>)
 8001aac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_InitTick+0xa8>)
 8001ab0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ab4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <HAL_InitTick+0xa8>)
 8001ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_InitTick+0xa8>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_InitTick+0xa8>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ac8:	4809      	ldr	r0, [pc, #36]	; (8001af0 <HAL_InitTick+0xa8>)
 8001aca:	f007 fb7a 	bl	80091c2 <HAL_TIM_Base_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d104      	bne.n	8001ade <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001ad4:	4806      	ldr	r0, [pc, #24]	; (8001af0 <HAL_InitTick+0xa8>)
 8001ad6:	f007 fba9 	bl	800922c <HAL_TIM_Base_Start_IT>
 8001ada:	4603      	mov	r3, r0
 8001adc:	e000      	b.n	8001ae0 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3730      	adds	r7, #48	; 0x30
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	431bde83 	.word	0x431bde83
 8001af0:	20000570 	.word	0x20000570
 8001af4:	40001000 	.word	0x40001000

08001af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler+0x4>

08001b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <TIM6_DAC_IRQHandler+0x10>)
 8001b4e:	f007 fb97 	bl	8009280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000570 	.word	0x20000570

08001b5c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <LTDC_IRQHandler+0x10>)
 8001b62:	f004 ff2d 	bl	80069c0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200003bc 	.word	0x200003bc

08001b70 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <DMA2D_IRQHandler+0x10>)
 8001b76:	f002 fa9f 	bl	80040b8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000518 	.word	0x20000518

08001b84 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <DSI_IRQHandler+0x10>)
 8001b8a:	f002 ff71 	bl	8004a70 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	2000031c 	.word	0x2000031c

08001b98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e00a      	b.n	8001bc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001baa:	f3af 8000 	nop.w
 8001bae:	4601      	mov	r1, r0
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60ba      	str	r2, [r7, #8]
 8001bb6:	b2ca      	uxtb	r2, r1
 8001bb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dbf0      	blt.n	8001baa <_read+0x12>
	}

return len;
 8001bc8:	687b      	ldr	r3, [r7, #4]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e009      	b.n	8001bf8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbf1      	blt.n	8001be4 <_write+0x12>
	}
	return len;
 8001c00:	687b      	ldr	r3, [r7, #4]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_close>:

int _close(int file)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
	return -1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c32:	605a      	str	r2, [r3, #4]
	return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_isatty>:

int _isatty(int file)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
	return 1;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
	return 0;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <_sbrk+0x50>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x16>
		heap_end = &end;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <_sbrk+0x50>)
 8001c86:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <_sbrk+0x54>)
 8001c88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <_sbrk+0x50>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <_sbrk+0x50>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	466a      	mov	r2, sp
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d907      	bls.n	8001cae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c9e:	f00a fe6d 	bl	800c97c <__errno>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	230c      	movs	r3, #12
 8001ca6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cac:	e006      	b.n	8001cbc <_sbrk+0x48>
	}

	heap_end += incr;
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <_sbrk+0x50>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <_sbrk+0x50>)
 8001cb8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200000dc 	.word	0x200000dc
 8001cc8:	20000b70 	.word	0x20000b70

08001ccc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd0:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <SystemInit+0x5c>)
 8001cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd6:	4a14      	ldr	r2, [pc, #80]	; (8001d28 <SystemInit+0x5c>)
 8001cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <SystemInit+0x60>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a11      	ldr	r2, [pc, #68]	; (8001d2c <SystemInit+0x60>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <SystemInit+0x60>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <SystemInit+0x60>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	490d      	ldr	r1, [pc, #52]	; (8001d2c <SystemInit+0x60>)
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <SystemInit+0x64>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <SystemInit+0x60>)
 8001d00:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <SystemInit+0x68>)
 8001d02:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <SystemInit+0x60>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <SystemInit+0x60>)
 8001d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <SystemInit+0x60>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SystemInit+0x5c>)
 8001d18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d1c:	609a      	str	r2, [r3, #8]
#endif
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	fef6ffff 	.word	0xfef6ffff
 8001d34:	24003010 	.word	0x24003010

08001d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d3e:	e003      	b.n	8001d48 <LoopCopyDataInit>

08001d40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d46:	3104      	adds	r1, #4

08001d48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d48:	480b      	ldr	r0, [pc, #44]	; (8001d78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d50:	d3f6      	bcc.n	8001d40 <CopyDataInit>
  ldr  r2, =_sbss
 8001d52:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d54:	e002      	b.n	8001d5c <LoopFillZerobss>

08001d56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d58:	f842 3b04 	str.w	r3, [r2], #4

08001d5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d60:	d3f9      	bcc.n	8001d56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d62:	f7ff ffb3 	bl	8001ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d66:	f00a fe0f 	bl	800c988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d6a:	f7fe fc41 	bl	80005f0 <main>
  bx  lr    
 8001d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d70:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001d74:	0800f9f8 	.word	0x0800f9f8
  ldr  r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d7c:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8001d80:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 8001d84:	20000b70 	.word	0x20000b70

08001d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC_IRQHandler>
	...

08001d8c <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 f90d 	bl	8001fb8 <ft6x06_GetInstance>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	2bff      	cmp	r3, #255	; 0xff
 8001da6:	d10e      	bne.n	8001dc6 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8001da8:	2000      	movs	r0, #0
 8001daa:	f000 f905 	bl	8001fb8 <ft6x06_GetInstance>
 8001dae:	4603      	mov	r3, r0
 8001db0:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8001db2:	7bbb      	ldrb	r3, [r7, #14]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d806      	bhi.n	8001dc6 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8001db8:	7bbb      	ldrb	r3, [r7, #14]
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	b2d1      	uxtb	r1, r2
 8001dbe:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <ft6x06_Init+0x44>)
 8001dc0:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8001dc2:	f000 fcd5 	bl	8002770 <TS_IO_Init>
    }
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200000e0 	.word	0x200000e0

08001dd4 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8001df4:	f000 fcbc 	bl	8002770 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	21a8      	movs	r1, #168	; 0xa8
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 fcda 	bl	80027b8 <TS_IO_Read>
 8001e04:	4603      	mov	r3, r0
 8001e06:	b29b      	uxth	r3, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 f8bc 	bl	8001f9a <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8001e22:	88fb      	ldrh	r3, [r7, #6]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 f88d 	bl	8001f44 <ft6x06_TS_DisableIT>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2102      	movs	r1, #2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 fcb5 	bl	80027b8 <TS_IO_Read>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <ft6x06_TS_DetectTouch+0x50>)
 8001e70:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <ft6x06_TS_DetectTouch+0x50>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	b2db      	uxtb	r3, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200000e4 	.word	0x200000e4

08001e88 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <ft6x06_TS_GetXY+0x90>)
 8001e9c:	789a      	ldrb	r2, [r3, #2]
 8001e9e:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <ft6x06_TS_GetXY+0x90>)
 8001ea0:	785b      	ldrb	r3, [r3, #1]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d234      	bcs.n	8001f10 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <ft6x06_TS_GetXY+0x90>)
 8001ea8:	789b      	ldrb	r3, [r3, #2]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <ft6x06_TS_GetXY+0x2c>
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d003      	beq.n	8001eba <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8001eb2:	e005      	b.n	8001ec0 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8001eb8:	e002      	b.n	8001ec0 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8001eba:	2309      	movs	r3, #9
 8001ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8001ebe:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8001ec0:	89fb      	ldrh	r3, [r7, #14]
 8001ec2:	b2d8      	uxtb	r0, r3
 8001ec4:	f107 0210 	add.w	r2, r7, #16
 8001ec8:	7df9      	ldrb	r1, [r7, #23]
 8001eca:	2304      	movs	r3, #4
 8001ecc:	f000 fc92 	bl	80027f4 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8001ed0:	7c3b      	ldrb	r3, [r7, #16]
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001eda:	b21a      	sxth	r2, r3
 8001edc:	7c7b      	ldrb	r3, [r7, #17]
 8001ede:	b21b      	sxth	r3, r3
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8001eea:	7cbb      	ldrb	r3, [r7, #18]
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	b21b      	sxth	r3, r3
 8001ef0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001ef4:	b21a      	sxth	r2, r3
 8001ef6:	7cfb      	ldrb	r3, [r7, #19]
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	4313      	orrs	r3, r2
 8001efc:	b21b      	sxth	r3, r3
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8001f04:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <ft6x06_TS_GetXY+0x90>)
 8001f06:	789b      	ldrb	r3, [r3, #2]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	4b02      	ldr	r3, [pc, #8]	; (8001f18 <ft6x06_TS_GetXY+0x90>)
 8001f0e:	709a      	strb	r2, [r3, #2]
  }
}
 8001f10:	bf00      	nop
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200000e4 	.word	0x200000e4

08001f1c <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	21a4      	movs	r1, #164	; 0xa4
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fc24 	bl	8002784 <TS_IO_Write>
}
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	21a4      	movs	r1, #164	; 0xa4
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 fc10 	bl	8002784 <TS_IO_Write>
}
 8001f64:	bf00      	nop
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b085      	sub	sp, #20
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	e00b      	b.n	8001fe4 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <ft6x06_GetInstance+0x40>)
 8001fd0:	5cd3      	ldrb	r3, [r2, r3]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	88fa      	ldrh	r2, [r7, #6]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d101      	bne.n	8001fde <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	e006      	b.n	8001fec <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d9f0      	bls.n	8001fcc <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8001fea:	23ff      	movs	r3, #255	; 0xff
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	200000e0 	.word	0x200000e0

08001ffc <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002006:	49be      	ldr	r1, [pc, #760]	; (8002300 <OTM8009A_Init+0x304>)
 8002008:	2000      	movs	r0, #0
 800200a:	f000 ffff 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 800200e:	49bd      	ldr	r1, [pc, #756]	; (8002304 <OTM8009A_Init+0x308>)
 8002010:	2003      	movs	r0, #3
 8002012:	f000 fffb 	bl	800300c <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8002016:	49bc      	ldr	r1, [pc, #752]	; (8002308 <OTM8009A_Init+0x30c>)
 8002018:	2000      	movs	r0, #0
 800201a:	f000 fff7 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 800201e:	49bb      	ldr	r1, [pc, #748]	; (800230c <OTM8009A_Init+0x310>)
 8002020:	2002      	movs	r0, #2
 8002022:	f000 fff3 	bl	800300c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002026:	49b8      	ldr	r1, [pc, #736]	; (8002308 <OTM8009A_Init+0x30c>)
 8002028:	2000      	movs	r0, #0
 800202a:	f000 ffef 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 800202e:	49b8      	ldr	r1, [pc, #736]	; (8002310 <OTM8009A_Init+0x314>)
 8002030:	2000      	movs	r0, #0
 8002032:	f000 ffeb 	bl	800300c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8002036:	200a      	movs	r0, #10
 8002038:	f000 fbfa 	bl	8002830 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 800203c:	49b5      	ldr	r1, [pc, #724]	; (8002314 <OTM8009A_Init+0x318>)
 800203e:	2000      	movs	r0, #0
 8002040:	f000 ffe4 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8002044:	49b4      	ldr	r1, [pc, #720]	; (8002318 <OTM8009A_Init+0x31c>)
 8002046:	2000      	movs	r0, #0
 8002048:	f000 ffe0 	bl	800300c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800204c:	200a      	movs	r0, #10
 800204e:	f000 fbef 	bl	8002830 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8002052:	49b2      	ldr	r1, [pc, #712]	; (800231c <OTM8009A_Init+0x320>)
 8002054:	2000      	movs	r0, #0
 8002056:	f000 ffd9 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 800205a:	49b1      	ldr	r1, [pc, #708]	; (8002320 <OTM8009A_Init+0x324>)
 800205c:	2000      	movs	r0, #0
 800205e:	f000 ffd5 	bl	800300c <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8002062:	49b0      	ldr	r1, [pc, #704]	; (8002324 <OTM8009A_Init+0x328>)
 8002064:	2000      	movs	r0, #0
 8002066:	f000 ffd1 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800206a:	49af      	ldr	r1, [pc, #700]	; (8002328 <OTM8009A_Init+0x32c>)
 800206c:	2000      	movs	r0, #0
 800206e:	f000 ffcd 	bl	800300c <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8002072:	49ae      	ldr	r1, [pc, #696]	; (800232c <OTM8009A_Init+0x330>)
 8002074:	2000      	movs	r0, #0
 8002076:	f000 ffc9 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 800207a:	49ad      	ldr	r1, [pc, #692]	; (8002330 <OTM8009A_Init+0x334>)
 800207c:	2000      	movs	r0, #0
 800207e:	f000 ffc5 	bl	800300c <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002082:	499f      	ldr	r1, [pc, #636]	; (8002300 <OTM8009A_Init+0x304>)
 8002084:	2000      	movs	r0, #0
 8002086:	f000 ffc1 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 800208a:	49aa      	ldr	r1, [pc, #680]	; (8002334 <OTM8009A_Init+0x338>)
 800208c:	2000      	movs	r0, #0
 800208e:	f000 ffbd 	bl	800300c <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002092:	49a9      	ldr	r1, [pc, #676]	; (8002338 <OTM8009A_Init+0x33c>)
 8002094:	2000      	movs	r0, #0
 8002096:	f000 ffb9 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 800209a:	49a8      	ldr	r1, [pc, #672]	; (800233c <OTM8009A_Init+0x340>)
 800209c:	2000      	movs	r0, #0
 800209e:	f000 ffb5 	bl	800300c <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80020a2:	49a7      	ldr	r1, [pc, #668]	; (8002340 <OTM8009A_Init+0x344>)
 80020a4:	2000      	movs	r0, #0
 80020a6:	f000 ffb1 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80020aa:	49a6      	ldr	r1, [pc, #664]	; (8002344 <OTM8009A_Init+0x348>)
 80020ac:	2000      	movs	r0, #0
 80020ae:	f000 ffad 	bl	800300c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80020b2:	49a5      	ldr	r1, [pc, #660]	; (8002348 <OTM8009A_Init+0x34c>)
 80020b4:	2000      	movs	r0, #0
 80020b6:	f000 ffa9 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80020ba:	49a4      	ldr	r1, [pc, #656]	; (800234c <OTM8009A_Init+0x350>)
 80020bc:	2000      	movs	r0, #0
 80020be:	f000 ffa5 	bl	800300c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80020c2:	49a3      	ldr	r1, [pc, #652]	; (8002350 <OTM8009A_Init+0x354>)
 80020c4:	2000      	movs	r0, #0
 80020c6:	f000 ffa1 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80020ca:	4997      	ldr	r1, [pc, #604]	; (8002328 <OTM8009A_Init+0x32c>)
 80020cc:	2000      	movs	r0, #0
 80020ce:	f000 ff9d 	bl	800300c <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80020d2:	498b      	ldr	r1, [pc, #556]	; (8002300 <OTM8009A_Init+0x304>)
 80020d4:	2000      	movs	r0, #0
 80020d6:	f000 ff99 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80020da:	499e      	ldr	r1, [pc, #632]	; (8002354 <OTM8009A_Init+0x358>)
 80020dc:	2002      	movs	r0, #2
 80020de:	f000 ff95 	bl	800300c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80020e2:	499d      	ldr	r1, [pc, #628]	; (8002358 <OTM8009A_Init+0x35c>)
 80020e4:	2000      	movs	r0, #0
 80020e6:	f000 ff91 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 80020ea:	499c      	ldr	r1, [pc, #624]	; (800235c <OTM8009A_Init+0x360>)
 80020ec:	2000      	movs	r0, #0
 80020ee:	f000 ff8d 	bl	800300c <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 80020f2:	499b      	ldr	r1, [pc, #620]	; (8002360 <OTM8009A_Init+0x364>)
 80020f4:	2000      	movs	r0, #0
 80020f6:	f000 ff89 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80020fa:	499a      	ldr	r1, [pc, #616]	; (8002364 <OTM8009A_Init+0x368>)
 80020fc:	2000      	movs	r0, #0
 80020fe:	f000 ff85 	bl	800300c <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8002102:	4999      	ldr	r1, [pc, #612]	; (8002368 <OTM8009A_Init+0x36c>)
 8002104:	2000      	movs	r0, #0
 8002106:	f000 ff81 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800210a:	4998      	ldr	r1, [pc, #608]	; (800236c <OTM8009A_Init+0x370>)
 800210c:	2000      	movs	r0, #0
 800210e:	f000 ff7d 	bl	800300c <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002112:	4989      	ldr	r1, [pc, #548]	; (8002338 <OTM8009A_Init+0x33c>)
 8002114:	2000      	movs	r0, #0
 8002116:	f000 ff79 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800211a:	4995      	ldr	r1, [pc, #596]	; (8002370 <OTM8009A_Init+0x374>)
 800211c:	2000      	movs	r0, #0
 800211e:	f000 ff75 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8002122:	4987      	ldr	r1, [pc, #540]	; (8002340 <OTM8009A_Init+0x344>)
 8002124:	2000      	movs	r0, #0
 8002126:	f000 ff71 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800212a:	4992      	ldr	r1, [pc, #584]	; (8002374 <OTM8009A_Init+0x378>)
 800212c:	2000      	movs	r0, #0
 800212e:	f000 ff6d 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8002132:	4991      	ldr	r1, [pc, #580]	; (8002378 <OTM8009A_Init+0x37c>)
 8002134:	2000      	movs	r0, #0
 8002136:	f000 ff69 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800213a:	4990      	ldr	r1, [pc, #576]	; (800237c <OTM8009A_Init+0x380>)
 800213c:	2002      	movs	r0, #2
 800213e:	f000 ff65 	bl	800300c <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002142:	4971      	ldr	r1, [pc, #452]	; (8002308 <OTM8009A_Init+0x30c>)
 8002144:	2000      	movs	r0, #0
 8002146:	f000 ff61 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800214a:	498d      	ldr	r1, [pc, #564]	; (8002380 <OTM8009A_Init+0x384>)
 800214c:	2006      	movs	r0, #6
 800214e:	f000 ff5d 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002152:	498c      	ldr	r1, [pc, #560]	; (8002384 <OTM8009A_Init+0x388>)
 8002154:	2000      	movs	r0, #0
 8002156:	f000 ff59 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 800215a:	498b      	ldr	r1, [pc, #556]	; (8002388 <OTM8009A_Init+0x38c>)
 800215c:	200e      	movs	r0, #14
 800215e:	f000 ff55 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002162:	498a      	ldr	r1, [pc, #552]	; (800238c <OTM8009A_Init+0x390>)
 8002164:	2000      	movs	r0, #0
 8002166:	f000 ff51 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 800216a:	4989      	ldr	r1, [pc, #548]	; (8002390 <OTM8009A_Init+0x394>)
 800216c:	200e      	movs	r0, #14
 800216e:	f000 ff4d 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002172:	4988      	ldr	r1, [pc, #544]	; (8002394 <OTM8009A_Init+0x398>)
 8002174:	2000      	movs	r0, #0
 8002176:	f000 ff49 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 800217a:	4987      	ldr	r1, [pc, #540]	; (8002398 <OTM8009A_Init+0x39c>)
 800217c:	200a      	movs	r0, #10
 800217e:	f000 ff45 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002182:	4986      	ldr	r1, [pc, #536]	; (800239c <OTM8009A_Init+0x3a0>)
 8002184:	2000      	movs	r0, #0
 8002186:	f000 ff41 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 800218a:	4985      	ldr	r1, [pc, #532]	; (80023a0 <OTM8009A_Init+0x3a4>)
 800218c:	2000      	movs	r0, #0
 800218e:	f000 ff3d 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002192:	495d      	ldr	r1, [pc, #372]	; (8002308 <OTM8009A_Init+0x30c>)
 8002194:	2000      	movs	r0, #0
 8002196:	f000 ff39 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 800219a:	4982      	ldr	r1, [pc, #520]	; (80023a4 <OTM8009A_Init+0x3a8>)
 800219c:	200a      	movs	r0, #10
 800219e:	f000 ff35 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80021a2:	4981      	ldr	r1, [pc, #516]	; (80023a8 <OTM8009A_Init+0x3ac>)
 80021a4:	2000      	movs	r0, #0
 80021a6:	f000 ff31 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80021aa:	4980      	ldr	r1, [pc, #512]	; (80023ac <OTM8009A_Init+0x3b0>)
 80021ac:	200f      	movs	r0, #15
 80021ae:	f000 ff2d 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80021b2:	4974      	ldr	r1, [pc, #464]	; (8002384 <OTM8009A_Init+0x388>)
 80021b4:	2000      	movs	r0, #0
 80021b6:	f000 ff29 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80021ba:	497d      	ldr	r1, [pc, #500]	; (80023b0 <OTM8009A_Init+0x3b4>)
 80021bc:	200f      	movs	r0, #15
 80021be:	f000 ff25 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80021c2:	4972      	ldr	r1, [pc, #456]	; (800238c <OTM8009A_Init+0x390>)
 80021c4:	2000      	movs	r0, #0
 80021c6:	f000 ff21 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80021ca:	497a      	ldr	r1, [pc, #488]	; (80023b4 <OTM8009A_Init+0x3b8>)
 80021cc:	200a      	movs	r0, #10
 80021ce:	f000 ff1d 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80021d2:	4970      	ldr	r1, [pc, #448]	; (8002394 <OTM8009A_Init+0x398>)
 80021d4:	2000      	movs	r0, #0
 80021d6:	f000 ff19 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80021da:	4977      	ldr	r1, [pc, #476]	; (80023b8 <OTM8009A_Init+0x3bc>)
 80021dc:	200f      	movs	r0, #15
 80021de:	f000 ff15 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80021e2:	496e      	ldr	r1, [pc, #440]	; (800239c <OTM8009A_Init+0x3a0>)
 80021e4:	2000      	movs	r0, #0
 80021e6:	f000 ff11 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 80021ea:	4974      	ldr	r1, [pc, #464]	; (80023bc <OTM8009A_Init+0x3c0>)
 80021ec:	200f      	movs	r0, #15
 80021ee:	f000 ff0d 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 80021f2:	4973      	ldr	r1, [pc, #460]	; (80023c0 <OTM8009A_Init+0x3c4>)
 80021f4:	2000      	movs	r0, #0
 80021f6:	f000 ff09 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 80021fa:	4972      	ldr	r1, [pc, #456]	; (80023c4 <OTM8009A_Init+0x3c8>)
 80021fc:	200a      	movs	r0, #10
 80021fe:	f000 ff05 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8002202:	4971      	ldr	r1, [pc, #452]	; (80023c8 <OTM8009A_Init+0x3cc>)
 8002204:	2000      	movs	r0, #0
 8002206:	f000 ff01 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 800220a:	4970      	ldr	r1, [pc, #448]	; (80023cc <OTM8009A_Init+0x3d0>)
 800220c:	200a      	movs	r0, #10
 800220e:	f000 fefd 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002212:	493d      	ldr	r1, [pc, #244]	; (8002308 <OTM8009A_Init+0x30c>)
 8002214:	2000      	movs	r0, #0
 8002216:	f000 fef9 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 800221a:	496d      	ldr	r1, [pc, #436]	; (80023d0 <OTM8009A_Init+0x3d4>)
 800221c:	200a      	movs	r0, #10
 800221e:	f000 fef5 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8002222:	4961      	ldr	r1, [pc, #388]	; (80023a8 <OTM8009A_Init+0x3ac>)
 8002224:	2000      	movs	r0, #0
 8002226:	f000 fef1 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 800222a:	496a      	ldr	r1, [pc, #424]	; (80023d4 <OTM8009A_Init+0x3d8>)
 800222c:	200f      	movs	r0, #15
 800222e:	f000 feed 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002232:	4954      	ldr	r1, [pc, #336]	; (8002384 <OTM8009A_Init+0x388>)
 8002234:	2000      	movs	r0, #0
 8002236:	f000 fee9 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 800223a:	4967      	ldr	r1, [pc, #412]	; (80023d8 <OTM8009A_Init+0x3dc>)
 800223c:	200f      	movs	r0, #15
 800223e:	f000 fee5 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002242:	4952      	ldr	r1, [pc, #328]	; (800238c <OTM8009A_Init+0x390>)
 8002244:	2000      	movs	r0, #0
 8002246:	f000 fee1 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 800224a:	4964      	ldr	r1, [pc, #400]	; (80023dc <OTM8009A_Init+0x3e0>)
 800224c:	200a      	movs	r0, #10
 800224e:	f000 fedd 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002252:	4950      	ldr	r1, [pc, #320]	; (8002394 <OTM8009A_Init+0x398>)
 8002254:	2000      	movs	r0, #0
 8002256:	f000 fed9 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 800225a:	4961      	ldr	r1, [pc, #388]	; (80023e0 <OTM8009A_Init+0x3e4>)
 800225c:	200f      	movs	r0, #15
 800225e:	f000 fed5 	bl	800300c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002262:	494e      	ldr	r1, [pc, #312]	; (800239c <OTM8009A_Init+0x3a0>)
 8002264:	2000      	movs	r0, #0
 8002266:	f000 fed1 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 800226a:	495e      	ldr	r1, [pc, #376]	; (80023e4 <OTM8009A_Init+0x3e8>)
 800226c:	200f      	movs	r0, #15
 800226e:	f000 fecd 	bl	800300c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002272:	4931      	ldr	r1, [pc, #196]	; (8002338 <OTM8009A_Init+0x33c>)
 8002274:	2000      	movs	r0, #0
 8002276:	f000 fec9 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 800227a:	495b      	ldr	r1, [pc, #364]	; (80023e8 <OTM8009A_Init+0x3ec>)
 800227c:	2000      	movs	r0, #0
 800227e:	f000 fec5 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8002282:	495a      	ldr	r1, [pc, #360]	; (80023ec <OTM8009A_Init+0x3f0>)
 8002284:	2000      	movs	r0, #0
 8002286:	f000 fec1 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 800228a:	4959      	ldr	r1, [pc, #356]	; (80023f0 <OTM8009A_Init+0x3f4>)
 800228c:	2000      	movs	r0, #0
 800228e:	f000 febd 	bl	800300c <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8002292:	4958      	ldr	r1, [pc, #352]	; (80023f4 <OTM8009A_Init+0x3f8>)
 8002294:	2000      	movs	r0, #0
 8002296:	f000 feb9 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 800229a:	4957      	ldr	r1, [pc, #348]	; (80023f8 <OTM8009A_Init+0x3fc>)
 800229c:	2000      	movs	r0, #0
 800229e:	f000 feb5 	bl	800300c <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80022a2:	4917      	ldr	r1, [pc, #92]	; (8002300 <OTM8009A_Init+0x304>)
 80022a4:	2000      	movs	r0, #0
 80022a6:	f000 feb1 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80022aa:	4954      	ldr	r1, [pc, #336]	; (80023fc <OTM8009A_Init+0x400>)
 80022ac:	2003      	movs	r0, #3
 80022ae:	f000 fead 	bl	800300c <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80022b2:	4913      	ldr	r1, [pc, #76]	; (8002300 <OTM8009A_Init+0x304>)
 80022b4:	2000      	movs	r0, #0
 80022b6:	f000 fea9 	bl	800300c <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80022ba:	4911      	ldr	r1, [pc, #68]	; (8002300 <OTM8009A_Init+0x304>)
 80022bc:	2000      	movs	r0, #0
 80022be:	f000 fea5 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80022c2:	494f      	ldr	r1, [pc, #316]	; (8002400 <OTM8009A_Init+0x404>)
 80022c4:	2010      	movs	r0, #16
 80022c6:	f000 fea1 	bl	800300c <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80022ca:	490d      	ldr	r1, [pc, #52]	; (8002300 <OTM8009A_Init+0x304>)
 80022cc:	2000      	movs	r0, #0
 80022ce:	f000 fe9d 	bl	800300c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 80022d2:	494c      	ldr	r1, [pc, #304]	; (8002404 <OTM8009A_Init+0x408>)
 80022d4:	2010      	movs	r0, #16
 80022d6:	f000 fe99 	bl	800300c <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 80022da:	494b      	ldr	r1, [pc, #300]	; (8002408 <OTM8009A_Init+0x40c>)
 80022dc:	2000      	movs	r0, #0
 80022de:	f000 fe95 	bl	800300c <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 80022e2:	2078      	movs	r0, #120	; 0x78
 80022e4:	f000 faa4 	bl	8002830 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 8090 	beq.w	8002410 <OTM8009A_Init+0x414>
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d000      	beq.n	80022f6 <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 80022f4:	e091      	b.n	800241a <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 80022f6:	4945      	ldr	r1, [pc, #276]	; (800240c <OTM8009A_Init+0x410>)
 80022f8:	2000      	movs	r0, #0
 80022fa:	f000 fe87 	bl	800300c <DSI_IO_WriteCmd>
    break;
 80022fe:	e08c      	b.n	800241a <OTM8009A_Init+0x41e>
 8002300:	0800dd30 	.word	0x0800dd30
 8002304:	0800dbe8 	.word	0x0800dbe8
 8002308:	0800dd34 	.word	0x0800dd34
 800230c:	0800dbec 	.word	0x0800dbec
 8002310:	0800dd38 	.word	0x0800dd38
 8002314:	0800dd3c 	.word	0x0800dd3c
 8002318:	0800dd40 	.word	0x0800dd40
 800231c:	0800dd44 	.word	0x0800dd44
 8002320:	0800dd48 	.word	0x0800dd48
 8002324:	0800dd4c 	.word	0x0800dd4c
 8002328:	0800dd50 	.word	0x0800dd50
 800232c:	0800dd54 	.word	0x0800dd54
 8002330:	0800dd58 	.word	0x0800dd58
 8002334:	0800dd5c 	.word	0x0800dd5c
 8002338:	0800dd60 	.word	0x0800dd60
 800233c:	0800dd64 	.word	0x0800dd64
 8002340:	0800dd68 	.word	0x0800dd68
 8002344:	0800dd6c 	.word	0x0800dd6c
 8002348:	0800dd70 	.word	0x0800dd70
 800234c:	0800dd74 	.word	0x0800dd74
 8002350:	0800dd78 	.word	0x0800dd78
 8002354:	0800dc18 	.word	0x0800dc18
 8002358:	0800dd7c 	.word	0x0800dd7c
 800235c:	0800dd80 	.word	0x0800dd80
 8002360:	0800dd84 	.word	0x0800dd84
 8002364:	0800dd88 	.word	0x0800dd88
 8002368:	0800dd8c 	.word	0x0800dd8c
 800236c:	0800dd90 	.word	0x0800dd90
 8002370:	0800dd94 	.word	0x0800dd94
 8002374:	0800dd98 	.word	0x0800dd98
 8002378:	0800dd9c 	.word	0x0800dd9c
 800237c:	0800dc1c 	.word	0x0800dc1c
 8002380:	0800dc20 	.word	0x0800dc20
 8002384:	0800dda0 	.word	0x0800dda0
 8002388:	0800dc28 	.word	0x0800dc28
 800238c:	0800dda4 	.word	0x0800dda4
 8002390:	0800dc38 	.word	0x0800dc38
 8002394:	0800dda8 	.word	0x0800dda8
 8002398:	0800dc48 	.word	0x0800dc48
 800239c:	0800ddac 	.word	0x0800ddac
 80023a0:	0800dde4 	.word	0x0800dde4
 80023a4:	0800dc54 	.word	0x0800dc54
 80023a8:	0800ddb0 	.word	0x0800ddb0
 80023ac:	0800dc60 	.word	0x0800dc60
 80023b0:	0800dc70 	.word	0x0800dc70
 80023b4:	0800dc80 	.word	0x0800dc80
 80023b8:	0800dc8c 	.word	0x0800dc8c
 80023bc:	0800dc9c 	.word	0x0800dc9c
 80023c0:	0800ddb4 	.word	0x0800ddb4
 80023c4:	0800dcac 	.word	0x0800dcac
 80023c8:	0800ddb8 	.word	0x0800ddb8
 80023cc:	0800dcb8 	.word	0x0800dcb8
 80023d0:	0800dcc4 	.word	0x0800dcc4
 80023d4:	0800dcd0 	.word	0x0800dcd0
 80023d8:	0800dce0 	.word	0x0800dce0
 80023dc:	0800dcf0 	.word	0x0800dcf0
 80023e0:	0800dcfc 	.word	0x0800dcfc
 80023e4:	0800dd0c 	.word	0x0800dd0c
 80023e8:	0800dde8 	.word	0x0800dde8
 80023ec:	0800ddec 	.word	0x0800ddec
 80023f0:	0800ddf0 	.word	0x0800ddf0
 80023f4:	0800ddf4 	.word	0x0800ddf4
 80023f8:	0800ddf8 	.word	0x0800ddf8
 80023fc:	0800dd1c 	.word	0x0800dd1c
 8002400:	0800dbf0 	.word	0x0800dbf0
 8002404:	0800dc04 	.word	0x0800dc04
 8002408:	0800ddbc 	.word	0x0800ddbc
 800240c:	0800ddc0 	.word	0x0800ddc0
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8002410:	491a      	ldr	r1, [pc, #104]	; (800247c <OTM8009A_Init+0x480>)
 8002412:	2000      	movs	r0, #0
 8002414:	f000 fdfa 	bl	800300c <DSI_IO_WriteCmd>
    break;
 8002418:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d10b      	bne.n	8002438 <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8002420:	4917      	ldr	r1, [pc, #92]	; (8002480 <OTM8009A_Init+0x484>)
 8002422:	2000      	movs	r0, #0
 8002424:	f000 fdf2 	bl	800300c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8002428:	4916      	ldr	r1, [pc, #88]	; (8002484 <OTM8009A_Init+0x488>)
 800242a:	2004      	movs	r0, #4
 800242c:	f000 fdee 	bl	800300c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8002430:	4915      	ldr	r1, [pc, #84]	; (8002488 <OTM8009A_Init+0x48c>)
 8002432:	2004      	movs	r0, #4
 8002434:	f000 fdea 	bl	800300c <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8002438:	4914      	ldr	r1, [pc, #80]	; (800248c <OTM8009A_Init+0x490>)
 800243a:	2000      	movs	r0, #0
 800243c:	f000 fde6 	bl	800300c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8002440:	4913      	ldr	r1, [pc, #76]	; (8002490 <OTM8009A_Init+0x494>)
 8002442:	2000      	movs	r0, #0
 8002444:	f000 fde2 	bl	800300c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8002448:	4912      	ldr	r1, [pc, #72]	; (8002494 <OTM8009A_Init+0x498>)
 800244a:	2000      	movs	r0, #0
 800244c:	f000 fdde 	bl	800300c <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8002450:	4911      	ldr	r1, [pc, #68]	; (8002498 <OTM8009A_Init+0x49c>)
 8002452:	2000      	movs	r0, #0
 8002454:	f000 fdda 	bl	800300c <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8002458:	4910      	ldr	r1, [pc, #64]	; (800249c <OTM8009A_Init+0x4a0>)
 800245a:	2000      	movs	r0, #0
 800245c:	f000 fdd6 	bl	800300c <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002460:	490f      	ldr	r1, [pc, #60]	; (80024a0 <OTM8009A_Init+0x4a4>)
 8002462:	2000      	movs	r0, #0
 8002464:	f000 fdd2 	bl	800300c <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8002468:	490e      	ldr	r1, [pc, #56]	; (80024a4 <OTM8009A_Init+0x4a8>)
 800246a:	2000      	movs	r0, #0
 800246c:	f000 fdce 	bl	800300c <DSI_IO_WriteCmd>

  return 0;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	0800ddc4 	.word	0x0800ddc4
 8002480:	0800ddc8 	.word	0x0800ddc8
 8002484:	0800dd20 	.word	0x0800dd20
 8002488:	0800dd28 	.word	0x0800dd28
 800248c:	0800ddcc 	.word	0x0800ddcc
 8002490:	0800ddd0 	.word	0x0800ddd0
 8002494:	0800ddd4 	.word	0x0800ddd4
 8002498:	0800ddd8 	.word	0x0800ddd8
 800249c:	0800dddc 	.word	0x0800dddc
 80024a0:	0800dd30 	.word	0x0800dd30
 80024a4:	0800dde0 	.word	0x0800dde0

080024a8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08c      	sub	sp, #48	; 0x30
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a58      	ldr	r2, [pc, #352]	; (8002614 <I2Cx_MspInit+0x16c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d15b      	bne.n	8002570 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 80024b8:	4b57      	ldr	r3, [pc, #348]	; (8002618 <I2Cx_MspInit+0x170>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	4a56      	ldr	r2, [pc, #344]	; (8002618 <I2Cx_MspInit+0x170>)
 80024be:	f043 0308 	orr.w	r3, r3, #8
 80024c2:	6313      	str	r3, [r2, #48]	; 0x30
 80024c4:	4b54      	ldr	r3, [pc, #336]	; (8002618 <I2Cx_MspInit+0x170>)
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 80024d0:	4b51      	ldr	r3, [pc, #324]	; (8002618 <I2Cx_MspInit+0x170>)
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	4a50      	ldr	r2, [pc, #320]	; (8002618 <I2Cx_MspInit+0x170>)
 80024d6:	f043 0302 	orr.w	r3, r3, #2
 80024da:	6313      	str	r3, [r2, #48]	; 0x30
 80024dc:	4b4e      	ldr	r3, [pc, #312]	; (8002618 <I2Cx_MspInit+0x170>)
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80024e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ec:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80024ee:	2312      	movs	r3, #18
 80024f0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80024f6:	2302      	movs	r3, #2
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 80024fa:	2304      	movs	r3, #4
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 80024fe:	f107 031c 	add.w	r3, r7, #28
 8002502:	4619      	mov	r1, r3
 8002504:	4845      	ldr	r0, [pc, #276]	; (800261c <I2Cx_MspInit+0x174>)
 8002506:	f003 f979 	bl	80057fc <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 800250e:	230b      	movs	r3, #11
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8002512:	f107 031c 	add.w	r3, r7, #28
 8002516:	4619      	mov	r1, r3
 8002518:	4841      	ldr	r0, [pc, #260]	; (8002620 <I2Cx_MspInit+0x178>)
 800251a:	f003 f96f 	bl	80057fc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800251e:	4b3e      	ldr	r3, [pc, #248]	; (8002618 <I2Cx_MspInit+0x170>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	4a3d      	ldr	r2, [pc, #244]	; (8002618 <I2Cx_MspInit+0x170>)
 8002524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002528:	6413      	str	r3, [r2, #64]	; 0x40
 800252a:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <I2Cx_MspInit+0x170>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002536:	4b38      	ldr	r3, [pc, #224]	; (8002618 <I2Cx_MspInit+0x170>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4a37      	ldr	r2, [pc, #220]	; (8002618 <I2Cx_MspInit+0x170>)
 800253c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002540:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002542:	4b35      	ldr	r3, [pc, #212]	; (8002618 <I2Cx_MspInit+0x170>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4a34      	ldr	r2, [pc, #208]	; (8002618 <I2Cx_MspInit+0x170>)
 8002548:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800254c:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	210f      	movs	r1, #15
 8002552:	205f      	movs	r0, #95	; 0x5f
 8002554:	f001 fa4e 	bl	80039f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002558:	205f      	movs	r0, #95	; 0x5f
 800255a:	f001 fa67 	bl	8003a2c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	210f      	movs	r1, #15
 8002562:	2060      	movs	r0, #96	; 0x60
 8002564:	f001 fa46 	bl	80039f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8002568:	2060      	movs	r0, #96	; 0x60
 800256a:	f001 fa5f 	bl	8003a2c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800256e:	e04d      	b.n	800260c <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002570:	4b29      	ldr	r3, [pc, #164]	; (8002618 <I2Cx_MspInit+0x170>)
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	4a28      	ldr	r2, [pc, #160]	; (8002618 <I2Cx_MspInit+0x170>)
 8002576:	f043 0302 	orr.w	r3, r3, #2
 800257a:	6313      	str	r3, [r2, #48]	; 0x30
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <I2Cx_MspInit+0x170>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800258c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800258e:	2312      	movs	r3, #18
 8002590:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002596:	2302      	movs	r3, #2
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800259a:	2304      	movs	r3, #4
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800259e:	f107 031c 	add.w	r3, r7, #28
 80025a2:	4619      	mov	r1, r3
 80025a4:	481e      	ldr	r0, [pc, #120]	; (8002620 <I2Cx_MspInit+0x178>)
 80025a6:	f003 f929 	bl	80057fc <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80025aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025b0:	f107 031c 	add.w	r3, r7, #28
 80025b4:	4619      	mov	r1, r3
 80025b6:	481a      	ldr	r0, [pc, #104]	; (8002620 <I2Cx_MspInit+0x178>)
 80025b8:	f003 f920 	bl	80057fc <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80025bc:	4b16      	ldr	r3, [pc, #88]	; (8002618 <I2Cx_MspInit+0x170>)
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	4a15      	ldr	r2, [pc, #84]	; (8002618 <I2Cx_MspInit+0x170>)
 80025c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025c6:	6413      	str	r3, [r2, #64]	; 0x40
 80025c8:	4b13      	ldr	r3, [pc, #76]	; (8002618 <I2Cx_MspInit+0x170>)
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80025d4:	4b10      	ldr	r3, [pc, #64]	; (8002618 <I2Cx_MspInit+0x170>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <I2Cx_MspInit+0x170>)
 80025da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025de:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80025e0:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <I2Cx_MspInit+0x170>)
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4a0c      	ldr	r2, [pc, #48]	; (8002618 <I2Cx_MspInit+0x170>)
 80025e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025ea:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80025ec:	2200      	movs	r2, #0
 80025ee:	210f      	movs	r1, #15
 80025f0:	201f      	movs	r0, #31
 80025f2:	f001 f9ff 	bl	80039f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80025f6:	201f      	movs	r0, #31
 80025f8:	f001 fa18 	bl	8003a2c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80025fc:	2200      	movs	r2, #0
 80025fe:	210f      	movs	r1, #15
 8002600:	2020      	movs	r0, #32
 8002602:	f001 f9f7 	bl	80039f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002606:	2020      	movs	r0, #32
 8002608:	f001 fa10 	bl	8003a2c <HAL_NVIC_EnableIRQ>
}
 800260c:	bf00      	nop
 800260e:	3730      	adds	r7, #48	; 0x30
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	200000e8 	.word	0x200000e8
 8002618:	40023800 	.word	0x40023800
 800261c:	40020c00 	.word	0x40020c00
 8002620:	40020400 	.word	0x40020400

08002624 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f003 fecd 	bl	80063cc <HAL_I2C_GetState>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d125      	bne.n	8002684 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a14      	ldr	r2, [pc, #80]	; (800268c <I2Cx_Init+0x68>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d103      	bne.n	8002648 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a13      	ldr	r2, [pc, #76]	; (8002690 <I2Cx_Init+0x6c>)
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e002      	b.n	800264e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <I2Cx_Init+0x70>)
 800264c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a11      	ldr	r2, [pc, #68]	; (8002698 <I2Cx_Init+0x74>)
 8002652:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ff15 	bl	80024a8 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f003 fba2 	bl	8005dc8 <HAL_I2C_Init>
  }
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	200000e8 	.word	0x200000e8
 8002690:	40006000 	.word	0x40006000
 8002694:	40005400 	.word	0x40005400
 8002698:	40912732 	.word	0x40912732

0800269c <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af04      	add	r7, sp, #16
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	4608      	mov	r0, r1
 80026a6:	4611      	mov	r1, r2
 80026a8:	461a      	mov	r2, r3
 80026aa:	4603      	mov	r3, r0
 80026ac:	72fb      	strb	r3, [r7, #11]
 80026ae:	460b      	mov	r3, r1
 80026b0:	813b      	strh	r3, [r7, #8]
 80026b2:	4613      	mov	r3, r2
 80026b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80026ba:	7afb      	ldrb	r3, [r7, #11]
 80026bc:	b299      	uxth	r1, r3
 80026be:	88f8      	ldrh	r0, [r7, #6]
 80026c0:	893a      	ldrh	r2, [r7, #8]
 80026c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c6:	9302      	str	r3, [sp, #8]
 80026c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	4603      	mov	r3, r0
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f003 fd60 	bl	8006198 <HAL_I2C_Mem_Read>
 80026d8:	4603      	mov	r3, r0
 80026da:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d004      	beq.n	80026ec <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80026e2:	7afb      	ldrb	r3, [r7, #11]
 80026e4:	4619      	mov	r1, r3
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f832 	bl	8002750 <I2Cx_Error>
  }
  return status;
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b08a      	sub	sp, #40	; 0x28
 80026fa:	af04      	add	r7, sp, #16
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	4608      	mov	r0, r1
 8002700:	4611      	mov	r1, r2
 8002702:	461a      	mov	r2, r3
 8002704:	4603      	mov	r3, r0
 8002706:	72fb      	strb	r3, [r7, #11]
 8002708:	460b      	mov	r3, r1
 800270a:	813b      	strh	r3, [r7, #8]
 800270c:	4613      	mov	r3, r2
 800270e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002714:	7afb      	ldrb	r3, [r7, #11]
 8002716:	b299      	uxth	r1, r3
 8002718:	88f8      	ldrh	r0, [r7, #6]
 800271a:	893a      	ldrh	r2, [r7, #8]
 800271c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002720:	9302      	str	r3, [sp, #8]
 8002722:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	4603      	mov	r3, r0
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f003 fc1f 	bl	8005f70 <HAL_I2C_Mem_Write>
 8002732:	4603      	mov	r3, r0
 8002734:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002736:	7dfb      	ldrb	r3, [r7, #23]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d004      	beq.n	8002746 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800273c:	7afb      	ldrb	r3, [r7, #11]
 800273e:	4619      	mov	r1, r3
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 f805 	bl	8002750 <I2Cx_Error>
  }
  return status;
 8002746:	7dfb      	ldrb	r3, [r7, #23]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f003 fbc3 	bl	8005ee8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ff5e 	bl	8002624 <I2Cx_Init>
}
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002774:	4802      	ldr	r0, [pc, #8]	; (8002780 <TS_IO_Init+0x10>)
 8002776:	f7ff ff55 	bl	8002624 <I2Cx_Init>
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	200000e8 	.word	0x200000e8

08002784 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af02      	add	r7, sp, #8
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
 800278e:	460b      	mov	r3, r1
 8002790:	71bb      	strb	r3, [r7, #6]
 8002792:	4613      	mov	r3, r2
 8002794:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002796:	79bb      	ldrb	r3, [r7, #6]
 8002798:	b29a      	uxth	r2, r3
 800279a:	79f9      	ldrb	r1, [r7, #7]
 800279c:	2301      	movs	r3, #1
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	1d7b      	adds	r3, r7, #5
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2301      	movs	r3, #1
 80027a6:	4803      	ldr	r0, [pc, #12]	; (80027b4 <TS_IO_Write+0x30>)
 80027a8:	f7ff ffa5 	bl	80026f6 <I2Cx_WriteMultiple>
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	200000e8 	.word	0x200000e8

080027b8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af02      	add	r7, sp, #8
 80027be:	4603      	mov	r3, r0
 80027c0:	460a      	mov	r2, r1
 80027c2:	71fb      	strb	r3, [r7, #7]
 80027c4:	4613      	mov	r3, r2
 80027c6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80027cc:	79bb      	ldrb	r3, [r7, #6]
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	79f9      	ldrb	r1, [r7, #7]
 80027d2:	2301      	movs	r3, #1
 80027d4:	9301      	str	r3, [sp, #4]
 80027d6:	f107 030f 	add.w	r3, r7, #15
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	2301      	movs	r3, #1
 80027de:	4804      	ldr	r0, [pc, #16]	; (80027f0 <TS_IO_Read+0x38>)
 80027e0:	f7ff ff5c 	bl	800269c <I2Cx_ReadMultiple>

  return read_value;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200000e8 	.word	0x200000e8

080027f4 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	603a      	str	r2, [r7, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]
 8002802:	460b      	mov	r3, r1
 8002804:	71bb      	strb	r3, [r7, #6]
 8002806:	4613      	mov	r3, r2
 8002808:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800280a:	79bb      	ldrb	r3, [r7, #6]
 800280c:	b29a      	uxth	r2, r3
 800280e:	79f9      	ldrb	r1, [r7, #7]
 8002810:	88bb      	ldrh	r3, [r7, #4]
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2301      	movs	r3, #1
 800281a:	4804      	ldr	r0, [pc, #16]	; (800282c <TS_IO_ReadMultiple+0x38>)
 800281c:	f7ff ff3e 	bl	800269c <I2Cx_ReadMultiple>
 8002820:	4603      	mov	r3, r0
 8002822:	b29b      	uxth	r3, r3
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	200000e8 	.word	0x200000e8

08002830 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 ffdf 	bl	80037fc <HAL_Delay>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 800284a:	2001      	movs	r0, #1
 800284c:	f000 f804 	bl	8002858 <BSP_LCD_InitEx>
 8002850:	4603      	mov	r3, r0
}
 8002852:	4618      	mov	r0, r3
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b090      	sub	sp, #64	; 0x40
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8002862:	f646 3325 	movw	r3, #27429	; 0x6b25
 8002866:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8002870:	f000 f936 	bl	8002ae0 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8002874:	f000 fbf4 	bl	8003060 <LCD_IO_GetID>
 8002878:	4603      	mov	r3, r0
 800287a:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 800287c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800287e:	2b11      	cmp	r3, #17
 8002880:	d001      	beq.n	8002886 <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8002882:	2301      	movs	r3, #1
 8002884:	e113      	b.n	8002aae <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8002886:	f000 fbf3 	bl	8003070 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 800288a:	4b8b      	ldr	r3, [pc, #556]	; (8002ab8 <BSP_LCD_InitEx+0x260>)
 800288c:	4a8b      	ldr	r2, [pc, #556]	; (8002abc <BSP_LCD_InitEx+0x264>)
 800288e:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8002890:	4889      	ldr	r0, [pc, #548]	; (8002ab8 <BSP_LCD_InitEx+0x260>)
 8002892:	f001 ffbd 	bl	8004810 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 8002896:	2364      	movs	r3, #100	; 0x64
 8002898:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 800289a:	2305      	movs	r3, #5
 800289c:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 80028a2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80028a6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80028a8:	4b83      	ldr	r3, [pc, #524]	; (8002ab8 <BSP_LCD_InitEx+0x260>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 80028ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	4a83      	ldr	r2, [pc, #524]	; (8002ac0 <BSP_LCD_InitEx+0x268>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	0a9b      	lsrs	r3, r3, #10
 80028ba:	4a7f      	ldr	r2, [pc, #508]	; (8002ab8 <BSP_LCD_InitEx+0x260>)
 80028bc:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 80028be:	f107 0308 	add.w	r3, r7, #8
 80028c2:	4619      	mov	r1, r3
 80028c4:	487c      	ldr	r0, [pc, #496]	; (8002ab8 <BSP_LCD_InitEx+0x260>)
 80028c6:	f001 fe89 	bl	80045dc <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d108      	bne.n	80028e2 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 80028d0:	4b7c      	ldr	r3, [pc, #496]	; (8002ac4 <BSP_LCD_InitEx+0x26c>)
 80028d2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80028d6:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 80028d8:	4b7b      	ldr	r3, [pc, #492]	; (8002ac8 <BSP_LCD_InitEx+0x270>)
 80028da:	f44f 7248 	mov.w	r2, #800	; 0x320
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e007      	b.n	80028f2 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 80028e2:	4b78      	ldr	r3, [pc, #480]	; (8002ac4 <BSP_LCD_InitEx+0x26c>)
 80028e4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80028e8:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 80028ea:	4b77      	ldr	r3, [pc, #476]	; (8002ac8 <BSP_LCD_InitEx+0x270>)
 80028ec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80028f0:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 80028f2:	4b74      	ldr	r3, [pc, #464]	; (8002ac4 <BSP_LCD_InitEx+0x26c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 80028f8:	4b73      	ldr	r3, [pc, #460]	; (8002ac8 <BSP_LCD_InitEx+0x270>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 80028fe:	2301      	movs	r3, #1
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8002902:	230f      	movs	r3, #15
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 8002906:	2310      	movs	r3, #16
 8002908:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 800290a:	2302      	movs	r3, #2
 800290c:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 800290e:	2322      	movs	r3, #34	; 0x22
 8002910:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8002912:	2322      	movs	r3, #34	; 0x22
 8002914:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8002916:	4b6d      	ldr	r3, [pc, #436]	; (8002acc <BSP_LCD_InitEx+0x274>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 800291c:	4b6b      	ldr	r3, [pc, #428]	; (8002acc <BSP_LCD_InitEx+0x274>)
 800291e:	2205      	movs	r2, #5
 8002920:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8002922:	4b6a      	ldr	r3, [pc, #424]	; (8002acc <BSP_LCD_InitEx+0x274>)
 8002924:	2200      	movs	r2, #0
 8002926:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8002928:	4b68      	ldr	r3, [pc, #416]	; (8002acc <BSP_LCD_InitEx+0x274>)
 800292a:	2200      	movs	r2, #0
 800292c:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 800292e:	4b67      	ldr	r3, [pc, #412]	; (8002acc <BSP_LCD_InitEx+0x274>)
 8002930:	2200      	movs	r2, #0
 8002932:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8002934:	4b65      	ldr	r3, [pc, #404]	; (8002acc <BSP_LCD_InitEx+0x274>)
 8002936:	2202      	movs	r2, #2
 8002938:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 800293a:	4b64      	ldr	r3, [pc, #400]	; (8002acc <BSP_LCD_InitEx+0x274>)
 800293c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002940:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8002942:	4b62      	ldr	r3, [pc, #392]	; (8002acc <BSP_LCD_InitEx+0x274>)
 8002944:	2200      	movs	r2, #0
 8002946:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8002948:	4a60      	ldr	r2, [pc, #384]	; (8002acc <BSP_LCD_InitEx+0x274>)
 800294a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294c:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002952:	fb02 f203 	mul.w	r2, r2, r3
 8002956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	4a5b      	ldr	r2, [pc, #364]	; (8002acc <BSP_LCD_InitEx+0x274>)
 800295e:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002964:	fb02 f203 	mul.w	r2, r2, r3
 8002968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296a:	fbb2 f3f3 	udiv	r3, r2, r3
 800296e:	4a57      	ldr	r2, [pc, #348]	; (8002acc <BSP_LCD_InitEx+0x274>)
 8002970:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8002972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	441a      	add	r2, r3
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	441a      	add	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	4413      	add	r3, r2
 8002980:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002982:	fb02 f203 	mul.w	r2, r2, r3
 8002986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	4a4f      	ldr	r2, [pc, #316]	; (8002acc <BSP_LCD_InitEx+0x274>)
 800298e:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8002990:	4a4e      	ldr	r2, [pc, #312]	; (8002acc <BSP_LCD_InitEx+0x274>)
 8002992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002994:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8002996:	4a4d      	ldr	r2, [pc, #308]	; (8002acc <BSP_LCD_InitEx+0x274>)
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 800299c:	4a4b      	ldr	r2, [pc, #300]	; (8002acc <BSP_LCD_InitEx+0x274>)
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 80029a2:	4a4a      	ldr	r2, [pc, #296]	; (8002acc <BSP_LCD_InitEx+0x274>)
 80029a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a6:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 80029a8:	4b48      	ldr	r3, [pc, #288]	; (8002acc <BSP_LCD_InitEx+0x274>)
 80029aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80029ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 80029b0:	4b46      	ldr	r3, [pc, #280]	; (8002acc <BSP_LCD_InitEx+0x274>)
 80029b2:	2210      	movs	r2, #16
 80029b4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 80029b6:	4b45      	ldr	r3, [pc, #276]	; (8002acc <BSP_LCD_InitEx+0x274>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 80029bc:	4b43      	ldr	r3, [pc, #268]	; (8002acc <BSP_LCD_InitEx+0x274>)
 80029be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029c2:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 80029c4:	4b41      	ldr	r3, [pc, #260]	; (8002acc <BSP_LCD_InitEx+0x274>)
 80029c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029ca:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 80029cc:	4b3f      	ldr	r3, [pc, #252]	; (8002acc <BSP_LCD_InitEx+0x274>)
 80029ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029d2:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 80029d4:	4b3d      	ldr	r3, [pc, #244]	; (8002acc <BSP_LCD_InitEx+0x274>)
 80029d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029da:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 80029dc:	4b3b      	ldr	r3, [pc, #236]	; (8002acc <BSP_LCD_InitEx+0x274>)
 80029de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e2:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 80029e4:	4b39      	ldr	r3, [pc, #228]	; (8002acc <BSP_LCD_InitEx+0x274>)
 80029e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 80029ec:	4937      	ldr	r1, [pc, #220]	; (8002acc <BSP_LCD_InitEx+0x274>)
 80029ee:	4832      	ldr	r0, [pc, #200]	; (8002ab8 <BSP_LCD_InitEx+0x260>)
 80029f0:	f002 f94e 	bl	8004c90 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	4a35      	ldr	r2, [pc, #212]	; (8002ad0 <BSP_LCD_InitEx+0x278>)
 80029fa:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 80029fc:	69fa      	ldr	r2, [r7, #28]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	4413      	add	r3, r2
 8002a02:	3b01      	subs	r3, #1
 8002a04:	4a32      	ldr	r2, [pc, #200]	; (8002ad0 <BSP_LCD_InitEx+0x278>)
 8002a06:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8002a08:	4b2e      	ldr	r3, [pc, #184]	; (8002ac4 <BSP_LCD_InitEx+0x26c>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	441a      	add	r2, r3
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	4413      	add	r3, r2
 8002a14:	3b01      	subs	r3, #1
 8002a16:	4a2e      	ldr	r2, [pc, #184]	; (8002ad0 <BSP_LCD_InitEx+0x278>)
 8002a18:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8002a1a:	4b2a      	ldr	r3, [pc, #168]	; (8002ac4 <BSP_LCD_InitEx+0x26c>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	441a      	add	r2, r3
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	441a      	add	r2, r3
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	4413      	add	r3, r2
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	4a28      	ldr	r2, [pc, #160]	; (8002ad0 <BSP_LCD_InitEx+0x278>)
 8002a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8002a30:	4b24      	ldr	r3, [pc, #144]	; (8002ac4 <BSP_LCD_InitEx+0x26c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a26      	ldr	r2, [pc, #152]	; (8002ad0 <BSP_LCD_InitEx+0x278>)
 8002a36:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8002a38:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <BSP_LCD_InitEx+0x270>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a24      	ldr	r2, [pc, #144]	; (8002ad0 <BSP_LCD_InitEx+0x278>)
 8002a3e:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a40:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <BSP_LCD_InitEx+0x27c>)
 8002a42:	2208      	movs	r2, #8
 8002a44:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8002a46:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <BSP_LCD_InitEx+0x27c>)
 8002a48:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002a4c:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8002a4e:	4b21      	ldr	r3, [pc, #132]	; (8002ad4 <BSP_LCD_InitEx+0x27c>)
 8002a50:	2207      	movs	r2, #7
 8002a52:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002a54:	4b1f      	ldr	r3, [pc, #124]	; (8002ad4 <BSP_LCD_InitEx+0x27c>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002a5a:	481e      	ldr	r0, [pc, #120]	; (8002ad4 <BSP_LCD_InitEx+0x27c>)
 8002a5c:	f004 ff6c 	bl	8007938 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <BSP_LCD_InitEx+0x278>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <BSP_LCD_InitEx+0x278>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8002a70:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <BSP_LCD_InitEx+0x278>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002a78:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <BSP_LCD_InitEx+0x278>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8002a7e:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <BSP_LCD_InitEx+0x278>)
 8002a80:	4a15      	ldr	r2, [pc, #84]	; (8002ad8 <BSP_LCD_InitEx+0x280>)
 8002a82:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8002a84:	4911      	ldr	r1, [pc, #68]	; (8002acc <BSP_LCD_InitEx+0x274>)
 8002a86:	4812      	ldr	r0, [pc, #72]	; (8002ad0 <BSP_LCD_InitEx+0x278>)
 8002a88:	f004 fa34 	bl	8006ef4 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8002a8c:	4810      	ldr	r0, [pc, #64]	; (8002ad0 <BSP_LCD_InitEx+0x278>)
 8002a8e:	f003 fec7 	bl	8006820 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8002a92:	4809      	ldr	r0, [pc, #36]	; (8002ab8 <BSP_LCD_InitEx+0x260>)
 8002a94:	f002 fd8e 	bl	80055b4 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002a98:	f000 fc6a 	bl	8003370 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002a9c:	480f      	ldr	r0, [pc, #60]	; (8002adc <BSP_LCD_InitEx+0x284>)
 8002a9e:	f000 f911 	bl	8002cc4 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7ff faa8 	bl	8001ffc <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3740      	adds	r7, #64	; 0x40
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200006b0 	.word	0x200006b0
 8002abc:	40016c00 	.word	0x40016c00
 8002ac0:	43215e57 	.word	0x43215e57
 8002ac4:	20000034 	.word	0x20000034
 8002ac8:	20000038 	.word	0x20000038
 8002acc:	20000134 	.word	0x20000134
 8002ad0:	20000608 	.word	0x20000608
 8002ad4:	200001bc 	.word	0x200001bc
 8002ad8:	40016800 	.word	0x40016800
 8002adc:	2000002c 	.word	0x2000002c

08002ae0 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ae6:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <BSP_LCD_Reset+0x68>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a17      	ldr	r2, [pc, #92]	; (8002b48 <BSP_LCD_Reset+0x68>)
 8002aec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <BSP_LCD_Reset+0x68>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8002afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b02:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002b04:	2301      	movs	r3, #1
 8002b06:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	4619      	mov	r1, r3
 8002b14:	480d      	ldr	r0, [pc, #52]	; (8002b4c <BSP_LCD_Reset+0x6c>)
 8002b16:	f002 fe71 	bl	80057fc <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b20:	480a      	ldr	r0, [pc, #40]	; (8002b4c <BSP_LCD_Reset+0x6c>)
 8002b22:	f003 f937 	bl	8005d94 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8002b26:	2014      	movs	r0, #20
 8002b28:	f000 fe68 	bl	80037fc <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b32:	4806      	ldr	r0, [pc, #24]	; (8002b4c <BSP_LCD_Reset+0x6c>)
 8002b34:	f003 f92e 	bl	8005d94 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8002b38:	200a      	movs	r0, #10
 8002b3a:	f000 fe5f 	bl	80037fc <HAL_Delay>
}
 8002b3e:	bf00      	nop
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40022400 	.word	0x40022400

08002b50 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <BSP_LCD_GetXSize+0x14>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000034 	.word	0x20000034

08002b68 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <BSP_LCD_GetYSize+0x14>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	20000038 	.word	0x20000038

08002b80 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b090      	sub	sp, #64	; 0x40
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	6039      	str	r1, [r7, #0]
 8002b8a:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002b90:	f7ff ffde 	bl	8002b50 <BSP_LCD_GetXSize>
 8002b94:	4603      	mov	r3, r0
 8002b96:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002b9c:	f7ff ffe4 	bl	8002b68 <BSP_LCD_GetYSize>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002bac:	23ff      	movs	r3, #255	; 0xff
 8002bae:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002bc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002bcc:	2307      	movs	r3, #7
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002bd0:	f7ff ffbe 	bl	8002b50 <BSP_LCD_GetXSize>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002bd8:	f7ff ffc6 	bl	8002b68 <BSP_LCD_GetYSize>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8002be0:	88fa      	ldrh	r2, [r7, #6]
 8002be2:	f107 030c 	add.w	r3, r7, #12
 8002be6:	4619      	mov	r1, r3
 8002be8:	4812      	ldr	r0, [pc, #72]	; (8002c34 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002bea:	f003 ffab 	bl	8006b44 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002bee:	88fa      	ldrh	r2, [r7, #6]
 8002bf0:	4911      	ldr	r1, [pc, #68]	; (8002c38 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8002c02:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002c04:	88fa      	ldrh	r2, [r7, #6]
 8002c06:	490c      	ldr	r1, [pc, #48]	; (8002c38 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	3308      	adds	r3, #8
 8002c14:	4a09      	ldr	r2, [pc, #36]	; (8002c3c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002c16:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8002c18:	88fa      	ldrh	r2, [r7, #6]
 8002c1a:	4907      	ldr	r1, [pc, #28]	; (8002c38 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002c2a:	601a      	str	r2, [r3, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	3740      	adds	r7, #64	; 0x40
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000608 	.word	0x20000608
 8002c38:	200001a4 	.word	0x200001a4
 8002c3c:	2000002c 	.word	0x2000002c

08002c40 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002c48:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <BSP_LCD_SelectLayer+0x1c>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6013      	str	r3, [r2, #0]
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	200001a0 	.word	0x200001a0

08002c60 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002c68:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <BSP_LCD_SetTextColor+0x28>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4907      	ldr	r1, [pc, #28]	; (8002c8c <BSP_LCD_SetTextColor+0x2c>)
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	601a      	str	r2, [r3, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	200001a0 	.word	0x200001a0
 8002c8c:	200001a4 	.word	0x200001a4

08002c90 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <BSP_LCD_SetBackColor+0x2c>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4908      	ldr	r1, [pc, #32]	; (8002cc0 <BSP_LCD_SetBackColor+0x30>)
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3304      	adds	r3, #4
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	601a      	str	r2, [r3, #0]
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	200001a0 	.word	0x200001a0
 8002cc0:	200001a4 	.word	0x200001a4

08002cc4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002ccc:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <BSP_LCD_SetFont+0x2c>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4908      	ldr	r1, [pc, #32]	; (8002cf4 <BSP_LCD_SetFont+0x30>)
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3308      	adds	r3, #8
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	601a      	str	r2, [r3, #0]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	200001a0 	.word	0x200001a0
 8002cf4:	200001a4 	.word	0x200001a4

08002cf8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8002cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <BSP_LCD_Clear+0x48>)
 8002d02:	681c      	ldr	r4, [r3, #0]
 8002d04:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <BSP_LCD_Clear+0x48>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a0e      	ldr	r2, [pc, #56]	; (8002d44 <BSP_LCD_Clear+0x4c>)
 8002d0a:	2134      	movs	r1, #52	; 0x34
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	335c      	adds	r3, #92	; 0x5c
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	461d      	mov	r5, r3
 8002d18:	f7ff ff1a 	bl	8002b50 <BSP_LCD_GetXSize>
 8002d1c:	4606      	mov	r6, r0
 8002d1e:	f7ff ff23 	bl	8002b68 <BSP_LCD_GetYSize>
 8002d22:	4602      	mov	r2, r0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	4632      	mov	r2, r6
 8002d30:	4629      	mov	r1, r5
 8002d32:	4620      	mov	r0, r4
 8002d34:	f000 fae4 	bl	8003300 <LL_FillBuffer>
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d40:	200001a0 	.word	0x200001a0
 8002d44:	20000608 	.word	0x20000608

08002d48 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	80fb      	strh	r3, [r7, #6]
 8002d52:	460b      	mov	r3, r1
 8002d54:	80bb      	strh	r3, [r7, #4]
 8002d56:	4613      	mov	r3, r2
 8002d58:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <BSP_LCD_DisplayChar+0x80>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	491b      	ldr	r1, [pc, #108]	; (8002dcc <BSP_LCD_DisplayChar+0x84>)
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	3308      	adds	r3, #8
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6819      	ldr	r1, [r3, #0]
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002d76:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <BSP_LCD_DisplayChar+0x80>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	4c14      	ldr	r4, [pc, #80]	; (8002dcc <BSP_LCD_DisplayChar+0x84>)
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4423      	add	r3, r4
 8002d86:	3308      	adds	r3, #8
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d8c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002d90:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <BSP_LCD_DisplayChar+0x80>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4c0d      	ldr	r4, [pc, #52]	; (8002dcc <BSP_LCD_DisplayChar+0x84>)
 8002d96:	4613      	mov	r3, r2
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4423      	add	r3, r4
 8002da0:	3308      	adds	r3, #8
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	889b      	ldrh	r3, [r3, #4]
 8002da6:	3307      	adds	r3, #7
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	da00      	bge.n	8002dae <BSP_LCD_DisplayChar+0x66>
 8002dac:	3307      	adds	r3, #7
 8002dae:	10db      	asrs	r3, r3, #3
 8002db0:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002db4:	18ca      	adds	r2, r1, r3
 8002db6:	88b9      	ldrh	r1, [r7, #4]
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f9e8 	bl	8003190 <DrawChar>
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd90      	pop	{r4, r7, pc}
 8002dc8:	200001a0 	.word	0x200001a0
 8002dcc:	200001a4 	.word	0x200001a4

08002dd0 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002dd0:	b5b0      	push	{r4, r5, r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60ba      	str	r2, [r7, #8]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4603      	mov	r3, r0
 8002ddc:	81fb      	strh	r3, [r7, #14]
 8002dde:	460b      	mov	r3, r1
 8002de0:	81bb      	strh	r3, [r7, #12]
 8002de2:	4613      	mov	r3, r2
 8002de4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002de6:	2301      	movs	r3, #1
 8002de8:	83fb      	strh	r3, [r7, #30]
 8002dea:	2300      	movs	r3, #0
 8002dec:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8002dfa:	e002      	b.n	8002e02 <BSP_LCD_DisplayStringAt+0x32>
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	61bb      	str	r3, [r7, #24]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	617a      	str	r2, [r7, #20]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f6      	bne.n	8002dfc <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002e0e:	f7ff fe9f 	bl	8002b50 <BSP_LCD_GetXSize>
 8002e12:	4b4f      	ldr	r3, [pc, #316]	; (8002f50 <BSP_LCD_DisplayStringAt+0x180>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	494f      	ldr	r1, [pc, #316]	; (8002f54 <BSP_LCD_DisplayStringAt+0x184>)
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	3308      	adds	r3, #8
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	889b      	ldrh	r3, [r3, #4]
 8002e28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2c:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d01c      	beq.n	8002e6e <BSP_LCD_DisplayStringAt+0x9e>
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d017      	beq.n	8002e68 <BSP_LCD_DisplayStringAt+0x98>
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d12e      	bne.n	8002e9a <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	1ad1      	subs	r1, r2, r3
 8002e42:	4b43      	ldr	r3, [pc, #268]	; (8002f50 <BSP_LCD_DisplayStringAt+0x180>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4843      	ldr	r0, [pc, #268]	; (8002f54 <BSP_LCD_DisplayStringAt+0x184>)
 8002e48:	4613      	mov	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4403      	add	r3, r0
 8002e52:	3308      	adds	r3, #8
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	889b      	ldrh	r3, [r3, #4]
 8002e58:	fb03 f301 	mul.w	r3, r3, r1
 8002e5c:	085b      	lsrs	r3, r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	89fb      	ldrh	r3, [r7, #14]
 8002e62:	4413      	add	r3, r2
 8002e64:	83fb      	strh	r3, [r7, #30]
      break;
 8002e66:	e01b      	b.n	8002ea0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8002e68:	89fb      	ldrh	r3, [r7, #14]
 8002e6a:	83fb      	strh	r3, [r7, #30]
      break;
 8002e6c:	e018      	b.n	8002ea0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	b299      	uxth	r1, r3
 8002e76:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <BSP_LCD_DisplayStringAt+0x180>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	4836      	ldr	r0, [pc, #216]	; (8002f54 <BSP_LCD_DisplayStringAt+0x184>)
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4403      	add	r3, r0
 8002e86:	3308      	adds	r3, #8
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	889b      	ldrh	r3, [r3, #4]
 8002e8c:	fb11 f303 	smulbb	r3, r1, r3
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	89fb      	ldrh	r3, [r7, #14]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	83fb      	strh	r3, [r7, #30]
      break;
 8002e98:	e002      	b.n	8002ea0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 8002e9a:	89fb      	ldrh	r3, [r7, #14]
 8002e9c:	83fb      	strh	r3, [r7, #30]
      break;
 8002e9e:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8002ea0:	8bfb      	ldrh	r3, [r7, #30]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <BSP_LCD_DisplayStringAt+0xde>
 8002ea6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	da1d      	bge.n	8002eea <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002eb2:	e01a      	b.n	8002eea <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	781a      	ldrb	r2, [r3, #0]
 8002eb8:	89b9      	ldrh	r1, [r7, #12]
 8002eba:	8bfb      	ldrh	r3, [r7, #30]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff43 	bl	8002d48 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002ec2:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <BSP_LCD_DisplayStringAt+0x180>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4923      	ldr	r1, [pc, #140]	; (8002f54 <BSP_LCD_DisplayStringAt+0x184>)
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	889a      	ldrh	r2, [r3, #4]
 8002ed8:	8bfb      	ldrh	r3, [r7, #30]
 8002eda:	4413      	add	r3, r2
 8002edc:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
    i++;
 8002ee4:	8bbb      	ldrh	r3, [r7, #28]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	bf14      	ite	ne
 8002ef2:	2301      	movne	r3, #1
 8002ef4:	2300      	moveq	r3, #0
 8002ef6:	b2dc      	uxtb	r4, r3
 8002ef8:	f7ff fe2a 	bl	8002b50 <BSP_LCD_GetXSize>
 8002efc:	4605      	mov	r5, r0
 8002efe:	8bb9      	ldrh	r1, [r7, #28]
 8002f00:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <BSP_LCD_DisplayStringAt+0x180>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4813      	ldr	r0, [pc, #76]	; (8002f54 <BSP_LCD_DisplayStringAt+0x184>)
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4403      	add	r3, r0
 8002f10:	3308      	adds	r3, #8
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	889b      	ldrh	r3, [r3, #4]
 8002f16:	fb03 f301 	mul.w	r3, r3, r1
 8002f1a:	1aeb      	subs	r3, r5, r3
 8002f1c:	b299      	uxth	r1, r3
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <BSP_LCD_DisplayStringAt+0x180>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	480c      	ldr	r0, [pc, #48]	; (8002f54 <BSP_LCD_DisplayStringAt+0x184>)
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4403      	add	r3, r0
 8002f2e:	3308      	adds	r3, #8
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	889b      	ldrh	r3, [r3, #4]
 8002f34:	4299      	cmp	r1, r3
 8002f36:	bf2c      	ite	cs
 8002f38:	2301      	movcs	r3, #1
 8002f3a:	2300      	movcc	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	4023      	ands	r3, r4
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1b6      	bne.n	8002eb4 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 8002f46:	bf00      	nop
 8002f48:	3720      	adds	r7, #32
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	200001a0 	.word	0x200001a0
 8002f54:	200001a4 	.word	0x200001a4

08002f58 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af02      	add	r7, sp, #8
 8002f60:	4604      	mov	r4, r0
 8002f62:	4608      	mov	r0, r1
 8002f64:	4611      	mov	r1, r2
 8002f66:	461a      	mov	r2, r3
 8002f68:	4623      	mov	r3, r4
 8002f6a:	80fb      	strh	r3, [r7, #6]
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	80bb      	strh	r3, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]
 8002f74:	4613      	mov	r3, r2
 8002f76:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002f7c:	4b20      	ldr	r3, [pc, #128]	; (8003000 <BSP_LCD_FillRect+0xa8>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4920      	ldr	r1, [pc, #128]	; (8003004 <BSP_LCD_FillRect+0xac>)
 8002f82:	4613      	mov	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fe66 	bl	8002c60 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002f94:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <BSP_LCD_FillRect+0xa8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1b      	ldr	r2, [pc, #108]	; (8003008 <BSP_LCD_FillRect+0xb0>)
 8002f9a:	2134      	movs	r1, #52	; 0x34
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	335c      	adds	r3, #92	; 0x5c
 8002fa4:	681c      	ldr	r4, [r3, #0]
 8002fa6:	f7ff fdd3 	bl	8002b50 <BSP_LCD_GetXSize>
 8002faa:	4602      	mov	r2, r0
 8002fac:	88bb      	ldrh	r3, [r7, #4]
 8002fae:	fb03 f202 	mul.w	r2, r3, r2
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4423      	add	r3, r4
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002fbc:	4b10      	ldr	r3, [pc, #64]	; (8003000 <BSP_LCD_FillRect+0xa8>)
 8002fbe:	681c      	ldr	r4, [r3, #0]
 8002fc0:	68fd      	ldr	r5, [r7, #12]
 8002fc2:	887e      	ldrh	r6, [r7, #2]
 8002fc4:	f8b7 8000 	ldrh.w	r8, [r7]
 8002fc8:	f7ff fdc2 	bl	8002b50 <BSP_LCD_GetXSize>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	887b      	ldrh	r3, [r7, #2]
 8002fd0:	1ad1      	subs	r1, r2, r3
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <BSP_LCD_FillRect+0xa8>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	480b      	ldr	r0, [pc, #44]	; (8003004 <BSP_LCD_FillRect+0xac>)
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4403      	add	r3, r0
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	9301      	str	r3, [sp, #4]
 8002fe6:	9100      	str	r1, [sp, #0]
 8002fe8:	4643      	mov	r3, r8
 8002fea:	4632      	mov	r2, r6
 8002fec:	4629      	mov	r1, r5
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f000 f986 	bl	8003300 <LL_FillBuffer>
}
 8002ff4:	bf00      	nop
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ffe:	bf00      	nop
 8003000:	200001a0 	.word	0x200001a0
 8003004:	200001a4 	.word	0x200001a4
 8003008:	20000608 	.word	0x20000608

0800300c <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af02      	add	r7, sp, #8
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d80d      	bhi.n	8003038 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	4613      	mov	r3, r2
 800302c:	2215      	movs	r2, #21
 800302e:	2100      	movs	r1, #0
 8003030:	480a      	ldr	r0, [pc, #40]	; (800305c <DSI_IO_WriteCmd+0x50>)
 8003032:	f002 fafb 	bl	800562c <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8003036:	e00d      	b.n	8003054 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4413      	add	r3, r2
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	9301      	str	r3, [sp, #4]
 8003046:	9200      	str	r2, [sp, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2239      	movs	r2, #57	; 0x39
 800304c:	2100      	movs	r1, #0
 800304e:	4803      	ldr	r0, [pc, #12]	; (800305c <DSI_IO_WriteCmd+0x50>)
 8003050:	f002 fb0e 	bl	8005670 <HAL_DSI_LongWrite>
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	200006b0 	.word	0x200006b0

08003060 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8003064:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8003066:	4618      	mov	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003076:	4b32      	ldr	r3, [pc, #200]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	4a31      	ldr	r2, [pc, #196]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 800307c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003080:	6453      	str	r3, [r2, #68]	; 0x44
 8003082:	4b2f      	ldr	r3, [pc, #188]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 800308e:	4b2c      	ldr	r3, [pc, #176]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	4a2b      	ldr	r2, [pc, #172]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 8003094:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003098:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 800309a:	4b29      	ldr	r3, [pc, #164]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	4a28      	ldr	r2, [pc, #160]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 80030a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030a4:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80030a6:	4b26      	ldr	r3, [pc, #152]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	4a25      	ldr	r2, [pc, #148]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 80030ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030b0:	6313      	str	r3, [r2, #48]	; 0x30
 80030b2:	4b23      	ldr	r3, [pc, #140]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 80030be:	4b20      	ldr	r3, [pc, #128]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	4a1f      	ldr	r2, [pc, #124]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 80030c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030c8:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 80030ca:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	4a1c      	ldr	r2, [pc, #112]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 80030d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030d4:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 80030d6:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	4a19      	ldr	r2, [pc, #100]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 80030dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030e0:	6453      	str	r3, [r2, #68]	; 0x44
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ea:	607b      	str	r3, [r7, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 80030ee:	4b14      	ldr	r3, [pc, #80]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	4a13      	ldr	r2, [pc, #76]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 80030f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030f8:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	4a10      	ldr	r2, [pc, #64]	; (8003140 <BSP_LCD_MspInit+0xd0>)
 8003100:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003104:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8003106:	2200      	movs	r2, #0
 8003108:	2103      	movs	r1, #3
 800310a:	2058      	movs	r0, #88	; 0x58
 800310c:	f000 fc72 	bl	80039f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003110:	2058      	movs	r0, #88	; 0x58
 8003112:	f000 fc8b 	bl	8003a2c <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8003116:	2200      	movs	r2, #0
 8003118:	2103      	movs	r1, #3
 800311a:	205a      	movs	r0, #90	; 0x5a
 800311c:	f000 fc6a 	bl	80039f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003120:	205a      	movs	r0, #90	; 0x5a
 8003122:	f000 fc83 	bl	8003a2c <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8003126:	2200      	movs	r2, #0
 8003128:	2103      	movs	r1, #3
 800312a:	2062      	movs	r0, #98	; 0x62
 800312c:	f000 fc62 	bl	80039f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8003130:	2062      	movs	r0, #98	; 0x62
 8003132:	f000 fc7b 	bl	8003a2c <HAL_NVIC_EnableIRQ>
}
 8003136:	bf00      	nop
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800

08003144 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003144:	b5b0      	push	{r4, r5, r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	603a      	str	r2, [r7, #0]
 800314e:	80fb      	strh	r3, [r7, #6]
 8003150:	460b      	mov	r3, r1
 8003152:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <BSP_LCD_DrawPixel+0x44>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a0c      	ldr	r2, [pc, #48]	; (800318c <BSP_LCD_DrawPixel+0x48>)
 800315a:	2134      	movs	r1, #52	; 0x34
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	335c      	adds	r3, #92	; 0x5c
 8003164:	681c      	ldr	r4, [r3, #0]
 8003166:	88bd      	ldrh	r5, [r7, #4]
 8003168:	f7ff fcf2 	bl	8002b50 <BSP_LCD_GetXSize>
 800316c:	4603      	mov	r3, r0
 800316e:	fb03 f205 	mul.w	r2, r3, r5
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4423      	add	r3, r4
 800317a:	461a      	mov	r2, r3
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	6013      	str	r3, [r2, #0]
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bdb0      	pop	{r4, r5, r7, pc}
 8003188:	200001a0 	.word	0x200001a0
 800318c:	20000608 	.word	0x20000608

08003190 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	603a      	str	r2, [r7, #0]
 800319a:	80fb      	strh	r3, [r7, #6]
 800319c:	460b      	mov	r3, r1
 800319e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61fb      	str	r3, [r7, #28]
 80031a4:	2300      	movs	r3, #0
 80031a6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 80031a8:	4b53      	ldr	r3, [pc, #332]	; (80032f8 <DrawChar+0x168>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4953      	ldr	r1, [pc, #332]	; (80032fc <DrawChar+0x16c>)
 80031ae:	4613      	mov	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	3308      	adds	r3, #8
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	88db      	ldrh	r3, [r3, #6]
 80031be:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80031c0:	4b4d      	ldr	r3, [pc, #308]	; (80032f8 <DrawChar+0x168>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	494d      	ldr	r1, [pc, #308]	; (80032fc <DrawChar+0x16c>)
 80031c6:	4613      	mov	r3, r2
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	3308      	adds	r3, #8
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	889b      	ldrh	r3, [r3, #4]
 80031d6:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 80031d8:	8a3b      	ldrh	r3, [r7, #16]
 80031da:	3307      	adds	r3, #7
 80031dc:	2b00      	cmp	r3, #0
 80031de:	da00      	bge.n	80031e2 <DrawChar+0x52>
 80031e0:	3307      	adds	r3, #7
 80031e2:	10db      	asrs	r3, r3, #3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	8a3b      	ldrh	r3, [r7, #16]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	e076      	b.n	80032e6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80031f8:	8a3b      	ldrh	r3, [r7, #16]
 80031fa:	3307      	adds	r3, #7
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	da00      	bge.n	8003202 <DrawChar+0x72>
 8003200:	3307      	adds	r3, #7
 8003202:	10db      	asrs	r3, r3, #3
 8003204:	461a      	mov	r2, r3
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	fb03 f302 	mul.w	r3, r3, r2
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	4413      	add	r3, r2
 8003210:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003212:	8a3b      	ldrh	r3, [r7, #16]
 8003214:	3307      	adds	r3, #7
 8003216:	2b00      	cmp	r3, #0
 8003218:	da00      	bge.n	800321c <DrawChar+0x8c>
 800321a:	3307      	adds	r3, #7
 800321c:	10db      	asrs	r3, r3, #3
 800321e:	2b01      	cmp	r3, #1
 8003220:	d002      	beq.n	8003228 <DrawChar+0x98>
 8003222:	2b02      	cmp	r3, #2
 8003224:	d004      	beq.n	8003230 <DrawChar+0xa0>
 8003226:	e00c      	b.n	8003242 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	617b      	str	r3, [r7, #20]
      break;
 800322e:	e016      	b.n	800325e <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	021b      	lsls	r3, r3, #8
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	3201      	adds	r2, #1
 800323a:	7812      	ldrb	r2, [r2, #0]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
      break;
 8003240:	e00d      	b.n	800325e <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	041a      	lsls	r2, r3, #16
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	3301      	adds	r3, #1
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	4313      	orrs	r3, r2
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	3202      	adds	r2, #2
 8003256:	7812      	ldrb	r2, [r2, #0]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
      break;
 800325c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800325e:	2300      	movs	r3, #0
 8003260:	61bb      	str	r3, [r7, #24]
 8003262:	e036      	b.n	80032d2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8003264:	8a3a      	ldrh	r2, [r7, #16]
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	1ad2      	subs	r2, r2, r3
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	4413      	add	r3, r2
 800326e:	3b01      	subs	r3, #1
 8003270:	2201      	movs	r2, #1
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	461a      	mov	r2, r3
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	4013      	ands	r3, r2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d012      	beq.n	80032a6 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	b29a      	uxth	r2, r3
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	4413      	add	r3, r2
 8003288:	b298      	uxth	r0, r3
 800328a:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <DrawChar+0x168>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	491b      	ldr	r1, [pc, #108]	; (80032fc <DrawChar+0x16c>)
 8003290:	4613      	mov	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	88bb      	ldrh	r3, [r7, #4]
 800329e:	4619      	mov	r1, r3
 80032a0:	f7ff ff50 	bl	8003144 <BSP_LCD_DrawPixel>
 80032a4:	e012      	b.n	80032cc <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	4413      	add	r3, r2
 80032ae:	b298      	uxth	r0, r3
 80032b0:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <DrawChar+0x168>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4911      	ldr	r1, [pc, #68]	; (80032fc <DrawChar+0x16c>)
 80032b6:	4613      	mov	r3, r2
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	3304      	adds	r3, #4
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	88bb      	ldrh	r3, [r7, #4]
 80032c6:	4619      	mov	r1, r3
 80032c8:	f7ff ff3c 	bl	8003144 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	3301      	adds	r3, #1
 80032d0:	61bb      	str	r3, [r7, #24]
 80032d2:	8a3b      	ldrh	r3, [r7, #16]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d3c4      	bcc.n	8003264 <DrawChar+0xd4>
      }
    }
    Ypos++;
 80032da:	88bb      	ldrh	r3, [r7, #4]
 80032dc:	3301      	adds	r3, #1
 80032de:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	3301      	adds	r3, #1
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	8a7b      	ldrh	r3, [r7, #18]
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d384      	bcc.n	80031f8 <DrawChar+0x68>
  }
}
 80032ee:	bf00      	nop
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	200001a0 	.word	0x200001a0
 80032fc:	200001a4 	.word	0x200001a4

08003300 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af02      	add	r7, sp, #8
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 800330e:	4b16      	ldr	r3, [pc, #88]	; (8003368 <LL_FillBuffer+0x68>)
 8003310:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003314:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8003316:	4b14      	ldr	r3, [pc, #80]	; (8003368 <LL_FillBuffer+0x68>)
 8003318:	2200      	movs	r2, #0
 800331a:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 800331c:	4a12      	ldr	r2, [pc, #72]	; (8003368 <LL_FillBuffer+0x68>)
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8003322:	4b11      	ldr	r3, [pc, #68]	; (8003368 <LL_FillBuffer+0x68>)
 8003324:	4a11      	ldr	r2, [pc, #68]	; (800336c <LL_FillBuffer+0x6c>)
 8003326:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8003328:	480f      	ldr	r0, [pc, #60]	; (8003368 <LL_FillBuffer+0x68>)
 800332a:	f000 fd57 	bl	8003ddc <HAL_DMA2D_Init>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d115      	bne.n	8003360 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8003334:	68f9      	ldr	r1, [r7, #12]
 8003336:	480c      	ldr	r0, [pc, #48]	; (8003368 <LL_FillBuffer+0x68>)
 8003338:	f000 ffce 	bl	80042d8 <HAL_DMA2D_ConfigLayer>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10e      	bne.n	8003360 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69f9      	ldr	r1, [r7, #28]
 800334c:	4806      	ldr	r0, [pc, #24]	; (8003368 <LL_FillBuffer+0x68>)
 800334e:	f000 fd9f 	bl	8003e90 <HAL_DMA2D_Start>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d103      	bne.n	8003360 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8003358:	210a      	movs	r1, #10
 800335a:	4803      	ldr	r0, [pc, #12]	; (8003368 <LL_FillBuffer+0x68>)
 800335c:	f000 fdc3 	bl	8003ee6 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8003360:	bf00      	nop
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	200005b0 	.word	0x200005b0
 800336c:	4002b000 	.word	0x4002b000

08003370 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003374:	4b29      	ldr	r3, [pc, #164]	; (800341c <BSP_SDRAM_Init+0xac>)
 8003376:	4a2a      	ldr	r2, [pc, #168]	; (8003420 <BSP_SDRAM_Init+0xb0>)
 8003378:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800337a:	4b2a      	ldr	r3, [pc, #168]	; (8003424 <BSP_SDRAM_Init+0xb4>)
 800337c:	2202      	movs	r2, #2
 800337e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003380:	4b28      	ldr	r3, [pc, #160]	; (8003424 <BSP_SDRAM_Init+0xb4>)
 8003382:	2207      	movs	r2, #7
 8003384:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003386:	4b27      	ldr	r3, [pc, #156]	; (8003424 <BSP_SDRAM_Init+0xb4>)
 8003388:	2204      	movs	r2, #4
 800338a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800338c:	4b25      	ldr	r3, [pc, #148]	; (8003424 <BSP_SDRAM_Init+0xb4>)
 800338e:	2207      	movs	r2, #7
 8003390:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003392:	4b24      	ldr	r3, [pc, #144]	; (8003424 <BSP_SDRAM_Init+0xb4>)
 8003394:	2202      	movs	r2, #2
 8003396:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003398:	4b22      	ldr	r3, [pc, #136]	; (8003424 <BSP_SDRAM_Init+0xb4>)
 800339a:	2202      	movs	r2, #2
 800339c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800339e:	4b21      	ldr	r3, [pc, #132]	; (8003424 <BSP_SDRAM_Init+0xb4>)
 80033a0:	2202      	movs	r2, #2
 80033a2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <BSP_SDRAM_Init+0xac>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80033aa:	4b1c      	ldr	r3, [pc, #112]	; (800341c <BSP_SDRAM_Init+0xac>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80033b0:	4b1a      	ldr	r3, [pc, #104]	; (800341c <BSP_SDRAM_Init+0xac>)
 80033b2:	2204      	movs	r2, #4
 80033b4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80033b6:	4b19      	ldr	r3, [pc, #100]	; (800341c <BSP_SDRAM_Init+0xac>)
 80033b8:	2220      	movs	r2, #32
 80033ba:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80033bc:	4b17      	ldr	r3, [pc, #92]	; (800341c <BSP_SDRAM_Init+0xac>)
 80033be:	2240      	movs	r2, #64	; 0x40
 80033c0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80033c2:	4b16      	ldr	r3, [pc, #88]	; (800341c <BSP_SDRAM_Init+0xac>)
 80033c4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80033c8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <BSP_SDRAM_Init+0xac>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80033d0:	4b12      	ldr	r3, [pc, #72]	; (800341c <BSP_SDRAM_Init+0xac>)
 80033d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033d6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80033d8:	4b10      	ldr	r3, [pc, #64]	; (800341c <BSP_SDRAM_Init+0xac>)
 80033da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033de:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80033e0:	4b0e      	ldr	r3, [pc, #56]	; (800341c <BSP_SDRAM_Init+0xac>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80033e6:	2100      	movs	r1, #0
 80033e8:	480c      	ldr	r0, [pc, #48]	; (800341c <BSP_SDRAM_Init+0xac>)
 80033ea:	f000 f87f 	bl	80034ec <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80033ee:	490d      	ldr	r1, [pc, #52]	; (8003424 <BSP_SDRAM_Init+0xb4>)
 80033f0:	480a      	ldr	r0, [pc, #40]	; (800341c <BSP_SDRAM_Init+0xac>)
 80033f2:	f005 fe67 	bl	80090c4 <HAL_SDRAM_Init>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80033fc:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <BSP_SDRAM_Init+0xb8>)
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
 8003402:	e002      	b.n	800340a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003404:	4b08      	ldr	r3, [pc, #32]	; (8003428 <BSP_SDRAM_Init+0xb8>)
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800340a:	f240 6003 	movw	r0, #1539	; 0x603
 800340e:	f000 f80d 	bl	800342c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <BSP_SDRAM_Init+0xb8>)
 8003414:	781b      	ldrb	r3, [r3, #0]
}
 8003416:	4618      	mov	r0, r3
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200006cc 	.word	0x200006cc
 8003420:	a0000140 	.word	0xa0000140
 8003424:	2000024c 	.word	0x2000024c
 8003428:	2000003c 	.word	0x2000003c

0800342c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003438:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800343a:	2201      	movs	r2, #1
 800343c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800343e:	4b29      	ldr	r3, [pc, #164]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003440:	2210      	movs	r2, #16
 8003442:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003444:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003446:	2201      	movs	r2, #1
 8003448:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800344a:	4b26      	ldr	r3, [pc, #152]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800344c:	2200      	movs	r2, #0
 800344e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003454:	4923      	ldr	r1, [pc, #140]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003456:	4824      	ldr	r0, [pc, #144]	; (80034e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003458:	f005 fe68 	bl	800912c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800345c:	2001      	movs	r0, #1
 800345e:	f000 f9cd 	bl	80037fc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003462:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003464:	2202      	movs	r2, #2
 8003466:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003468:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800346a:	2210      	movs	r2, #16
 800346c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800346e:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003470:	2201      	movs	r2, #1
 8003472:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003474:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003476:	2200      	movs	r2, #0
 8003478:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800347a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800347e:	4919      	ldr	r1, [pc, #100]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003480:	4819      	ldr	r0, [pc, #100]	; (80034e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003482:	f005 fe53 	bl	800912c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003486:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003488:	2203      	movs	r2, #3
 800348a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800348c:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800348e:	2210      	movs	r2, #16
 8003490:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003492:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003494:	2208      	movs	r2, #8
 8003496:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003498:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800349a:	2200      	movs	r2, #0
 800349c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800349e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034a2:	4910      	ldr	r1, [pc, #64]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034a4:	4810      	ldr	r0, [pc, #64]	; (80034e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034a6:	f005 fe41 	bl	800912c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80034aa:	f44f 730c 	mov.w	r3, #560	; 0x230
 80034ae:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80034b0:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034b2:	2204      	movs	r2, #4
 80034b4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80034b6:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034b8:	2210      	movs	r2, #16
 80034ba:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034be:	2201      	movs	r2, #1
 80034c0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4a07      	ldr	r2, [pc, #28]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034c6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80034c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034cc:	4905      	ldr	r1, [pc, #20]	; (80034e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034ce:	4806      	ldr	r0, [pc, #24]	; (80034e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034d0:	f005 fe2c 	bl	800912c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4804      	ldr	r0, [pc, #16]	; (80034e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034d8:	f005 fe53 	bl	8009182 <HAL_SDRAM_ProgramRefreshRate>
}
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20000268 	.word	0x20000268
 80034e8:	200006cc 	.word	0x200006cc

080034ec <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b090      	sub	sp, #64	; 0x40
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80034f6:	4b71      	ldr	r3, [pc, #452]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	4a70      	ldr	r2, [pc, #448]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6393      	str	r3, [r2, #56]	; 0x38
 8003502:	4b6e      	ldr	r3, [pc, #440]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 8003504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	62bb      	str	r3, [r7, #40]	; 0x28
 800350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800350e:	4b6b      	ldr	r3, [pc, #428]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	4a6a      	ldr	r2, [pc, #424]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 8003514:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003518:	6313      	str	r3, [r2, #48]	; 0x30
 800351a:	4b68      	ldr	r3, [pc, #416]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003526:	4b65      	ldr	r3, [pc, #404]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	4a64      	ldr	r2, [pc, #400]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 800352c:	f043 0308 	orr.w	r3, r3, #8
 8003530:	6313      	str	r3, [r2, #48]	; 0x30
 8003532:	4b62      	ldr	r3, [pc, #392]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	623b      	str	r3, [r7, #32]
 800353c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800353e:	4b5f      	ldr	r3, [pc, #380]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	4a5e      	ldr	r2, [pc, #376]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 8003544:	f043 0310 	orr.w	r3, r3, #16
 8003548:	6313      	str	r3, [r2, #48]	; 0x30
 800354a:	4b5c      	ldr	r3, [pc, #368]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	61fb      	str	r3, [r7, #28]
 8003554:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003556:	4b59      	ldr	r3, [pc, #356]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	4a58      	ldr	r2, [pc, #352]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 800355c:	f043 0320 	orr.w	r3, r3, #32
 8003560:	6313      	str	r3, [r2, #48]	; 0x30
 8003562:	4b56      	ldr	r3, [pc, #344]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800356e:	4b53      	ldr	r3, [pc, #332]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	4a52      	ldr	r2, [pc, #328]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 8003574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003578:	6313      	str	r3, [r2, #48]	; 0x30
 800357a:	4b50      	ldr	r3, [pc, #320]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003586:	4b4d      	ldr	r3, [pc, #308]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	4a4c      	ldr	r2, [pc, #304]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 800358c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003590:	6313      	str	r3, [r2, #48]	; 0x30
 8003592:	4b4a      	ldr	r3, [pc, #296]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800359e:	4b47      	ldr	r3, [pc, #284]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	4a46      	ldr	r2, [pc, #280]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 80035a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a8:	6313      	str	r3, [r2, #48]	; 0x30
 80035aa:	4b44      	ldr	r3, [pc, #272]	; (80036bc <BSP_SDRAM_MspInit+0x1d0>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80035b6:	2302      	movs	r3, #2
 80035b8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80035ba:	2301      	movs	r3, #1
 80035bc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80035be:	2303      	movs	r3, #3
 80035c0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80035c2:	230c      	movs	r3, #12
 80035c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80035c6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80035ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80035cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035d0:	4619      	mov	r1, r3
 80035d2:	483b      	ldr	r0, [pc, #236]	; (80036c0 <BSP_SDRAM_MspInit+0x1d4>)
 80035d4:	f002 f912 	bl	80057fc <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80035d8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80035de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035e2:	4619      	mov	r1, r3
 80035e4:	4837      	ldr	r0, [pc, #220]	; (80036c4 <BSP_SDRAM_MspInit+0x1d8>)
 80035e6:	f002 f909 	bl	80057fc <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80035ea:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80035f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035f4:	4619      	mov	r1, r3
 80035f6:	4834      	ldr	r0, [pc, #208]	; (80036c8 <BSP_SDRAM_MspInit+0x1dc>)
 80035f8:	f002 f900 	bl	80057fc <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 80035fc:	f248 1337 	movw	r3, #33079	; 0x8137
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003602:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003606:	4619      	mov	r1, r3
 8003608:	4830      	ldr	r0, [pc, #192]	; (80036cc <BSP_SDRAM_MspInit+0x1e0>)
 800360a:	f002 f8f7 	bl	80057fc <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800360e:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8003612:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003614:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003618:	4619      	mov	r1, r3
 800361a:	482d      	ldr	r0, [pc, #180]	; (80036d0 <BSP_SDRAM_MspInit+0x1e4>)
 800361c:	f002 f8ee 	bl	80057fc <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8003620:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8003624:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8003626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800362a:	4619      	mov	r1, r3
 800362c:	4829      	ldr	r0, [pc, #164]	; (80036d4 <BSP_SDRAM_MspInit+0x1e8>)
 800362e:	f002 f8e5 	bl	80057fc <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003632:	4b29      	ldr	r3, [pc, #164]	; (80036d8 <BSP_SDRAM_MspInit+0x1ec>)
 8003634:	2200      	movs	r2, #0
 8003636:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003638:	4b27      	ldr	r3, [pc, #156]	; (80036d8 <BSP_SDRAM_MspInit+0x1ec>)
 800363a:	2280      	movs	r2, #128	; 0x80
 800363c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800363e:	4b26      	ldr	r3, [pc, #152]	; (80036d8 <BSP_SDRAM_MspInit+0x1ec>)
 8003640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003644:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003646:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <BSP_SDRAM_MspInit+0x1ec>)
 8003648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800364c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800364e:	4b22      	ldr	r3, [pc, #136]	; (80036d8 <BSP_SDRAM_MspInit+0x1ec>)
 8003650:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003654:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003656:	4b20      	ldr	r3, [pc, #128]	; (80036d8 <BSP_SDRAM_MspInit+0x1ec>)
 8003658:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800365c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800365e:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <BSP_SDRAM_MspInit+0x1ec>)
 8003660:	2200      	movs	r2, #0
 8003662:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003664:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <BSP_SDRAM_MspInit+0x1ec>)
 8003666:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800366a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800366c:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <BSP_SDRAM_MspInit+0x1ec>)
 800366e:	2200      	movs	r2, #0
 8003670:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003672:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <BSP_SDRAM_MspInit+0x1ec>)
 8003674:	2203      	movs	r2, #3
 8003676:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003678:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <BSP_SDRAM_MspInit+0x1ec>)
 800367a:	2200      	movs	r2, #0
 800367c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800367e:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <BSP_SDRAM_MspInit+0x1ec>)
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003684:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <BSP_SDRAM_MspInit+0x1ec>)
 8003686:	4a15      	ldr	r2, [pc, #84]	; (80036dc <BSP_SDRAM_MspInit+0x1f0>)
 8003688:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <BSP_SDRAM_MspInit+0x1ec>)
 800368e:	631a      	str	r2, [r3, #48]	; 0x30
 8003690:	4a11      	ldr	r2, [pc, #68]	; (80036d8 <BSP_SDRAM_MspInit+0x1ec>)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003696:	4810      	ldr	r0, [pc, #64]	; (80036d8 <BSP_SDRAM_MspInit+0x1ec>)
 8003698:	f000 fa92 	bl	8003bc0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800369c:	480e      	ldr	r0, [pc, #56]	; (80036d8 <BSP_SDRAM_MspInit+0x1ec>)
 800369e:	f000 f9e1 	bl	8003a64 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80036a2:	2200      	movs	r2, #0
 80036a4:	210f      	movs	r1, #15
 80036a6:	2038      	movs	r0, #56	; 0x38
 80036a8:	f000 f9a4 	bl	80039f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80036ac:	2038      	movs	r0, #56	; 0x38
 80036ae:	f000 f9bd 	bl	8003a2c <HAL_NVIC_EnableIRQ>
}
 80036b2:	bf00      	nop
 80036b4:	3740      	adds	r7, #64	; 0x40
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40020c00 	.word	0x40020c00
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40021400 	.word	0x40021400
 80036cc:	40021800 	.word	0x40021800
 80036d0:	40021c00 	.word	0x40021c00
 80036d4:	40022000 	.word	0x40022000
 80036d8:	20000278 	.word	0x20000278
 80036dc:	40026410 	.word	0x40026410

080036e0 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	460a      	mov	r2, r1
 80036ea:	80fb      	strh	r3, [r7, #6]
 80036ec:	4613      	mov	r3, r2
 80036ee:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 80036f8:	4b25      	ldr	r3, [pc, #148]	; (8003790 <BSP_TS_Init+0xb0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a25      	ldr	r2, [pc, #148]	; (8003794 <BSP_TS_Init+0xb4>)
 80036fe:	7812      	ldrb	r2, [r2, #0]
 8003700:	b292      	uxth	r2, r2
 8003702:	4610      	mov	r0, r2
 8003704:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8003706:	4b22      	ldr	r3, [pc, #136]	; (8003790 <BSP_TS_Init+0xb0>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2054      	movs	r0, #84	; 0x54
 800370c:	4798      	blx	r3
 800370e:	4603      	mov	r3, r0
 8003710:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8003712:	7b7b      	ldrb	r3, [r7, #13]
 8003714:	2b11      	cmp	r3, #17
 8003716:	d009      	beq.n	800372c <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8003718:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <BSP_TS_Init+0xb0>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2070      	movs	r0, #112	; 0x70
 800371e:	4798      	blx	r3
 8003720:	4603      	mov	r3, r0
 8003722:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <BSP_TS_Init+0xb4>)
 8003726:	2270      	movs	r2, #112	; 0x70
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	e002      	b.n	8003732 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 800372c:	4b19      	ldr	r3, [pc, #100]	; (8003794 <BSP_TS_Init+0xb4>)
 800372e:	2254      	movs	r2, #84	; 0x54
 8003730:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8003732:	7b7b      	ldrb	r3, [r7, #13]
 8003734:	2b11      	cmp	r3, #17
 8003736:	d002      	beq.n	800373e <BSP_TS_Init+0x5e>
 8003738:	7bbb      	ldrb	r3, [r7, #14]
 800373a:	2b11      	cmp	r3, #17
 800373c:	d121      	bne.n	8003782 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 800373e:	4b16      	ldr	r3, [pc, #88]	; (8003798 <BSP_TS_Init+0xb8>)
 8003740:	4a13      	ldr	r2, [pc, #76]	; (8003790 <BSP_TS_Init+0xb0>)
 8003742:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8003744:	88fa      	ldrh	r2, [r7, #6]
 8003746:	88bb      	ldrh	r3, [r7, #4]
 8003748:	429a      	cmp	r2, r3
 800374a:	d203      	bcs.n	8003754 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 800374c:	4b13      	ldr	r3, [pc, #76]	; (800379c <BSP_TS_Init+0xbc>)
 800374e:	2201      	movs	r2, #1
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	e002      	b.n	800375a <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <BSP_TS_Init+0xbc>)
 8003756:	220c      	movs	r2, #12
 8003758:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d112      	bne.n	8003786 <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8003760:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <BSP_TS_Init+0xb8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	4a0b      	ldr	r2, [pc, #44]	; (8003794 <BSP_TS_Init+0xb4>)
 8003768:	7812      	ldrb	r2, [r2, #0]
 800376a:	b292      	uxth	r2, r2
 800376c:	4610      	mov	r0, r2
 800376e:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <BSP_TS_Init+0xb8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	4a07      	ldr	r2, [pc, #28]	; (8003794 <BSP_TS_Init+0xb4>)
 8003778:	7812      	ldrb	r2, [r2, #0]
 800377a:	b292      	uxth	r2, r2
 800377c:	4610      	mov	r0, r2
 800377e:	4798      	blx	r3
    if(ts_status == TS_OK)
 8003780:	e001      	b.n	8003786 <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8003782:	2303      	movs	r3, #3
 8003784:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8003786:	7bfb      	ldrb	r3, [r7, #15]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20000004 	.word	0x20000004
 8003794:	200002dd 	.word	0x200002dd
 8003798:	200002d8 	.word	0x200002d8
 800379c:	200002dc 	.word	0x200002dc

080037a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037a4:	2003      	movs	r0, #3
 80037a6:	f000 f91a 	bl	80039de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037aa:	2000      	movs	r0, #0
 80037ac:	f7fe f94c 	bl	8001a48 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80037b0:	f7fd fefc 	bl	80015ac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_IncTick+0x20>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_IncTick+0x24>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4413      	add	r3, r2
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <HAL_IncTick+0x24>)
 80037ce:	6013      	str	r3, [r2, #0]
}
 80037d0:	bf00      	nop
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	2000003d 	.word	0x2000003d
 80037e0:	20000700 	.word	0x20000700

080037e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return uwTick;
 80037e8:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <HAL_GetTick+0x14>)
 80037ea:	681b      	ldr	r3, [r3, #0]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20000700 	.word	0x20000700

080037fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003804:	f7ff ffee 	bl	80037e4 <HAL_GetTick>
 8003808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003814:	d005      	beq.n	8003822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003816:	4b09      	ldr	r3, [pc, #36]	; (800383c <HAL_Delay+0x40>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4413      	add	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003822:	bf00      	nop
 8003824:	f7ff ffde 	bl	80037e4 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	429a      	cmp	r2, r3
 8003832:	d8f7      	bhi.n	8003824 <HAL_Delay+0x28>
  {
  }
}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	2000003d 	.word	0x2000003d

08003840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <__NVIC_SetPriorityGrouping+0x40>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800385c:	4013      	ands	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003868:	4b06      	ldr	r3, [pc, #24]	; (8003884 <__NVIC_SetPriorityGrouping+0x44>)
 800386a:	4313      	orrs	r3, r2
 800386c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800386e:	4a04      	ldr	r2, [pc, #16]	; (8003880 <__NVIC_SetPriorityGrouping+0x40>)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	60d3      	str	r3, [r2, #12]
}
 8003874:	bf00      	nop
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000ed00 	.word	0xe000ed00
 8003884:	05fa0000 	.word	0x05fa0000

08003888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800388c:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <__NVIC_GetPriorityGrouping+0x18>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	0a1b      	lsrs	r3, r3, #8
 8003892:	f003 0307 	and.w	r3, r3, #7
}
 8003896:	4618      	mov	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	e000ed00 	.word	0xe000ed00

080038a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	db0b      	blt.n	80038ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	f003 021f 	and.w	r2, r3, #31
 80038bc:	4907      	ldr	r1, [pc, #28]	; (80038dc <__NVIC_EnableIRQ+0x38>)
 80038be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	2001      	movs	r0, #1
 80038c6:	fa00 f202 	lsl.w	r2, r0, r2
 80038ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	e000e100 	.word	0xe000e100

080038e0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	db10      	blt.n	8003914 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	f003 021f 	and.w	r2, r3, #31
 80038f8:	4909      	ldr	r1, [pc, #36]	; (8003920 <__NVIC_DisableIRQ+0x40>)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2001      	movs	r0, #1
 8003902:	fa00 f202 	lsl.w	r2, r0, r2
 8003906:	3320      	adds	r3, #32
 8003908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800390c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003910:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	e000e100 	.word	0xe000e100

08003924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003934:	2b00      	cmp	r3, #0
 8003936:	db0a      	blt.n	800394e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	490c      	ldr	r1, [pc, #48]	; (8003970 <__NVIC_SetPriority+0x4c>)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	0112      	lsls	r2, r2, #4
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	440b      	add	r3, r1
 8003948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800394c:	e00a      	b.n	8003964 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	4908      	ldr	r1, [pc, #32]	; (8003974 <__NVIC_SetPriority+0x50>)
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	3b04      	subs	r3, #4
 800395c:	0112      	lsls	r2, r2, #4
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	440b      	add	r3, r1
 8003962:	761a      	strb	r2, [r3, #24]
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000e100 	.word	0xe000e100
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003978:	b480      	push	{r7}
 800397a:	b089      	sub	sp, #36	; 0x24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f1c3 0307 	rsb	r3, r3, #7
 8003992:	2b04      	cmp	r3, #4
 8003994:	bf28      	it	cs
 8003996:	2304      	movcs	r3, #4
 8003998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3304      	adds	r3, #4
 800399e:	2b06      	cmp	r3, #6
 80039a0:	d902      	bls.n	80039a8 <NVIC_EncodePriority+0x30>
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3b03      	subs	r3, #3
 80039a6:	e000      	b.n	80039aa <NVIC_EncodePriority+0x32>
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ac:	f04f 32ff 	mov.w	r2, #4294967295
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43da      	mvns	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	401a      	ands	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c0:	f04f 31ff 	mov.w	r1, #4294967295
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ca:	43d9      	mvns	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d0:	4313      	orrs	r3, r2
         );
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3724      	adds	r7, #36	; 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff ff2a 	bl	8003840 <__NVIC_SetPriorityGrouping>
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a06:	f7ff ff3f 	bl	8003888 <__NVIC_GetPriorityGrouping>
 8003a0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	6978      	ldr	r0, [r7, #20]
 8003a12:	f7ff ffb1 	bl	8003978 <NVIC_EncodePriority>
 8003a16:	4602      	mov	r2, r0
 8003a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff80 	bl	8003924 <__NVIC_SetPriority>
}
 8003a24:	bf00      	nop
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff ff32 	bl	80038a4 <__NVIC_EnableIRQ>
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff ff42 	bl	80038e0 <__NVIC_DisableIRQ>
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a70:	f7ff feb8 	bl	80037e4 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e099      	b.n	8003bb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aa0:	e00f      	b.n	8003ac2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aa2:	f7ff fe9f 	bl	80037e4 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b05      	cmp	r3, #5
 8003aae:	d908      	bls.n	8003ac2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2203      	movs	r2, #3
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e078      	b.n	8003bb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e8      	bne.n	8003aa2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4b38      	ldr	r3, [pc, #224]	; (8003bbc <HAL_DMA_Init+0x158>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d107      	bne.n	8003b2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	4313      	orrs	r3, r2
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f023 0307 	bic.w	r3, r3, #7
 8003b42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d117      	bne.n	8003b86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00e      	beq.n	8003b86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f8bd 	bl	8003ce8 <DMA_CheckFifoParam>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2240      	movs	r2, #64	; 0x40
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b82:	2301      	movs	r3, #1
 8003b84:	e016      	b.n	8003bb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f874 	bl	8003c7c <DMA_CalcBaseAndBitshift>
 8003b94:	4603      	mov	r3, r0
 8003b96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9c:	223f      	movs	r2, #63	; 0x3f
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	e010803f 	.word	0xe010803f

08003bc0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e050      	b.n	8003c74 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d101      	bne.n	8003be2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003bde:	2302      	movs	r3, #2
 8003be0:	e048      	b.n	8003c74 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0201 	bic.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2200      	movs	r2, #0
 8003c08:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2200      	movs	r2, #0
 8003c18:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2221      	movs	r2, #33	; 0x21
 8003c20:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f82a 	bl	8003c7c <DMA_CalcBaseAndBitshift>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c30:	223f      	movs	r2, #63	; 0x3f
 8003c32:	409a      	lsls	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	3b10      	subs	r3, #16
 8003c8c:	4a13      	ldr	r2, [pc, #76]	; (8003cdc <DMA_CalcBaseAndBitshift+0x60>)
 8003c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c92:	091b      	lsrs	r3, r3, #4
 8003c94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c96:	4a12      	ldr	r2, [pc, #72]	; (8003ce0 <DMA_CalcBaseAndBitshift+0x64>)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d908      	bls.n	8003cbc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <DMA_CalcBaseAndBitshift+0x68>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	1d1a      	adds	r2, r3, #4
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	659a      	str	r2, [r3, #88]	; 0x58
 8003cba:	e006      	b.n	8003cca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <DMA_CalcBaseAndBitshift+0x68>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	aaaaaaab 	.word	0xaaaaaaab
 8003ce0:	0800f8b4 	.word	0x0800f8b4
 8003ce4:	fffffc00 	.word	0xfffffc00

08003ce8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d11f      	bne.n	8003d42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d855      	bhi.n	8003db4 <DMA_CheckFifoParam+0xcc>
 8003d08:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <DMA_CheckFifoParam+0x28>)
 8003d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0e:	bf00      	nop
 8003d10:	08003d21 	.word	0x08003d21
 8003d14:	08003d33 	.word	0x08003d33
 8003d18:	08003d21 	.word	0x08003d21
 8003d1c:	08003db5 	.word	0x08003db5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d045      	beq.n	8003db8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d30:	e042      	b.n	8003db8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d3a:	d13f      	bne.n	8003dbc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d40:	e03c      	b.n	8003dbc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d4a:	d121      	bne.n	8003d90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d836      	bhi.n	8003dc0 <DMA_CheckFifoParam+0xd8>
 8003d52:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <DMA_CheckFifoParam+0x70>)
 8003d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d58:	08003d69 	.word	0x08003d69
 8003d5c:	08003d6f 	.word	0x08003d6f
 8003d60:	08003d69 	.word	0x08003d69
 8003d64:	08003d81 	.word	0x08003d81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d6c:	e02f      	b.n	8003dce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d024      	beq.n	8003dc4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d7e:	e021      	b.n	8003dc4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d88:	d11e      	bne.n	8003dc8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d8e:	e01b      	b.n	8003dc8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d902      	bls.n	8003d9c <DMA_CheckFifoParam+0xb4>
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d003      	beq.n	8003da2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d9a:	e018      	b.n	8003dce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003da0:	e015      	b.n	8003dce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00e      	beq.n	8003dcc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
      break;
 8003db2:	e00b      	b.n	8003dcc <DMA_CheckFifoParam+0xe4>
      break;
 8003db4:	bf00      	nop
 8003db6:	e00a      	b.n	8003dce <DMA_CheckFifoParam+0xe6>
      break;
 8003db8:	bf00      	nop
 8003dba:	e008      	b.n	8003dce <DMA_CheckFifoParam+0xe6>
      break;
 8003dbc:	bf00      	nop
 8003dbe:	e006      	b.n	8003dce <DMA_CheckFifoParam+0xe6>
      break;
 8003dc0:	bf00      	nop
 8003dc2:	e004      	b.n	8003dce <DMA_CheckFifoParam+0xe6>
      break;
 8003dc4:	bf00      	nop
 8003dc6:	e002      	b.n	8003dce <DMA_CheckFifoParam+0xe6>
      break;   
 8003dc8:	bf00      	nop
 8003dca:	e000      	b.n	8003dce <DMA_CheckFifoParam+0xe6>
      break;
 8003dcc:	bf00      	nop
    }
  } 
  
  return status; 
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e049      	b.n	8003e82 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fd fbf6 	bl	80015f4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2c:	f023 0107 	bic.w	r1, r3, #7
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <HAL_DMA2D_Init+0xb0>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	68d1      	ldr	r1, [r2, #12]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e58:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	051a      	lsls	r2, r3, #20
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	055b      	lsls	r3, r3, #21
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	ffffc000 	.word	0xffffc000

08003e90 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_DMA2D_Start+0x1c>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e018      	b.n	8003ede <HAL_DMA2D_Start+0x4e>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 faa4 	bl	8004414 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d056      	beq.n	8003fb0 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003f02:	f7ff fc6f 	bl	80037e4 <HAL_GetTick>
 8003f06:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003f08:	e04b      	b.n	8003fa2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d023      	beq.n	8003f64 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2a:	f043 0202 	orr.w	r2, r3, #2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f40:	f043 0201 	orr.w	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2221      	movs	r2, #33	; 0x21
 8003f4e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2204      	movs	r2, #4
 8003f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0a5      	b.n	80040b0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6a:	d01a      	beq.n	8003fa2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003f6c:	f7ff fc3a 	bl	80037e4 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d302      	bcc.n	8003f82 <HAL_DMA2D_PollForTransfer+0x9c>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10f      	bne.n	8003fa2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	f043 0220 	orr.w	r2, r3, #32
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2203      	movs	r2, #3
 8003f92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e086      	b.n	80040b0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0ac      	beq.n	8003f0a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d061      	beq.n	8004096 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fd2:	f7ff fc07 	bl	80037e4 <HAL_GetTick>
 8003fd6:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003fd8:	e056      	b.n	8004088 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d02e      	beq.n	800404a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d005      	beq.n	8004002 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	f043 0204 	orr.w	r2, r3, #4
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004010:	f043 0202 	orr.w	r2, r3, #2
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	f043 0201 	orr.w	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2229      	movs	r2, #41	; 0x29
 8004034:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2204      	movs	r2, #4
 800403a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e032      	b.n	80040b0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004050:	d01a      	beq.n	8004088 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004052:	f7ff fbc7 	bl	80037e4 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d302      	bcc.n	8004068 <HAL_DMA2D_PollForTransfer+0x182>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10f      	bne.n	8004088 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406c:	f043 0220 	orr.w	r2, r3, #32
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2203      	movs	r2, #3
 8004078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e013      	b.n	80040b0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0a1      	beq.n	8003fda <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2212      	movs	r2, #18
 800409c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d026      	beq.n	8004128 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d021      	beq.n	8004128 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040f2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f8:	f043 0201 	orr.w	r2, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2201      	movs	r2, #1
 8004106:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2204      	movs	r2, #4
 800410c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	d026      	beq.n	8004180 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d021      	beq.n	8004180 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800414a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2220      	movs	r2, #32
 8004152:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	f043 0202 	orr.w	r2, r3, #2
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2204      	movs	r2, #4
 8004164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d026      	beq.n	80041d8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004190:	2b00      	cmp	r3, #0
 8004192:	d021      	beq.n	80041d8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041a2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2208      	movs	r2, #8
 80041aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	f043 0204 	orr.w	r2, r3, #4
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2204      	movs	r2, #4
 80041bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d013      	beq.n	800420a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00e      	beq.n	800420a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2204      	movs	r2, #4
 8004202:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f853 	bl	80042b0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d024      	beq.n	800425e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01f      	beq.n	800425e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800422c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2202      	movs	r2, #2
 8004234:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferCpltCallback != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01f      	beq.n	80042a8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d01a      	beq.n	80042a8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004280:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2210      	movs	r2, #16
 8004288:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f80e 	bl	80042c4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_DMA2D_ConfigLayer+0x20>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e084      	b.n	8004402 <HAL_DMA2D_ConfigLayer+0x12a>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	4613      	mov	r3, r2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	4413      	add	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	3320      	adds	r3, #32
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	4413      	add	r3, r2
 8004318:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	041b      	lsls	r3, r3, #16
 8004324:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800432c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004338:	4b35      	ldr	r3, [pc, #212]	; (8004410 <HAL_DMA2D_ConfigLayer+0x138>)
 800433a:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b0a      	cmp	r3, #10
 8004342:	d003      	beq.n	800434c <HAL_DMA2D_ConfigLayer+0x74>
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b09      	cmp	r3, #9
 800434a:	d107      	bne.n	800435c <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	e005      	b.n	8004368 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	061b      	lsls	r3, r3, #24
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d120      	bne.n	80043b0 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	43db      	mvns	r3, r3
 8004378:	ea02 0103 	and.w	r1, r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	430a      	orrs	r2, r1
 8004384:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b0a      	cmp	r3, #10
 8004396:	d003      	beq.n	80043a0 <HAL_DMA2D_ConfigLayer+0xc8>
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b09      	cmp	r3, #9
 800439e:	d127      	bne.n	80043f0 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80043ac:	629a      	str	r2, [r3, #40]	; 0x28
 80043ae:	e01f      	b.n	80043f0 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69da      	ldr	r2, [r3, #28]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	43db      	mvns	r3, r3
 80043ba:	ea02 0103 	and.w	r1, r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b0a      	cmp	r3, #10
 80043d8:	d003      	beq.n	80043e2 <HAL_DMA2D_ConfigLayer+0x10a>
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b09      	cmp	r3, #9
 80043e0:	d106      	bne.n	80043f0 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80043ee:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	ff33000f 	.word	0xff33000f

08004414 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004414:	b480      	push	{r7}
 8004416:	b08b      	sub	sp, #44	; 0x2c
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004428:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	041a      	lsls	r2, r3, #16
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	431a      	orrs	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800444c:	d174      	bne.n	8004538 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004454:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800445c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004464:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d108      	bne.n	8004486 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	431a      	orrs	r2, r3
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	4313      	orrs	r3, r2
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
 8004484:	e053      	b.n	800452e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d106      	bne.n	800449c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	4313      	orrs	r3, r2
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
 800449a:	e048      	b.n	800452e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d111      	bne.n	80044c8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	0cdb      	lsrs	r3, r3, #19
 80044a8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	0a9b      	lsrs	r3, r3, #10
 80044ae:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	08db      	lsrs	r3, r3, #3
 80044b4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	02db      	lsls	r3, r3, #11
 80044be:	4313      	orrs	r3, r2
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
 80044c6:	e032      	b.n	800452e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d117      	bne.n	8004500 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	0fdb      	lsrs	r3, r3, #31
 80044d4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	0cdb      	lsrs	r3, r3, #19
 80044da:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	0adb      	lsrs	r3, r3, #11
 80044e0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	08db      	lsrs	r3, r3, #3
 80044e6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	029b      	lsls	r3, r3, #10
 80044f0:	431a      	orrs	r2, r3
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	03db      	lsls	r3, r3, #15
 80044f6:	4313      	orrs	r3, r2
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
 80044fe:	e016      	b.n	800452e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	0f1b      	lsrs	r3, r3, #28
 8004504:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	0d1b      	lsrs	r3, r3, #20
 800450a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	0b1b      	lsrs	r3, r3, #12
 8004510:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	091b      	lsrs	r3, r3, #4
 8004516:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	011a      	lsls	r2, r3, #4
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	431a      	orrs	r2, r3
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	031b      	lsls	r3, r3, #12
 8004526:	4313      	orrs	r3, r2
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	4313      	orrs	r3, r2
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004534:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004536:	e003      	b.n	8004540 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	60da      	str	r2, [r3, #12]
}
 8004540:	bf00      	nop
 8004542:	372c      	adds	r7, #44	; 0x2c
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	019a      	lsls	r2, r3, #6
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	431a      	orrs	r2, r3
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	021b      	lsls	r3, r3, #8
 8004566:	431a      	orrs	r2, r3
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	041b      	lsls	r3, r3, #16
 800456c:	431a      	orrs	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004572:	bf00      	nop
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b086      	sub	sp, #24
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800458c:	f7ff f92a 	bl	80037e4 <HAL_GetTick>
 8004590:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004592:	e009      	b.n	80045a8 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8004594:	f7ff f926 	bl	80037e4 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045a2:	d901      	bls.n	80045a8 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e015      	b.n	80045d4 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0ee      	beq.n	8004594 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	019a      	lsls	r2, r3, #6
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	431a      	orrs	r2, r3
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	021b      	lsls	r3, r3, #8
 80045c2:	ea42 0103 	orr.w	r1, r2, r3
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	041a      	lsls	r2, r3, #16
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e106      	b.n	80047fe <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	7c5b      	ldrb	r3, [r3, #17]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d102      	bne.n	8004600 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fd f820 	bl	8001640 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2203      	movs	r2, #3
 8004604:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8004606:	2300      	movs	r3, #0
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800461a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800462e:	f7ff f8d9 	bl	80037e4 <HAL_GetTick>
 8004632:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004634:	e009      	b.n	800464a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004636:	f7ff f8d5 	bl	80037e4 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004644:	d901      	bls.n	800464a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e0d9      	b.n	80047fe <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0ed      	beq.n	8004636 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4b68      	ldr	r3, [pc, #416]	; (8004808 <HAL_DSI_Init+0x22c>)
 8004668:	400b      	ands	r3, r1
 800466a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	009a      	lsls	r2, r3, #2
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	02db      	lsls	r3, r3, #11
 8004682:	431a      	orrs	r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	041b      	lsls	r3, r3, #16
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046be:	f7ff f891 	bl	80037e4 <HAL_GetTick>
 80046c2:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80046c4:	e009      	b.n	80046da <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80046c6:	f7ff f88d 	bl	80037e4 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046d4:	d901      	bls.n	80046da <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e091      	b.n	80047fe <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80046e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0ed      	beq.n	80046c6 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0206 	orr.w	r2, r2, #6
 80046fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0203 	bic.w	r2, r2, #3
 800470e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0201 	orr.w	r2, r2, #1
 8004728:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0203 	bic.w	r2, r2, #3
 800473c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004764:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6899      	ldr	r1, [r3, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <HAL_DSI_Init+0x1aa>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	e000      	b.n	8004788 <HAL_DSI_Init+0x1ac>
 8004786:	2301      	movs	r3, #1
 8004788:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	4a1f      	ldr	r2, [pc, #124]	; (800480c <HAL_DSI_Init+0x230>)
 800478e:	fb02 f203 	mul.w	r2, r2, r3
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	409a      	lsls	r2, r3
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80047a4:	fb01 f303 	mul.w	r3, r1, r3
 80047a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ac:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80047be:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3720      	adds	r7, #32
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	fffc8603 	.word	0xfffc8603
 800480c:	003d0900 	.word	0x003d0900

08004810 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e066      	b.n	80048f0 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2203      	movs	r2, #3
 8004826:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0208 	bic.w	r2, r2, #8
 800483c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8004850:	2300      	movs	r3, #0
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0201 	bic.w	r2, r2, #1
 8004862:	605a      	str	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	613b      	str	r3, [r7, #16]
 8004870:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0206 	bic.w	r2, r2, #6
 8004882:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0201 	bic.w	r2, r2, #1
 800489a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 80048ae:	2300      	movs	r3, #0
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80048c2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80048ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048d2:	60bb      	str	r3, [r7, #8]
 80048d4:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fc fefe 	bl	80016d8 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	7c1b      	ldrb	r3, [r3, #16]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d101      	bne.n	800490e <HAL_DSI_ConfigErrorMonitor+0x16>
 800490a:	2302      	movs	r3, #2
 800490c:	e0aa      	b.n	8004a64 <HAL_DSI_ConfigErrorMonitor+0x16c>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2200      	movs	r2, #0
 800491a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2200      	movs	r2, #0
 8004924:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004948:	430b      	orrs	r3, r1
 800494a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d009      	beq.n	800496c <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8004968:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	2b00      	cmp	r3, #0
 8004974:	d009      	beq.n	800498a <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b00      	cmp	r3, #0
 8004992:	d009      	beq.n	80049a8 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f042 0202 	orr.w	r2, r2, #2
 80049a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 020c 	orr.w	r2, r2, #12
 80049c2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	f003 0320 	and.w	r3, r3, #32
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d009      	beq.n	80049e4 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0210 	orr.w	r2, r2, #16
 80049e0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0220 	orr.w	r2, r2, #32
 80049fe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d009      	beq.n	8004a20 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a1c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d009      	beq.n	8004a3e <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a3a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d009      	beq.n	8004a5c <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8004a58:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00f      	beq.n	8004aa8 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d007      	beq.n	8004aa8 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f8ad 	bl	8004c02 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00f      	beq.n	8004ad8 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d007      	beq.n	8004ad8 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2202      	movs	r2, #2
 8004ace:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f89f 	bl	8004c16 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 808c 	beq.w	8004bfa <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004aea:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4013      	ands	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b02:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f043 0201 	orr.w	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d005      	beq.n	8004b3c <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	f043 0202 	orr.w	r2, r3, #2
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f043 0204 	orr.w	r2, r3, #4
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	f043 0208 	orr.w	r2, r3, #8
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d005      	beq.n	8004b7e <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f043 0210 	orr.w	r2, r3, #16
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f043 0220 	orr.w	r2, r3, #32
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d005      	beq.n	8004baa <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f818 	bl	8004c2a <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	7c1b      	ldrb	r3, [r3, #16]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_DSI_SetGenericVCID+0x16>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e016      	b.n	8004c82 <HAL_DSI_SetGenericVCID+0x44>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0203 	bic.w	r2, r2, #3
 8004c68:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
	...

08004c90 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	7c1b      	ldrb	r3, [r3, #16]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_DSI_ConfigVideoMode+0x16>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e1ee      	b.n	8005084 <HAL_DSI_ConfigVideoMode+0x3f4>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0201 	bic.w	r2, r2, #1
 8004cba:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0201 	bic.w	r2, r2, #1
 8004ccc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0203 	bic.w	r2, r2, #3
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	4b8b      	ldr	r3, [pc, #556]	; (8004f2c <HAL_DSI_ConfigVideoMode+0x29c>)
 8004cfe:	400b      	ands	r3, r1
 8004d00:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4b84      	ldr	r3, [pc, #528]	; (8004f30 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004d20:	400b      	ands	r3, r1
 8004d22:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	4b7b      	ldr	r3, [pc, #492]	; (8004f30 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004d42:	400b      	ands	r3, r1
 8004d44:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	699a      	ldr	r2, [r3, #24]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0203 	bic.w	r2, r2, #3
 8004d66:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68d9      	ldr	r1, [r3, #12]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695a      	ldr	r2, [r3, #20]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0207 	bic.w	r2, r2, #7
 8004d88:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6959      	ldr	r1, [r3, #20]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 020f 	bic.w	r2, r2, #15
 8004db6:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6919      	ldr	r1, [r3, #16]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 020e 	bic.w	r2, r2, #14
 8004dda:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	005a      	lsls	r2, r3, #1
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d110      	bne.n	8004e20 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e0c:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6919      	ldr	r1, [r3, #16]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4b42      	ldr	r3, [pc, #264]	; (8004f34 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004e2c:	400b      	ands	r3, r1
 8004e2e:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	4b39      	ldr	r3, [pc, #228]	; (8004f34 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004e4e:	400b      	ands	r3, r1
 8004e50:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4b32      	ldr	r3, [pc, #200]	; (8004f38 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8004e70:	400b      	ands	r3, r1
 8004e72:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4b2a      	ldr	r3, [pc, #168]	; (8004f3c <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004e92:	400b      	ands	r3, r1
 8004e94:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4b22      	ldr	r3, [pc, #136]	; (8004f3c <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004eb4:	400b      	ands	r3, r1
 8004eb6:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4b19      	ldr	r3, [pc, #100]	; (8004f3c <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004ed6:	400b      	ands	r3, r1
 8004ed8:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <HAL_DSI_ConfigVideoMode+0x29c>)
 8004ef8:	400b      	ands	r3, r1
 8004efa:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f1c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f28:	e00a      	b.n	8004f40 <HAL_DSI_ConfigVideoMode+0x2b0>
 8004f2a:	bf00      	nop
 8004f2c:	ffffc000 	.word	0xffffc000
 8004f30:	ffffe000 	.word	0xffffe000
 8004f34:	fffff000 	.word	0xfffff000
 8004f38:	ffff8000 	.word	0xffff8000
 8004f3c:	fffffc00 	.word	0xfffffc00
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004f56:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6999      	ldr	r1, [r3, #24]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f62:	041a      	lsls	r2, r3, #16
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f7a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6999      	ldr	r1, [r3, #24]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fe0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005002:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005024:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005046:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005068:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	7c1b      	ldrb	r3, [r3, #16]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e0c5      	b.n	8005232 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0201 	orr.w	r2, r2, #1
 80050ba:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0201 	bic.w	r2, r2, #1
 80050cc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0201 	orr.w	r2, r2, #1
 80050e0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0203 	bic.w	r2, r2, #3
 80050f2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68d9      	ldr	r1, [r3, #12]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695a      	ldr	r2, [r3, #20]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0207 	bic.w	r2, r2, #7
 8005114:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6959      	ldr	r1, [r3, #20]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	431a      	orrs	r2, r3
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 020f 	bic.w	r2, r2, #15
 8005142:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6919      	ldr	r1, [r3, #16]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 020e 	bic.w	r2, r2, #14
 8005166:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	005a      	lsls	r2, r3, #1
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	4b2c      	ldr	r3, [pc, #176]	; (8005240 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800518e:	400b      	ands	r3, r1
 8005190:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80051b4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	431a      	orrs	r2, r3
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0201 	bic.w	r2, r2, #1
 80051ee:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0202 	orr.w	r2, r2, #2
 8005226:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	ffff0000 	.word	0xffff0000

08005244 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	7c1b      	ldrb	r3, [r3, #16]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_DSI_ConfigCommand+0x16>
 8005256:	2302      	movs	r3, #2
 8005258:	e049      	b.n	80052ee <HAL_DSI_ConfigCommand+0xaa>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b24      	ldr	r3, [pc, #144]	; (80052fc <HAL_DSI_ConfigCommand+0xb8>)
 800526c:	400b      	ands	r3, r1
 800526e:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800527e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8005284:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800528a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8005290:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8005296:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 800529c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80052a2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80052a8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80052ae:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80052b4:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80052ba:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0202 	bic.w	r2, r2, #2
 80052d2:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	fef080ff 	.word	0xfef080ff

08005300 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	7c1b      	ldrb	r3, [r3, #16]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_DSI_ConfigFlowControl+0x16>
 8005312:	2302      	movs	r3, #2
 8005314:	e016      	b.n	8005344 <HAL_DSI_ConfigFlowControl+0x44>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 021f 	bic.w	r2, r2, #31
 800532a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	7c1b      	ldrb	r3, [r3, #16]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_DSI_ConfigPhyTimer+0x16>
 8005362:	2302      	movs	r3, #2
 8005364:	e058      	b.n	8005418 <HAL_DSI_ConfigPhyTimer+0xc8>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	4293      	cmp	r3, r2
 8005376:	bf38      	it	cc
 8005378:	4613      	movcc	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800538c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	041a      	lsls	r2, r3, #16
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80053ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	041b      	lsls	r3, r3, #16
 80053d0:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80053f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	021a      	lsls	r2, r3, #8
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	7c1b      	ldrb	r3, [r3, #16]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d101      	bne.n	800543a <HAL_DSI_ConfigHostTimeouts+0x16>
 8005436:	2302      	movs	r3, #2
 8005438:	e0b4      	b.n	80055a4 <HAL_DSI_ConfigHostTimeouts+0x180>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800544e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6899      	ldr	r1, [r3, #8]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	021a      	lsls	r2, r3, #8
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	b292      	uxth	r2, r2
 8005470:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	041a      	lsls	r2, r3, #16
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	4b47      	ldr	r3, [pc, #284]	; (80055b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005492:	400b      	ands	r3, r1
 8005494:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4b3f      	ldr	r3, [pc, #252]	; (80055b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80054b4:	400b      	ands	r3, r1
 80054b6:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	4b36      	ldr	r3, [pc, #216]	; (80055b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80054d8:	400b      	ands	r3, r1
 80054da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	4b2b      	ldr	r3, [pc, #172]	; (80055b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005502:	400b      	ands	r3, r1
 8005504:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	695a      	ldr	r2, [r3, #20]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800552e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	4b16      	ldr	r3, [pc, #88]	; (80055b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005556:	400b      	ands	r3, r1
 8005558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	4b0c      	ldr	r3, [pc, #48]	; (80055b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005580:	400b      	ands	r3, r1
 8005582:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	6a1a      	ldr	r2, [r3, #32]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	ffff0000 	.word	0xffff0000

080055b4 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	7c1b      	ldrb	r3, [r3, #16]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_DSI_Start+0x14>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e02b      	b.n	8005620 <HAL_DSI_Start+0x6c>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0201 	orr.w	r2, r2, #1
 80055e0:	605a      	str	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80055f0:	2300      	movs	r3, #0
 80055f2:	60bb      	str	r3, [r7, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0208 	orr.w	r2, r2, #8
 8005604:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af02      	add	r7, sp, #8
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	7c1b      	ldrb	r3, [r3, #16]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d101      	bne.n	8005646 <HAL_DSI_ShortWrite+0x1a>
 8005642:	2302      	movs	r3, #2
 8005644:	e010      	b.n	8005668 <HAL_DSI_ShortWrite+0x3c>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2201      	movs	r2, #1
 800564a:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f7fe ff91 	bl	800457e <DSI_ShortWrite>
 800565c:	4603      	mov	r3, r0
 800565e:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	741a      	strb	r2, [r3, #16]

  return status;
 8005666:	7dfb      	ldrb	r3, [r7, #23]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08c      	sub	sp, #48	; 0x30
 8005674:	af02      	add	r7, sp, #8
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 800567e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005680:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	7c1b      	ldrb	r3, [r3, #16]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d101      	bne.n	800568e <HAL_DSI_LongWrite+0x1e>
 800568a:	2302      	movs	r3, #2
 800568c:	e084      	b.n	8005798 <HAL_DSI_LongWrite+0x128>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8005694:	f7fe f8a6 	bl	80037e4 <HAL_GetTick>
 8005698:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800569a:	e00c      	b.n	80056b6 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800569c:	f7fe f8a2 	bl	80037e4 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056aa:	d904      	bls.n	80056b6 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e070      	b.n	8005798 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0eb      	beq.n	800569c <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80056c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c6:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	bf28      	it	cs
 80056ce:	2303      	movcs	r3, #3
 80056d0:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80056d2:	2300      	movs	r3, #0
 80056d4:	623b      	str	r3, [r7, #32]
 80056d6:	e00f      	b.n	80056f8 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	4413      	add	r3, r2
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	3301      	adds	r3, #1
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	69fa      	ldr	r2, [r7, #28]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	3301      	adds	r3, #1
 80056f6:	623b      	str	r3, [r7, #32]
 80056f8:	6a3a      	ldr	r2, [r7, #32]
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d3eb      	bcc.n	80056d8 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69fa      	ldr	r2, [r7, #28]
 8005706:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4413      	add	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8005718:	e028      	b.n	800576c <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	2b04      	cmp	r3, #4
 800571e:	bf28      	it	cs
 8005720:	2304      	movcs	r3, #4
 8005722:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8005728:	2300      	movs	r3, #0
 800572a:	623b      	str	r3, [r7, #32]
 800572c:	e00e      	b.n	800574c <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	4413      	add	r3, r2
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	69fa      	ldr	r2, [r7, #28]
 8005742:	4313      	orrs	r3, r2
 8005744:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	3301      	adds	r3, #1
 800574a:	623b      	str	r3, [r7, #32]
 800574c:	6a3a      	ldr	r2, [r7, #32]
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	429a      	cmp	r2, r3
 8005752:	d3ec      	bcc.n	800572e <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69fa      	ldr	r2, [r7, #28]
 800575a:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 800575c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	4413      	add	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1d3      	bne.n	800571a <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800577a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	3301      	adds	r3, #1
 8005780:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8005782:	b2db      	uxtb	r3, r3
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	4613      	mov	r3, r2
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	f7fe fede 	bl	800454c <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3728      	adds	r7, #40	; 0x28
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	7c1b      	ldrb	r3, [r3, #16]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d101      	bne.n	80057b6 <HAL_DSI_SetLowPowerRXFilter+0x16>
 80057b2:	2302      	movs	r3, #2
 80057b4:	e01b      	b.n	80057ee <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80057cc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	065a      	lsls	r2, r3, #25
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
	...

080057fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b089      	sub	sp, #36	; 0x24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005806:	2300      	movs	r3, #0
 8005808:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800580a:	2300      	movs	r3, #0
 800580c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800580e:	2300      	movs	r3, #0
 8005810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005812:	2300      	movs	r3, #0
 8005814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005816:	2300      	movs	r3, #0
 8005818:	61fb      	str	r3, [r7, #28]
 800581a:	e175      	b.n	8005b08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800581c:	2201      	movs	r2, #1
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	4013      	ands	r3, r2
 800582e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	429a      	cmp	r2, r3
 8005836:	f040 8164 	bne.w	8005b02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d003      	beq.n	800584a <HAL_GPIO_Init+0x4e>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b12      	cmp	r3, #18
 8005848:	d123      	bne.n	8005892 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	08da      	lsrs	r2, r3, #3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3208      	adds	r2, #8
 8005852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	220f      	movs	r2, #15
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	43db      	mvns	r3, r3
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	4013      	ands	r3, r2
 800586c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4313      	orrs	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	08da      	lsrs	r2, r3, #3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3208      	adds	r2, #8
 800588c:	69b9      	ldr	r1, [r7, #24]
 800588e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	2203      	movs	r2, #3
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43db      	mvns	r3, r3
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	4013      	ands	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f003 0203 	and.w	r2, r3, #3
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4313      	orrs	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d00b      	beq.n	80058e6 <HAL_GPIO_Init+0xea>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d007      	beq.n	80058e6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058da:	2b11      	cmp	r3, #17
 80058dc:	d003      	beq.n	80058e6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b12      	cmp	r3, #18
 80058e4:	d130      	bne.n	8005948 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	2203      	movs	r2, #3
 80058f2:	fa02 f303 	lsl.w	r3, r2, r3
 80058f6:	43db      	mvns	r3, r3
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	4013      	ands	r3, r2
 80058fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	fa02 f303 	lsl.w	r3, r2, r3
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	4313      	orrs	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800591c:	2201      	movs	r2, #1
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	43db      	mvns	r3, r3
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	4013      	ands	r3, r2
 800592a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	091b      	lsrs	r3, r3, #4
 8005932:	f003 0201 	and.w	r2, r3, #1
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	4313      	orrs	r3, r2
 8005940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	2203      	movs	r2, #3
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	43db      	mvns	r3, r3
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	4013      	ands	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	4313      	orrs	r3, r2
 8005970:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 80be 	beq.w	8005b02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005986:	4b65      	ldr	r3, [pc, #404]	; (8005b1c <HAL_GPIO_Init+0x320>)
 8005988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598a:	4a64      	ldr	r2, [pc, #400]	; (8005b1c <HAL_GPIO_Init+0x320>)
 800598c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005990:	6453      	str	r3, [r2, #68]	; 0x44
 8005992:	4b62      	ldr	r3, [pc, #392]	; (8005b1c <HAL_GPIO_Init+0x320>)
 8005994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800599e:	4a60      	ldr	r2, [pc, #384]	; (8005b20 <HAL_GPIO_Init+0x324>)
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	089b      	lsrs	r3, r3, #2
 80059a4:	3302      	adds	r3, #2
 80059a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	220f      	movs	r2, #15
 80059b6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ba:	43db      	mvns	r3, r3
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	4013      	ands	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a57      	ldr	r2, [pc, #348]	; (8005b24 <HAL_GPIO_Init+0x328>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d037      	beq.n	8005a3a <HAL_GPIO_Init+0x23e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a56      	ldr	r2, [pc, #344]	; (8005b28 <HAL_GPIO_Init+0x32c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d031      	beq.n	8005a36 <HAL_GPIO_Init+0x23a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a55      	ldr	r2, [pc, #340]	; (8005b2c <HAL_GPIO_Init+0x330>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d02b      	beq.n	8005a32 <HAL_GPIO_Init+0x236>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a54      	ldr	r2, [pc, #336]	; (8005b30 <HAL_GPIO_Init+0x334>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d025      	beq.n	8005a2e <HAL_GPIO_Init+0x232>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a53      	ldr	r2, [pc, #332]	; (8005b34 <HAL_GPIO_Init+0x338>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01f      	beq.n	8005a2a <HAL_GPIO_Init+0x22e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a52      	ldr	r2, [pc, #328]	; (8005b38 <HAL_GPIO_Init+0x33c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d019      	beq.n	8005a26 <HAL_GPIO_Init+0x22a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a51      	ldr	r2, [pc, #324]	; (8005b3c <HAL_GPIO_Init+0x340>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d013      	beq.n	8005a22 <HAL_GPIO_Init+0x226>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a50      	ldr	r2, [pc, #320]	; (8005b40 <HAL_GPIO_Init+0x344>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00d      	beq.n	8005a1e <HAL_GPIO_Init+0x222>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a4f      	ldr	r2, [pc, #316]	; (8005b44 <HAL_GPIO_Init+0x348>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d007      	beq.n	8005a1a <HAL_GPIO_Init+0x21e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a4e      	ldr	r2, [pc, #312]	; (8005b48 <HAL_GPIO_Init+0x34c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d101      	bne.n	8005a16 <HAL_GPIO_Init+0x21a>
 8005a12:	2309      	movs	r3, #9
 8005a14:	e012      	b.n	8005a3c <HAL_GPIO_Init+0x240>
 8005a16:	230a      	movs	r3, #10
 8005a18:	e010      	b.n	8005a3c <HAL_GPIO_Init+0x240>
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	e00e      	b.n	8005a3c <HAL_GPIO_Init+0x240>
 8005a1e:	2307      	movs	r3, #7
 8005a20:	e00c      	b.n	8005a3c <HAL_GPIO_Init+0x240>
 8005a22:	2306      	movs	r3, #6
 8005a24:	e00a      	b.n	8005a3c <HAL_GPIO_Init+0x240>
 8005a26:	2305      	movs	r3, #5
 8005a28:	e008      	b.n	8005a3c <HAL_GPIO_Init+0x240>
 8005a2a:	2304      	movs	r3, #4
 8005a2c:	e006      	b.n	8005a3c <HAL_GPIO_Init+0x240>
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e004      	b.n	8005a3c <HAL_GPIO_Init+0x240>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e002      	b.n	8005a3c <HAL_GPIO_Init+0x240>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <HAL_GPIO_Init+0x240>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	69fa      	ldr	r2, [r7, #28]
 8005a3e:	f002 0203 	and.w	r2, r2, #3
 8005a42:	0092      	lsls	r2, r2, #2
 8005a44:	4093      	lsls	r3, r2
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005a4c:	4934      	ldr	r1, [pc, #208]	; (8005b20 <HAL_GPIO_Init+0x324>)
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	089b      	lsrs	r3, r3, #2
 8005a52:	3302      	adds	r3, #2
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a5a:	4b3c      	ldr	r3, [pc, #240]	; (8005b4c <HAL_GPIO_Init+0x350>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	43db      	mvns	r3, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	4013      	ands	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a7e:	4a33      	ldr	r2, [pc, #204]	; (8005b4c <HAL_GPIO_Init+0x350>)
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a84:	4b31      	ldr	r3, [pc, #196]	; (8005b4c <HAL_GPIO_Init+0x350>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	4013      	ands	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005aa8:	4a28      	ldr	r2, [pc, #160]	; (8005b4c <HAL_GPIO_Init+0x350>)
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005aae:	4b27      	ldr	r3, [pc, #156]	; (8005b4c <HAL_GPIO_Init+0x350>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	4013      	ands	r3, r2
 8005abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ad2:	4a1e      	ldr	r2, [pc, #120]	; (8005b4c <HAL_GPIO_Init+0x350>)
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ad8:	4b1c      	ldr	r3, [pc, #112]	; (8005b4c <HAL_GPIO_Init+0x350>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005afc:	4a13      	ldr	r2, [pc, #76]	; (8005b4c <HAL_GPIO_Init+0x350>)
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	3301      	adds	r3, #1
 8005b06:	61fb      	str	r3, [r7, #28]
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	2b0f      	cmp	r3, #15
 8005b0c:	f67f ae86 	bls.w	800581c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005b10:	bf00      	nop
 8005b12:	3724      	adds	r7, #36	; 0x24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	40013800 	.word	0x40013800
 8005b24:	40020000 	.word	0x40020000
 8005b28:	40020400 	.word	0x40020400
 8005b2c:	40020800 	.word	0x40020800
 8005b30:	40020c00 	.word	0x40020c00
 8005b34:	40021000 	.word	0x40021000
 8005b38:	40021400 	.word	0x40021400
 8005b3c:	40021800 	.word	0x40021800
 8005b40:	40021c00 	.word	0x40021c00
 8005b44:	40022000 	.word	0x40022000
 8005b48:	40022400 	.word	0x40022400
 8005b4c:	40013c00 	.word	0x40013c00

08005b50 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b66:	2300      	movs	r3, #0
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	e0d9      	b.n	8005d20 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	f040 80c9 	bne.w	8005d1a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005b88:	4a6a      	ldr	r2, [pc, #424]	; (8005d34 <HAL_GPIO_DeInit+0x1e4>)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	089b      	lsrs	r3, r3, #2
 8005b8e:	3302      	adds	r3, #2
 8005b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b94:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f003 0303 	and.w	r3, r3, #3
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	220f      	movs	r2, #15
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a62      	ldr	r2, [pc, #392]	; (8005d38 <HAL_GPIO_DeInit+0x1e8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d037      	beq.n	8005c22 <HAL_GPIO_DeInit+0xd2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a61      	ldr	r2, [pc, #388]	; (8005d3c <HAL_GPIO_DeInit+0x1ec>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d031      	beq.n	8005c1e <HAL_GPIO_DeInit+0xce>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a60      	ldr	r2, [pc, #384]	; (8005d40 <HAL_GPIO_DeInit+0x1f0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d02b      	beq.n	8005c1a <HAL_GPIO_DeInit+0xca>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a5f      	ldr	r2, [pc, #380]	; (8005d44 <HAL_GPIO_DeInit+0x1f4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d025      	beq.n	8005c16 <HAL_GPIO_DeInit+0xc6>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a5e      	ldr	r2, [pc, #376]	; (8005d48 <HAL_GPIO_DeInit+0x1f8>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d01f      	beq.n	8005c12 <HAL_GPIO_DeInit+0xc2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a5d      	ldr	r2, [pc, #372]	; (8005d4c <HAL_GPIO_DeInit+0x1fc>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d019      	beq.n	8005c0e <HAL_GPIO_DeInit+0xbe>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a5c      	ldr	r2, [pc, #368]	; (8005d50 <HAL_GPIO_DeInit+0x200>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d013      	beq.n	8005c0a <HAL_GPIO_DeInit+0xba>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a5b      	ldr	r2, [pc, #364]	; (8005d54 <HAL_GPIO_DeInit+0x204>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00d      	beq.n	8005c06 <HAL_GPIO_DeInit+0xb6>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a5a      	ldr	r2, [pc, #360]	; (8005d58 <HAL_GPIO_DeInit+0x208>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d007      	beq.n	8005c02 <HAL_GPIO_DeInit+0xb2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a59      	ldr	r2, [pc, #356]	; (8005d5c <HAL_GPIO_DeInit+0x20c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d101      	bne.n	8005bfe <HAL_GPIO_DeInit+0xae>
 8005bfa:	2309      	movs	r3, #9
 8005bfc:	e012      	b.n	8005c24 <HAL_GPIO_DeInit+0xd4>
 8005bfe:	230a      	movs	r3, #10
 8005c00:	e010      	b.n	8005c24 <HAL_GPIO_DeInit+0xd4>
 8005c02:	2308      	movs	r3, #8
 8005c04:	e00e      	b.n	8005c24 <HAL_GPIO_DeInit+0xd4>
 8005c06:	2307      	movs	r3, #7
 8005c08:	e00c      	b.n	8005c24 <HAL_GPIO_DeInit+0xd4>
 8005c0a:	2306      	movs	r3, #6
 8005c0c:	e00a      	b.n	8005c24 <HAL_GPIO_DeInit+0xd4>
 8005c0e:	2305      	movs	r3, #5
 8005c10:	e008      	b.n	8005c24 <HAL_GPIO_DeInit+0xd4>
 8005c12:	2304      	movs	r3, #4
 8005c14:	e006      	b.n	8005c24 <HAL_GPIO_DeInit+0xd4>
 8005c16:	2303      	movs	r3, #3
 8005c18:	e004      	b.n	8005c24 <HAL_GPIO_DeInit+0xd4>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e002      	b.n	8005c24 <HAL_GPIO_DeInit+0xd4>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <HAL_GPIO_DeInit+0xd4>
 8005c22:	2300      	movs	r3, #0
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	f002 0203 	and.w	r2, r2, #3
 8005c2a:	0092      	lsls	r2, r2, #2
 8005c2c:	4093      	lsls	r3, r2
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d132      	bne.n	8005c9a <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	220f      	movs	r2, #15
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005c44:	4a3b      	ldr	r2, [pc, #236]	; (8005d34 <HAL_GPIO_DeInit+0x1e4>)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	089b      	lsrs	r3, r3, #2
 8005c4a:	3302      	adds	r3, #2
 8005c4c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	43da      	mvns	r2, r3
 8005c54:	4837      	ldr	r0, [pc, #220]	; (8005d34 <HAL_GPIO_DeInit+0x1e4>)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	089b      	lsrs	r3, r3, #2
 8005c5a:	400a      	ands	r2, r1
 8005c5c:	3302      	adds	r3, #2
 8005c5e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005c62:	4b3f      	ldr	r3, [pc, #252]	; (8005d60 <HAL_GPIO_DeInit+0x210>)
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	493d      	ldr	r1, [pc, #244]	; (8005d60 <HAL_GPIO_DeInit+0x210>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005c70:	4b3b      	ldr	r3, [pc, #236]	; (8005d60 <HAL_GPIO_DeInit+0x210>)
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	43db      	mvns	r3, r3
 8005c78:	4939      	ldr	r1, [pc, #228]	; (8005d60 <HAL_GPIO_DeInit+0x210>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005c7e:	4b38      	ldr	r3, [pc, #224]	; (8005d60 <HAL_GPIO_DeInit+0x210>)
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	43db      	mvns	r3, r3
 8005c86:	4936      	ldr	r1, [pc, #216]	; (8005d60 <HAL_GPIO_DeInit+0x210>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005c8c:	4b34      	ldr	r3, [pc, #208]	; (8005d60 <HAL_GPIO_DeInit+0x210>)
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	43db      	mvns	r3, r3
 8005c94:	4932      	ldr	r1, [pc, #200]	; (8005d60 <HAL_GPIO_DeInit+0x210>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	2103      	movs	r1, #3
 8005ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca8:	43db      	mvns	r3, r3
 8005caa:	401a      	ands	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	08da      	lsrs	r2, r3, #3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3208      	adds	r2, #8
 8005cb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	220f      	movs	r2, #15
 8005cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cca:	43db      	mvns	r3, r3
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	08d2      	lsrs	r2, r2, #3
 8005cd0:	4019      	ands	r1, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3208      	adds	r2, #8
 8005cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	2103      	movs	r1, #3
 8005ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	401a      	ands	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cfc:	43db      	mvns	r3, r3
 8005cfe:	401a      	ands	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	2103      	movs	r1, #3
 8005d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d12:	43db      	mvns	r3, r3
 8005d14:	401a      	ands	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2b0f      	cmp	r3, #15
 8005d24:	f67f af22 	bls.w	8005b6c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005d28:	bf00      	nop
 8005d2a:	371c      	adds	r7, #28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	40013800 	.word	0x40013800
 8005d38:	40020000 	.word	0x40020000
 8005d3c:	40020400 	.word	0x40020400
 8005d40:	40020800 	.word	0x40020800
 8005d44:	40020c00 	.word	0x40020c00
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	40021400 	.word	0x40021400
 8005d50:	40021800 	.word	0x40021800
 8005d54:	40021c00 	.word	0x40021c00
 8005d58:	40022000 	.word	0x40022000
 8005d5c:	40022400 	.word	0x40022400
 8005d60:	40013c00 	.word	0x40013c00

08005d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	887b      	ldrh	r3, [r7, #2]
 8005d76:	4013      	ands	r3, r2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	73fb      	strb	r3, [r7, #15]
 8005d80:	e001      	b.n	8005d86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d82:	2300      	movs	r3, #0
 8005d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	807b      	strh	r3, [r7, #2]
 8005da0:	4613      	mov	r3, r2
 8005da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005da4:	787b      	ldrb	r3, [r7, #1]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005daa:	887a      	ldrh	r2, [r7, #2]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005db0:	e003      	b.n	8005dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005db2:	887b      	ldrh	r3, [r7, #2]
 8005db4:	041a      	lsls	r2, r3, #16
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	619a      	str	r2, [r3, #24]
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
	...

08005dc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e07f      	b.n	8005eda <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d106      	bne.n	8005df4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f8a9 	bl	8005f46 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2224      	movs	r2, #36	; 0x24
 8005df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0201 	bic.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d107      	bne.n	8005e42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e3e:	609a      	str	r2, [r3, #8]
 8005e40:	e006      	b.n	8005e50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005e4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d104      	bne.n	8005e62 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6859      	ldr	r1, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ee4 <HAL_I2C_Init+0x11c>)
 8005e6e:	430b      	orrs	r3, r1
 8005e70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691a      	ldr	r2, [r3, #16]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	ea42 0103 	orr.w	r1, r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	021a      	lsls	r2, r3, #8
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	69d9      	ldr	r1, [r3, #28]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a1a      	ldr	r2, [r3, #32]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0201 	orr.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	02008000 	.word	0x02008000

08005ee8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e021      	b.n	8005f3e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2224      	movs	r2, #36	; 0x24
 8005efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0201 	bic.w	r2, r2, #1
 8005f10:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f821 	bl	8005f5a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
	...

08005f70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	4608      	mov	r0, r1
 8005f7a:	4611      	mov	r1, r2
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	4603      	mov	r3, r0
 8005f80:	817b      	strh	r3, [r7, #10]
 8005f82:	460b      	mov	r3, r1
 8005f84:	813b      	strh	r3, [r7, #8]
 8005f86:	4613      	mov	r3, r2
 8005f88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	f040 80f9 	bne.w	800618a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <HAL_I2C_Mem_Write+0x34>
 8005f9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d105      	bne.n	8005fb0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005faa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0ed      	b.n	800618c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <HAL_I2C_Mem_Write+0x4e>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e0e6      	b.n	800618c <HAL_I2C_Mem_Write+0x21c>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fc6:	f7fd fc0d 	bl	80037e4 <HAL_GetTick>
 8005fca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	2319      	movs	r3, #25
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 fad1 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e0d1      	b.n	800618c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2221      	movs	r2, #33	; 0x21
 8005fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2240      	movs	r2, #64	; 0x40
 8005ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a3a      	ldr	r2, [r7, #32]
 8006002:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006008:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006010:	88f8      	ldrh	r0, [r7, #6]
 8006012:	893a      	ldrh	r2, [r7, #8]
 8006014:	8979      	ldrh	r1, [r7, #10]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	9301      	str	r3, [sp, #4]
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	4603      	mov	r3, r0
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f9e1 	bl	80063e8 <I2C_RequestMemoryWrite>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e0a9      	b.n	800618c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603c:	b29b      	uxth	r3, r3
 800603e:	2bff      	cmp	r3, #255	; 0xff
 8006040:	d90e      	bls.n	8006060 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	22ff      	movs	r2, #255	; 0xff
 8006046:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800604c:	b2da      	uxtb	r2, r3
 800604e:	8979      	ldrh	r1, [r7, #10]
 8006050:	2300      	movs	r3, #0
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 fbb3 	bl	80067c4 <I2C_TransferConfig>
 800605e:	e00f      	b.n	8006080 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606e:	b2da      	uxtb	r2, r3
 8006070:	8979      	ldrh	r1, [r7, #10]
 8006072:	2300      	movs	r3, #0
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 fba2 	bl	80067c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 fabb 	bl	8006600 <I2C_WaitOnTXISFlagUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e07b      	b.n	800618c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	781a      	ldrb	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d034      	beq.n	8006138 <HAL_I2C_Mem_Write+0x1c8>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d130      	bne.n	8006138 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	2200      	movs	r2, #0
 80060de:	2180      	movs	r1, #128	; 0x80
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 fa4d 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e04d      	b.n	800618c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2bff      	cmp	r3, #255	; 0xff
 80060f8:	d90e      	bls.n	8006118 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	22ff      	movs	r2, #255	; 0xff
 80060fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006104:	b2da      	uxtb	r2, r3
 8006106:	8979      	ldrh	r1, [r7, #10]
 8006108:	2300      	movs	r3, #0
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 fb57 	bl	80067c4 <I2C_TransferConfig>
 8006116:	e00f      	b.n	8006138 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006126:	b2da      	uxtb	r2, r3
 8006128:	8979      	ldrh	r1, [r7, #10]
 800612a:	2300      	movs	r3, #0
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 fb46 	bl	80067c4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d19e      	bne.n	8006080 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fa9a 	bl	8006680 <I2C_WaitOnSTOPFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e01a      	b.n	800618c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2220      	movs	r2, #32
 800615c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6859      	ldr	r1, [r3, #4]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <HAL_I2C_Mem_Write+0x224>)
 800616a:	400b      	ands	r3, r1
 800616c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	e000      	b.n	800618c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800618a:	2302      	movs	r3, #2
  }
}
 800618c:	4618      	mov	r0, r3
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	fe00e800 	.word	0xfe00e800

08006198 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	4608      	mov	r0, r1
 80061a2:	4611      	mov	r1, r2
 80061a4:	461a      	mov	r2, r3
 80061a6:	4603      	mov	r3, r0
 80061a8:	817b      	strh	r3, [r7, #10]
 80061aa:	460b      	mov	r3, r1
 80061ac:	813b      	strh	r3, [r7, #8]
 80061ae:	4613      	mov	r3, r2
 80061b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	f040 80fd 	bne.w	80063ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <HAL_I2C_Mem_Read+0x34>
 80061c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d105      	bne.n	80061d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e0f1      	b.n	80063bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d101      	bne.n	80061e6 <HAL_I2C_Mem_Read+0x4e>
 80061e2:	2302      	movs	r3, #2
 80061e4:	e0ea      	b.n	80063bc <HAL_I2C_Mem_Read+0x224>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061ee:	f7fd faf9 	bl	80037e4 <HAL_GetTick>
 80061f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	2319      	movs	r3, #25
 80061fa:	2201      	movs	r2, #1
 80061fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 f9bd 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e0d5      	b.n	80063bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2222      	movs	r2, #34	; 0x22
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2240      	movs	r2, #64	; 0x40
 800621c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a3a      	ldr	r2, [r7, #32]
 800622a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006230:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006238:	88f8      	ldrh	r0, [r7, #6]
 800623a:	893a      	ldrh	r2, [r7, #8]
 800623c:	8979      	ldrh	r1, [r7, #10]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	9301      	str	r3, [sp, #4]
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	4603      	mov	r3, r0
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 f921 	bl	8006490 <I2C_RequestMemoryRead>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d005      	beq.n	8006260 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e0ad      	b.n	80063bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006264:	b29b      	uxth	r3, r3
 8006266:	2bff      	cmp	r3, #255	; 0xff
 8006268:	d90e      	bls.n	8006288 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	22ff      	movs	r2, #255	; 0xff
 800626e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006274:	b2da      	uxtb	r2, r3
 8006276:	8979      	ldrh	r1, [r7, #10]
 8006278:	4b52      	ldr	r3, [pc, #328]	; (80063c4 <HAL_I2C_Mem_Read+0x22c>)
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fa9f 	bl	80067c4 <I2C_TransferConfig>
 8006286:	e00f      	b.n	80062a8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006296:	b2da      	uxtb	r2, r3
 8006298:	8979      	ldrh	r1, [r7, #10]
 800629a:	4b4a      	ldr	r3, [pc, #296]	; (80063c4 <HAL_I2C_Mem_Read+0x22c>)
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 fa8e 	bl	80067c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	2200      	movs	r2, #0
 80062b0:	2104      	movs	r1, #4
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 f964 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e07c      	b.n	80063bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062de:	3b01      	subs	r3, #1
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d034      	beq.n	8006368 <HAL_I2C_Mem_Read+0x1d0>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006302:	2b00      	cmp	r3, #0
 8006304:	d130      	bne.n	8006368 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630c:	2200      	movs	r2, #0
 800630e:	2180      	movs	r1, #128	; 0x80
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f935 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e04d      	b.n	80063bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006324:	b29b      	uxth	r3, r3
 8006326:	2bff      	cmp	r3, #255	; 0xff
 8006328:	d90e      	bls.n	8006348 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	22ff      	movs	r2, #255	; 0xff
 800632e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006334:	b2da      	uxtb	r2, r3
 8006336:	8979      	ldrh	r1, [r7, #10]
 8006338:	2300      	movs	r3, #0
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 fa3f 	bl	80067c4 <I2C_TransferConfig>
 8006346:	e00f      	b.n	8006368 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006356:	b2da      	uxtb	r2, r3
 8006358:	8979      	ldrh	r1, [r7, #10]
 800635a:	2300      	movs	r3, #0
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 fa2e 	bl	80067c4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d19a      	bne.n	80062a8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 f982 	bl	8006680 <I2C_WaitOnSTOPFlagUntilTimeout>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e01a      	b.n	80063bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2220      	movs	r2, #32
 800638c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6859      	ldr	r1, [r3, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <HAL_I2C_Mem_Read+0x230>)
 800639a:	400b      	ands	r3, r1
 800639c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	e000      	b.n	80063bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80063ba:	2302      	movs	r3, #2
  }
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	80002400 	.word	0x80002400
 80063c8:	fe00e800 	.word	0xfe00e800

080063cc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063da:	b2db      	uxtb	r3, r3
}
 80063dc:	4618      	mov	r0, r3
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af02      	add	r7, sp, #8
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	4608      	mov	r0, r1
 80063f2:	4611      	mov	r1, r2
 80063f4:	461a      	mov	r2, r3
 80063f6:	4603      	mov	r3, r0
 80063f8:	817b      	strh	r3, [r7, #10]
 80063fa:	460b      	mov	r3, r1
 80063fc:	813b      	strh	r3, [r7, #8]
 80063fe:	4613      	mov	r3, r2
 8006400:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006402:	88fb      	ldrh	r3, [r7, #6]
 8006404:	b2da      	uxtb	r2, r3
 8006406:	8979      	ldrh	r1, [r7, #10]
 8006408:	4b20      	ldr	r3, [pc, #128]	; (800648c <I2C_RequestMemoryWrite+0xa4>)
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 f9d7 	bl	80067c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006416:	69fa      	ldr	r2, [r7, #28]
 8006418:	69b9      	ldr	r1, [r7, #24]
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 f8f0 	bl	8006600 <I2C_WaitOnTXISFlagUntilTimeout>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e02c      	b.n	8006484 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d105      	bne.n	800643c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006430:	893b      	ldrh	r3, [r7, #8]
 8006432:	b2da      	uxtb	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	629a      	str	r2, [r3, #40]	; 0x28
 800643a:	e015      	b.n	8006468 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800643c:	893b      	ldrh	r3, [r7, #8]
 800643e:	0a1b      	lsrs	r3, r3, #8
 8006440:	b29b      	uxth	r3, r3
 8006442:	b2da      	uxtb	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	69b9      	ldr	r1, [r7, #24]
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 f8d6 	bl	8006600 <I2C_WaitOnTXISFlagUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e012      	b.n	8006484 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800645e:	893b      	ldrh	r3, [r7, #8]
 8006460:	b2da      	uxtb	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	2200      	movs	r2, #0
 8006470:	2180      	movs	r1, #128	; 0x80
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 f884 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e000      	b.n	8006484 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	80002000 	.word	0x80002000

08006490 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af02      	add	r7, sp, #8
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	4608      	mov	r0, r1
 800649a:	4611      	mov	r1, r2
 800649c:	461a      	mov	r2, r3
 800649e:	4603      	mov	r3, r0
 80064a0:	817b      	strh	r3, [r7, #10]
 80064a2:	460b      	mov	r3, r1
 80064a4:	813b      	strh	r3, [r7, #8]
 80064a6:	4613      	mov	r3, r2
 80064a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80064aa:	88fb      	ldrh	r3, [r7, #6]
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	8979      	ldrh	r1, [r7, #10]
 80064b0:	4b20      	ldr	r3, [pc, #128]	; (8006534 <I2C_RequestMemoryRead+0xa4>)
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	2300      	movs	r3, #0
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 f984 	bl	80067c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064bc:	69fa      	ldr	r2, [r7, #28]
 80064be:	69b9      	ldr	r1, [r7, #24]
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 f89d 	bl	8006600 <I2C_WaitOnTXISFlagUntilTimeout>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e02c      	b.n	800652a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064d0:	88fb      	ldrh	r3, [r7, #6]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d105      	bne.n	80064e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064d6:	893b      	ldrh	r3, [r7, #8]
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	629a      	str	r2, [r3, #40]	; 0x28
 80064e0:	e015      	b.n	800650e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80064e2:	893b      	ldrh	r3, [r7, #8]
 80064e4:	0a1b      	lsrs	r3, r3, #8
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064f0:	69fa      	ldr	r2, [r7, #28]
 80064f2:	69b9      	ldr	r1, [r7, #24]
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 f883 	bl	8006600 <I2C_WaitOnTXISFlagUntilTimeout>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e012      	b.n	800652a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006504:	893b      	ldrh	r3, [r7, #8]
 8006506:	b2da      	uxtb	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	2200      	movs	r2, #0
 8006516:	2140      	movs	r1, #64	; 0x40
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 f831 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e000      	b.n	800652a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	80002000 	.word	0x80002000

08006538 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b02      	cmp	r3, #2
 800654c:	d103      	bne.n	8006556 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2200      	movs	r2, #0
 8006554:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b01      	cmp	r3, #1
 8006562:	d007      	beq.n	8006574 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	699a      	ldr	r2, [r3, #24]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0201 	orr.w	r2, r2, #1
 8006572:	619a      	str	r2, [r3, #24]
  }
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	603b      	str	r3, [r7, #0]
 800658c:	4613      	mov	r3, r2
 800658e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006590:	e022      	b.n	80065d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006598:	d01e      	beq.n	80065d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800659a:	f7fd f923 	bl	80037e4 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d302      	bcc.n	80065b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d113      	bne.n	80065d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b4:	f043 0220 	orr.w	r2, r3, #32
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e00f      	b.n	80065f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699a      	ldr	r2, [r3, #24]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	4013      	ands	r3, r2
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	bf0c      	ite	eq
 80065e8:	2301      	moveq	r3, #1
 80065ea:	2300      	movne	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	461a      	mov	r2, r3
 80065f0:	79fb      	ldrb	r3, [r7, #7]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d0cd      	beq.n	8006592 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800660c:	e02c      	b.n	8006668 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 f870 	bl	80066f8 <I2C_IsAcknowledgeFailed>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e02a      	b.n	8006678 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006628:	d01e      	beq.n	8006668 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800662a:	f7fd f8db 	bl	80037e4 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	429a      	cmp	r2, r3
 8006638:	d302      	bcc.n	8006640 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d113      	bne.n	8006668 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006644:	f043 0220 	orr.w	r2, r3, #32
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e007      	b.n	8006678 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b02      	cmp	r3, #2
 8006674:	d1cb      	bne.n	800660e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800668c:	e028      	b.n	80066e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 f830 	bl	80066f8 <I2C_IsAcknowledgeFailed>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e026      	b.n	80066f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a2:	f7fd f89f 	bl	80037e4 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d302      	bcc.n	80066b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d113      	bne.n	80066e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066bc:	f043 0220 	orr.w	r2, r3, #32
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e007      	b.n	80066f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b20      	cmp	r3, #32
 80066ec:	d1cf      	bne.n	800668e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	f003 0310 	and.w	r3, r3, #16
 800670e:	2b10      	cmp	r3, #16
 8006710:	d151      	bne.n	80067b6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006712:	e022      	b.n	800675a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671a:	d01e      	beq.n	800675a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800671c:	f7fd f862 	bl	80037e4 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	429a      	cmp	r2, r3
 800672a:	d302      	bcc.n	8006732 <I2C_IsAcknowledgeFailed+0x3a>
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d113      	bne.n	800675a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006736:	f043 0220 	orr.w	r2, r3, #32
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2220      	movs	r2, #32
 8006742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e02e      	b.n	80067b8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	f003 0320 	and.w	r3, r3, #32
 8006764:	2b20      	cmp	r3, #32
 8006766:	d1d5      	bne.n	8006714 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2210      	movs	r2, #16
 800676e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2220      	movs	r2, #32
 8006776:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7ff fedd 	bl	8006538 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6859      	ldr	r1, [r3, #4]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	4b0d      	ldr	r3, [pc, #52]	; (80067c0 <I2C_IsAcknowledgeFailed+0xc8>)
 800678a:	400b      	ands	r3, r1
 800678c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006792:	f043 0204 	orr.w	r2, r3, #4
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2220      	movs	r2, #32
 800679e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e000      	b.n	80067b8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	fe00e800 	.word	0xfe00e800

080067c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	607b      	str	r3, [r7, #4]
 80067ce:	460b      	mov	r3, r1
 80067d0:	817b      	strh	r3, [r7, #10]
 80067d2:	4613      	mov	r3, r2
 80067d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	0d5b      	lsrs	r3, r3, #21
 80067e0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80067e4:	4b0d      	ldr	r3, [pc, #52]	; (800681c <I2C_TransferConfig+0x58>)
 80067e6:	430b      	orrs	r3, r1
 80067e8:	43db      	mvns	r3, r3
 80067ea:	ea02 0103 	and.w	r1, r2, r3
 80067ee:	897b      	ldrh	r3, [r7, #10]
 80067f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80067f4:	7a7b      	ldrb	r3, [r7, #9]
 80067f6:	041b      	lsls	r3, r3, #16
 80067f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80067fc:	431a      	orrs	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	431a      	orrs	r2, r3
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	431a      	orrs	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800680e:	bf00      	nop
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	03ff63ff 	.word	0x03ff63ff

08006820 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e0bf      	b.n	80069b2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d106      	bne.n	800684c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fa ff66 	bl	8001718 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	699a      	ldr	r2, [r3, #24]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006862:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6999      	ldr	r1, [r3, #24]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006878:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6899      	ldr	r1, [r3, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	4b4a      	ldr	r3, [pc, #296]	; (80069bc <HAL_LTDC_Init+0x19c>)
 8006894:	400b      	ands	r3, r1
 8006896:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	041b      	lsls	r3, r3, #16
 800689e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6899      	ldr	r1, [r3, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	431a      	orrs	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68d9      	ldr	r1, [r3, #12]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	4b3e      	ldr	r3, [pc, #248]	; (80069bc <HAL_LTDC_Init+0x19c>)
 80068c2:	400b      	ands	r3, r1
 80068c4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	041b      	lsls	r3, r3, #16
 80068cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68d9      	ldr	r1, [r3, #12]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a1a      	ldr	r2, [r3, #32]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6919      	ldr	r1, [r3, #16]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	4b33      	ldr	r3, [pc, #204]	; (80069bc <HAL_LTDC_Init+0x19c>)
 80068f0:	400b      	ands	r3, r1
 80068f2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	041b      	lsls	r3, r3, #16
 80068fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6919      	ldr	r1, [r3, #16]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	431a      	orrs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	6959      	ldr	r1, [r3, #20]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	4b27      	ldr	r3, [pc, #156]	; (80069bc <HAL_LTDC_Init+0x19c>)
 800691e:	400b      	ands	r3, r1
 8006920:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	041b      	lsls	r3, r3, #16
 8006928:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6959      	ldr	r1, [r3, #20]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	431a      	orrs	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006946:	021b      	lsls	r3, r3, #8
 8006948:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006950:	041b      	lsls	r3, r3, #16
 8006952:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006962:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0206 	orr.w	r2, r2, #6
 800698e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	699a      	ldr	r2, [r3, #24]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f042 0201 	orr.w	r2, r2, #1
 800699e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	f000f800 	.word	0xf000f800

080069c0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d023      	beq.n	8006a2a <HAL_LTDC_IRQHandler+0x6a>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01e      	beq.n	8006a2a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0204 	bic.w	r2, r2, #4
 80069fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2204      	movs	r2, #4
 8006a02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a0a:	f043 0201 	orr.w	r2, r3, #1
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2204      	movs	r2, #4
 8006a18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f86f 	bl	8006b08 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d023      	beq.n	8006a7c <HAL_LTDC_IRQHandler+0xbc>
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d01e      	beq.n	8006a7c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 0202 	bic.w	r2, r2, #2
 8006a4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2202      	movs	r2, #2
 8006a54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a5c:	f043 0202 	orr.w	r2, r3, #2
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2204      	movs	r2, #4
 8006a6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f846 	bl	8006b08 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d01b      	beq.n	8006abe <HAL_LTDC_IRQHandler+0xfe>
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d016      	beq.n	8006abe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0201 	bic.w	r2, r2, #1
 8006a9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f82f 	bl	8006b1c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f003 0308 	and.w	r3, r3, #8
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01b      	beq.n	8006b00 <HAL_LTDC_IRQHandler+0x140>
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d016      	beq.n	8006b00 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f022 0208 	bic.w	r2, r2, #8
 8006ae0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2208      	movs	r2, #8
 8006ae8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f818 	bl	8006b30 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006b00:	bf00      	nop
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006b44:	b5b0      	push	{r4, r5, r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d101      	bne.n	8006b5e <HAL_LTDC_ConfigLayer+0x1a>
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	e02c      	b.n	8006bb8 <HAL_LTDC_ConfigLayer+0x74>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2202      	movs	r2, #2
 8006b6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2134      	movs	r1, #52	; 0x34
 8006b74:	fb01 f303 	mul.w	r3, r1, r3
 8006b78:	4413      	add	r3, r2
 8006b7a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	4614      	mov	r4, r2
 8006b82:	461d      	mov	r5, r3
 8006b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b90:	682b      	ldr	r3, [r5, #0]
 8006b92:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	68b9      	ldr	r1, [r7, #8]
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f811 	bl	8006bc0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bdb0      	pop	{r4, r5, r7, pc}

08006bc0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b089      	sub	sp, #36	; 0x24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	0c1b      	lsrs	r3, r3, #16
 8006bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bdc:	4413      	add	r3, r2
 8006bde:	041b      	lsls	r3, r3, #16
 8006be0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	461a      	mov	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	01db      	lsls	r3, r3, #7
 8006bec:	4413      	add	r3, r2
 8006bee:	3384      	adds	r3, #132	; 0x84
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	6812      	ldr	r2, [r2, #0]
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	01d2      	lsls	r2, r2, #7
 8006bfc:	440a      	add	r2, r1
 8006bfe:	3284      	adds	r2, #132	; 0x84
 8006c00:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c04:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	0c1b      	lsrs	r3, r3, #16
 8006c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c16:	4413      	add	r3, r2
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	01db      	lsls	r3, r3, #7
 8006c24:	440b      	add	r3, r1
 8006c26:	3384      	adds	r3, #132	; 0x84
 8006c28:	4619      	mov	r1, r3
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	68da      	ldr	r2, [r3, #12]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c3e:	4413      	add	r3, r2
 8006c40:	041b      	lsls	r3, r3, #16
 8006c42:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	01db      	lsls	r3, r3, #7
 8006c4e:	4413      	add	r3, r2
 8006c50:	3384      	adds	r3, #132	; 0x84
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	6812      	ldr	r2, [r2, #0]
 8006c58:	4611      	mov	r1, r2
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	01d2      	lsls	r2, r2, #7
 8006c5e:	440a      	add	r2, r1
 8006c60:	3284      	adds	r2, #132	; 0x84
 8006c62:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c66:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c76:	4413      	add	r3, r2
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	01db      	lsls	r3, r3, #7
 8006c84:	440b      	add	r3, r1
 8006c86:	3384      	adds	r3, #132	; 0x84
 8006c88:	4619      	mov	r1, r3
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	01db      	lsls	r3, r3, #7
 8006c9a:	4413      	add	r3, r2
 8006c9c:	3384      	adds	r3, #132	; 0x84
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	6812      	ldr	r2, [r2, #0]
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	01d2      	lsls	r2, r2, #7
 8006caa:	440a      	add	r2, r1
 8006cac:	3284      	adds	r2, #132	; 0x84
 8006cae:	f023 0307 	bic.w	r3, r3, #7
 8006cb2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	01db      	lsls	r3, r3, #7
 8006cbe:	4413      	add	r3, r2
 8006cc0:	3384      	adds	r3, #132	; 0x84
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006cd0:	021b      	lsls	r3, r3, #8
 8006cd2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006cda:	041b      	lsls	r3, r3, #16
 8006cdc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	061b      	lsls	r3, r3, #24
 8006ce4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	01db      	lsls	r3, r3, #7
 8006cf0:	4413      	add	r3, r2
 8006cf2:	3384      	adds	r3, #132	; 0x84
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	01db      	lsls	r3, r3, #7
 8006d00:	4413      	add	r3, r2
 8006d02:	3384      	adds	r3, #132	; 0x84
 8006d04:	461a      	mov	r2, r3
 8006d06:	2300      	movs	r3, #0
 8006d08:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d10:	461a      	mov	r2, r3
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	431a      	orrs	r2, r3
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	01db      	lsls	r3, r3, #7
 8006d24:	440b      	add	r3, r1
 8006d26:	3384      	adds	r3, #132	; 0x84
 8006d28:	4619      	mov	r1, r3
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	01db      	lsls	r3, r3, #7
 8006d3a:	4413      	add	r3, r2
 8006d3c:	3384      	adds	r3, #132	; 0x84
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	6812      	ldr	r2, [r2, #0]
 8006d44:	4611      	mov	r1, r2
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	01d2      	lsls	r2, r2, #7
 8006d4a:	440a      	add	r2, r1
 8006d4c:	3284      	adds	r2, #132	; 0x84
 8006d4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d52:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	01db      	lsls	r3, r3, #7
 8006d5e:	4413      	add	r3, r2
 8006d60:	3384      	adds	r3, #132	; 0x84
 8006d62:	461a      	mov	r2, r3
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	01db      	lsls	r3, r3, #7
 8006d74:	4413      	add	r3, r2
 8006d76:	3384      	adds	r3, #132	; 0x84
 8006d78:	69da      	ldr	r2, [r3, #28]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	01db      	lsls	r3, r3, #7
 8006d84:	440b      	add	r3, r1
 8006d86:	3384      	adds	r3, #132	; 0x84
 8006d88:	4619      	mov	r1, r3
 8006d8a:	4b58      	ldr	r3, [pc, #352]	; (8006eec <LTDC_SetConfig+0x32c>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	69da      	ldr	r2, [r3, #28]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	68f9      	ldr	r1, [r7, #12]
 8006d9a:	6809      	ldr	r1, [r1, #0]
 8006d9c:	4608      	mov	r0, r1
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	01c9      	lsls	r1, r1, #7
 8006da2:	4401      	add	r1, r0
 8006da4:	3184      	adds	r1, #132	; 0x84
 8006da6:	4313      	orrs	r3, r2
 8006da8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	461a      	mov	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	01db      	lsls	r3, r3, #7
 8006db4:	4413      	add	r3, r2
 8006db6:	3384      	adds	r3, #132	; 0x84
 8006db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	01db      	lsls	r3, r3, #7
 8006dc4:	4413      	add	r3, r2
 8006dc6:	3384      	adds	r3, #132	; 0x84
 8006dc8:	461a      	mov	r2, r3
 8006dca:	2300      	movs	r3, #0
 8006dcc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	01db      	lsls	r3, r3, #7
 8006dd8:	4413      	add	r3, r2
 8006dda:	3384      	adds	r3, #132	; 0x84
 8006ddc:	461a      	mov	r2, r3
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d102      	bne.n	8006df2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006dec:	2304      	movs	r3, #4
 8006dee:	61fb      	str	r3, [r7, #28]
 8006df0:	e01b      	b.n	8006e2a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d102      	bne.n	8006e00 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	61fb      	str	r3, [r7, #28]
 8006dfe:	e014      	b.n	8006e2a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d00b      	beq.n	8006e20 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d007      	beq.n	8006e20 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d003      	beq.n	8006e20 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e1c:	2b07      	cmp	r3, #7
 8006e1e:	d102      	bne.n	8006e26 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006e20:	2302      	movs	r3, #2
 8006e22:	61fb      	str	r3, [r7, #28]
 8006e24:	e001      	b.n	8006e2a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006e26:	2301      	movs	r3, #1
 8006e28:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	01db      	lsls	r3, r3, #7
 8006e34:	4413      	add	r3, r2
 8006e36:	3384      	adds	r3, #132	; 0x84
 8006e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	6812      	ldr	r2, [r2, #0]
 8006e3e:	4611      	mov	r1, r2
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	01d2      	lsls	r2, r2, #7
 8006e44:	440a      	add	r2, r1
 8006e46:	3284      	adds	r2, #132	; 0x84
 8006e48:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006e4c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	fb02 f303 	mul.w	r3, r2, r3
 8006e58:	041a      	lsls	r2, r3, #16
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	6859      	ldr	r1, [r3, #4]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	1acb      	subs	r3, r1, r3
 8006e64:	69f9      	ldr	r1, [r7, #28]
 8006e66:	fb01 f303 	mul.w	r3, r1, r3
 8006e6a:	3303      	adds	r3, #3
 8006e6c:	68f9      	ldr	r1, [r7, #12]
 8006e6e:	6809      	ldr	r1, [r1, #0]
 8006e70:	4608      	mov	r0, r1
 8006e72:	6879      	ldr	r1, [r7, #4]
 8006e74:	01c9      	lsls	r1, r1, #7
 8006e76:	4401      	add	r1, r0
 8006e78:	3184      	adds	r1, #132	; 0x84
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	461a      	mov	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	01db      	lsls	r3, r3, #7
 8006e88:	4413      	add	r3, r2
 8006e8a:	3384      	adds	r3, #132	; 0x84
 8006e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4619      	mov	r1, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	01db      	lsls	r3, r3, #7
 8006e98:	440b      	add	r3, r1
 8006e9a:	3384      	adds	r3, #132	; 0x84
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	4b14      	ldr	r3, [pc, #80]	; (8006ef0 <LTDC_SetConfig+0x330>)
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	01db      	lsls	r3, r3, #7
 8006eae:	4413      	add	r3, r2
 8006eb0:	3384      	adds	r3, #132	; 0x84
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	01db      	lsls	r3, r3, #7
 8006ec4:	4413      	add	r3, r2
 8006ec6:	3384      	adds	r3, #132	; 0x84
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	6812      	ldr	r2, [r2, #0]
 8006ece:	4611      	mov	r1, r2
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	01d2      	lsls	r2, r2, #7
 8006ed4:	440a      	add	r2, r1
 8006ed6:	3284      	adds	r2, #132	; 0x84
 8006ed8:	f043 0301 	orr.w	r3, r3, #1
 8006edc:	6013      	str	r3, [r2, #0]
}
 8006ede:	bf00      	nop
 8006ee0:	3724      	adds	r7, #36	; 0x24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	fffff8f8 	.word	0xfffff8f8
 8006ef0:	fffff800 	.word	0xfffff800

08006ef4 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8006f06:	2200      	movs	r2, #0
 8006f08:	e001      	b.n	8006f0e <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8006f0a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d102      	bne.n	8006f20 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8006f1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006f1e:	e000      	b.n	8006f22 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8006f20:	2200      	movs	r2, #0
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8006f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f32:	e000      	b.n	8006f36 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8006f34:	2200      	movs	r2, #0
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3e:	1e5a      	subs	r2, r3, #1
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	4413      	add	r3, r2
 8006f4e:	1e5a      	subs	r2, r3, #1
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5c:	441a      	add	r2, r3
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	4413      	add	r3, r2
 8006f64:	1e5a      	subs	r2, r3, #1
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	441a      	add	r2, r3
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f78:	441a      	add	r2, r3
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7e:	4413      	add	r3, r2
 8006f80:	1e5a      	subs	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f98:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a04      	ldr	r2, [pc, #16]	; (8006fb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa2:	6013      	str	r3, [r2, #0]
}
 8006fa4:	bf00      	nop
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	40007000 	.word	0x40007000

08006fb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006fbe:	4b23      	ldr	r3, [pc, #140]	; (800704c <HAL_PWREx_EnableOverDrive+0x98>)
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	4a22      	ldr	r2, [pc, #136]	; (800704c <HAL_PWREx_EnableOverDrive+0x98>)
 8006fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8006fca:	4b20      	ldr	r3, [pc, #128]	; (800704c <HAL_PWREx_EnableOverDrive+0x98>)
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fd2:	603b      	str	r3, [r7, #0]
 8006fd4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006fd6:	4b1e      	ldr	r3, [pc, #120]	; (8007050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1d      	ldr	r2, [pc, #116]	; (8007050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fe0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fe2:	f7fc fbff 	bl	80037e4 <HAL_GetTick>
 8006fe6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006fe8:	e009      	b.n	8006ffe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006fea:	f7fc fbfb 	bl	80037e4 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ff8:	d901      	bls.n	8006ffe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e022      	b.n	8007044 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006ffe:	4b14      	ldr	r3, [pc, #80]	; (8007050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800700a:	d1ee      	bne.n	8006fea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800700c:	4b10      	ldr	r3, [pc, #64]	; (8007050 <HAL_PWREx_EnableOverDrive+0x9c>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a0f      	ldr	r2, [pc, #60]	; (8007050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007016:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007018:	f7fc fbe4 	bl	80037e4 <HAL_GetTick>
 800701c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800701e:	e009      	b.n	8007034 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007020:	f7fc fbe0 	bl	80037e4 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800702e:	d901      	bls.n	8007034 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e007      	b.n	8007044 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007034:	4b06      	ldr	r3, [pc, #24]	; (8007050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007040:	d1ee      	bne.n	8007020 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	40023800 	.word	0x40023800
 8007050:	40007000 	.word	0x40007000

08007054 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800705c:	2300      	movs	r3, #0
 800705e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e25e      	b.n	8007528 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 8087 	beq.w	8007186 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007078:	4b96      	ldr	r3, [pc, #600]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f003 030c 	and.w	r3, r3, #12
 8007080:	2b04      	cmp	r3, #4
 8007082:	d00c      	beq.n	800709e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007084:	4b93      	ldr	r3, [pc, #588]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f003 030c 	and.w	r3, r3, #12
 800708c:	2b08      	cmp	r3, #8
 800708e:	d112      	bne.n	80070b6 <HAL_RCC_OscConfig+0x62>
 8007090:	4b90      	ldr	r3, [pc, #576]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800709c:	d10b      	bne.n	80070b6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800709e:	4b8d      	ldr	r3, [pc, #564]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d06c      	beq.n	8007184 <HAL_RCC_OscConfig+0x130>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d168      	bne.n	8007184 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e238      	b.n	8007528 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070be:	d106      	bne.n	80070ce <HAL_RCC_OscConfig+0x7a>
 80070c0:	4b84      	ldr	r3, [pc, #528]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a83      	ldr	r2, [pc, #524]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 80070c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	e02e      	b.n	800712c <HAL_RCC_OscConfig+0xd8>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10c      	bne.n	80070f0 <HAL_RCC_OscConfig+0x9c>
 80070d6:	4b7f      	ldr	r3, [pc, #508]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a7e      	ldr	r2, [pc, #504]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 80070dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	4b7c      	ldr	r3, [pc, #496]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a7b      	ldr	r2, [pc, #492]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 80070e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	e01d      	b.n	800712c <HAL_RCC_OscConfig+0xd8>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070f8:	d10c      	bne.n	8007114 <HAL_RCC_OscConfig+0xc0>
 80070fa:	4b76      	ldr	r3, [pc, #472]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a75      	ldr	r2, [pc, #468]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 8007100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	4b73      	ldr	r3, [pc, #460]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a72      	ldr	r2, [pc, #456]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 800710c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	e00b      	b.n	800712c <HAL_RCC_OscConfig+0xd8>
 8007114:	4b6f      	ldr	r3, [pc, #444]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a6e      	ldr	r2, [pc, #440]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 800711a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	4b6c      	ldr	r3, [pc, #432]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a6b      	ldr	r2, [pc, #428]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 8007126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800712a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d013      	beq.n	800715c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007134:	f7fc fb56 	bl	80037e4 <HAL_GetTick>
 8007138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800713a:	e008      	b.n	800714e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800713c:	f7fc fb52 	bl	80037e4 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b64      	cmp	r3, #100	; 0x64
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e1ec      	b.n	8007528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800714e:	4b61      	ldr	r3, [pc, #388]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d0f0      	beq.n	800713c <HAL_RCC_OscConfig+0xe8>
 800715a:	e014      	b.n	8007186 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800715c:	f7fc fb42 	bl	80037e4 <HAL_GetTick>
 8007160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007162:	e008      	b.n	8007176 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007164:	f7fc fb3e 	bl	80037e4 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	2b64      	cmp	r3, #100	; 0x64
 8007170:	d901      	bls.n	8007176 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e1d8      	b.n	8007528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007176:	4b57      	ldr	r3, [pc, #348]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1f0      	bne.n	8007164 <HAL_RCC_OscConfig+0x110>
 8007182:	e000      	b.n	8007186 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d069      	beq.n	8007266 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007192:	4b50      	ldr	r3, [pc, #320]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f003 030c 	and.w	r3, r3, #12
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00b      	beq.n	80071b6 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800719e:	4b4d      	ldr	r3, [pc, #308]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 030c 	and.w	r3, r3, #12
 80071a6:	2b08      	cmp	r3, #8
 80071a8:	d11c      	bne.n	80071e4 <HAL_RCC_OscConfig+0x190>
 80071aa:	4b4a      	ldr	r3, [pc, #296]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d116      	bne.n	80071e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071b6:	4b47      	ldr	r3, [pc, #284]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d005      	beq.n	80071ce <HAL_RCC_OscConfig+0x17a>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d001      	beq.n	80071ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e1ac      	b.n	8007528 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ce:	4b41      	ldr	r3, [pc, #260]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	493d      	ldr	r1, [pc, #244]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071e2:	e040      	b.n	8007266 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d023      	beq.n	8007234 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071ec:	4b39      	ldr	r3, [pc, #228]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a38      	ldr	r2, [pc, #224]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 80071f2:	f043 0301 	orr.w	r3, r3, #1
 80071f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f8:	f7fc faf4 	bl	80037e4 <HAL_GetTick>
 80071fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071fe:	e008      	b.n	8007212 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007200:	f7fc faf0 	bl	80037e4 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e18a      	b.n	8007528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007212:	4b30      	ldr	r3, [pc, #192]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0f0      	beq.n	8007200 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800721e:	4b2d      	ldr	r3, [pc, #180]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	4929      	ldr	r1, [pc, #164]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 800722e:	4313      	orrs	r3, r2
 8007230:	600b      	str	r3, [r1, #0]
 8007232:	e018      	b.n	8007266 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007234:	4b27      	ldr	r3, [pc, #156]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a26      	ldr	r2, [pc, #152]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 800723a:	f023 0301 	bic.w	r3, r3, #1
 800723e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007240:	f7fc fad0 	bl	80037e4 <HAL_GetTick>
 8007244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007246:	e008      	b.n	800725a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007248:	f7fc facc 	bl	80037e4 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e166      	b.n	8007528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800725a:	4b1e      	ldr	r3, [pc, #120]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1f0      	bne.n	8007248 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d038      	beq.n	80072e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d019      	beq.n	80072ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800727a:	4b16      	ldr	r3, [pc, #88]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 800727c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800727e:	4a15      	ldr	r2, [pc, #84]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 8007280:	f043 0301 	orr.w	r3, r3, #1
 8007284:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007286:	f7fc faad 	bl	80037e4 <HAL_GetTick>
 800728a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800728c:	e008      	b.n	80072a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800728e:	f7fc faa9 	bl	80037e4 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	2b02      	cmp	r3, #2
 800729a:	d901      	bls.n	80072a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e143      	b.n	8007528 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072a0:	4b0c      	ldr	r3, [pc, #48]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 80072a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0f0      	beq.n	800728e <HAL_RCC_OscConfig+0x23a>
 80072ac:	e01a      	b.n	80072e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072ae:	4b09      	ldr	r3, [pc, #36]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 80072b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072b2:	4a08      	ldr	r2, [pc, #32]	; (80072d4 <HAL_RCC_OscConfig+0x280>)
 80072b4:	f023 0301 	bic.w	r3, r3, #1
 80072b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ba:	f7fc fa93 	bl	80037e4 <HAL_GetTick>
 80072be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072c0:	e00a      	b.n	80072d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072c2:	f7fc fa8f 	bl	80037e4 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d903      	bls.n	80072d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e129      	b.n	8007528 <HAL_RCC_OscConfig+0x4d4>
 80072d4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072d8:	4b95      	ldr	r3, [pc, #596]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 80072da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1ee      	bne.n	80072c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 80a4 	beq.w	800743a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072f2:	4b8f      	ldr	r3, [pc, #572]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10d      	bne.n	800731a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80072fe:	4b8c      	ldr	r3, [pc, #560]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 8007300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007302:	4a8b      	ldr	r2, [pc, #556]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 8007304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007308:	6413      	str	r3, [r2, #64]	; 0x40
 800730a:	4b89      	ldr	r3, [pc, #548]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007316:	2301      	movs	r3, #1
 8007318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800731a:	4b86      	ldr	r3, [pc, #536]	; (8007534 <HAL_RCC_OscConfig+0x4e0>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007322:	2b00      	cmp	r3, #0
 8007324:	d118      	bne.n	8007358 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007326:	4b83      	ldr	r3, [pc, #524]	; (8007534 <HAL_RCC_OscConfig+0x4e0>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a82      	ldr	r2, [pc, #520]	; (8007534 <HAL_RCC_OscConfig+0x4e0>)
 800732c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007332:	f7fc fa57 	bl	80037e4 <HAL_GetTick>
 8007336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007338:	e008      	b.n	800734c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800733a:	f7fc fa53 	bl	80037e4 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b64      	cmp	r3, #100	; 0x64
 8007346:	d901      	bls.n	800734c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e0ed      	b.n	8007528 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800734c:	4b79      	ldr	r3, [pc, #484]	; (8007534 <HAL_RCC_OscConfig+0x4e0>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007354:	2b00      	cmp	r3, #0
 8007356:	d0f0      	beq.n	800733a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d106      	bne.n	800736e <HAL_RCC_OscConfig+0x31a>
 8007360:	4b73      	ldr	r3, [pc, #460]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 8007362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007364:	4a72      	ldr	r2, [pc, #456]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 8007366:	f043 0301 	orr.w	r3, r3, #1
 800736a:	6713      	str	r3, [r2, #112]	; 0x70
 800736c:	e02d      	b.n	80073ca <HAL_RCC_OscConfig+0x376>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10c      	bne.n	8007390 <HAL_RCC_OscConfig+0x33c>
 8007376:	4b6e      	ldr	r3, [pc, #440]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 8007378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737a:	4a6d      	ldr	r2, [pc, #436]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 800737c:	f023 0301 	bic.w	r3, r3, #1
 8007380:	6713      	str	r3, [r2, #112]	; 0x70
 8007382:	4b6b      	ldr	r3, [pc, #428]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 8007384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007386:	4a6a      	ldr	r2, [pc, #424]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 8007388:	f023 0304 	bic.w	r3, r3, #4
 800738c:	6713      	str	r3, [r2, #112]	; 0x70
 800738e:	e01c      	b.n	80073ca <HAL_RCC_OscConfig+0x376>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	2b05      	cmp	r3, #5
 8007396:	d10c      	bne.n	80073b2 <HAL_RCC_OscConfig+0x35e>
 8007398:	4b65      	ldr	r3, [pc, #404]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 800739a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800739c:	4a64      	ldr	r2, [pc, #400]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 800739e:	f043 0304 	orr.w	r3, r3, #4
 80073a2:	6713      	str	r3, [r2, #112]	; 0x70
 80073a4:	4b62      	ldr	r3, [pc, #392]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 80073a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a8:	4a61      	ldr	r2, [pc, #388]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 80073aa:	f043 0301 	orr.w	r3, r3, #1
 80073ae:	6713      	str	r3, [r2, #112]	; 0x70
 80073b0:	e00b      	b.n	80073ca <HAL_RCC_OscConfig+0x376>
 80073b2:	4b5f      	ldr	r3, [pc, #380]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 80073b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b6:	4a5e      	ldr	r2, [pc, #376]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 80073b8:	f023 0301 	bic.w	r3, r3, #1
 80073bc:	6713      	str	r3, [r2, #112]	; 0x70
 80073be:	4b5c      	ldr	r3, [pc, #368]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 80073c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c2:	4a5b      	ldr	r2, [pc, #364]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 80073c4:	f023 0304 	bic.w	r3, r3, #4
 80073c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d015      	beq.n	80073fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073d2:	f7fc fa07 	bl	80037e4 <HAL_GetTick>
 80073d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073d8:	e00a      	b.n	80073f0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073da:	f7fc fa03 	bl	80037e4 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d901      	bls.n	80073f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e09b      	b.n	8007528 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073f0:	4b4f      	ldr	r3, [pc, #316]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 80073f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0ee      	beq.n	80073da <HAL_RCC_OscConfig+0x386>
 80073fc:	e014      	b.n	8007428 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073fe:	f7fc f9f1 	bl	80037e4 <HAL_GetTick>
 8007402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007404:	e00a      	b.n	800741c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007406:	f7fc f9ed 	bl	80037e4 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	f241 3288 	movw	r2, #5000	; 0x1388
 8007414:	4293      	cmp	r3, r2
 8007416:	d901      	bls.n	800741c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e085      	b.n	8007528 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800741c:	4b44      	ldr	r3, [pc, #272]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 800741e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1ee      	bne.n	8007406 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d105      	bne.n	800743a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800742e:	4b40      	ldr	r3, [pc, #256]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	4a3f      	ldr	r2, [pc, #252]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 8007434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007438:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d071      	beq.n	8007526 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007442:	4b3b      	ldr	r3, [pc, #236]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f003 030c 	and.w	r3, r3, #12
 800744a:	2b08      	cmp	r3, #8
 800744c:	d069      	beq.n	8007522 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	2b02      	cmp	r3, #2
 8007454:	d14b      	bne.n	80074ee <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007456:	4b36      	ldr	r3, [pc, #216]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a35      	ldr	r2, [pc, #212]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 800745c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007462:	f7fc f9bf 	bl	80037e4 <HAL_GetTick>
 8007466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007468:	e008      	b.n	800747c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800746a:	f7fc f9bb 	bl	80037e4 <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	2b02      	cmp	r3, #2
 8007476:	d901      	bls.n	800747c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e055      	b.n	8007528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800747c:	4b2c      	ldr	r3, [pc, #176]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1f0      	bne.n	800746a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	69da      	ldr	r2, [r3, #28]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	431a      	orrs	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	019b      	lsls	r3, r3, #6
 8007498:	431a      	orrs	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749e:	085b      	lsrs	r3, r3, #1
 80074a0:	3b01      	subs	r3, #1
 80074a2:	041b      	lsls	r3, r3, #16
 80074a4:	431a      	orrs	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074aa:	061b      	lsls	r3, r3, #24
 80074ac:	431a      	orrs	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b2:	071b      	lsls	r3, r3, #28
 80074b4:	491e      	ldr	r1, [pc, #120]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074ba:	4b1d      	ldr	r3, [pc, #116]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a1c      	ldr	r2, [pc, #112]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 80074c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c6:	f7fc f98d 	bl	80037e4 <HAL_GetTick>
 80074ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074cc:	e008      	b.n	80074e0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074ce:	f7fc f989 	bl	80037e4 <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d901      	bls.n	80074e0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e023      	b.n	8007528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074e0:	4b13      	ldr	r3, [pc, #76]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d0f0      	beq.n	80074ce <HAL_RCC_OscConfig+0x47a>
 80074ec:	e01b      	b.n	8007526 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074ee:	4b10      	ldr	r3, [pc, #64]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a0f      	ldr	r2, [pc, #60]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 80074f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074fa:	f7fc f973 	bl	80037e4 <HAL_GetTick>
 80074fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007500:	e008      	b.n	8007514 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007502:	f7fc f96f 	bl	80037e4 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	2b02      	cmp	r3, #2
 800750e:	d901      	bls.n	8007514 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e009      	b.n	8007528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007514:	4b06      	ldr	r3, [pc, #24]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1f0      	bne.n	8007502 <HAL_RCC_OscConfig+0x4ae>
 8007520:	e001      	b.n	8007526 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e000      	b.n	8007528 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3718      	adds	r7, #24
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40023800 	.word	0x40023800
 8007534:	40007000 	.word	0x40007000

08007538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007542:	2300      	movs	r3, #0
 8007544:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e0ce      	b.n	80076ee <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007550:	4b69      	ldr	r3, [pc, #420]	; (80076f8 <HAL_RCC_ClockConfig+0x1c0>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 030f 	and.w	r3, r3, #15
 8007558:	683a      	ldr	r2, [r7, #0]
 800755a:	429a      	cmp	r2, r3
 800755c:	d910      	bls.n	8007580 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800755e:	4b66      	ldr	r3, [pc, #408]	; (80076f8 <HAL_RCC_ClockConfig+0x1c0>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f023 020f 	bic.w	r2, r3, #15
 8007566:	4964      	ldr	r1, [pc, #400]	; (80076f8 <HAL_RCC_ClockConfig+0x1c0>)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	4313      	orrs	r3, r2
 800756c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800756e:	4b62      	ldr	r3, [pc, #392]	; (80076f8 <HAL_RCC_ClockConfig+0x1c0>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 030f 	and.w	r3, r3, #15
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	429a      	cmp	r2, r3
 800757a:	d001      	beq.n	8007580 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e0b6      	b.n	80076ee <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0302 	and.w	r3, r3, #2
 8007588:	2b00      	cmp	r3, #0
 800758a:	d020      	beq.n	80075ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0304 	and.w	r3, r3, #4
 8007594:	2b00      	cmp	r3, #0
 8007596:	d005      	beq.n	80075a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007598:	4b58      	ldr	r3, [pc, #352]	; (80076fc <HAL_RCC_ClockConfig+0x1c4>)
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	4a57      	ldr	r2, [pc, #348]	; (80076fc <HAL_RCC_ClockConfig+0x1c4>)
 800759e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0308 	and.w	r3, r3, #8
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d005      	beq.n	80075bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075b0:	4b52      	ldr	r3, [pc, #328]	; (80076fc <HAL_RCC_ClockConfig+0x1c4>)
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	4a51      	ldr	r2, [pc, #324]	; (80076fc <HAL_RCC_ClockConfig+0x1c4>)
 80075b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80075ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075bc:	4b4f      	ldr	r3, [pc, #316]	; (80076fc <HAL_RCC_ClockConfig+0x1c4>)
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	494c      	ldr	r1, [pc, #304]	; (80076fc <HAL_RCC_ClockConfig+0x1c4>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d040      	beq.n	800765c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d107      	bne.n	80075f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075e2:	4b46      	ldr	r3, [pc, #280]	; (80076fc <HAL_RCC_ClockConfig+0x1c4>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d115      	bne.n	800761a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e07d      	b.n	80076ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d107      	bne.n	800760a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075fa:	4b40      	ldr	r3, [pc, #256]	; (80076fc <HAL_RCC_ClockConfig+0x1c4>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d109      	bne.n	800761a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e071      	b.n	80076ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800760a:	4b3c      	ldr	r3, [pc, #240]	; (80076fc <HAL_RCC_ClockConfig+0x1c4>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e069      	b.n	80076ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800761a:	4b38      	ldr	r3, [pc, #224]	; (80076fc <HAL_RCC_ClockConfig+0x1c4>)
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f023 0203 	bic.w	r2, r3, #3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	4935      	ldr	r1, [pc, #212]	; (80076fc <HAL_RCC_ClockConfig+0x1c4>)
 8007628:	4313      	orrs	r3, r2
 800762a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800762c:	f7fc f8da 	bl	80037e4 <HAL_GetTick>
 8007630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007632:	e00a      	b.n	800764a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007634:	f7fc f8d6 	bl	80037e4 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007642:	4293      	cmp	r3, r2
 8007644:	d901      	bls.n	800764a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e051      	b.n	80076ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800764a:	4b2c      	ldr	r3, [pc, #176]	; (80076fc <HAL_RCC_ClockConfig+0x1c4>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f003 020c 	and.w	r2, r3, #12
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	429a      	cmp	r2, r3
 800765a:	d1eb      	bne.n	8007634 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800765c:	4b26      	ldr	r3, [pc, #152]	; (80076f8 <HAL_RCC_ClockConfig+0x1c0>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 030f 	and.w	r3, r3, #15
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d210      	bcs.n	800768c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800766a:	4b23      	ldr	r3, [pc, #140]	; (80076f8 <HAL_RCC_ClockConfig+0x1c0>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f023 020f 	bic.w	r2, r3, #15
 8007672:	4921      	ldr	r1, [pc, #132]	; (80076f8 <HAL_RCC_ClockConfig+0x1c0>)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	4313      	orrs	r3, r2
 8007678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800767a:	4b1f      	ldr	r3, [pc, #124]	; (80076f8 <HAL_RCC_ClockConfig+0x1c0>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 030f 	and.w	r3, r3, #15
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d001      	beq.n	800768c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e030      	b.n	80076ee <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0304 	and.w	r3, r3, #4
 8007694:	2b00      	cmp	r3, #0
 8007696:	d008      	beq.n	80076aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007698:	4b18      	ldr	r3, [pc, #96]	; (80076fc <HAL_RCC_ClockConfig+0x1c4>)
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	4915      	ldr	r1, [pc, #84]	; (80076fc <HAL_RCC_ClockConfig+0x1c4>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0308 	and.w	r3, r3, #8
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d009      	beq.n	80076ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80076b6:	4b11      	ldr	r3, [pc, #68]	; (80076fc <HAL_RCC_ClockConfig+0x1c4>)
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	490d      	ldr	r1, [pc, #52]	; (80076fc <HAL_RCC_ClockConfig+0x1c4>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80076ca:	f000 f81d 	bl	8007708 <HAL_RCC_GetSysClockFreq>
 80076ce:	4601      	mov	r1, r0
 80076d0:	4b0a      	ldr	r3, [pc, #40]	; (80076fc <HAL_RCC_ClockConfig+0x1c4>)
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	091b      	lsrs	r3, r3, #4
 80076d6:	f003 030f 	and.w	r3, r3, #15
 80076da:	4a09      	ldr	r2, [pc, #36]	; (8007700 <HAL_RCC_ClockConfig+0x1c8>)
 80076dc:	5cd3      	ldrb	r3, [r2, r3]
 80076de:	fa21 f303 	lsr.w	r3, r1, r3
 80076e2:	4a08      	ldr	r2, [pc, #32]	; (8007704 <HAL_RCC_ClockConfig+0x1cc>)
 80076e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80076e6:	2000      	movs	r0, #0
 80076e8:	f7fa f9ae 	bl	8001a48 <HAL_InitTick>

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	40023c00 	.word	0x40023c00
 80076fc:	40023800 	.word	0x40023800
 8007700:	0800dbd0 	.word	0x0800dbd0
 8007704:	20000000 	.word	0x20000000

08007708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	607b      	str	r3, [r7, #4]
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	2300      	movs	r3, #0
 8007718:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800771a:	2300      	movs	r3, #0
 800771c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800771e:	4b50      	ldr	r3, [pc, #320]	; (8007860 <HAL_RCC_GetSysClockFreq+0x158>)
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f003 030c 	and.w	r3, r3, #12
 8007726:	2b04      	cmp	r3, #4
 8007728:	d007      	beq.n	800773a <HAL_RCC_GetSysClockFreq+0x32>
 800772a:	2b08      	cmp	r3, #8
 800772c:	d008      	beq.n	8007740 <HAL_RCC_GetSysClockFreq+0x38>
 800772e:	2b00      	cmp	r3, #0
 8007730:	f040 808d 	bne.w	800784e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007734:	4b4b      	ldr	r3, [pc, #300]	; (8007864 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007736:	60bb      	str	r3, [r7, #8]
       break;
 8007738:	e08c      	b.n	8007854 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800773a:	4b4b      	ldr	r3, [pc, #300]	; (8007868 <HAL_RCC_GetSysClockFreq+0x160>)
 800773c:	60bb      	str	r3, [r7, #8]
      break;
 800773e:	e089      	b.n	8007854 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007740:	4b47      	ldr	r3, [pc, #284]	; (8007860 <HAL_RCC_GetSysClockFreq+0x158>)
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007748:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800774a:	4b45      	ldr	r3, [pc, #276]	; (8007860 <HAL_RCC_GetSysClockFreq+0x158>)
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d023      	beq.n	800779e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007756:	4b42      	ldr	r3, [pc, #264]	; (8007860 <HAL_RCC_GetSysClockFreq+0x158>)
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	099b      	lsrs	r3, r3, #6
 800775c:	f04f 0400 	mov.w	r4, #0
 8007760:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007764:	f04f 0200 	mov.w	r2, #0
 8007768:	ea03 0501 	and.w	r5, r3, r1
 800776c:	ea04 0602 	and.w	r6, r4, r2
 8007770:	4a3d      	ldr	r2, [pc, #244]	; (8007868 <HAL_RCC_GetSysClockFreq+0x160>)
 8007772:	fb02 f106 	mul.w	r1, r2, r6
 8007776:	2200      	movs	r2, #0
 8007778:	fb02 f205 	mul.w	r2, r2, r5
 800777c:	440a      	add	r2, r1
 800777e:	493a      	ldr	r1, [pc, #232]	; (8007868 <HAL_RCC_GetSysClockFreq+0x160>)
 8007780:	fba5 0101 	umull	r0, r1, r5, r1
 8007784:	1853      	adds	r3, r2, r1
 8007786:	4619      	mov	r1, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f04f 0400 	mov.w	r4, #0
 800778e:	461a      	mov	r2, r3
 8007790:	4623      	mov	r3, r4
 8007792:	f7f8 fdad 	bl	80002f0 <__aeabi_uldivmod>
 8007796:	4603      	mov	r3, r0
 8007798:	460c      	mov	r4, r1
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	e049      	b.n	8007832 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800779e:	4b30      	ldr	r3, [pc, #192]	; (8007860 <HAL_RCC_GetSysClockFreq+0x158>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	099b      	lsrs	r3, r3, #6
 80077a4:	f04f 0400 	mov.w	r4, #0
 80077a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80077ac:	f04f 0200 	mov.w	r2, #0
 80077b0:	ea03 0501 	and.w	r5, r3, r1
 80077b4:	ea04 0602 	and.w	r6, r4, r2
 80077b8:	4629      	mov	r1, r5
 80077ba:	4632      	mov	r2, r6
 80077bc:	f04f 0300 	mov.w	r3, #0
 80077c0:	f04f 0400 	mov.w	r4, #0
 80077c4:	0154      	lsls	r4, r2, #5
 80077c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80077ca:	014b      	lsls	r3, r1, #5
 80077cc:	4619      	mov	r1, r3
 80077ce:	4622      	mov	r2, r4
 80077d0:	1b49      	subs	r1, r1, r5
 80077d2:	eb62 0206 	sbc.w	r2, r2, r6
 80077d6:	f04f 0300 	mov.w	r3, #0
 80077da:	f04f 0400 	mov.w	r4, #0
 80077de:	0194      	lsls	r4, r2, #6
 80077e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80077e4:	018b      	lsls	r3, r1, #6
 80077e6:	1a5b      	subs	r3, r3, r1
 80077e8:	eb64 0402 	sbc.w	r4, r4, r2
 80077ec:	f04f 0100 	mov.w	r1, #0
 80077f0:	f04f 0200 	mov.w	r2, #0
 80077f4:	00e2      	lsls	r2, r4, #3
 80077f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80077fa:	00d9      	lsls	r1, r3, #3
 80077fc:	460b      	mov	r3, r1
 80077fe:	4614      	mov	r4, r2
 8007800:	195b      	adds	r3, r3, r5
 8007802:	eb44 0406 	adc.w	r4, r4, r6
 8007806:	f04f 0100 	mov.w	r1, #0
 800780a:	f04f 0200 	mov.w	r2, #0
 800780e:	02a2      	lsls	r2, r4, #10
 8007810:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007814:	0299      	lsls	r1, r3, #10
 8007816:	460b      	mov	r3, r1
 8007818:	4614      	mov	r4, r2
 800781a:	4618      	mov	r0, r3
 800781c:	4621      	mov	r1, r4
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f04f 0400 	mov.w	r4, #0
 8007824:	461a      	mov	r2, r3
 8007826:	4623      	mov	r3, r4
 8007828:	f7f8 fd62 	bl	80002f0 <__aeabi_uldivmod>
 800782c:	4603      	mov	r3, r0
 800782e:	460c      	mov	r4, r1
 8007830:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8007832:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <HAL_RCC_GetSysClockFreq+0x158>)
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	0c1b      	lsrs	r3, r3, #16
 8007838:	f003 0303 	and.w	r3, r3, #3
 800783c:	3301      	adds	r3, #1
 800783e:	005b      	lsls	r3, r3, #1
 8007840:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	fbb2 f3f3 	udiv	r3, r2, r3
 800784a:	60bb      	str	r3, [r7, #8]
      break;
 800784c:	e002      	b.n	8007854 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800784e:	4b05      	ldr	r3, [pc, #20]	; (8007864 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007850:	60bb      	str	r3, [r7, #8]
      break;
 8007852:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007854:	68bb      	ldr	r3, [r7, #8]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800785e:	bf00      	nop
 8007860:	40023800 	.word	0x40023800
 8007864:	00f42400 	.word	0x00f42400
 8007868:	017d7840 	.word	0x017d7840

0800786c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800786c:	b480      	push	{r7}
 800786e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007870:	4b03      	ldr	r3, [pc, #12]	; (8007880 <HAL_RCC_GetHCLKFreq+0x14>)
 8007872:	681b      	ldr	r3, [r3, #0]
}
 8007874:	4618      	mov	r0, r3
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	20000000 	.word	0x20000000

08007884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007888:	f7ff fff0 	bl	800786c <HAL_RCC_GetHCLKFreq>
 800788c:	4601      	mov	r1, r0
 800788e:	4b05      	ldr	r3, [pc, #20]	; (80078a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	0a9b      	lsrs	r3, r3, #10
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	4a03      	ldr	r2, [pc, #12]	; (80078a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800789a:	5cd3      	ldrb	r3, [r2, r3]
 800789c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	40023800 	.word	0x40023800
 80078a8:	0800dbe0 	.word	0x0800dbe0

080078ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80078b0:	f7ff ffdc 	bl	800786c <HAL_RCC_GetHCLKFreq>
 80078b4:	4601      	mov	r1, r0
 80078b6:	4b05      	ldr	r3, [pc, #20]	; (80078cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	0b5b      	lsrs	r3, r3, #13
 80078bc:	f003 0307 	and.w	r3, r3, #7
 80078c0:	4a03      	ldr	r2, [pc, #12]	; (80078d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80078c2:	5cd3      	ldrb	r3, [r2, r3]
 80078c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	40023800 	.word	0x40023800
 80078d0:	0800dbe0 	.word	0x0800dbe0

080078d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	220f      	movs	r2, #15
 80078e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80078e4:	4b12      	ldr	r3, [pc, #72]	; (8007930 <HAL_RCC_GetClockConfig+0x5c>)
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f003 0203 	and.w	r2, r3, #3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80078f0:	4b0f      	ldr	r3, [pc, #60]	; (8007930 <HAL_RCC_GetClockConfig+0x5c>)
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80078fc:	4b0c      	ldr	r3, [pc, #48]	; (8007930 <HAL_RCC_GetClockConfig+0x5c>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007908:	4b09      	ldr	r3, [pc, #36]	; (8007930 <HAL_RCC_GetClockConfig+0x5c>)
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	08db      	lsrs	r3, r3, #3
 800790e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007916:	4b07      	ldr	r3, [pc, #28]	; (8007934 <HAL_RCC_GetClockConfig+0x60>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 020f 	and.w	r2, r3, #15
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	601a      	str	r2, [r3, #0]
}
 8007922:	bf00      	nop
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	40023800 	.word	0x40023800
 8007934:	40023c00 	.word	0x40023c00

08007938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b088      	sub	sp, #32
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007940:	2300      	movs	r3, #0
 8007942:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007944:	2300      	movs	r3, #0
 8007946:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800794c:	2300      	movs	r3, #0
 800794e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007950:	2300      	movs	r3, #0
 8007952:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b00      	cmp	r3, #0
 800795e:	d012      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007960:	4b69      	ldr	r3, [pc, #420]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	4a68      	ldr	r2, [pc, #416]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007966:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800796a:	6093      	str	r3, [r2, #8]
 800796c:	4b66      	ldr	r3, [pc, #408]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800796e:	689a      	ldr	r2, [r3, #8]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007974:	4964      	ldr	r1, [pc, #400]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007976:	4313      	orrs	r3, r2
 8007978:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007982:	2301      	movs	r3, #1
 8007984:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d017      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007992:	4b5d      	ldr	r3, [pc, #372]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007998:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a0:	4959      	ldr	r1, [pc, #356]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079b0:	d101      	bne.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80079b2:	2301      	movs	r3, #1
 80079b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80079be:	2301      	movs	r3, #1
 80079c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d017      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80079ce:	4b4e      	ldr	r3, [pc, #312]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079dc:	494a      	ldr	r1, [pc, #296]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079ec:	d101      	bne.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80079ee:	2301      	movs	r3, #1
 80079f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80079fa:	2301      	movs	r3, #1
 80079fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0320 	and.w	r3, r3, #32
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 808b 	beq.w	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a1c:	4b3a      	ldr	r3, [pc, #232]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a20:	4a39      	ldr	r2, [pc, #228]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a26:	6413      	str	r3, [r2, #64]	; 0x40
 8007a28:	4b37      	ldr	r3, [pc, #220]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a30:	60bb      	str	r3, [r7, #8]
 8007a32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a34:	4b35      	ldr	r3, [pc, #212]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a34      	ldr	r2, [pc, #208]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a40:	f7fb fed0 	bl	80037e4 <HAL_GetTick>
 8007a44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a46:	e008      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a48:	f7fb fecc 	bl	80037e4 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b64      	cmp	r3, #100	; 0x64
 8007a54:	d901      	bls.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e38d      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a5a:	4b2c      	ldr	r3, [pc, #176]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0f0      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a66:	4b28      	ldr	r3, [pc, #160]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d035      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d02e      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a84:	4b20      	ldr	r3, [pc, #128]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a8e:	4b1e      	ldr	r3, [pc, #120]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a92:	4a1d      	ldr	r2, [pc, #116]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a98:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a9a:	4b1b      	ldr	r3, [pc, #108]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9e:	4a1a      	ldr	r2, [pc, #104]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aa4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007aa6:	4a18      	ldr	r2, [pc, #96]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007aac:	4b16      	ldr	r3, [pc, #88]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab0:	f003 0301 	and.w	r3, r3, #1
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d114      	bne.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab8:	f7fb fe94 	bl	80037e4 <HAL_GetTick>
 8007abc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007abe:	e00a      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ac0:	f7fb fe90 	bl	80037e4 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d901      	bls.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e34f      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ad6:	4b0c      	ldr	r3, [pc, #48]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ada:	f003 0302 	and.w	r3, r3, #2
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d0ee      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007aee:	d111      	bne.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007af0:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007afc:	4b04      	ldr	r3, [pc, #16]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007afe:	400b      	ands	r3, r1
 8007b00:	4901      	ldr	r1, [pc, #4]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	608b      	str	r3, [r1, #8]
 8007b06:	e00b      	b.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007b08:	40023800 	.word	0x40023800
 8007b0c:	40007000 	.word	0x40007000
 8007b10:	0ffffcff 	.word	0x0ffffcff
 8007b14:	4bb3      	ldr	r3, [pc, #716]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	4ab2      	ldr	r2, [pc, #712]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007b1e:	6093      	str	r3, [r2, #8]
 8007b20:	4bb0      	ldr	r3, [pc, #704]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b2c:	49ad      	ldr	r1, [pc, #692]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0310 	and.w	r3, r3, #16
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d010      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b3e:	4ba9      	ldr	r3, [pc, #676]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b44:	4aa7      	ldr	r2, [pc, #668]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007b4e:	4ba5      	ldr	r3, [pc, #660]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b50:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b58:	49a2      	ldr	r1, [pc, #648]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00a      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b6c:	4b9d      	ldr	r3, [pc, #628]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b7a:	499a      	ldr	r1, [pc, #616]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00a      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b8e:	4b95      	ldr	r3, [pc, #596]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b9c:	4991      	ldr	r1, [pc, #580]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00a      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007bb0:	4b8c      	ldr	r3, [pc, #560]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bbe:	4989      	ldr	r1, [pc, #548]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00a      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bd2:	4b84      	ldr	r3, [pc, #528]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be0:	4980      	ldr	r1, [pc, #512]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007bf4:	4b7b      	ldr	r3, [pc, #492]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfa:	f023 0203 	bic.w	r2, r3, #3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c02:	4978      	ldr	r1, [pc, #480]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c16:	4b73      	ldr	r3, [pc, #460]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c1c:	f023 020c 	bic.w	r2, r3, #12
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c24:	496f      	ldr	r1, [pc, #444]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00a      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c38:	4b6a      	ldr	r3, [pc, #424]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c46:	4967      	ldr	r1, [pc, #412]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c5a:	4b62      	ldr	r3, [pc, #392]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c60:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c68:	495e      	ldr	r1, [pc, #376]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00a      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c7c:	4b59      	ldr	r3, [pc, #356]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8a:	4956      	ldr	r1, [pc, #344]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007c9e:	4b51      	ldr	r3, [pc, #324]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cac:	494d      	ldr	r1, [pc, #308]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00a      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007cc0:	4b48      	ldr	r3, [pc, #288]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cce:	4945      	ldr	r1, [pc, #276]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00a      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007ce2:	4b40      	ldr	r3, [pc, #256]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf0:	493c      	ldr	r1, [pc, #240]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00a      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d04:	4b37      	ldr	r3, [pc, #220]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d12:	4934      	ldr	r1, [pc, #208]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d011      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007d26:	4b2f      	ldr	r3, [pc, #188]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d34:	492b      	ldr	r1, [pc, #172]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d44:	d101      	bne.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007d46:	2301      	movs	r3, #1
 8007d48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0308 	and.w	r3, r3, #8
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007d56:	2301      	movs	r3, #1
 8007d58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00a      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d66:	4b1f      	ldr	r3, [pc, #124]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d74:	491b      	ldr	r1, [pc, #108]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d76:	4313      	orrs	r3, r2
 8007d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00b      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d88:	4b16      	ldr	r3, [pc, #88]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d98:	4912      	ldr	r1, [pc, #72]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00b      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007dac:	4b0d      	ldr	r3, [pc, #52]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dbc:	4909      	ldr	r1, [pc, #36]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00f      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007dd0:	4b04      	ldr	r3, [pc, #16]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de0:	e002      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007de2:	bf00      	nop
 8007de4:	40023800 	.word	0x40023800
 8007de8:	4985      	ldr	r1, [pc, #532]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00b      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007dfc:	4b80      	ldr	r3, [pc, #512]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e0c:	497c      	ldr	r1, [pc, #496]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d005      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e22:	f040 80d6 	bne.w	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e26:	4b76      	ldr	r3, [pc, #472]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a75      	ldr	r2, [pc, #468]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e32:	f7fb fcd7 	bl	80037e4 <HAL_GetTick>
 8007e36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e38:	e008      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e3a:	f7fb fcd3 	bl	80037e4 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	2b64      	cmp	r3, #100	; 0x64
 8007e46:	d901      	bls.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e194      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e4c:	4b6c      	ldr	r3, [pc, #432]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1f0      	bne.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0301 	and.w	r3, r3, #1
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d021      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d11d      	bne.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e6c:	4b64      	ldr	r3, [pc, #400]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e72:	0c1b      	lsrs	r3, r3, #16
 8007e74:	f003 0303 	and.w	r3, r3, #3
 8007e78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e7a:	4b61      	ldr	r3, [pc, #388]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e80:	0e1b      	lsrs	r3, r3, #24
 8007e82:	f003 030f 	and.w	r3, r3, #15
 8007e86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	019a      	lsls	r2, r3, #6
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	041b      	lsls	r3, r3, #16
 8007e92:	431a      	orrs	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	061b      	lsls	r3, r3, #24
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	071b      	lsls	r3, r3, #28
 8007ea0:	4957      	ldr	r1, [pc, #348]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d004      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ebc:	d00a      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d02e      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ed2:	d129      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007ed4:	4b4a      	ldr	r3, [pc, #296]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eda:	0c1b      	lsrs	r3, r3, #16
 8007edc:	f003 0303 	and.w	r3, r3, #3
 8007ee0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ee2:	4b47      	ldr	r3, [pc, #284]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ee8:	0f1b      	lsrs	r3, r3, #28
 8007eea:	f003 0307 	and.w	r3, r3, #7
 8007eee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	019a      	lsls	r2, r3, #6
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	041b      	lsls	r3, r3, #16
 8007efa:	431a      	orrs	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	061b      	lsls	r3, r3, #24
 8007f02:	431a      	orrs	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	071b      	lsls	r3, r3, #28
 8007f08:	493d      	ldr	r1, [pc, #244]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007f10:	4b3b      	ldr	r3, [pc, #236]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f16:	f023 021f 	bic.w	r2, r3, #31
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	4937      	ldr	r1, [pc, #220]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d01d      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f34:	4b32      	ldr	r3, [pc, #200]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f3a:	0e1b      	lsrs	r3, r3, #24
 8007f3c:	f003 030f 	and.w	r3, r3, #15
 8007f40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f42:	4b2f      	ldr	r3, [pc, #188]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f48:	0f1b      	lsrs	r3, r3, #28
 8007f4a:	f003 0307 	and.w	r3, r3, #7
 8007f4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	019a      	lsls	r2, r3, #6
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	041b      	lsls	r3, r3, #16
 8007f5c:	431a      	orrs	r2, r3
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	061b      	lsls	r3, r3, #24
 8007f62:	431a      	orrs	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	071b      	lsls	r3, r3, #28
 8007f68:	4925      	ldr	r1, [pc, #148]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d011      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	019a      	lsls	r2, r3, #6
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	041b      	lsls	r3, r3, #16
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	061b      	lsls	r3, r3, #24
 8007f90:	431a      	orrs	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	071b      	lsls	r3, r3, #28
 8007f98:	4919      	ldr	r1, [pc, #100]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007fa0:	4b17      	ldr	r3, [pc, #92]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a16      	ldr	r2, [pc, #88]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007fa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fac:	f7fb fc1a 	bl	80037e4 <HAL_GetTick>
 8007fb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fb2:	e008      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007fb4:	f7fb fc16 	bl	80037e4 <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b64      	cmp	r3, #100	; 0x64
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e0d7      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fc6:	4b0e      	ldr	r3, [pc, #56]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0f0      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	f040 80cd 	bne.w	8008174 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007fda:	4b09      	ldr	r3, [pc, #36]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a08      	ldr	r2, [pc, #32]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fe6:	f7fb fbfd 	bl	80037e4 <HAL_GetTick>
 8007fea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fec:	e00a      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007fee:	f7fb fbf9 	bl	80037e4 <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	2b64      	cmp	r3, #100	; 0x64
 8007ffa:	d903      	bls.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e0ba      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8008000:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008004:	4b5e      	ldr	r3, [pc, #376]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800800c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008010:	d0ed      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008022:	2b00      	cmp	r3, #0
 8008024:	d009      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800802e:	2b00      	cmp	r3, #0
 8008030:	d02e      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008036:	2b00      	cmp	r3, #0
 8008038:	d12a      	bne.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800803a:	4b51      	ldr	r3, [pc, #324]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800803c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008040:	0c1b      	lsrs	r3, r3, #16
 8008042:	f003 0303 	and.w	r3, r3, #3
 8008046:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008048:	4b4d      	ldr	r3, [pc, #308]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800804a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800804e:	0f1b      	lsrs	r3, r3, #28
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	019a      	lsls	r2, r3, #6
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	041b      	lsls	r3, r3, #16
 8008060:	431a      	orrs	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	061b      	lsls	r3, r3, #24
 8008068:	431a      	orrs	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	071b      	lsls	r3, r3, #28
 800806e:	4944      	ldr	r1, [pc, #272]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008070:	4313      	orrs	r3, r2
 8008072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008076:	4b42      	ldr	r3, [pc, #264]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800807c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008084:	3b01      	subs	r3, #1
 8008086:	021b      	lsls	r3, r3, #8
 8008088:	493d      	ldr	r1, [pc, #244]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800808a:	4313      	orrs	r3, r2
 800808c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008098:	2b00      	cmp	r3, #0
 800809a:	d022      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080a4:	d11d      	bne.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080a6:	4b36      	ldr	r3, [pc, #216]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80080a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ac:	0e1b      	lsrs	r3, r3, #24
 80080ae:	f003 030f 	and.w	r3, r3, #15
 80080b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80080b4:	4b32      	ldr	r3, [pc, #200]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80080b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ba:	0f1b      	lsrs	r3, r3, #28
 80080bc:	f003 0307 	and.w	r3, r3, #7
 80080c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	019a      	lsls	r2, r3, #6
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	041b      	lsls	r3, r3, #16
 80080ce:	431a      	orrs	r2, r3
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	061b      	lsls	r3, r3, #24
 80080d4:	431a      	orrs	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	071b      	lsls	r3, r3, #28
 80080da:	4929      	ldr	r1, [pc, #164]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0308 	and.w	r3, r3, #8
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d028      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080ee:	4b24      	ldr	r3, [pc, #144]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80080f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f4:	0e1b      	lsrs	r3, r3, #24
 80080f6:	f003 030f 	and.w	r3, r3, #15
 80080fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80080fc:	4b20      	ldr	r3, [pc, #128]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80080fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008102:	0c1b      	lsrs	r3, r3, #16
 8008104:	f003 0303 	and.w	r3, r3, #3
 8008108:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	019a      	lsls	r2, r3, #6
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	041b      	lsls	r3, r3, #16
 8008114:	431a      	orrs	r2, r3
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	061b      	lsls	r3, r3, #24
 800811a:	431a      	orrs	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	69db      	ldr	r3, [r3, #28]
 8008120:	071b      	lsls	r3, r3, #28
 8008122:	4917      	ldr	r1, [pc, #92]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008124:	4313      	orrs	r3, r2
 8008126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800812a:	4b15      	ldr	r3, [pc, #84]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800812c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008130:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008138:	4911      	ldr	r1, [pc, #68]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800813a:	4313      	orrs	r3, r2
 800813c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008140:	4b0f      	ldr	r3, [pc, #60]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a0e      	ldr	r2, [pc, #56]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800814a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800814c:	f7fb fb4a 	bl	80037e4 <HAL_GetTick>
 8008150:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008152:	e008      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008154:	f7fb fb46 	bl	80037e4 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	2b64      	cmp	r3, #100	; 0x64
 8008160:	d901      	bls.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e007      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008166:	4b06      	ldr	r3, [pc, #24]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800816e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008172:	d1ef      	bne.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3720      	adds	r7, #32
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	40023800 	.word	0x40023800

08008184 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e01d      	b.n	80081d2 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d105      	bne.n	80081ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7f9 fadb 	bl	8001764 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2203      	movs	r2, #3
 80081b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f80f 	bl	80081da <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80081da:	b5b0      	push	{r4, r5, r7, lr}
 80081dc:	b08e      	sub	sp, #56	; 0x38
 80081de:	af04      	add	r7, sp, #16
 80081e0:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80081e2:	2300      	movs	r3, #0
 80081e4:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80081e6:	2300      	movs	r3, #0
 80081e8:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80081ea:	2300      	movs	r3, #0
 80081ec:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80081ee:	2300      	movs	r3, #0
 80081f0:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80081f2:	2300      	movs	r3, #0
 80081f4:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80081f6:	2300      	movs	r3, #0
 80081f8:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80081fa:	2376      	movs	r3, #118	; 0x76
 80081fc:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681d      	ldr	r5, [r3, #0]
 8008202:	466c      	mov	r4, sp
 8008204:	f107 0318 	add.w	r3, r7, #24
 8008208:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800820c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008210:	f107 030c 	add.w	r3, r7, #12
 8008214:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008216:	4628      	mov	r0, r5
 8008218:	f001 fffc 	bl	800a214 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800822a:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4618      	mov	r0, r3
 8008232:	f002 f839 	bl	800a2a8 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008244:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 8008246:	2002      	movs	r0, #2
 8008248:	f7fb fad8 	bl	80037fc <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fe67 	bl	8008f20 <SD_PowerON>
 8008252:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00b      	beq.n	8008272 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008268:	431a      	orrs	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e013      	b.n	800829a <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fd8b 	bl	8008d8e <SD_InitCard>
 8008278:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00b      	beq.n	8008298 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	431a      	orrs	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e000      	b.n	800829a <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3728      	adds	r7, #40	; 0x28
 800829e:	46bd      	mov	sp, r7
 80082a0:	bdb0      	pop	{r4, r5, r7, pc}

080082a2 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80082a2:	b590      	push	{r4, r7, lr}
 80082a4:	b08f      	sub	sp, #60	; 0x3c
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	60f8      	str	r0, [r7, #12]
 80082aa:	60b9      	str	r1, [r7, #8]
 80082ac:	607a      	str	r2, [r7, #4]
 80082ae:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80082b0:	2300      	movs	r3, #0
 80082b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80082b4:	f7fb fa96 	bl	80037e4 <HAL_GetTick>
 80082b8:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 80082ba:	2300      	movs	r3, #0
 80082bc:	633b      	str	r3, [r7, #48]	; 0x30
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d107      	bne.n	80082d8 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e176      	b.n	80085c6 <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	f040 8169 	bne.w	80085b8 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	441a      	add	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d907      	bls.n	800830a <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e15d      	b.n	80085c6 <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2203      	movs	r2, #3
 800830e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2200      	movs	r2, #0
 8008318:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831e:	2b01      	cmp	r3, #1
 8008320:	d002      	beq.n	8008328 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	025b      	lsls	r3, r3, #9
 8008326:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008330:	4618      	mov	r0, r3
 8008332:	f002 f84d 	bl	800a3d0 <SDMMC_CmdBlockLength>
 8008336:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8008338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800833a:	2b00      	cmp	r3, #0
 800833c:	d010      	beq.n	8008360 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008346:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800834c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800834e:	431a      	orrs	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e132      	b.n	80085c6 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008360:	f04f 33ff 	mov.w	r3, #4294967295
 8008364:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	025b      	lsls	r3, r3, #9
 800836a:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800836c:	2390      	movs	r3, #144	; 0x90
 800836e:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008370:	2302      	movs	r3, #2
 8008372:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008374:	2300      	movs	r3, #0
 8008376:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8008378:	2301      	movs	r3, #1
 800837a:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f107 0210 	add.w	r2, r7, #16
 8008384:	4611      	mov	r1, r2
 8008386:	4618      	mov	r0, r3
 8008388:	f001 fff6 	bl	800a378 <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d90a      	bls.n	80083a8 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2202      	movs	r2, #2
 8008396:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	4618      	mov	r0, r3
 80083a0:	f002 f85e 	bl	800a460 <SDMMC_CmdReadMultiBlock>
 80083a4:	6378      	str	r0, [r7, #52]	; 0x34
 80083a6:	e009      	b.n	80083bc <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2201      	movs	r2, #1
 80083ac:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	6879      	ldr	r1, [r7, #4]
 80083b4:	4618      	mov	r0, r3
 80083b6:	f002 f82f 	bl	800a418 <SDMMC_CmdReadSingleBlock>
 80083ba:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80083bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d04a      	beq.n	8008458 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80083ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d2:	431a      	orrs	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e0f0      	b.n	80085c6 <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d016      	beq.n	8008420 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80083f2:	2300      	movs	r3, #0
 80083f4:	633b      	str	r3, [r7, #48]	; 0x30
 80083f6:	e00d      	b.n	8008414 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6819      	ldr	r1, [r3, #0]
 80083fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008402:	18d4      	adds	r4, r2, r3
 8008404:	4608      	mov	r0, r1
 8008406:	f001 ff31 	bl	800a26c <SDMMC_ReadFIFO>
 800840a:	4603      	mov	r3, r0
 800840c:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	3301      	adds	r3, #1
 8008412:	633b      	str	r3, [r7, #48]	; 0x30
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	2b07      	cmp	r3, #7
 8008418:	d9ee      	bls.n	80083f8 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 800841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841c:	3320      	adds	r3, #32
 800841e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8008420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008422:	2b00      	cmp	r3, #0
 8008424:	d007      	beq.n	8008436 <HAL_SD_ReadBlocks+0x194>
 8008426:	f7fb f9dd 	bl	80037e4 <HAL_GetTick>
 800842a:	4602      	mov	r2, r0
 800842c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008432:	429a      	cmp	r2, r3
 8008434:	d810      	bhi.n	8008458 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800843e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008444:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e0b6      	b.n	80085c6 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008462:	2b00      	cmp	r3, #0
 8008464:	d0be      	beq.n	80083e4 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008470:	2b00      	cmp	r3, #0
 8008472:	d020      	beq.n	80084b6 <HAL_SD_ReadBlocks+0x214>
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d91d      	bls.n	80084b6 <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800847e:	2b03      	cmp	r3, #3
 8008480:	d019      	beq.n	80084b6 <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4618      	mov	r0, r3
 8008488:	f002 f856 	bl	800a538 <SDMMC_CmdStopTransfer>
 800848c:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 800848e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008490:	2b00      	cmp	r3, #0
 8008492:	d010      	beq.n	80084b6 <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800849c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a4:	431a      	orrs	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e087      	b.n	80085c6 <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084bc:	f003 0308 	and.w	r3, r3, #8
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d010      	beq.n	80084e6 <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80084cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d2:	f043 0208 	orr.w	r2, r3, #8
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e06f      	b.n	80085c6 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ec:	f003 0302 	and.w	r3, r3, #2
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d010      	beq.n	8008516 <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80084fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008502:	f043 0202 	orr.w	r2, r3, #2
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e057      	b.n	80085c6 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800851c:	f003 0320 	and.w	r3, r3, #32
 8008520:	2b00      	cmp	r3, #0
 8008522:	d037      	beq.n	8008594 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800852c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008532:	f043 0220 	orr.w	r2, r3, #32
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e03f      	b.n	80085c6 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4618      	mov	r0, r3
 800854c:	f001 fe8e 	bl	800a26c <SDMMC_ReadFIFO>
 8008550:	4602      	mov	r2, r0
 8008552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008554:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8008556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008558:	3304      	adds	r3, #4
 800855a:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 800855c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800855e:	2b00      	cmp	r3, #0
 8008560:	d007      	beq.n	8008572 <HAL_SD_ReadBlocks+0x2d0>
 8008562:	f7fb f93f 	bl	80037e4 <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800856e:	429a      	cmp	r2, r3
 8008570:	d810      	bhi.n	8008594 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800857a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008580:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e018      	b.n	80085c6 <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1d1      	bne.n	8008546 <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80085aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	e006      	b.n	80085c6 <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
  }
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	373c      	adds	r7, #60	; 0x3c
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd90      	pop	{r4, r7, pc}

080085ce <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b08e      	sub	sp, #56	; 0x38
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	60f8      	str	r0, [r7, #12]
 80085d6:	60b9      	str	r1, [r7, #8]
 80085d8:	607a      	str	r2, [r7, #4]
 80085da:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80085dc:	2300      	movs	r3, #0
 80085de:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80085e0:	f7fb f900 	bl	80037e4 <HAL_GetTick>
 80085e4:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0;
 80085e6:	2300      	movs	r3, #0
 80085e8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d107      	bne.n	8008604 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e147      	b.n	8008894 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b01      	cmp	r3, #1
 800860e:	f040 813a 	bne.w	8008886 <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	441a      	add	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008622:	429a      	cmp	r2, r3
 8008624:	d907      	bls.n	8008636 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e12e      	b.n	8008894 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2203      	movs	r2, #3
 800863a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2200      	movs	r2, #0
 8008644:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800864a:	2b01      	cmp	r3, #1
 800864c:	d002      	beq.n	8008654 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	025b      	lsls	r3, r3, #9
 8008652:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800865c:	4618      	mov	r0, r3
 800865e:	f001 feb7 	bl	800a3d0 <SDMMC_CmdBlockLength>
 8008662:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8008664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008666:	2b00      	cmp	r3, #0
 8008668:	d010      	beq.n	800868c <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008672:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800867a:	431a      	orrs	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	e103      	b.n	8008894 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d90a      	bls.n	80086a8 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2220      	movs	r2, #32
 8008696:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6879      	ldr	r1, [r7, #4]
 800869e:	4618      	mov	r0, r3
 80086a0:	f001 ff26 	bl	800a4f0 <SDMMC_CmdWriteMultiBlock>
 80086a4:	6378      	str	r0, [r7, #52]	; 0x34
 80086a6:	e009      	b.n	80086bc <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2210      	movs	r2, #16
 80086ac:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6879      	ldr	r1, [r7, #4]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f001 fef7 	bl	800a4a8 <SDMMC_CmdWriteSingleBlock>
 80086ba:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80086bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d010      	beq.n	80086e4 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80086ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d2:	431a      	orrs	r2, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e0d7      	b.n	8008894 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80086e4:	f04f 33ff 	mov.w	r3, #4294967295
 80086e8:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	025b      	lsls	r3, r3, #9
 80086ee:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80086f0:	2390      	movs	r3, #144	; 0x90
 80086f2:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80086f4:	2300      	movs	r3, #0
 80086f6:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80086fc:	2301      	movs	r3, #1
 80086fe:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f107 0210 	add.w	r2, r7, #16
 8008708:	4611      	mov	r1, r2
 800870a:	4618      	mov	r0, r3
 800870c:	f001 fe34 	bl	800a378 <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008710:	e037      	b.n	8008782 <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d014      	beq.n	800874a <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008720:	2300      	movs	r3, #0
 8008722:	633b      	str	r3, [r7, #48]	; 0x30
 8008724:	e00b      	b.n	800873e <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6818      	ldr	r0, [r3, #0]
 800872a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008730:	4413      	add	r3, r2
 8008732:	4619      	mov	r1, r3
 8008734:	f001 fda7 	bl	800a286 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873a:	3301      	adds	r3, #1
 800873c:	633b      	str	r3, [r7, #48]	; 0x30
 800873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008740:	2b07      	cmp	r3, #7
 8008742:	d9f0      	bls.n	8008726 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8008744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008746:	3320      	adds	r3, #32
 8008748:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 800874a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800874c:	2b00      	cmp	r3, #0
 800874e:	d007      	beq.n	8008760 <HAL_SD_WriteBlocks+0x192>
 8008750:	f7fb f848 	bl	80037e4 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800875c:	429a      	cmp	r2, r3
 800875e:	d810      	bhi.n	8008782 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008768:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800876e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008770:	431a      	orrs	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800877e:	2303      	movs	r3, #3
 8008780:	e088      	b.n	8008894 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008788:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800878c:	2b00      	cmp	r3, #0
 800878e:	d0c0      	beq.n	8008712 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800879a:	2b00      	cmp	r3, #0
 800879c:	d020      	beq.n	80087e0 <HAL_SD_WriteBlocks+0x212>
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d91d      	bls.n	80087e0 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	d019      	beq.n	80087e0 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4618      	mov	r0, r3
 80087b2:	f001 fec1 	bl	800a538 <SDMMC_CmdStopTransfer>
 80087b6:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 80087b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d010      	beq.n	80087e0 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80087c6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ce:	431a      	orrs	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e059      	b.n	8008894 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e6:	f003 0308 	and.w	r3, r3, #8
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d010      	beq.n	8008810 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80087f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fc:	f043 0208 	orr.w	r2, r3, #8
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e041      	b.n	8008894 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008816:	f003 0302 	and.w	r3, r3, #2
 800881a:	2b00      	cmp	r3, #0
 800881c:	d010      	beq.n	8008840 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008826:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882c:	f043 0202 	orr.w	r2, r3, #2
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e029      	b.n	8008894 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008846:	f003 0310 	and.w	r3, r3, #16
 800884a:	2b00      	cmp	r3, #0
 800884c:	d010      	beq.n	8008870 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008856:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885c:	f043 0210 	orr.w	r2, r3, #16
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e011      	b.n	8008894 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008878:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	e006      	b.n	8008894 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
  }
}
 8008894:	4618      	mov	r0, r3
 8008896:	3738      	adds	r7, #56	; 0x38
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088ae:	0e1b      	lsrs	r3, r3, #24
 80088b0:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	099b      	lsrs	r3, r3, #6
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	f003 0303 	and.w	r3, r3, #3
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	089b      	lsrs	r3, r3, #2
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	f003 030f 	and.w	r3, r3, #15
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	f003 0303 	and.w	r3, r3, #3
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088e4:	0c1b      	lsrs	r3, r3, #16
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088f6:	0a1b      	lsrs	r3, r3, #8
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008908:	b2db      	uxtb	r3, r3
 800890a:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	b2da      	uxtb	r2, r3
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008918:	0e1b      	lsrs	r3, r3, #24
 800891a:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	b29b      	uxth	r3, r3
 8008920:	011b      	lsls	r3, r3, #4
 8008922:	b29a      	uxth	r2, r3
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800892c:	0c1b      	lsrs	r3, r3, #16
 800892e:	b2db      	uxtb	r3, r3
 8008930:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	88db      	ldrh	r3, [r3, #6]
 8008936:	b29a      	uxth	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	091b      	lsrs	r3, r3, #4
 800893c:	b29b      	uxth	r3, r3
 800893e:	f003 030f 	and.w	r3, r3, #15
 8008942:	b29b      	uxth	r3, r3
 8008944:	4313      	orrs	r3, r2
 8008946:	b29a      	uxth	r2, r3
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	b2db      	uxtb	r3, r3
 8008950:	f003 030f 	and.w	r3, r3, #15
 8008954:	b2da      	uxtb	r2, r3
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800895e:	0a1b      	lsrs	r3, r3, #8
 8008960:	b2db      	uxtb	r3, r3
 8008962:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	09db      	lsrs	r3, r3, #7
 8008968:	b2db      	uxtb	r3, r3
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	b2da      	uxtb	r2, r3
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	099b      	lsrs	r3, r3, #6
 8008978:	b2db      	uxtb	r3, r3
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	b2da      	uxtb	r2, r3
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	095b      	lsrs	r3, r3, #5
 8008988:	b2db      	uxtb	r3, r3
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	b2da      	uxtb	r2, r3
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	091b      	lsrs	r3, r3, #4
 8008998:	b2db      	uxtb	r3, r3
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2200      	movs	r2, #0
 80089a8:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f040 8086 	bne.w	8008ac0 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	029b      	lsls	r3, r3, #10
 80089b8:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	691a      	ldr	r2, [r3, #16]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	431a      	orrs	r2, r3
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089da:	0e1b      	lsrs	r3, r3, #24
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	691a      	ldr	r2, [r3, #16]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	099b      	lsrs	r3, r3, #6
 80089e8:	f003 0303 	and.w	r3, r3, #3
 80089ec:	431a      	orrs	r2, r3
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	08db      	lsrs	r3, r3, #3
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	f003 0307 	and.w	r3, r3, #7
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	f003 0307 	and.w	r3, r3, #7
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a14:	0c1b      	lsrs	r3, r3, #16
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	095b      	lsrs	r3, r3, #5
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	f003 0307 	and.w	r3, r3, #7
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	089b      	lsrs	r3, r3, #2
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	f003 0307 	and.w	r3, r3, #7
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	005b      	lsls	r3, r3, #1
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	f003 0306 	and.w	r3, r3, #6
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a50:	0a1b      	lsrs	r3, r3, #8
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	7e1b      	ldrb	r3, [r3, #24]
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	09db      	lsrs	r3, r3, #7
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	f003 0301 	and.w	r3, r3, #1
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	7e1b      	ldrb	r3, [r3, #24]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	3302      	adds	r3, #2
 8008a82:	2201      	movs	r2, #1
 8008a84:	409a      	lsls	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8a:	fb02 f203 	mul.w	r2, r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	7a1b      	ldrb	r3, [r3, #8]
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	461a      	mov	r2, r3
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	4093      	lsls	r3, r2
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008aac:	0a52      	lsrs	r2, r2, #9
 8008aae:	fb02 f203 	mul.w	r2, r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008abc:	661a      	str	r2, [r3, #96]	; 0x60
 8008abe:	e04d      	b.n	8008b5c <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d138      	bne.n	8008b3a <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	041b      	lsls	r3, r3, #16
 8008ad4:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ae0:	0e1b      	lsrs	r3, r3, #24
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	691a      	ldr	r2, [r3, #16]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	021b      	lsls	r3, r3, #8
 8008aee:	431a      	orrs	r2, r3
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008af8:	0c1b      	lsrs	r3, r3, #16
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	691a      	ldr	r2, [r3, #16]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	431a      	orrs	r2, r3
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b0e:	0a1b      	lsrs	r3, r3, #8
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	029a      	lsls	r2, r3, #10
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	655a      	str	r2, [r3, #84]	; 0x54
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b2e:	659a      	str	r2, [r3, #88]	; 0x58
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	661a      	str	r2, [r3, #96]	; 0x60
 8008b38:	e010      	b.n	8008b5c <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008b42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e0c1      	b.n	8008ce0 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	099b      	lsrs	r3, r3, #6
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	b2da      	uxtb	r2, r3
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	7e9b      	ldrb	r3, [r3, #26]
 8008b8a:	b2da      	uxtb	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	09db      	lsrs	r3, r3, #7
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb2:	0e1b      	lsrs	r3, r3, #24
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	09db      	lsrs	r3, r3, #7
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	f003 0301 	and.w	r3, r3, #1
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	095b      	lsrs	r3, r3, #5
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	089b      	lsrs	r3, r3, #2
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	f003 0307 	and.w	r3, r3, #7
 8008be2:	b2da      	uxtb	r2, r3
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	f003 030c 	and.w	r3, r3, #12
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bfe:	0c1b      	lsrs	r3, r3, #16
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	7fdb      	ldrb	r3, [r3, #31]
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	099b      	lsrs	r3, r3, #6
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	f003 0303 	and.w	r3, r3, #3
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	4313      	orrs	r3, r2
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	095b      	lsrs	r3, r3, #5
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	f003 0301 	and.w	r3, r3, #1
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	f003 0301 	and.w	r3, r3, #1
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4c:	0a1b      	lsrs	r3, r3, #8
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	09db      	lsrs	r3, r3, #7
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	b2da      	uxtb	r2, r3
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	099b      	lsrs	r3, r3, #6
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	095b      	lsrs	r3, r3, #5
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	091b      	lsrs	r3, r3, #4
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	089b      	lsrs	r3, r3, #2
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	f003 0303 	and.w	r3, r3, #3
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	f003 0303 	and.w	r3, r3, #3
 8008cb4:	b2da      	uxtb	r2, r3
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	085b      	lsrs	r3, r3, #1
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cce:	b2da      	uxtb	r2, r3
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3714      	adds	r7, #20
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8008d4c:	2304      	movs	r3, #4
 8008d4e:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008d50:	2300      	movs	r3, #0
 8008d52:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8008d54:	2300      	movs	r3, #0
 8008d56:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8008d58:	f107 030c 	add.w	r3, r7, #12
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f986 	bl	8009070 <SD_SendStatus>
 8008d64:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d005      	beq.n	8008d78 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	431a      	orrs	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	0a5b      	lsrs	r3, r3, #9
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	f003 030f 	and.w	r3, r3, #15
 8008d82:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8008d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3718      	adds	r7, #24
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d8e:	b5b0      	push	{r4, r5, r7, lr}
 8008d90:	b094      	sub	sp, #80	; 0x50
 8008d92:	af04      	add	r7, sp, #16
 8008d94:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008d96:	2300      	movs	r3, #0
 8008d98:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f001 fa8e 	bl	800a2c4 <SDMMC_GetPowerState>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d102      	bne.n	8008db4 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008dae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008db2:	e0b1      	b.n	8008f18 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db8:	2b03      	cmp	r3, #3
 8008dba:	d02f      	beq.n	8008e1c <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f001 fc8d 	bl	800a6e0 <SDMMC_CmdSendCID>
 8008dc6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <SD_InitCard+0x44>
    {
      return errorstate;
 8008dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd0:	e0a2      	b.n	8008f18 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f001 fab8 	bl	800a34e <SDMMC_GetResponse>
 8008dde:	4602      	mov	r2, r0
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2104      	movs	r1, #4
 8008dea:	4618      	mov	r0, r3
 8008dec:	f001 faaf 	bl	800a34e <SDMMC_GetResponse>
 8008df0:	4602      	mov	r2, r0
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2108      	movs	r1, #8
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f001 faa6 	bl	800a34e <SDMMC_GetResponse>
 8008e02:	4602      	mov	r2, r0
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	210c      	movs	r1, #12
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f001 fa9d 	bl	800a34e <SDMMC_GetResponse>
 8008e14:	4602      	mov	r2, r0
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e20:	2b03      	cmp	r3, #3
 8008e22:	d00d      	beq.n	8008e40 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f107 020e 	add.w	r2, r7, #14
 8008e2c:	4611      	mov	r1, r2
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f001 fc97 	bl	800a762 <SDMMC_CmdSetRelAdd>
 8008e34:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <SD_InitCard+0xb2>
    {
      return errorstate;
 8008e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e3e:	e06b      	b.n	8008f18 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e44:	2b03      	cmp	r3, #3
 8008e46:	d036      	beq.n	8008eb6 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008e48:	89fb      	ldrh	r3, [r7, #14]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e58:	041b      	lsls	r3, r3, #16
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	f001 fc5f 	bl	800a720 <SDMMC_CmdSendCSD>
 8008e62:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <SD_InitCard+0xe0>
    {
      return errorstate;
 8008e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6c:	e054      	b.n	8008f18 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2100      	movs	r1, #0
 8008e74:	4618      	mov	r0, r3
 8008e76:	f001 fa6a 	bl	800a34e <SDMMC_GetResponse>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2104      	movs	r1, #4
 8008e86:	4618      	mov	r0, r3
 8008e88:	f001 fa61 	bl	800a34e <SDMMC_GetResponse>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2108      	movs	r1, #8
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f001 fa58 	bl	800a34e <SDMMC_GetResponse>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	210c      	movs	r1, #12
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f001 fa4f 	bl	800a34e <SDMMC_GetResponse>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2104      	movs	r1, #4
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f001 fa46 	bl	800a34e <SDMMC_GetResponse>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	0d1a      	lsrs	r2, r3, #20
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8008eca:	f107 0310 	add.w	r3, r7, #16
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7ff fce3 	bl	800889c <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6819      	ldr	r1, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ede:	041b      	lsls	r3, r3, #16
 8008ee0:	f04f 0400 	mov.w	r4, #0
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	4623      	mov	r3, r4
 8008ee8:	4608      	mov	r0, r1
 8008eea:	f001 fb49 	bl	800a580 <SDMMC_CmdSelDesel>
 8008eee:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <SD_InitCard+0x16c>
  {
    return errorstate;
 8008ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef8:	e00e      	b.n	8008f18 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681d      	ldr	r5, [r3, #0]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	466c      	mov	r4, sp
 8008f02:	f103 0210 	add.w	r2, r3, #16
 8008f06:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f0c:	3304      	adds	r3, #4
 8008f0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f10:	4628      	mov	r0, r5
 8008f12:	f001 f97f 	bl	800a214 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3740      	adds	r7, #64	; 0x40
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bdb0      	pop	{r4, r5, r7, pc}

08008f20 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	617b      	str	r3, [r7, #20]
 8008f30:	2300      	movs	r3, #0
 8008f32:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008f34:	2300      	movs	r3, #0
 8008f36:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f001 fb44 	bl	800a5ca <SDMMC_CmdGoIdleState>
 8008f42:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <SD_PowerON+0x2e>
  {
    return errorstate;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	e08c      	b.n	8009068 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f001 fb59 	bl	800a60a <SDMMC_CmdOperCond>
 8008f58:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d03d      	beq.n	8008fdc <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8008f66:	e032      	b.n	8008fce <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	60ba      	str	r2, [r7, #8]
 8008f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d102      	bne.n	8008f7c <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008f76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f7a:	e075      	b.n	8009068 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2100      	movs	r1, #0
 8008f82:	4618      	mov	r0, r3
 8008f84:	f001 fb62 	bl	800a64c <SDMMC_CmdAppCommand>
 8008f88:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d002      	beq.n	8008f96 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f94:	e068      	b.n	8009068 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f001 fb79 	bl	800a694 <SDMMC_CmdAppOperCommand>
 8008fa2:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008faa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008fae:	e05b      	b.n	8009068 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f001 f9c9 	bl	800a34e <SDMMC_GetResponse>
 8008fbc:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	0fdb      	lsrs	r3, r3, #31
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	bf0c      	ite	eq
 8008fc6:	2301      	moveq	r3, #1
 8008fc8:	2300      	movne	r3, #0
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d0c9      	beq.n	8008f68 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	645a      	str	r2, [r3, #68]	; 0x44
 8008fda:	e044      	b.n	8009066 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8008fe2:	e031      	b.n	8009048 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	60ba      	str	r2, [r7, #8]
 8008fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d102      	bne.n	8008ff8 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008ff2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ff6:	e037      	b.n	8009068 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	4618      	mov	r0, r3
 8009000:	f001 fb24 	bl	800a64c <SDMMC_CmdAppCommand>
 8009004:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d001      	beq.n	8009010 <SD_PowerON+0xf0>
      {
        return errorstate;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	e02b      	b.n	8009068 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009018:	4618      	mov	r0, r3
 800901a:	f001 fb3b 	bl	800a694 <SDMMC_CmdAppOperCommand>
 800901e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d001      	beq.n	800902a <SD_PowerON+0x10a>
      {
        return errorstate;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	e01e      	b.n	8009068 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2100      	movs	r1, #0
 8009030:	4618      	mov	r0, r3
 8009032:	f001 f98c 	bl	800a34e <SDMMC_GetResponse>
 8009036:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	0fdb      	lsrs	r3, r3, #31
 800903c:	2b01      	cmp	r3, #1
 800903e:	bf0c      	ite	eq
 8009040:	2301      	moveq	r3, #1
 8009042:	2300      	movne	r3, #0
 8009044:	b2db      	uxtb	r3, r3
 8009046:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d0ca      	beq.n	8008fe4 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d003      	beq.n	8009060 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	645a      	str	r2, [r3, #68]	; 0x44
 800905e:	e002      	b.n	8009066 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3718      	adds	r7, #24
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800907a:	2300      	movs	r3, #0
 800907c:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d102      	bne.n	800908a <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8009084:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009088:	e018      	b.n	80090bc <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009092:	041b      	lsls	r3, r3, #16
 8009094:	4619      	mov	r1, r3
 8009096:	4610      	mov	r0, r2
 8009098:	f001 fb86 	bl	800a7a8 <SDMMC_CmdSendStatus>
 800909c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <SD_SendStatus+0x38>
  {
    return errorstate;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	e009      	b.n	80090bc <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2100      	movs	r1, #0
 80090ae:	4618      	mov	r0, r3
 80090b0:	f001 f94d 	bl	800a34e <SDMMC_GetResponse>
 80090b4:	4602      	mov	r2, r0
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e025      	b.n	8009124 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d106      	bne.n	80090f2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7f8 fca1 	bl	8001a34 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2202      	movs	r2, #2
 80090f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	3304      	adds	r3, #4
 8009102:	4619      	mov	r1, r3
 8009104:	4610      	mov	r0, r2
 8009106:	f000 ff5f 	bl	8009fc8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6818      	ldr	r0, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	461a      	mov	r2, r3
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	f000 ffc9 	bl	800a0ac <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2201      	movs	r2, #1
 800911e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800913e:	b2db      	uxtb	r3, r3
 8009140:	2b02      	cmp	r3, #2
 8009142:	d101      	bne.n	8009148 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009144:	2302      	movs	r3, #2
 8009146:	e018      	b.n	800917a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2202      	movs	r2, #2
 800914c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	68b9      	ldr	r1, [r7, #8]
 8009158:	4618      	mov	r0, r3
 800915a:	f001 f827 	bl	800a1ac <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b02      	cmp	r3, #2
 8009164:	d104      	bne.n	8009170 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2205      	movs	r2, #5
 800916a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800916e:	e003      	b.n	8009178 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b082      	sub	sp, #8
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b02      	cmp	r3, #2
 8009196:	d101      	bne.n	800919c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009198:	2302      	movs	r3, #2
 800919a:	e00e      	b.n	80091ba <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2202      	movs	r2, #2
 80091a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f001 f81f 	bl	800a1ee <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b082      	sub	sp, #8
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d101      	bne.n	80091d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e01d      	b.n	8009210 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d106      	bne.n	80091ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f815 	bl	8009218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2202      	movs	r2, #2
 80091f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	3304      	adds	r3, #4
 80091fe:	4619      	mov	r1, r3
 8009200:	4610      	mov	r0, r2
 8009202:	f000 f985 	bl	8009510 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68da      	ldr	r2, [r3, #12]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f042 0201 	orr.w	r2, r2, #1
 8009242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689a      	ldr	r2, [r3, #8]
 800924a:	4b0c      	ldr	r3, [pc, #48]	; (800927c <HAL_TIM_Base_Start_IT+0x50>)
 800924c:	4013      	ands	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2b06      	cmp	r3, #6
 8009254:	d00b      	beq.n	800926e <HAL_TIM_Base_Start_IT+0x42>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800925c:	d007      	beq.n	800926e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f042 0201 	orr.w	r2, r2, #1
 800926c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3714      	adds	r7, #20
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr
 800927c:	00010007 	.word	0x00010007

08009280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	2b02      	cmp	r3, #2
 8009294:	d122      	bne.n	80092dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	f003 0302 	and.w	r3, r3, #2
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d11b      	bne.n	80092dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f06f 0202 	mvn.w	r2, #2
 80092ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	f003 0303 	and.w	r3, r3, #3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f905 	bl	80094d2 <HAL_TIM_IC_CaptureCallback>
 80092c8:	e005      	b.n	80092d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f8f7 	bl	80094be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f908 	bl	80094e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	f003 0304 	and.w	r3, r3, #4
 80092e6:	2b04      	cmp	r3, #4
 80092e8:	d122      	bne.n	8009330 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	f003 0304 	and.w	r3, r3, #4
 80092f4:	2b04      	cmp	r3, #4
 80092f6:	d11b      	bne.n	8009330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f06f 0204 	mvn.w	r2, #4
 8009300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2202      	movs	r2, #2
 8009306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009312:	2b00      	cmp	r3, #0
 8009314:	d003      	beq.n	800931e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f8db 	bl	80094d2 <HAL_TIM_IC_CaptureCallback>
 800931c:	e005      	b.n	800932a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f8cd 	bl	80094be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f8de 	bl	80094e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	f003 0308 	and.w	r3, r3, #8
 800933a:	2b08      	cmp	r3, #8
 800933c:	d122      	bne.n	8009384 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	f003 0308 	and.w	r3, r3, #8
 8009348:	2b08      	cmp	r3, #8
 800934a:	d11b      	bne.n	8009384 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f06f 0208 	mvn.w	r2, #8
 8009354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2204      	movs	r2, #4
 800935a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	69db      	ldr	r3, [r3, #28]
 8009362:	f003 0303 	and.w	r3, r3, #3
 8009366:	2b00      	cmp	r3, #0
 8009368:	d003      	beq.n	8009372 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f8b1 	bl	80094d2 <HAL_TIM_IC_CaptureCallback>
 8009370:	e005      	b.n	800937e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f8a3 	bl	80094be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f8b4 	bl	80094e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	f003 0310 	and.w	r3, r3, #16
 800938e:	2b10      	cmp	r3, #16
 8009390:	d122      	bne.n	80093d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f003 0310 	and.w	r3, r3, #16
 800939c:	2b10      	cmp	r3, #16
 800939e:	d11b      	bne.n	80093d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f06f 0210 	mvn.w	r2, #16
 80093a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2208      	movs	r2, #8
 80093ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d003      	beq.n	80093c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f887 	bl	80094d2 <HAL_TIM_IC_CaptureCallback>
 80093c4:	e005      	b.n	80093d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f879 	bl	80094be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f88a 	bl	80094e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d10e      	bne.n	8009404 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d107      	bne.n	8009404 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f06f 0201 	mvn.w	r2, #1
 80093fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7f8 f8ba 	bl	8001578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800940e:	2b80      	cmp	r3, #128	; 0x80
 8009410:	d10e      	bne.n	8009430 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800941c:	2b80      	cmp	r3, #128	; 0x80
 800941e:	d107      	bne.n	8009430 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f91a 	bl	8009664 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800943a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800943e:	d10e      	bne.n	800945e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800944a:	2b80      	cmp	r3, #128	; 0x80
 800944c:	d107      	bne.n	800945e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f90d 	bl	8009678 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009468:	2b40      	cmp	r3, #64	; 0x40
 800946a:	d10e      	bne.n	800948a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009476:	2b40      	cmp	r3, #64	; 0x40
 8009478:	d107      	bne.n	800948a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f838 	bl	80094fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	f003 0320 	and.w	r3, r3, #32
 8009494:	2b20      	cmp	r3, #32
 8009496:	d10e      	bne.n	80094b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	f003 0320 	and.w	r3, r3, #32
 80094a2:	2b20      	cmp	r3, #32
 80094a4:	d107      	bne.n	80094b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f06f 0220 	mvn.w	r2, #32
 80094ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f8cd 	bl	8009650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094b6:	bf00      	nop
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094be:	b480      	push	{r7}
 80094c0:	b083      	sub	sp, #12
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094c6:	bf00      	nop
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b083      	sub	sp, #12
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094da:	bf00      	nop
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b083      	sub	sp, #12
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094ee:	bf00      	nop
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b083      	sub	sp, #12
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009502:	bf00      	nop
 8009504:	370c      	adds	r7, #12
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
	...

08009510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a40      	ldr	r2, [pc, #256]	; (8009624 <TIM_Base_SetConfig+0x114>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d013      	beq.n	8009550 <TIM_Base_SetConfig+0x40>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800952e:	d00f      	beq.n	8009550 <TIM_Base_SetConfig+0x40>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a3d      	ldr	r2, [pc, #244]	; (8009628 <TIM_Base_SetConfig+0x118>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d00b      	beq.n	8009550 <TIM_Base_SetConfig+0x40>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a3c      	ldr	r2, [pc, #240]	; (800962c <TIM_Base_SetConfig+0x11c>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d007      	beq.n	8009550 <TIM_Base_SetConfig+0x40>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a3b      	ldr	r2, [pc, #236]	; (8009630 <TIM_Base_SetConfig+0x120>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d003      	beq.n	8009550 <TIM_Base_SetConfig+0x40>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a3a      	ldr	r2, [pc, #232]	; (8009634 <TIM_Base_SetConfig+0x124>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d108      	bne.n	8009562 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	4313      	orrs	r3, r2
 8009560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a2f      	ldr	r2, [pc, #188]	; (8009624 <TIM_Base_SetConfig+0x114>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d02b      	beq.n	80095c2 <TIM_Base_SetConfig+0xb2>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009570:	d027      	beq.n	80095c2 <TIM_Base_SetConfig+0xb2>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a2c      	ldr	r2, [pc, #176]	; (8009628 <TIM_Base_SetConfig+0x118>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d023      	beq.n	80095c2 <TIM_Base_SetConfig+0xb2>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a2b      	ldr	r2, [pc, #172]	; (800962c <TIM_Base_SetConfig+0x11c>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d01f      	beq.n	80095c2 <TIM_Base_SetConfig+0xb2>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a2a      	ldr	r2, [pc, #168]	; (8009630 <TIM_Base_SetConfig+0x120>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d01b      	beq.n	80095c2 <TIM_Base_SetConfig+0xb2>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a29      	ldr	r2, [pc, #164]	; (8009634 <TIM_Base_SetConfig+0x124>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d017      	beq.n	80095c2 <TIM_Base_SetConfig+0xb2>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a28      	ldr	r2, [pc, #160]	; (8009638 <TIM_Base_SetConfig+0x128>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d013      	beq.n	80095c2 <TIM_Base_SetConfig+0xb2>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a27      	ldr	r2, [pc, #156]	; (800963c <TIM_Base_SetConfig+0x12c>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d00f      	beq.n	80095c2 <TIM_Base_SetConfig+0xb2>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a26      	ldr	r2, [pc, #152]	; (8009640 <TIM_Base_SetConfig+0x130>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d00b      	beq.n	80095c2 <TIM_Base_SetConfig+0xb2>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a25      	ldr	r2, [pc, #148]	; (8009644 <TIM_Base_SetConfig+0x134>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d007      	beq.n	80095c2 <TIM_Base_SetConfig+0xb2>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a24      	ldr	r2, [pc, #144]	; (8009648 <TIM_Base_SetConfig+0x138>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d003      	beq.n	80095c2 <TIM_Base_SetConfig+0xb2>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a23      	ldr	r2, [pc, #140]	; (800964c <TIM_Base_SetConfig+0x13c>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d108      	bne.n	80095d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	68fa      	ldr	r2, [r7, #12]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	4313      	orrs	r3, r2
 80095e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	689a      	ldr	r2, [r3, #8]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a0a      	ldr	r2, [pc, #40]	; (8009624 <TIM_Base_SetConfig+0x114>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d003      	beq.n	8009608 <TIM_Base_SetConfig+0xf8>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a0c      	ldr	r2, [pc, #48]	; (8009634 <TIM_Base_SetConfig+0x124>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d103      	bne.n	8009610 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	691a      	ldr	r2, [r3, #16]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	615a      	str	r2, [r3, #20]
}
 8009616:	bf00      	nop
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	40010000 	.word	0x40010000
 8009628:	40000400 	.word	0x40000400
 800962c:	40000800 	.word	0x40000800
 8009630:	40000c00 	.word	0x40000c00
 8009634:	40010400 	.word	0x40010400
 8009638:	40014000 	.word	0x40014000
 800963c:	40014400 	.word	0x40014400
 8009640:	40014800 	.word	0x40014800
 8009644:	40001800 	.word	0x40001800
 8009648:	40001c00 	.word	0x40001c00
 800964c:	40002000 	.word	0x40002000

08009650 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d101      	bne.n	800969e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e040      	b.n	8009720 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d106      	bne.n	80096b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7f8 f8d8 	bl	8001864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2224      	movs	r2, #36	; 0x24
 80096b8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f022 0201 	bic.w	r2, r2, #1
 80096c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f8be 	bl	800984c <UART_SetConfig>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d101      	bne.n	80096da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e022      	b.n	8009720 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fb56 	bl	8009d94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	685a      	ldr	r2, [r3, #4]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	689a      	ldr	r2, [r3, #8]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009706:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f042 0201 	orr.w	r2, r2, #1
 8009716:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fbdd 	bl	8009ed8 <UART_CheckIdleState>
 800971e:	4603      	mov	r3, r0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b08a      	sub	sp, #40	; 0x28
 800972c:	af02      	add	r7, sp, #8
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	4613      	mov	r3, r2
 8009736:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800973c:	2b20      	cmp	r3, #32
 800973e:	d17f      	bne.n	8009840 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d002      	beq.n	800974c <HAL_UART_Transmit+0x24>
 8009746:	88fb      	ldrh	r3, [r7, #6]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d101      	bne.n	8009750 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	e078      	b.n	8009842 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009756:	2b01      	cmp	r3, #1
 8009758:	d101      	bne.n	800975e <HAL_UART_Transmit+0x36>
 800975a:	2302      	movs	r3, #2
 800975c:	e071      	b.n	8009842 <HAL_UART_Transmit+0x11a>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2201      	movs	r2, #1
 8009762:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2221      	movs	r2, #33	; 0x21
 8009770:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009772:	f7fa f837 	bl	80037e4 <HAL_GetTick>
 8009776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	88fa      	ldrh	r2, [r7, #6]
 800977c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	88fa      	ldrh	r2, [r7, #6]
 8009784:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009790:	d108      	bne.n	80097a4 <HAL_UART_Transmit+0x7c>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d104      	bne.n	80097a4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800979a:	2300      	movs	r3, #0
 800979c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	61bb      	str	r3, [r7, #24]
 80097a2:	e003      	b.n	80097ac <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097a8:	2300      	movs	r3, #0
 80097aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80097ac:	e02c      	b.n	8009808 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2200      	movs	r2, #0
 80097b6:	2180      	movs	r1, #128	; 0x80
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f000 fbbc 	bl	8009f36 <UART_WaitOnFlagUntilTimeout>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d001      	beq.n	80097c8 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 80097c4:	2303      	movs	r3, #3
 80097c6:	e03c      	b.n	8009842 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10b      	bne.n	80097e6 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	881b      	ldrh	r3, [r3, #0]
 80097d2:	461a      	mov	r2, r3
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	3302      	adds	r3, #2
 80097e2:	61bb      	str	r3, [r7, #24]
 80097e4:	e007      	b.n	80097f6 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	781a      	ldrb	r2, [r3, #0]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	3301      	adds	r3, #1
 80097f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	3b01      	subs	r3, #1
 8009800:	b29a      	uxth	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800980e:	b29b      	uxth	r3, r3
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1cc      	bne.n	80097ae <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	2200      	movs	r2, #0
 800981c:	2140      	movs	r1, #64	; 0x40
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 fb89 	bl	8009f36 <UART_WaitOnFlagUntilTimeout>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e009      	b.n	8009842 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2220      	movs	r2, #32
 8009832:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	e000      	b.n	8009842 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8009840:	2302      	movs	r3, #2
  }
}
 8009842:	4618      	mov	r0, r3
 8009844:	3720      	adds	r7, #32
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
	...

0800984c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b088      	sub	sp, #32
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009854:	2300      	movs	r3, #0
 8009856:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	689a      	ldr	r2, [r3, #8]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	431a      	orrs	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	695b      	ldr	r3, [r3, #20]
 800986a:	431a      	orrs	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	69db      	ldr	r3, [r3, #28]
 8009870:	4313      	orrs	r3, r2
 8009872:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	4bb1      	ldr	r3, [pc, #708]	; (8009b40 <UART_SetConfig+0x2f4>)
 800987c:	4013      	ands	r3, r2
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	6812      	ldr	r2, [r2, #0]
 8009882:	6939      	ldr	r1, [r7, #16]
 8009884:	430b      	orrs	r3, r1
 8009886:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	68da      	ldr	r2, [r3, #12]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	430a      	orrs	r2, r1
 800989c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a1b      	ldr	r3, [r3, #32]
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	430a      	orrs	r2, r1
 80098c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a9f      	ldr	r2, [pc, #636]	; (8009b44 <UART_SetConfig+0x2f8>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d121      	bne.n	8009910 <UART_SetConfig+0xc4>
 80098cc:	4b9e      	ldr	r3, [pc, #632]	; (8009b48 <UART_SetConfig+0x2fc>)
 80098ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098d2:	f003 0303 	and.w	r3, r3, #3
 80098d6:	2b03      	cmp	r3, #3
 80098d8:	d816      	bhi.n	8009908 <UART_SetConfig+0xbc>
 80098da:	a201      	add	r2, pc, #4	; (adr r2, 80098e0 <UART_SetConfig+0x94>)
 80098dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e0:	080098f1 	.word	0x080098f1
 80098e4:	080098fd 	.word	0x080098fd
 80098e8:	080098f7 	.word	0x080098f7
 80098ec:	08009903 	.word	0x08009903
 80098f0:	2301      	movs	r3, #1
 80098f2:	77fb      	strb	r3, [r7, #31]
 80098f4:	e151      	b.n	8009b9a <UART_SetConfig+0x34e>
 80098f6:	2302      	movs	r3, #2
 80098f8:	77fb      	strb	r3, [r7, #31]
 80098fa:	e14e      	b.n	8009b9a <UART_SetConfig+0x34e>
 80098fc:	2304      	movs	r3, #4
 80098fe:	77fb      	strb	r3, [r7, #31]
 8009900:	e14b      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009902:	2308      	movs	r3, #8
 8009904:	77fb      	strb	r3, [r7, #31]
 8009906:	e148      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009908:	2310      	movs	r3, #16
 800990a:	77fb      	strb	r3, [r7, #31]
 800990c:	bf00      	nop
 800990e:	e144      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a8d      	ldr	r2, [pc, #564]	; (8009b4c <UART_SetConfig+0x300>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d134      	bne.n	8009984 <UART_SetConfig+0x138>
 800991a:	4b8b      	ldr	r3, [pc, #556]	; (8009b48 <UART_SetConfig+0x2fc>)
 800991c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009920:	f003 030c 	and.w	r3, r3, #12
 8009924:	2b0c      	cmp	r3, #12
 8009926:	d829      	bhi.n	800997c <UART_SetConfig+0x130>
 8009928:	a201      	add	r2, pc, #4	; (adr r2, 8009930 <UART_SetConfig+0xe4>)
 800992a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992e:	bf00      	nop
 8009930:	08009965 	.word	0x08009965
 8009934:	0800997d 	.word	0x0800997d
 8009938:	0800997d 	.word	0x0800997d
 800993c:	0800997d 	.word	0x0800997d
 8009940:	08009971 	.word	0x08009971
 8009944:	0800997d 	.word	0x0800997d
 8009948:	0800997d 	.word	0x0800997d
 800994c:	0800997d 	.word	0x0800997d
 8009950:	0800996b 	.word	0x0800996b
 8009954:	0800997d 	.word	0x0800997d
 8009958:	0800997d 	.word	0x0800997d
 800995c:	0800997d 	.word	0x0800997d
 8009960:	08009977 	.word	0x08009977
 8009964:	2300      	movs	r3, #0
 8009966:	77fb      	strb	r3, [r7, #31]
 8009968:	e117      	b.n	8009b9a <UART_SetConfig+0x34e>
 800996a:	2302      	movs	r3, #2
 800996c:	77fb      	strb	r3, [r7, #31]
 800996e:	e114      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009970:	2304      	movs	r3, #4
 8009972:	77fb      	strb	r3, [r7, #31]
 8009974:	e111      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009976:	2308      	movs	r3, #8
 8009978:	77fb      	strb	r3, [r7, #31]
 800997a:	e10e      	b.n	8009b9a <UART_SetConfig+0x34e>
 800997c:	2310      	movs	r3, #16
 800997e:	77fb      	strb	r3, [r7, #31]
 8009980:	bf00      	nop
 8009982:	e10a      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a71      	ldr	r2, [pc, #452]	; (8009b50 <UART_SetConfig+0x304>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d120      	bne.n	80099d0 <UART_SetConfig+0x184>
 800998e:	4b6e      	ldr	r3, [pc, #440]	; (8009b48 <UART_SetConfig+0x2fc>)
 8009990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009994:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009998:	2b10      	cmp	r3, #16
 800999a:	d00f      	beq.n	80099bc <UART_SetConfig+0x170>
 800999c:	2b10      	cmp	r3, #16
 800999e:	d802      	bhi.n	80099a6 <UART_SetConfig+0x15a>
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d005      	beq.n	80099b0 <UART_SetConfig+0x164>
 80099a4:	e010      	b.n	80099c8 <UART_SetConfig+0x17c>
 80099a6:	2b20      	cmp	r3, #32
 80099a8:	d005      	beq.n	80099b6 <UART_SetConfig+0x16a>
 80099aa:	2b30      	cmp	r3, #48	; 0x30
 80099ac:	d009      	beq.n	80099c2 <UART_SetConfig+0x176>
 80099ae:	e00b      	b.n	80099c8 <UART_SetConfig+0x17c>
 80099b0:	2300      	movs	r3, #0
 80099b2:	77fb      	strb	r3, [r7, #31]
 80099b4:	e0f1      	b.n	8009b9a <UART_SetConfig+0x34e>
 80099b6:	2302      	movs	r3, #2
 80099b8:	77fb      	strb	r3, [r7, #31]
 80099ba:	e0ee      	b.n	8009b9a <UART_SetConfig+0x34e>
 80099bc:	2304      	movs	r3, #4
 80099be:	77fb      	strb	r3, [r7, #31]
 80099c0:	e0eb      	b.n	8009b9a <UART_SetConfig+0x34e>
 80099c2:	2308      	movs	r3, #8
 80099c4:	77fb      	strb	r3, [r7, #31]
 80099c6:	e0e8      	b.n	8009b9a <UART_SetConfig+0x34e>
 80099c8:	2310      	movs	r3, #16
 80099ca:	77fb      	strb	r3, [r7, #31]
 80099cc:	bf00      	nop
 80099ce:	e0e4      	b.n	8009b9a <UART_SetConfig+0x34e>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a5f      	ldr	r2, [pc, #380]	; (8009b54 <UART_SetConfig+0x308>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d120      	bne.n	8009a1c <UART_SetConfig+0x1d0>
 80099da:	4b5b      	ldr	r3, [pc, #364]	; (8009b48 <UART_SetConfig+0x2fc>)
 80099dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80099e4:	2b40      	cmp	r3, #64	; 0x40
 80099e6:	d00f      	beq.n	8009a08 <UART_SetConfig+0x1bc>
 80099e8:	2b40      	cmp	r3, #64	; 0x40
 80099ea:	d802      	bhi.n	80099f2 <UART_SetConfig+0x1a6>
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d005      	beq.n	80099fc <UART_SetConfig+0x1b0>
 80099f0:	e010      	b.n	8009a14 <UART_SetConfig+0x1c8>
 80099f2:	2b80      	cmp	r3, #128	; 0x80
 80099f4:	d005      	beq.n	8009a02 <UART_SetConfig+0x1b6>
 80099f6:	2bc0      	cmp	r3, #192	; 0xc0
 80099f8:	d009      	beq.n	8009a0e <UART_SetConfig+0x1c2>
 80099fa:	e00b      	b.n	8009a14 <UART_SetConfig+0x1c8>
 80099fc:	2300      	movs	r3, #0
 80099fe:	77fb      	strb	r3, [r7, #31]
 8009a00:	e0cb      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009a02:	2302      	movs	r3, #2
 8009a04:	77fb      	strb	r3, [r7, #31]
 8009a06:	e0c8      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009a08:	2304      	movs	r3, #4
 8009a0a:	77fb      	strb	r3, [r7, #31]
 8009a0c:	e0c5      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009a0e:	2308      	movs	r3, #8
 8009a10:	77fb      	strb	r3, [r7, #31]
 8009a12:	e0c2      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009a14:	2310      	movs	r3, #16
 8009a16:	77fb      	strb	r3, [r7, #31]
 8009a18:	bf00      	nop
 8009a1a:	e0be      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a4d      	ldr	r2, [pc, #308]	; (8009b58 <UART_SetConfig+0x30c>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d124      	bne.n	8009a70 <UART_SetConfig+0x224>
 8009a26:	4b48      	ldr	r3, [pc, #288]	; (8009b48 <UART_SetConfig+0x2fc>)
 8009a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a34:	d012      	beq.n	8009a5c <UART_SetConfig+0x210>
 8009a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a3a:	d802      	bhi.n	8009a42 <UART_SetConfig+0x1f6>
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d007      	beq.n	8009a50 <UART_SetConfig+0x204>
 8009a40:	e012      	b.n	8009a68 <UART_SetConfig+0x21c>
 8009a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a46:	d006      	beq.n	8009a56 <UART_SetConfig+0x20a>
 8009a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a4c:	d009      	beq.n	8009a62 <UART_SetConfig+0x216>
 8009a4e:	e00b      	b.n	8009a68 <UART_SetConfig+0x21c>
 8009a50:	2300      	movs	r3, #0
 8009a52:	77fb      	strb	r3, [r7, #31]
 8009a54:	e0a1      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009a56:	2302      	movs	r3, #2
 8009a58:	77fb      	strb	r3, [r7, #31]
 8009a5a:	e09e      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009a5c:	2304      	movs	r3, #4
 8009a5e:	77fb      	strb	r3, [r7, #31]
 8009a60:	e09b      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009a62:	2308      	movs	r3, #8
 8009a64:	77fb      	strb	r3, [r7, #31]
 8009a66:	e098      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009a68:	2310      	movs	r3, #16
 8009a6a:	77fb      	strb	r3, [r7, #31]
 8009a6c:	bf00      	nop
 8009a6e:	e094      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a39      	ldr	r2, [pc, #228]	; (8009b5c <UART_SetConfig+0x310>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d124      	bne.n	8009ac4 <UART_SetConfig+0x278>
 8009a7a:	4b33      	ldr	r3, [pc, #204]	; (8009b48 <UART_SetConfig+0x2fc>)
 8009a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a88:	d012      	beq.n	8009ab0 <UART_SetConfig+0x264>
 8009a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a8e:	d802      	bhi.n	8009a96 <UART_SetConfig+0x24a>
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d007      	beq.n	8009aa4 <UART_SetConfig+0x258>
 8009a94:	e012      	b.n	8009abc <UART_SetConfig+0x270>
 8009a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a9a:	d006      	beq.n	8009aaa <UART_SetConfig+0x25e>
 8009a9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009aa0:	d009      	beq.n	8009ab6 <UART_SetConfig+0x26a>
 8009aa2:	e00b      	b.n	8009abc <UART_SetConfig+0x270>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	77fb      	strb	r3, [r7, #31]
 8009aa8:	e077      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009aaa:	2302      	movs	r3, #2
 8009aac:	77fb      	strb	r3, [r7, #31]
 8009aae:	e074      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009ab0:	2304      	movs	r3, #4
 8009ab2:	77fb      	strb	r3, [r7, #31]
 8009ab4:	e071      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009ab6:	2308      	movs	r3, #8
 8009ab8:	77fb      	strb	r3, [r7, #31]
 8009aba:	e06e      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009abc:	2310      	movs	r3, #16
 8009abe:	77fb      	strb	r3, [r7, #31]
 8009ac0:	bf00      	nop
 8009ac2:	e06a      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a25      	ldr	r2, [pc, #148]	; (8009b60 <UART_SetConfig+0x314>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d124      	bne.n	8009b18 <UART_SetConfig+0x2cc>
 8009ace:	4b1e      	ldr	r3, [pc, #120]	; (8009b48 <UART_SetConfig+0x2fc>)
 8009ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ad4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009adc:	d012      	beq.n	8009b04 <UART_SetConfig+0x2b8>
 8009ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae2:	d802      	bhi.n	8009aea <UART_SetConfig+0x29e>
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d007      	beq.n	8009af8 <UART_SetConfig+0x2ac>
 8009ae8:	e012      	b.n	8009b10 <UART_SetConfig+0x2c4>
 8009aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aee:	d006      	beq.n	8009afe <UART_SetConfig+0x2b2>
 8009af0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009af4:	d009      	beq.n	8009b0a <UART_SetConfig+0x2be>
 8009af6:	e00b      	b.n	8009b10 <UART_SetConfig+0x2c4>
 8009af8:	2300      	movs	r3, #0
 8009afa:	77fb      	strb	r3, [r7, #31]
 8009afc:	e04d      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009afe:	2302      	movs	r3, #2
 8009b00:	77fb      	strb	r3, [r7, #31]
 8009b02:	e04a      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009b04:	2304      	movs	r3, #4
 8009b06:	77fb      	strb	r3, [r7, #31]
 8009b08:	e047      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009b0a:	2308      	movs	r3, #8
 8009b0c:	77fb      	strb	r3, [r7, #31]
 8009b0e:	e044      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009b10:	2310      	movs	r3, #16
 8009b12:	77fb      	strb	r3, [r7, #31]
 8009b14:	bf00      	nop
 8009b16:	e040      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a11      	ldr	r2, [pc, #68]	; (8009b64 <UART_SetConfig+0x318>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d139      	bne.n	8009b96 <UART_SetConfig+0x34a>
 8009b22:	4b09      	ldr	r3, [pc, #36]	; (8009b48 <UART_SetConfig+0x2fc>)
 8009b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009b2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b30:	d027      	beq.n	8009b82 <UART_SetConfig+0x336>
 8009b32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b36:	d817      	bhi.n	8009b68 <UART_SetConfig+0x31c>
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d01c      	beq.n	8009b76 <UART_SetConfig+0x32a>
 8009b3c:	e027      	b.n	8009b8e <UART_SetConfig+0x342>
 8009b3e:	bf00      	nop
 8009b40:	efff69f3 	.word	0xefff69f3
 8009b44:	40011000 	.word	0x40011000
 8009b48:	40023800 	.word	0x40023800
 8009b4c:	40004400 	.word	0x40004400
 8009b50:	40004800 	.word	0x40004800
 8009b54:	40004c00 	.word	0x40004c00
 8009b58:	40005000 	.word	0x40005000
 8009b5c:	40011400 	.word	0x40011400
 8009b60:	40007800 	.word	0x40007800
 8009b64:	40007c00 	.word	0x40007c00
 8009b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b6c:	d006      	beq.n	8009b7c <UART_SetConfig+0x330>
 8009b6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009b72:	d009      	beq.n	8009b88 <UART_SetConfig+0x33c>
 8009b74:	e00b      	b.n	8009b8e <UART_SetConfig+0x342>
 8009b76:	2300      	movs	r3, #0
 8009b78:	77fb      	strb	r3, [r7, #31]
 8009b7a:	e00e      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	77fb      	strb	r3, [r7, #31]
 8009b80:	e00b      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009b82:	2304      	movs	r3, #4
 8009b84:	77fb      	strb	r3, [r7, #31]
 8009b86:	e008      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009b88:	2308      	movs	r3, #8
 8009b8a:	77fb      	strb	r3, [r7, #31]
 8009b8c:	e005      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009b8e:	2310      	movs	r3, #16
 8009b90:	77fb      	strb	r3, [r7, #31]
 8009b92:	bf00      	nop
 8009b94:	e001      	b.n	8009b9a <UART_SetConfig+0x34e>
 8009b96:	2310      	movs	r3, #16
 8009b98:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	69db      	ldr	r3, [r3, #28]
 8009b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ba2:	d17c      	bne.n	8009c9e <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8009ba4:	7ffb      	ldrb	r3, [r7, #31]
 8009ba6:	2b08      	cmp	r3, #8
 8009ba8:	d859      	bhi.n	8009c5e <UART_SetConfig+0x412>
 8009baa:	a201      	add	r2, pc, #4	; (adr r2, 8009bb0 <UART_SetConfig+0x364>)
 8009bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb0:	08009bd5 	.word	0x08009bd5
 8009bb4:	08009bf3 	.word	0x08009bf3
 8009bb8:	08009c11 	.word	0x08009c11
 8009bbc:	08009c5f 	.word	0x08009c5f
 8009bc0:	08009c29 	.word	0x08009c29
 8009bc4:	08009c5f 	.word	0x08009c5f
 8009bc8:	08009c5f 	.word	0x08009c5f
 8009bcc:	08009c5f 	.word	0x08009c5f
 8009bd0:	08009c47 	.word	0x08009c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009bd4:	f7fd fe56 	bl	8007884 <HAL_RCC_GetPCLK1Freq>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	005a      	lsls	r2, r3, #1
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	085b      	lsrs	r3, r3, #1
 8009be2:	441a      	add	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	61bb      	str	r3, [r7, #24]
        break;
 8009bf0:	e038      	b.n	8009c64 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009bf2:	f7fd fe5b 	bl	80078ac <HAL_RCC_GetPCLK2Freq>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	005a      	lsls	r2, r3, #1
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	085b      	lsrs	r3, r3, #1
 8009c00:	441a      	add	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	61bb      	str	r3, [r7, #24]
        break;
 8009c0e:	e029      	b.n	8009c64 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	085a      	lsrs	r2, r3, #1
 8009c16:	4b5d      	ldr	r3, [pc, #372]	; (8009d8c <UART_SetConfig+0x540>)
 8009c18:	4413      	add	r3, r2
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	6852      	ldr	r2, [r2, #4]
 8009c1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	61bb      	str	r3, [r7, #24]
        break;
 8009c26:	e01d      	b.n	8009c64 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009c28:	f7fd fd6e 	bl	8007708 <HAL_RCC_GetSysClockFreq>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	005a      	lsls	r2, r3, #1
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	085b      	lsrs	r3, r3, #1
 8009c36:	441a      	add	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	61bb      	str	r3, [r7, #24]
        break;
 8009c44:	e00e      	b.n	8009c64 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	085b      	lsrs	r3, r3, #1
 8009c4c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	61bb      	str	r3, [r7, #24]
        break;
 8009c5c:	e002      	b.n	8009c64 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	75fb      	strb	r3, [r7, #23]
        break;
 8009c62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	2b0f      	cmp	r3, #15
 8009c68:	d916      	bls.n	8009c98 <UART_SetConfig+0x44c>
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c70:	d212      	bcs.n	8009c98 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	f023 030f 	bic.w	r3, r3, #15
 8009c7a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	085b      	lsrs	r3, r3, #1
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	f003 0307 	and.w	r3, r3, #7
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	89fb      	ldrh	r3, [r7, #14]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	89fa      	ldrh	r2, [r7, #14]
 8009c94:	60da      	str	r2, [r3, #12]
 8009c96:	e06e      	b.n	8009d76 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	75fb      	strb	r3, [r7, #23]
 8009c9c:	e06b      	b.n	8009d76 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8009c9e:	7ffb      	ldrb	r3, [r7, #31]
 8009ca0:	2b08      	cmp	r3, #8
 8009ca2:	d857      	bhi.n	8009d54 <UART_SetConfig+0x508>
 8009ca4:	a201      	add	r2, pc, #4	; (adr r2, 8009cac <UART_SetConfig+0x460>)
 8009ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009caa:	bf00      	nop
 8009cac:	08009cd1 	.word	0x08009cd1
 8009cb0:	08009ced 	.word	0x08009ced
 8009cb4:	08009d09 	.word	0x08009d09
 8009cb8:	08009d55 	.word	0x08009d55
 8009cbc:	08009d21 	.word	0x08009d21
 8009cc0:	08009d55 	.word	0x08009d55
 8009cc4:	08009d55 	.word	0x08009d55
 8009cc8:	08009d55 	.word	0x08009d55
 8009ccc:	08009d3d 	.word	0x08009d3d
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009cd0:	f7fd fdd8 	bl	8007884 <HAL_RCC_GetPCLK1Freq>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	085b      	lsrs	r3, r3, #1
 8009cdc:	441a      	add	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	61bb      	str	r3, [r7, #24]
        break;
 8009cea:	e036      	b.n	8009d5a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009cec:	f7fd fdde 	bl	80078ac <HAL_RCC_GetPCLK2Freq>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	085b      	lsrs	r3, r3, #1
 8009cf8:	441a      	add	r2, r3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	61bb      	str	r3, [r7, #24]
        break;
 8009d06:	e028      	b.n	8009d5a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	085a      	lsrs	r2, r3, #1
 8009d0e:	4b20      	ldr	r3, [pc, #128]	; (8009d90 <UART_SetConfig+0x544>)
 8009d10:	4413      	add	r3, r2
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	6852      	ldr	r2, [r2, #4]
 8009d16:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	61bb      	str	r3, [r7, #24]
        break;
 8009d1e:	e01c      	b.n	8009d5a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009d20:	f7fd fcf2 	bl	8007708 <HAL_RCC_GetSysClockFreq>
 8009d24:	4602      	mov	r2, r0
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	085b      	lsrs	r3, r3, #1
 8009d2c:	441a      	add	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	61bb      	str	r3, [r7, #24]
        break;
 8009d3a:	e00e      	b.n	8009d5a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	085b      	lsrs	r3, r3, #1
 8009d42:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	61bb      	str	r3, [r7, #24]
        break;
 8009d52:	e002      	b.n	8009d5a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	75fb      	strb	r3, [r7, #23]
        break;
 8009d58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	2b0f      	cmp	r3, #15
 8009d5e:	d908      	bls.n	8009d72 <UART_SetConfig+0x526>
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d66:	d204      	bcs.n	8009d72 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	69ba      	ldr	r2, [r7, #24]
 8009d6e:	60da      	str	r2, [r3, #12]
 8009d70:	e001      	b.n	8009d76 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3720      	adds	r7, #32
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	01e84800 	.word	0x01e84800
 8009d90:	00f42400 	.word	0x00f42400

08009d94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da0:	f003 0301 	and.w	r3, r3, #1
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00a      	beq.n	8009dbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	430a      	orrs	r2, r1
 8009dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc2:	f003 0302 	and.w	r3, r3, #2
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00a      	beq.n	8009de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	430a      	orrs	r2, r1
 8009dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de4:	f003 0304 	and.w	r3, r3, #4
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00a      	beq.n	8009e02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	430a      	orrs	r2, r1
 8009e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e06:	f003 0308 	and.w	r3, r3, #8
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00a      	beq.n	8009e24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	430a      	orrs	r2, r1
 8009e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e28:	f003 0310 	and.w	r3, r3, #16
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00a      	beq.n	8009e46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	430a      	orrs	r2, r1
 8009e44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4a:	f003 0320 	and.w	r3, r3, #32
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00a      	beq.n	8009e68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d01a      	beq.n	8009eaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	430a      	orrs	r2, r1
 8009e88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e92:	d10a      	bne.n	8009eaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	430a      	orrs	r2, r1
 8009ea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00a      	beq.n	8009ecc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	430a      	orrs	r2, r1
 8009eca:	605a      	str	r2, [r3, #4]
  }
}
 8009ecc:	bf00      	nop
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b086      	sub	sp, #24
 8009edc:	af02      	add	r7, sp, #8
 8009ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009ee6:	f7f9 fc7d 	bl	80037e4 <HAL_GetTick>
 8009eea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 0308 	and.w	r3, r3, #8
 8009ef6:	2b08      	cmp	r3, #8
 8009ef8:	d10e      	bne.n	8009f18 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009efa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009efe:	9300      	str	r3, [sp, #0]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f814 	bl	8009f36 <UART_WaitOnFlagUntilTimeout>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d001      	beq.n	8009f18 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e00a      	b.n	8009f2e <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2220      	movs	r2, #32
 8009f1c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2220      	movs	r2, #32
 8009f22:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b084      	sub	sp, #16
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	60f8      	str	r0, [r7, #12]
 8009f3e:	60b9      	str	r1, [r7, #8]
 8009f40:	603b      	str	r3, [r7, #0]
 8009f42:	4613      	mov	r3, r2
 8009f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f46:	e02a      	b.n	8009f9e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4e:	d026      	beq.n	8009f9e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f50:	f7f9 fc48 	bl	80037e4 <HAL_GetTick>
 8009f54:	4602      	mov	r2, r0
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	1ad3      	subs	r3, r2, r3
 8009f5a:	69ba      	ldr	r2, [r7, #24]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d302      	bcc.n	8009f66 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d11b      	bne.n	8009f9e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f74:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	689a      	ldr	r2, [r3, #8]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f022 0201 	bic.w	r2, r2, #1
 8009f84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2220      	movs	r2, #32
 8009f8a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2220      	movs	r2, #32
 8009f90:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e00f      	b.n	8009fbe <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	69da      	ldr	r2, [r3, #28]
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	bf0c      	ite	eq
 8009fae:	2301      	moveq	r3, #1
 8009fb0:	2300      	movne	r3, #0
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	79fb      	ldrb	r3, [r7, #7]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d0c5      	beq.n	8009f48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
	...

08009fc8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d027      	beq.n	800a032 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	4b2f      	ldr	r3, [pc, #188]	; (800a0a8 <FMC_SDRAM_Init+0xe0>)
 8009fec:	4013      	ands	r3, r2
 8009fee:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009ff8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8009ffe:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a004:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a00a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a010:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a016:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a01c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a022:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	4313      	orrs	r3, r2
 800a028:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	601a      	str	r2, [r3, #0]
 800a030:	e032      	b.n	800a098 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a03e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a048:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a04e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	4313      	orrs	r3, r2
 800a054:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	4b12      	ldr	r3, [pc, #72]	; (800a0a8 <FMC_SDRAM_Init+0xe0>)
 800a060:	4013      	ands	r3, r2
 800a062:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a06c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a072:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a078:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a07e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a084:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	4313      	orrs	r3, r2
 800a08a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	ffff8000 	.word	0xffff8000

0800a0ac <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b087      	sub	sp, #28
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d02e      	beq.n	800a124 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a0d2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a0e2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a0ec:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a0f6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a100:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	3b01      	subs	r3, #1
 800a108:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a10a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	699b      	ldr	r3, [r3, #24]
 800a110:	3b01      	subs	r3, #1
 800a112:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a114:	4313      	orrs	r3, r2
 800a116:	697a      	ldr	r2, [r7, #20]
 800a118:	4313      	orrs	r3, r2
 800a11a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	697a      	ldr	r2, [r7, #20]
 800a120:	609a      	str	r2, [r3, #8]
 800a122:	e039      	b.n	800a198 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a12a:	697a      	ldr	r2, [r7, #20]
 800a12c:	4b1e      	ldr	r3, [pc, #120]	; (800a1a8 <FMC_SDRAM_Timing_Init+0xfc>)
 800a12e:	4013      	ands	r3, r2
 800a130:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	3b01      	subs	r3, #1
 800a138:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	695b      	ldr	r3, [r3, #20]
 800a13e:	3b01      	subs	r3, #1
 800a140:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a142:	4313      	orrs	r3, r2
 800a144:	697a      	ldr	r2, [r7, #20]
 800a146:	4313      	orrs	r3, r2
 800a148:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a156:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	3b01      	subs	r3, #1
 800a164:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a166:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	3b01      	subs	r3, #1
 800a16e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a170:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	3b01      	subs	r3, #1
 800a178:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a17a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	3b01      	subs	r3, #1
 800a182:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a184:	4313      	orrs	r3, r2
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	4313      	orrs	r3, r2
 800a18a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	371c      	adds	r7, #28
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	ff0f0fff 	.word	0xff0f0fff

0800a1ac <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b087      	sub	sp, #28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a1c4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a1ce:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	371c      	adds	r7, #28
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr

0800a1ee <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	b083      	sub	sp, #12
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	695a      	ldr	r2, [r3, #20]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	005b      	lsls	r3, r3, #1
 800a200:	431a      	orrs	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a214:	b084      	sub	sp, #16
 800a216:	b480      	push	{r7}
 800a218:	b085      	sub	sp, #20
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	f107 001c 	add.w	r0, r7, #28
 800a222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a226:	2300      	movs	r3, #0
 800a228:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a22a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a22c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a22e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a232:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a234:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a236:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a23a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a23e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	4313      	orrs	r3, r2
 800a244:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	685a      	ldr	r2, [r3, #4]
 800a24a:	4b07      	ldr	r3, [pc, #28]	; (800a268 <SDMMC_Init+0x54>)
 800a24c:	4013      	ands	r3, r2
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	431a      	orrs	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3714      	adds	r7, #20
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	b004      	add	sp, #16
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	ffff8100 	.word	0xffff8100

0800a26c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	370c      	adds	r7, #12
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800a286:	b480      	push	{r7}
 800a288:	b083      	sub	sp, #12
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2203      	movs	r2, #3
 800a2b4:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 0303 	and.w	r3, r3, #3
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2fe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a304:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a30a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	4313      	orrs	r3, r2
 800a310:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	68da      	ldr	r2, [r3, #12]
 800a316:	4b06      	ldr	r3, [pc, #24]	; (800a330 <SDMMC_SendCommand+0x50>)
 800a318:	4013      	ands	r3, r2
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	431a      	orrs	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3714      	adds	r7, #20
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr
 800a330:	fffff000 	.word	0xfffff000

0800a334 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	b2db      	uxtb	r3, r3
}
 800a342:	4618      	mov	r0, r3
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a34e:	b480      	push	{r7}
 800a350:	b085      	sub	sp, #20
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800a358:	2300      	movs	r3, #0
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	3314      	adds	r3, #20
 800a360:	461a      	mov	r2, r3
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	4413      	add	r3, r2
 800a366:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
}  
 800a36c:	4618      	mov	r0, r3
 800a36e:	3714      	adds	r7, #20
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a382:	2300      	movs	r3, #0
 800a384:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	685a      	ldr	r2, [r3, #4]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a39e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a3a4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a3aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	431a      	orrs	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a3c2:	2300      	movs	r3, #0

}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3714      	adds	r7, #20
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b088      	sub	sp, #32
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a3e2:	2310      	movs	r3, #16
 800a3e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a3e6:	2340      	movs	r3, #64	; 0x40
 800a3e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3f2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a3f4:	f107 0308 	add.w	r3, r7, #8
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7ff ff70 	bl	800a2e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a400:	f241 3288 	movw	r2, #5000	; 0x1388
 800a404:	2110      	movs	r1, #16
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 fa1c 	bl	800a844 <SDMMC_GetCmdResp1>
 800a40c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a40e:	69fb      	ldr	r3, [r7, #28]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3720      	adds	r7, #32
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b088      	sub	sp, #32
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a422:	2300      	movs	r3, #0
 800a424:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a42a:	2311      	movs	r3, #17
 800a42c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a42e:	2340      	movs	r3, #64	; 0x40
 800a430:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a432:	2300      	movs	r3, #0
 800a434:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a43a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a43c:	f107 0308 	add.w	r3, r7, #8
 800a440:	4619      	mov	r1, r3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7ff ff4c 	bl	800a2e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a448:	f241 3288 	movw	r2, #5000	; 0x1388
 800a44c:	2111      	movs	r1, #17
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f9f8 	bl	800a844 <SDMMC_GetCmdResp1>
 800a454:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a456:	69fb      	ldr	r3, [r7, #28]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3720      	adds	r7, #32
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b088      	sub	sp, #32
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a46a:	2300      	movs	r3, #0
 800a46c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a472:	2312      	movs	r3, #18
 800a474:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a476:	2340      	movs	r3, #64	; 0x40
 800a478:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a47a:	2300      	movs	r3, #0
 800a47c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a47e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a482:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a484:	f107 0308 	add.w	r3, r7, #8
 800a488:	4619      	mov	r1, r3
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7ff ff28 	bl	800a2e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a490:	f241 3288 	movw	r2, #5000	; 0x1388
 800a494:	2112      	movs	r1, #18
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f9d4 	bl	800a844 <SDMMC_GetCmdResp1>
 800a49c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a49e:	69fb      	ldr	r3, [r7, #28]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3720      	adds	r7, #32
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b088      	sub	sp, #32
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a4ba:	2318      	movs	r3, #24
 800a4bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4be:	2340      	movs	r3, #64	; 0x40
 800a4c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4ca:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4cc:	f107 0308 	add.w	r3, r7, #8
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f7ff ff04 	bl	800a2e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a4d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4dc:	2118      	movs	r1, #24
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f9b0 	bl	800a844 <SDMMC_GetCmdResp1>
 800a4e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4e6:	69fb      	ldr	r3, [r7, #28]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3720      	adds	r7, #32
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b088      	sub	sp, #32
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a502:	2319      	movs	r3, #25
 800a504:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a506:	2340      	movs	r3, #64	; 0x40
 800a508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a50a:	2300      	movs	r3, #0
 800a50c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a50e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a512:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a514:	f107 0308 	add.w	r3, r7, #8
 800a518:	4619      	mov	r1, r3
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f7ff fee0 	bl	800a2e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a520:	f241 3288 	movw	r2, #5000	; 0x1388
 800a524:	2119      	movs	r1, #25
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f98c 	bl	800a844 <SDMMC_GetCmdResp1>
 800a52c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a52e:	69fb      	ldr	r3, [r7, #28]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3720      	adds	r7, #32
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b088      	sub	sp, #32
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a540:	2300      	movs	r3, #0
 800a542:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 800a544:	2300      	movs	r3, #0
 800a546:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a548:	230c      	movs	r3, #12
 800a54a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a54c:	2340      	movs	r3, #64	; 0x40
 800a54e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a550:	2300      	movs	r3, #0
 800a552:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a558:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a55a:	f107 0308 	add.w	r3, r7, #8
 800a55e:	4619      	mov	r1, r3
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f7ff febd 	bl	800a2e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 800a566:	4a05      	ldr	r2, [pc, #20]	; (800a57c <SDMMC_CmdStopTransfer+0x44>)
 800a568:	210c      	movs	r1, #12
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f96a 	bl	800a844 <SDMMC_GetCmdResp1>
 800a570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a572:	69fb      	ldr	r3, [r7, #28]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3720      	adds	r7, #32
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	05f5e100 	.word	0x05f5e100

0800a580 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b08a      	sub	sp, #40	; 0x28
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a58c:	2300      	movs	r3, #0
 800a58e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a594:	2307      	movs	r3, #7
 800a596:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a598:	2340      	movs	r3, #64	; 0x40
 800a59a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a59c:	2300      	movs	r3, #0
 800a59e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5a4:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5a6:	f107 0310 	add.w	r3, r7, #16
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f7ff fe97 	bl	800a2e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a5b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5b6:	2107      	movs	r1, #7
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f000 f943 	bl	800a844 <SDMMC_GetCmdResp1>
 800a5be:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3728      	adds	r7, #40	; 0x28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b088      	sub	sp, #32
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5ea:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5ec:	f107 0308 	add.w	r3, r7, #8
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7ff fe74 	bl	800a2e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f8f9 	bl	800a7f0 <SDMMC_GetCmdError>
 800a5fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a600:	69fb      	ldr	r3, [r7, #28]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3720      	adds	r7, #32
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b088      	sub	sp, #32
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a612:	2300      	movs	r3, #0
 800a614:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a616:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a61a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a61c:	2308      	movs	r3, #8
 800a61e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a620:	2340      	movs	r3, #64	; 0x40
 800a622:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a624:	2300      	movs	r3, #0
 800a626:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a62c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a62e:	f107 0308 	add.w	r3, r7, #8
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f7ff fe53 	bl	800a2e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 faca 	bl	800abd4 <SDMMC_GetCmdResp7>
 800a640:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a642:	69fb      	ldr	r3, [r7, #28]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3720      	adds	r7, #32
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b088      	sub	sp, #32
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a656:	2300      	movs	r3, #0
 800a658:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a65e:	2337      	movs	r3, #55	; 0x37
 800a660:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a662:	2340      	movs	r3, #64	; 0x40
 800a664:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a666:	2300      	movs	r3, #0
 800a668:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a66a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a66e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a670:	f107 0308 	add.w	r3, r7, #8
 800a674:	4619      	mov	r1, r3
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7ff fe32 	bl	800a2e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a67c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a680:	2137      	movs	r1, #55	; 0x37
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f8de 	bl	800a844 <SDMMC_GetCmdResp1>
 800a688:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a68a:	69fb      	ldr	r3, [r7, #28]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3720      	adds	r7, #32
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b088      	sub	sp, #32
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	4b0d      	ldr	r3, [pc, #52]	; (800a6dc <SDMMC_CmdAppOperCommand+0x48>)
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a6aa:	2329      	movs	r3, #41	; 0x29
 800a6ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6ae:	2340      	movs	r3, #64	; 0x40
 800a6b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6ba:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6bc:	f107 0308 	add.w	r3, r7, #8
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7ff fe0c 	bl	800a2e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 f9e1 	bl	800aa90 <SDMMC_GetCmdResp3>
 800a6ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6d0:	69fb      	ldr	r3, [r7, #28]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3720      	adds	r7, #32
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	80100000 	.word	0x80100000

0800a6e0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b088      	sub	sp, #32
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a6f0:	2302      	movs	r3, #2
 800a6f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a6f4:	23c0      	movs	r3, #192	; 0xc0
 800a6f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a700:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a702:	f107 0308 	add.w	r3, r7, #8
 800a706:	4619      	mov	r1, r3
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f7ff fde9 	bl	800a2e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f97e 	bl	800aa10 <SDMMC_GetCmdResp2>
 800a714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a716:	69fb      	ldr	r3, [r7, #28]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3720      	adds	r7, #32
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b088      	sub	sp, #32
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a72a:	2300      	movs	r3, #0
 800a72c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a732:	2309      	movs	r3, #9
 800a734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a736:	23c0      	movs	r3, #192	; 0xc0
 800a738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a73a:	2300      	movs	r3, #0
 800a73c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a73e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a742:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a744:	f107 0308 	add.w	r3, r7, #8
 800a748:	4619      	mov	r1, r3
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f7ff fdc8 	bl	800a2e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 f95d 	bl	800aa10 <SDMMC_GetCmdResp2>
 800a756:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a758:	69fb      	ldr	r3, [r7, #28]
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3720      	adds	r7, #32
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b088      	sub	sp, #32
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
 800a76a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a76c:	2300      	movs	r3, #0
 800a76e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800a770:	2300      	movs	r3, #0
 800a772:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a774:	2303      	movs	r3, #3
 800a776:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a778:	2340      	movs	r3, #64	; 0x40
 800a77a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a77c:	2300      	movs	r3, #0
 800a77e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a784:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a786:	f107 0308 	add.w	r3, r7, #8
 800a78a:	4619      	mov	r1, r3
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f7ff fda7 	bl	800a2e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	2103      	movs	r1, #3
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 f9ae 	bl	800aaf8 <SDMMC_GetCmdResp6>
 800a79c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a79e:	69fb      	ldr	r3, [r7, #28]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3720      	adds	r7, #32
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a7ba:	230d      	movs	r3, #13
 800a7bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7be:	2340      	movs	r3, #64	; 0x40
 800a7c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7ca:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7cc:	f107 0308 	add.w	r3, r7, #8
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f7ff fd84 	bl	800a2e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a7d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7dc:	210d      	movs	r1, #13
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 f830 	bl	800a844 <SDMMC_GetCmdResp1>
 800a7e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7e6:	69fb      	ldr	r3, [r7, #28]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3720      	adds	r7, #32
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a7f0:	b490      	push	{r4, r7}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a7f8:	4b10      	ldr	r3, [pc, #64]	; (800a83c <SDMMC_GetCmdError+0x4c>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a10      	ldr	r2, [pc, #64]	; (800a840 <SDMMC_GetCmdError+0x50>)
 800a7fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a802:	0a5b      	lsrs	r3, r3, #9
 800a804:	f241 3288 	movw	r2, #5000	; 0x1388
 800a808:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a80c:	4623      	mov	r3, r4
 800a80e:	1e5c      	subs	r4, r3, #1
 800a810:	2b00      	cmp	r3, #0
 800a812:	d102      	bne.n	800a81a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a814:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a818:	e00a      	b.n	800a830 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a822:	2b00      	cmp	r3, #0
 800a824:	d0f2      	beq.n	800a80c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a82c:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bc90      	pop	{r4, r7}
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	20000000 	.word	0x20000000
 800a840:	10624dd3 	.word	0x10624dd3

0800a844 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a844:	b590      	push	{r4, r7, lr}
 800a846:	b087      	sub	sp, #28
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	460b      	mov	r3, r1
 800a84e:	607a      	str	r2, [r7, #4]
 800a850:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800a852:	4b6c      	ldr	r3, [pc, #432]	; (800aa04 <SDMMC_GetCmdResp1+0x1c0>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a6c      	ldr	r2, [pc, #432]	; (800aa08 <SDMMC_GetCmdResp1+0x1c4>)
 800a858:	fba2 2303 	umull	r2, r3, r2, r3
 800a85c:	0a5b      	lsrs	r3, r3, #9
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a864:	4623      	mov	r3, r4
 800a866:	1e5c      	subs	r4, r3, #1
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d102      	bne.n	800a872 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a86c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a870:	e0c3      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a876:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d0f2      	beq.n	800a864 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a882:	f003 0304 	and.w	r3, r3, #4
 800a886:	2b00      	cmp	r3, #0
 800a888:	d004      	beq.n	800a894 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2204      	movs	r2, #4
 800a88e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a890:	2304      	movs	r3, #4
 800a892:	e0b2      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a898:	f003 0301 	and.w	r3, r3, #1
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d004      	beq.n	800a8aa <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e0a7      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f7ff fd42 	bl	800a334 <SDMMC_GetCommandResponse>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	7afb      	ldrb	r3, [r7, #11]
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d001      	beq.n	800a8be <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e09d      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a8c4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f7ff fd40 	bl	800a34e <SDMMC_GetResponse>
 800a8ce:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a8d0:	697a      	ldr	r2, [r7, #20]
 800a8d2:	4b4e      	ldr	r3, [pc, #312]	; (800aa0c <SDMMC_GetCmdResp1+0x1c8>)
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d101      	bne.n	800a8de <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	e08d      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	da02      	bge.n	800a8ea <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a8e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a8e8:	e087      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d001      	beq.n	800a8f8 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a8f4:	2340      	movs	r3, #64	; 0x40
 800a8f6:	e080      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d001      	beq.n	800a906 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a902:	2380      	movs	r3, #128	; 0x80
 800a904:	e079      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d002      	beq.n	800a916 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a910:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a914:	e071      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a920:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a924:	e069      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d002      	beq.n	800a936 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a934:	e061      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d002      	beq.n	800a946 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a940:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a944:	e059      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d002      	beq.n	800a956 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a954:	e051      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d002      	beq.n	800a966 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a964:	e049      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d002      	beq.n	800a976 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a970:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a974:	e041      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d002      	beq.n	800a986 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800a980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a984:	e039      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d002      	beq.n	800a996 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a994:	e031      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d002      	beq.n	800a9a6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a9a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a9a4:	e029      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d002      	beq.n	800a9b6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a9b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a9b4:	e021      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d002      	beq.n	800a9c6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a9c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a9c4:	e019      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d002      	beq.n	800a9d6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a9d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a9d4:	e011      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d002      	beq.n	800a9e6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a9e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a9e4:	e009      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	f003 0308 	and.w	r3, r3, #8
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d002      	beq.n	800a9f6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a9f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a9f4:	e001      	b.n	800a9fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a9f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	371c      	adds	r7, #28
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd90      	pop	{r4, r7, pc}
 800aa02:	bf00      	nop
 800aa04:	20000000 	.word	0x20000000
 800aa08:	10624dd3 	.word	0x10624dd3
 800aa0c:	fdffe008 	.word	0xfdffe008

0800aa10 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800aa10:	b490      	push	{r4, r7}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800aa18:	4b1b      	ldr	r3, [pc, #108]	; (800aa88 <SDMMC_GetCmdResp2+0x78>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a1b      	ldr	r2, [pc, #108]	; (800aa8c <SDMMC_GetCmdResp2+0x7c>)
 800aa1e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa22:	0a5b      	lsrs	r3, r3, #9
 800aa24:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa28:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800aa2c:	4623      	mov	r3, r4
 800aa2e:	1e5c      	subs	r4, r3, #1
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d102      	bne.n	800aa3a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa38:	e020      	b.n	800aa7c <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d0f2      	beq.n	800aa2c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa4a:	f003 0304 	and.w	r3, r3, #4
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d004      	beq.n	800aa5c <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2204      	movs	r2, #4
 800aa56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa58:	2304      	movs	r3, #4
 800aa5a:	e00f      	b.n	800aa7c <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa60:	f003 0301 	and.w	r3, r3, #1
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d004      	beq.n	800aa72 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e004      	b.n	800aa7c <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800aa78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3708      	adds	r7, #8
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bc90      	pop	{r4, r7}
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	20000000 	.word	0x20000000
 800aa8c:	10624dd3 	.word	0x10624dd3

0800aa90 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800aa90:	b490      	push	{r4, r7}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800aa98:	4b15      	ldr	r3, [pc, #84]	; (800aaf0 <SDMMC_GetCmdResp3+0x60>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a15      	ldr	r2, [pc, #84]	; (800aaf4 <SDMMC_GetCmdResp3+0x64>)
 800aa9e:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa2:	0a5b      	lsrs	r3, r3, #9
 800aaa4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaa8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800aaac:	4623      	mov	r3, r4
 800aaae:	1e5c      	subs	r4, r3, #1
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d102      	bne.n	800aaba <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aab4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aab8:	e015      	b.n	800aae6 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aabe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d0f2      	beq.n	800aaac <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaca:	f003 0304 	and.w	r3, r3, #4
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d004      	beq.n	800aadc <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2204      	movs	r2, #4
 800aad6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aad8:	2304      	movs	r3, #4
 800aada:	e004      	b.n	800aae6 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800aae2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bc90      	pop	{r4, r7}
 800aaee:	4770      	bx	lr
 800aaf0:	20000000 	.word	0x20000000
 800aaf4:	10624dd3 	.word	0x10624dd3

0800aaf8 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800aaf8:	b590      	push	{r4, r7, lr}
 800aafa:	b087      	sub	sp, #28
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	460b      	mov	r3, r1
 800ab02:	607a      	str	r2, [r7, #4]
 800ab04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800ab06:	4b31      	ldr	r3, [pc, #196]	; (800abcc <SDMMC_GetCmdResp6+0xd4>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a31      	ldr	r2, [pc, #196]	; (800abd0 <SDMMC_GetCmdResp6+0xd8>)
 800ab0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab10:	0a5b      	lsrs	r3, r3, #9
 800ab12:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab16:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800ab1a:	4623      	mov	r3, r4
 800ab1c:	1e5c      	subs	r4, r3, #1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d102      	bne.n	800ab28 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab26:	e04c      	b.n	800abc2 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab2c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d0f2      	beq.n	800ab1a <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab38:	f003 0304 	and.w	r3, r3, #4
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d004      	beq.n	800ab4a <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2204      	movs	r2, #4
 800ab44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab46:	2304      	movs	r3, #4
 800ab48:	e03b      	b.n	800abc2 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab4e:	f003 0301 	and.w	r3, r3, #1
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d004      	beq.n	800ab60 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e030      	b.n	800abc2 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ab60:	68f8      	ldr	r0, [r7, #12]
 800ab62:	f7ff fbe7 	bl	800a334 <SDMMC_GetCommandResponse>
 800ab66:	4603      	mov	r3, r0
 800ab68:	461a      	mov	r2, r3
 800ab6a:	7afb      	ldrb	r3, [r7, #11]
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d001      	beq.n	800ab74 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab70:	2301      	movs	r3, #1
 800ab72:	e026      	b.n	800abc2 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ab7a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f7ff fbe5 	bl	800a34e <SDMMC_GetResponse>
 800ab84:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d106      	bne.n	800ab9e <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	0c1b      	lsrs	r3, r3, #16
 800ab94:	b29a      	uxth	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	e011      	b.n	800abc2 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d002      	beq.n	800abae <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800abac:	e009      	b.n	800abc2 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d002      	beq.n	800abbe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800abb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abbc:	e001      	b.n	800abc2 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800abbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	371c      	adds	r7, #28
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd90      	pop	{r4, r7, pc}
 800abca:	bf00      	nop
 800abcc:	20000000 	.word	0x20000000
 800abd0:	10624dd3 	.word	0x10624dd3

0800abd4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800abd4:	b490      	push	{r4, r7}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800abdc:	4b18      	ldr	r3, [pc, #96]	; (800ac40 <SDMMC_GetCmdResp7+0x6c>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a18      	ldr	r2, [pc, #96]	; (800ac44 <SDMMC_GetCmdResp7+0x70>)
 800abe2:	fba2 2303 	umull	r2, r3, r2, r3
 800abe6:	0a5b      	lsrs	r3, r3, #9
 800abe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800abec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800abf0:	4623      	mov	r3, r4
 800abf2:	1e5c      	subs	r4, r3, #1
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d102      	bne.n	800abfe <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800abfc:	e01a      	b.n	800ac34 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac02:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d0f2      	beq.n	800abf0 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac0e:	f003 0304 	and.w	r3, r3, #4
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d004      	beq.n	800ac20 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2240      	movs	r2, #64	; 0x40
 800ac1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac1c:	2304      	movs	r3, #4
 800ac1e:	e009      	b.n	800ac34 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d002      	beq.n	800ac32 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2240      	movs	r2, #64	; 0x40
 800ac30:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ac32:	2300      	movs	r3, #0
  
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bc90      	pop	{r4, r7}
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	20000000 	.word	0x20000000
 800ac44:	10624dd3 	.word	0x10624dd3

0800ac48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ac4c:	4904      	ldr	r1, [pc, #16]	; (800ac60 <MX_FATFS_Init+0x18>)
 800ac4e:	4805      	ldr	r0, [pc, #20]	; (800ac64 <MX_FATFS_Init+0x1c>)
 800ac50:	f001 fe84 	bl	800c95c <FATFS_LinkDriver>
 800ac54:	4603      	mov	r3, r0
 800ac56:	461a      	mov	r2, r3
 800ac58:	4b03      	ldr	r3, [pc, #12]	; (800ac68 <MX_FATFS_Init+0x20>)
 800ac5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800ac5c:	bf00      	nop
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	20000708 	.word	0x20000708
 800ac64:	0800f8bc 	.word	0x0800f8bc
 800ac68:	20000704 	.word	0x20000704

0800ac6c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ac76:	f000 f86b 	bl	800ad50 <BSP_SD_IsDetected>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d001      	beq.n	800ac84 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ac80:	2302      	movs	r3, #2
 800ac82:	e005      	b.n	800ac90 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800ac84:	4804      	ldr	r0, [pc, #16]	; (800ac98 <BSP_SD_Init+0x2c>)
 800ac86:	f7fd fa7d 	bl	8008184 <HAL_SD_Init>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800ac8e:	79fb      	ldrb	r3, [r7, #7]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	20000338 	.word	0x20000338

0800ac9c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b088      	sub	sp, #32
 800aca0:	af02      	add	r7, sp, #8
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	9300      	str	r3, [sp, #0]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	68ba      	ldr	r2, [r7, #8]
 800acb6:	68f9      	ldr	r1, [r7, #12]
 800acb8:	4806      	ldr	r0, [pc, #24]	; (800acd4 <BSP_SD_ReadBlocks+0x38>)
 800acba:	f7fd faf2 	bl	80082a2 <HAL_SD_ReadBlocks>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800acc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800acca:	4618      	mov	r0, r3
 800accc:	3718      	adds	r7, #24
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	20000338 	.word	0x20000338

0800acd8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b088      	sub	sp, #32
 800acdc:	af02      	add	r7, sp, #8
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	607a      	str	r2, [r7, #4]
 800ace4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ace6:	2300      	movs	r3, #0
 800ace8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	9300      	str	r3, [sp, #0]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	68f9      	ldr	r1, [r7, #12]
 800acf4:	4806      	ldr	r0, [pc, #24]	; (800ad10 <BSP_SD_WriteBlocks+0x38>)
 800acf6:	f7fd fc6a 	bl	80085ce <HAL_SD_WriteBlocks>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d001      	beq.n	800ad04 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800ad04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3718      	adds	r7, #24
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	20000338 	.word	0x20000338

0800ad14 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ad18:	4805      	ldr	r0, [pc, #20]	; (800ad30 <BSP_SD_GetCardState+0x1c>)
 800ad1a:	f7fe f813 	bl	8008d44 <HAL_SD_GetCardState>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b04      	cmp	r3, #4
 800ad22:	bf14      	ite	ne
 800ad24:	2301      	movne	r3, #1
 800ad26:	2300      	moveq	r3, #0
 800ad28:	b2db      	uxtb	r3, r3
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	20000338 	.word	0x20000338

0800ad34 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800ad3c:	6879      	ldr	r1, [r7, #4]
 800ad3e:	4803      	ldr	r0, [pc, #12]	; (800ad4c <BSP_SD_GetCardInfo+0x18>)
 800ad40:	f7fd ffd4 	bl	8008cec <HAL_SD_GetCardInfo>
}
 800ad44:	bf00      	nop
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	20000338 	.word	0x20000338

0800ad50 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ad56:	2301      	movs	r3, #1
 800ad58:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800ad5a:	f000 f80b 	bl	800ad74 <BSP_PlatformIsDetected>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d101      	bne.n	800ad68 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ad64:	2300      	movs	r3, #0
 800ad66:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ad68:	79fb      	ldrb	r3, [r7, #7]
 800ad6a:	b2db      	uxtb	r3, r3
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ad7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ad82:	4806      	ldr	r0, [pc, #24]	; (800ad9c <BSP_PlatformIsDetected+0x28>)
 800ad84:	f7fa ffee 	bl	8005d64 <HAL_GPIO_ReadPin>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800ad92:	79fb      	ldrb	r3, [r7, #7]
}  
 800ad94:	4618      	mov	r0, r3
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	40022000 	.word	0x40022000

0800ada0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	4603      	mov	r3, r0
 800ada8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800adaa:	4b0b      	ldr	r3, [pc, #44]	; (800add8 <SD_CheckStatus+0x38>)
 800adac:	2201      	movs	r2, #1
 800adae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800adb0:	f7ff ffb0 	bl	800ad14 <BSP_SD_GetCardState>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d107      	bne.n	800adca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800adba:	4b07      	ldr	r3, [pc, #28]	; (800add8 <SD_CheckStatus+0x38>)
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	f023 0301 	bic.w	r3, r3, #1
 800adc4:	b2da      	uxtb	r2, r3
 800adc6:	4b04      	ldr	r3, [pc, #16]	; (800add8 <SD_CheckStatus+0x38>)
 800adc8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800adca:	4b03      	ldr	r3, [pc, #12]	; (800add8 <SD_CheckStatus+0x38>)
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	b2db      	uxtb	r3, r3
}
 800add0:	4618      	mov	r0, r3
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	2000003e 	.word	0x2000003e

0800addc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	4603      	mov	r3, r0
 800ade4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800ade6:	4b0b      	ldr	r3, [pc, #44]	; (800ae14 <SD_initialize+0x38>)
 800ade8:	2201      	movs	r2, #1
 800adea:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800adec:	f7ff ff3e 	bl	800ac6c <BSP_SD_Init>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d107      	bne.n	800ae06 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800adf6:	79fb      	ldrb	r3, [r7, #7]
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7ff ffd1 	bl	800ada0 <SD_CheckStatus>
 800adfe:	4603      	mov	r3, r0
 800ae00:	461a      	mov	r2, r3
 800ae02:	4b04      	ldr	r3, [pc, #16]	; (800ae14 <SD_initialize+0x38>)
 800ae04:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800ae06:	4b03      	ldr	r3, [pc, #12]	; (800ae14 <SD_initialize+0x38>)
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	b2db      	uxtb	r3, r3
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	2000003e 	.word	0x2000003e

0800ae18 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	4603      	mov	r3, r0
 800ae20:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ae22:	79fb      	ldrb	r3, [r7, #7]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7ff ffbb 	bl	800ada0 <SD_CheckStatus>
 800ae2a:	4603      	mov	r3, r0
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b086      	sub	sp, #24
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60b9      	str	r1, [r7, #8]
 800ae3c:	607a      	str	r2, [r7, #4]
 800ae3e:	603b      	str	r3, [r7, #0]
 800ae40:	4603      	mov	r3, r0
 800ae42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ae44:	2301      	movs	r3, #1
 800ae46:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ae48:	f04f 33ff 	mov.w	r3, #4294967295
 800ae4c:	683a      	ldr	r2, [r7, #0]
 800ae4e:	6879      	ldr	r1, [r7, #4]
 800ae50:	68b8      	ldr	r0, [r7, #8]
 800ae52:	f7ff ff23 	bl	800ac9c <BSP_SD_ReadBlocks>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d107      	bne.n	800ae6c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ae5c:	bf00      	nop
 800ae5e:	f7ff ff59 	bl	800ad14 <BSP_SD_GetCardState>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d1fa      	bne.n	800ae5e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ae6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3718      	adds	r7, #24
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b086      	sub	sp, #24
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
 800ae80:	603b      	str	r3, [r7, #0]
 800ae82:	4603      	mov	r3, r0
 800ae84:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ae8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae8e:	683a      	ldr	r2, [r7, #0]
 800ae90:	6879      	ldr	r1, [r7, #4]
 800ae92:	68b8      	ldr	r0, [r7, #8]
 800ae94:	f7ff ff20 	bl	800acd8 <BSP_SD_WriteBlocks>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d107      	bne.n	800aeae <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ae9e:	bf00      	nop
 800aea0:	f7ff ff38 	bl	800ad14 <BSP_SD_GetCardState>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1fa      	bne.n	800aea0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800aeae:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3718      	adds	r7, #24
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b08c      	sub	sp, #48	; 0x30
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	4603      	mov	r3, r0
 800aec0:	603a      	str	r2, [r7, #0]
 800aec2:	71fb      	strb	r3, [r7, #7]
 800aec4:	460b      	mov	r3, r1
 800aec6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800aece:	4b25      	ldr	r3, [pc, #148]	; (800af64 <SD_ioctl+0xac>)
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	f003 0301 	and.w	r3, r3, #1
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d001      	beq.n	800aee0 <SD_ioctl+0x28>
 800aedc:	2303      	movs	r3, #3
 800aede:	e03c      	b.n	800af5a <SD_ioctl+0xa2>

  switch (cmd)
 800aee0:	79bb      	ldrb	r3, [r7, #6]
 800aee2:	2b03      	cmp	r3, #3
 800aee4:	d834      	bhi.n	800af50 <SD_ioctl+0x98>
 800aee6:	a201      	add	r2, pc, #4	; (adr r2, 800aeec <SD_ioctl+0x34>)
 800aee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeec:	0800aefd 	.word	0x0800aefd
 800aef0:	0800af05 	.word	0x0800af05
 800aef4:	0800af1d 	.word	0x0800af1d
 800aef8:	0800af37 	.word	0x0800af37
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800aefc:	2300      	movs	r3, #0
 800aefe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af02:	e028      	b.n	800af56 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800af04:	f107 030c 	add.w	r3, r7, #12
 800af08:	4618      	mov	r0, r3
 800af0a:	f7ff ff13 	bl	800ad34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800af0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af1a:	e01c      	b.n	800af56 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800af1c:	f107 030c 	add.w	r3, r7, #12
 800af20:	4618      	mov	r0, r3
 800af22:	f7ff ff07 	bl	800ad34 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800af26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af28:	b29a      	uxth	r2, r3
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800af2e:	2300      	movs	r3, #0
 800af30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af34:	e00f      	b.n	800af56 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800af36:	f107 030c 	add.w	r3, r7, #12
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7ff fefa 	bl	800ad34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800af40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af42:	0a5a      	lsrs	r2, r3, #9
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800af48:	2300      	movs	r3, #0
 800af4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af4e:	e002      	b.n	800af56 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800af50:	2304      	movs	r3, #4
 800af52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800af56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3730      	adds	r7, #48	; 0x30
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	2000003e 	.word	0x2000003e

0800af68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800af72:	79fb      	ldrb	r3, [r7, #7]
 800af74:	4a08      	ldr	r2, [pc, #32]	; (800af98 <disk_status+0x30>)
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	4413      	add	r3, r2
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	79fa      	ldrb	r2, [r7, #7]
 800af80:	4905      	ldr	r1, [pc, #20]	; (800af98 <disk_status+0x30>)
 800af82:	440a      	add	r2, r1
 800af84:	7a12      	ldrb	r2, [r2, #8]
 800af86:	4610      	mov	r0, r2
 800af88:	4798      	blx	r3
 800af8a:	4603      	mov	r3, r0
 800af8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800af8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af90:	4618      	mov	r0, r3
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	20000308 	.word	0x20000308

0800af9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	4603      	mov	r3, r0
 800afa4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800afa6:	2300      	movs	r3, #0
 800afa8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800afaa:	79fb      	ldrb	r3, [r7, #7]
 800afac:	4a0d      	ldr	r2, [pc, #52]	; (800afe4 <disk_initialize+0x48>)
 800afae:	5cd3      	ldrb	r3, [r2, r3]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d111      	bne.n	800afd8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800afb4:	79fb      	ldrb	r3, [r7, #7]
 800afb6:	4a0b      	ldr	r2, [pc, #44]	; (800afe4 <disk_initialize+0x48>)
 800afb8:	2101      	movs	r1, #1
 800afba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800afbc:	79fb      	ldrb	r3, [r7, #7]
 800afbe:	4a09      	ldr	r2, [pc, #36]	; (800afe4 <disk_initialize+0x48>)
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	79fa      	ldrb	r2, [r7, #7]
 800afca:	4906      	ldr	r1, [pc, #24]	; (800afe4 <disk_initialize+0x48>)
 800afcc:	440a      	add	r2, r1
 800afce:	7a12      	ldrb	r2, [r2, #8]
 800afd0:	4610      	mov	r0, r2
 800afd2:	4798      	blx	r3
 800afd4:	4603      	mov	r3, r0
 800afd6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800afd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	20000308 	.word	0x20000308

0800afe8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800afe8:	b590      	push	{r4, r7, lr}
 800afea:	b087      	sub	sp, #28
 800afec:	af00      	add	r7, sp, #0
 800afee:	60b9      	str	r1, [r7, #8]
 800aff0:	607a      	str	r2, [r7, #4]
 800aff2:	603b      	str	r3, [r7, #0]
 800aff4:	4603      	mov	r3, r0
 800aff6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800aff8:	7bfb      	ldrb	r3, [r7, #15]
 800affa:	4a0a      	ldr	r2, [pc, #40]	; (800b024 <disk_read+0x3c>)
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	4413      	add	r3, r2
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	689c      	ldr	r4, [r3, #8]
 800b004:	7bfb      	ldrb	r3, [r7, #15]
 800b006:	4a07      	ldr	r2, [pc, #28]	; (800b024 <disk_read+0x3c>)
 800b008:	4413      	add	r3, r2
 800b00a:	7a18      	ldrb	r0, [r3, #8]
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	68b9      	ldr	r1, [r7, #8]
 800b012:	47a0      	blx	r4
 800b014:	4603      	mov	r3, r0
 800b016:	75fb      	strb	r3, [r7, #23]
  return res;
 800b018:	7dfb      	ldrb	r3, [r7, #23]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	371c      	adds	r7, #28
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd90      	pop	{r4, r7, pc}
 800b022:	bf00      	nop
 800b024:	20000308 	.word	0x20000308

0800b028 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b028:	b590      	push	{r4, r7, lr}
 800b02a:	b087      	sub	sp, #28
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60b9      	str	r1, [r7, #8]
 800b030:	607a      	str	r2, [r7, #4]
 800b032:	603b      	str	r3, [r7, #0]
 800b034:	4603      	mov	r3, r0
 800b036:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b038:	7bfb      	ldrb	r3, [r7, #15]
 800b03a:	4a0a      	ldr	r2, [pc, #40]	; (800b064 <disk_write+0x3c>)
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	4413      	add	r3, r2
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	68dc      	ldr	r4, [r3, #12]
 800b044:	7bfb      	ldrb	r3, [r7, #15]
 800b046:	4a07      	ldr	r2, [pc, #28]	; (800b064 <disk_write+0x3c>)
 800b048:	4413      	add	r3, r2
 800b04a:	7a18      	ldrb	r0, [r3, #8]
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	68b9      	ldr	r1, [r7, #8]
 800b052:	47a0      	blx	r4
 800b054:	4603      	mov	r3, r0
 800b056:	75fb      	strb	r3, [r7, #23]
  return res;
 800b058:	7dfb      	ldrb	r3, [r7, #23]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	371c      	adds	r7, #28
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd90      	pop	{r4, r7, pc}
 800b062:	bf00      	nop
 800b064:	20000308 	.word	0x20000308

0800b068 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	3301      	adds	r3, #1
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b078:	89fb      	ldrh	r3, [r7, #14]
 800b07a:	021b      	lsls	r3, r3, #8
 800b07c:	b21a      	sxth	r2, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	b21b      	sxth	r3, r3
 800b084:	4313      	orrs	r3, r2
 800b086:	b21b      	sxth	r3, r3
 800b088:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b08a:	89fb      	ldrh	r3, [r7, #14]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	3303      	adds	r3, #3
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	021b      	lsls	r3, r3, #8
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	3202      	adds	r2, #2
 800b0b0:	7812      	ldrb	r2, [r2, #0]
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	021b      	lsls	r3, r3, #8
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	3201      	adds	r2, #1
 800b0be:	7812      	ldrb	r2, [r2, #0]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	021b      	lsls	r3, r3, #8
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	7812      	ldrb	r2, [r2, #0]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	60fb      	str	r3, [r7, #12]
	return rv;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3714      	adds	r7, #20
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b0de:	b480      	push	{r7}
 800b0e0:	b083      	sub	sp, #12
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	1c5a      	adds	r2, r3, #1
 800b0ee:	607a      	str	r2, [r7, #4]
 800b0f0:	887a      	ldrh	r2, [r7, #2]
 800b0f2:	b2d2      	uxtb	r2, r2
 800b0f4:	701a      	strb	r2, [r3, #0]
 800b0f6:	887b      	ldrh	r3, [r7, #2]
 800b0f8:	0a1b      	lsrs	r3, r3, #8
 800b0fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	1c5a      	adds	r2, r3, #1
 800b100:	607a      	str	r2, [r7, #4]
 800b102:	887a      	ldrh	r2, [r7, #2]
 800b104:	b2d2      	uxtb	r2, r2
 800b106:	701a      	strb	r2, [r3, #0]
}
 800b108:	bf00      	nop
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	1c5a      	adds	r2, r3, #1
 800b122:	607a      	str	r2, [r7, #4]
 800b124:	683a      	ldr	r2, [r7, #0]
 800b126:	b2d2      	uxtb	r2, r2
 800b128:	701a      	strb	r2, [r3, #0]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	0a1b      	lsrs	r3, r3, #8
 800b12e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	1c5a      	adds	r2, r3, #1
 800b134:	607a      	str	r2, [r7, #4]
 800b136:	683a      	ldr	r2, [r7, #0]
 800b138:	b2d2      	uxtb	r2, r2
 800b13a:	701a      	strb	r2, [r3, #0]
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	0a1b      	lsrs	r3, r3, #8
 800b140:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	1c5a      	adds	r2, r3, #1
 800b146:	607a      	str	r2, [r7, #4]
 800b148:	683a      	ldr	r2, [r7, #0]
 800b14a:	b2d2      	uxtb	r2, r2
 800b14c:	701a      	strb	r2, [r3, #0]
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	0a1b      	lsrs	r3, r3, #8
 800b152:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	1c5a      	adds	r2, r3, #1
 800b158:	607a      	str	r2, [r7, #4]
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	b2d2      	uxtb	r2, r2
 800b15e:	701a      	strb	r2, [r3, #0]
}
 800b160:	bf00      	nop
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b16c:	b480      	push	{r7}
 800b16e:	b087      	sub	sp, #28
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	1c5a      	adds	r2, r3, #1
 800b180:	617a      	str	r2, [r7, #20]
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	b2d2      	uxtb	r2, r2
 800b186:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3b01      	subs	r3, #1
 800b18c:	607b      	str	r3, [r7, #4]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1f3      	bne.n	800b17c <mem_set+0x10>
}
 800b194:	bf00      	nop
 800b196:	371c      	adds	r7, #28
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b1a0:	b480      	push	{r7}
 800b1a2:	b089      	sub	sp, #36	; 0x24
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	61fb      	str	r3, [r7, #28]
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	1c5a      	adds	r2, r3, #1
 800b1bc:	61fa      	str	r2, [r7, #28]
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	1c5a      	adds	r2, r3, #1
 800b1c6:	61ba      	str	r2, [r7, #24]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	1acb      	subs	r3, r1, r3
 800b1cc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	607b      	str	r3, [r7, #4]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d002      	beq.n	800b1e0 <mem_cmp+0x40>
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d0eb      	beq.n	800b1b8 <mem_cmp+0x18>

	return r;
 800b1e0:	697b      	ldr	r3, [r7, #20]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3724      	adds	r7, #36	; 0x24
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr

0800b1ee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b1ee:	b480      	push	{r7}
 800b1f0:	b083      	sub	sp, #12
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
 800b1f6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b1f8:	e002      	b.n	800b200 <chk_chr+0x12>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	607b      	str	r3, [r7, #4]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d005      	beq.n	800b214 <chk_chr+0x26>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	461a      	mov	r2, r3
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	4293      	cmp	r3, r2
 800b212:	d1f2      	bne.n	800b1fa <chk_chr+0xc>
	return *str;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	781b      	ldrb	r3, [r3, #0]
}
 800b218:	4618      	mov	r0, r3
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b22e:	2300      	movs	r3, #0
 800b230:	60fb      	str	r3, [r7, #12]
 800b232:	e01f      	b.n	800b274 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b234:	4a41      	ldr	r2, [pc, #260]	; (800b33c <inc_lock+0x118>)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	011b      	lsls	r3, r3, #4
 800b23a:	4413      	add	r3, r2
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	429a      	cmp	r2, r3
 800b244:	d113      	bne.n	800b26e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b246:	4a3d      	ldr	r2, [pc, #244]	; (800b33c <inc_lock+0x118>)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	011b      	lsls	r3, r3, #4
 800b24c:	4413      	add	r3, r2
 800b24e:	3304      	adds	r3, #4
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b256:	429a      	cmp	r2, r3
 800b258:	d109      	bne.n	800b26e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b25a:	4a38      	ldr	r2, [pc, #224]	; (800b33c <inc_lock+0x118>)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	011b      	lsls	r3, r3, #4
 800b260:	4413      	add	r3, r2
 800b262:	3308      	adds	r3, #8
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d006      	beq.n	800b27c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	3301      	adds	r3, #1
 800b272:	60fb      	str	r3, [r7, #12]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2b01      	cmp	r3, #1
 800b278:	d9dc      	bls.n	800b234 <inc_lock+0x10>
 800b27a:	e000      	b.n	800b27e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b27c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2b02      	cmp	r3, #2
 800b282:	d132      	bne.n	800b2ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b284:	2300      	movs	r3, #0
 800b286:	60fb      	str	r3, [r7, #12]
 800b288:	e002      	b.n	800b290 <inc_lock+0x6c>
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	3301      	adds	r3, #1
 800b28e:	60fb      	str	r3, [r7, #12]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2b01      	cmp	r3, #1
 800b294:	d806      	bhi.n	800b2a4 <inc_lock+0x80>
 800b296:	4a29      	ldr	r2, [pc, #164]	; (800b33c <inc_lock+0x118>)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	011b      	lsls	r3, r3, #4
 800b29c:	4413      	add	r3, r2
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d1f2      	bne.n	800b28a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d101      	bne.n	800b2ae <inc_lock+0x8a>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	e040      	b.n	800b330 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	4922      	ldr	r1, [pc, #136]	; (800b33c <inc_lock+0x118>)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	011b      	lsls	r3, r3, #4
 800b2b8:	440b      	add	r3, r1
 800b2ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	689a      	ldr	r2, [r3, #8]
 800b2c0:	491e      	ldr	r1, [pc, #120]	; (800b33c <inc_lock+0x118>)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	011b      	lsls	r3, r3, #4
 800b2c6:	440b      	add	r3, r1
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	695a      	ldr	r2, [r3, #20]
 800b2d0:	491a      	ldr	r1, [pc, #104]	; (800b33c <inc_lock+0x118>)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	011b      	lsls	r3, r3, #4
 800b2d6:	440b      	add	r3, r1
 800b2d8:	3308      	adds	r3, #8
 800b2da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b2dc:	4a17      	ldr	r2, [pc, #92]	; (800b33c <inc_lock+0x118>)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	011b      	lsls	r3, r3, #4
 800b2e2:	4413      	add	r3, r2
 800b2e4:	330c      	adds	r3, #12
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d009      	beq.n	800b304 <inc_lock+0xe0>
 800b2f0:	4a12      	ldr	r2, [pc, #72]	; (800b33c <inc_lock+0x118>)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	011b      	lsls	r3, r3, #4
 800b2f6:	4413      	add	r3, r2
 800b2f8:	330c      	adds	r3, #12
 800b2fa:	881b      	ldrh	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d001      	beq.n	800b304 <inc_lock+0xe0>
 800b300:	2300      	movs	r3, #0
 800b302:	e015      	b.n	800b330 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d108      	bne.n	800b31c <inc_lock+0xf8>
 800b30a:	4a0c      	ldr	r2, [pc, #48]	; (800b33c <inc_lock+0x118>)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	011b      	lsls	r3, r3, #4
 800b310:	4413      	add	r3, r2
 800b312:	330c      	adds	r3, #12
 800b314:	881b      	ldrh	r3, [r3, #0]
 800b316:	3301      	adds	r3, #1
 800b318:	b29a      	uxth	r2, r3
 800b31a:	e001      	b.n	800b320 <inc_lock+0xfc>
 800b31c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b320:	4906      	ldr	r1, [pc, #24]	; (800b33c <inc_lock+0x118>)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	011b      	lsls	r3, r3, #4
 800b326:	440b      	add	r3, r1
 800b328:	330c      	adds	r3, #12
 800b32a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	3301      	adds	r3, #1
}
 800b330:	4618      	mov	r0, r3
 800b332:	3714      	adds	r7, #20
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr
 800b33c:	200002e8 	.word	0x200002e8

0800b340 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	3b01      	subs	r3, #1
 800b34c:	607b      	str	r3, [r7, #4]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d825      	bhi.n	800b3a0 <dec_lock+0x60>
		n = Files[i].ctr;
 800b354:	4a17      	ldr	r2, [pc, #92]	; (800b3b4 <dec_lock+0x74>)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	011b      	lsls	r3, r3, #4
 800b35a:	4413      	add	r3, r2
 800b35c:	330c      	adds	r3, #12
 800b35e:	881b      	ldrh	r3, [r3, #0]
 800b360:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b362:	89fb      	ldrh	r3, [r7, #14]
 800b364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b368:	d101      	bne.n	800b36e <dec_lock+0x2e>
 800b36a:	2300      	movs	r3, #0
 800b36c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b36e:	89fb      	ldrh	r3, [r7, #14]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d002      	beq.n	800b37a <dec_lock+0x3a>
 800b374:	89fb      	ldrh	r3, [r7, #14]
 800b376:	3b01      	subs	r3, #1
 800b378:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b37a:	4a0e      	ldr	r2, [pc, #56]	; (800b3b4 <dec_lock+0x74>)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	011b      	lsls	r3, r3, #4
 800b380:	4413      	add	r3, r2
 800b382:	330c      	adds	r3, #12
 800b384:	89fa      	ldrh	r2, [r7, #14]
 800b386:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b388:	89fb      	ldrh	r3, [r7, #14]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d105      	bne.n	800b39a <dec_lock+0x5a>
 800b38e:	4a09      	ldr	r2, [pc, #36]	; (800b3b4 <dec_lock+0x74>)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	011b      	lsls	r3, r3, #4
 800b394:	4413      	add	r3, r2
 800b396:	2200      	movs	r2, #0
 800b398:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b39a:	2300      	movs	r3, #0
 800b39c:	737b      	strb	r3, [r7, #13]
 800b39e:	e001      	b.n	800b3a4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b3a4:	7b7b      	ldrb	r3, [r7, #13]
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3714      	adds	r7, #20
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	200002e8 	.word	0x200002e8

0800b3b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	60fb      	str	r3, [r7, #12]
 800b3c4:	e010      	b.n	800b3e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b3c6:	4a0d      	ldr	r2, [pc, #52]	; (800b3fc <clear_lock+0x44>)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	011b      	lsls	r3, r3, #4
 800b3cc:	4413      	add	r3, r2
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d105      	bne.n	800b3e2 <clear_lock+0x2a>
 800b3d6:	4a09      	ldr	r2, [pc, #36]	; (800b3fc <clear_lock+0x44>)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	011b      	lsls	r3, r3, #4
 800b3dc:	4413      	add	r3, r2
 800b3de:	2200      	movs	r2, #0
 800b3e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	60fb      	str	r3, [r7, #12]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d9eb      	bls.n	800b3c6 <clear_lock+0xe>
	}
}
 800b3ee:	bf00      	nop
 800b3f0:	3714      	adds	r7, #20
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	200002e8 	.word	0x200002e8

0800b400 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b086      	sub	sp, #24
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b408:	2300      	movs	r3, #0
 800b40a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	78db      	ldrb	r3, [r3, #3]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d034      	beq.n	800b47e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b418:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	7858      	ldrb	r0, [r3, #1]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b424:	2301      	movs	r3, #1
 800b426:	697a      	ldr	r2, [r7, #20]
 800b428:	f7ff fdfe 	bl	800b028 <disk_write>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d002      	beq.n	800b438 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b432:	2301      	movs	r3, #1
 800b434:	73fb      	strb	r3, [r7, #15]
 800b436:	e022      	b.n	800b47e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	697a      	ldr	r2, [r7, #20]
 800b444:	1ad2      	subs	r2, r2, r3
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	699b      	ldr	r3, [r3, #24]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d217      	bcs.n	800b47e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	789b      	ldrb	r3, [r3, #2]
 800b452:	613b      	str	r3, [r7, #16]
 800b454:	e010      	b.n	800b478 <sync_window+0x78>
					wsect += fs->fsize;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	699b      	ldr	r3, [r3, #24]
 800b45a:	697a      	ldr	r2, [r7, #20]
 800b45c:	4413      	add	r3, r2
 800b45e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	7858      	ldrb	r0, [r3, #1]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b46a:	2301      	movs	r3, #1
 800b46c:	697a      	ldr	r2, [r7, #20]
 800b46e:	f7ff fddb 	bl	800b028 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	3b01      	subs	r3, #1
 800b476:	613b      	str	r3, [r7, #16]
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d8eb      	bhi.n	800b456 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3718      	adds	r7, #24
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b492:	2300      	movs	r3, #0
 800b494:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d01b      	beq.n	800b4d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7ff ffad 	bl	800b400 <sync_window>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b4aa:	7bfb      	ldrb	r3, [r7, #15]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d113      	bne.n	800b4d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	7858      	ldrb	r0, [r3, #1]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	f7ff fd93 	bl	800afe8 <disk_read>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d004      	beq.n	800b4d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	683a      	ldr	r2, [r7, #0]
 800b4d6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}

0800b4e2 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b4e2:	b480      	push	{r7}
 800b4e4:	b083      	sub	sp, #12
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
 800b4ea:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	3b02      	subs	r3, #2
 800b4f0:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	695b      	ldr	r3, [r3, #20]
 800b4f6:	3b02      	subs	r3, #2
 800b4f8:	683a      	ldr	r2, [r7, #0]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d301      	bcc.n	800b502 <clust2sect+0x20>
 800b4fe:	2300      	movs	r3, #0
 800b500:	e008      	b.n	800b514 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	895b      	ldrh	r3, [r3, #10]
 800b506:	461a      	mov	r2, r3
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	fb03 f202 	mul.w	r2, r3, r2
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b512:	4413      	add	r3, r2
}
 800b514:	4618      	mov	r0, r3
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	2b01      	cmp	r3, #1
 800b534:	d904      	bls.n	800b540 <get_fat+0x20>
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	695b      	ldr	r3, [r3, #20]
 800b53a:	683a      	ldr	r2, [r7, #0]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d302      	bcc.n	800b546 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b540:	2301      	movs	r3, #1
 800b542:	617b      	str	r3, [r7, #20]
 800b544:	e08c      	b.n	800b660 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b546:	f04f 33ff 	mov.w	r3, #4294967295
 800b54a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	2b02      	cmp	r3, #2
 800b552:	d045      	beq.n	800b5e0 <get_fat+0xc0>
 800b554:	2b03      	cmp	r3, #3
 800b556:	d05d      	beq.n	800b614 <get_fat+0xf4>
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d177      	bne.n	800b64c <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	60fb      	str	r3, [r7, #12]
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	085b      	lsrs	r3, r3, #1
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	4413      	add	r3, r2
 800b568:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	6a1a      	ldr	r2, [r3, #32]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	0a5b      	lsrs	r3, r3, #9
 800b572:	4413      	add	r3, r2
 800b574:	4619      	mov	r1, r3
 800b576:	6938      	ldr	r0, [r7, #16]
 800b578:	f7ff ff86 	bl	800b488 <move_window>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d167      	bne.n	800b652 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	1c5a      	adds	r2, r3, #1
 800b586:	60fa      	str	r2, [r7, #12]
 800b588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b58c:	693a      	ldr	r2, [r7, #16]
 800b58e:	4413      	add	r3, r2
 800b590:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b594:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	6a1a      	ldr	r2, [r3, #32]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	0a5b      	lsrs	r3, r3, #9
 800b59e:	4413      	add	r3, r2
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	6938      	ldr	r0, [r7, #16]
 800b5a4:	f7ff ff70 	bl	800b488 <move_window>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d153      	bne.n	800b656 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b4:	693a      	ldr	r2, [r7, #16]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5bc:	021b      	lsls	r3, r3, #8
 800b5be:	461a      	mov	r2, r3
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	f003 0301 	and.w	r3, r3, #1
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d002      	beq.n	800b5d6 <get_fat+0xb6>
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	091b      	lsrs	r3, r3, #4
 800b5d4:	e002      	b.n	800b5dc <get_fat+0xbc>
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5dc:	617b      	str	r3, [r7, #20]
			break;
 800b5de:	e03f      	b.n	800b660 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	6a1a      	ldr	r2, [r3, #32]
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	0a1b      	lsrs	r3, r3, #8
 800b5e8:	4413      	add	r3, r2
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6938      	ldr	r0, [r7, #16]
 800b5ee:	f7ff ff4b 	bl	800b488 <move_window>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d130      	bne.n	800b65a <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	005b      	lsls	r3, r3, #1
 800b602:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b606:	4413      	add	r3, r2
 800b608:	4618      	mov	r0, r3
 800b60a:	f7ff fd2d 	bl	800b068 <ld_word>
 800b60e:	4603      	mov	r3, r0
 800b610:	617b      	str	r3, [r7, #20]
			break;
 800b612:	e025      	b.n	800b660 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	6a1a      	ldr	r2, [r3, #32]
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	09db      	lsrs	r3, r3, #7
 800b61c:	4413      	add	r3, r2
 800b61e:	4619      	mov	r1, r3
 800b620:	6938      	ldr	r0, [r7, #16]
 800b622:	f7ff ff31 	bl	800b488 <move_window>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d118      	bne.n	800b65e <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b63a:	4413      	add	r3, r2
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7ff fd2b 	bl	800b098 <ld_dword>
 800b642:	4603      	mov	r3, r0
 800b644:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b648:	617b      	str	r3, [r7, #20]
			break;
 800b64a:	e009      	b.n	800b660 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b64c:	2301      	movs	r3, #1
 800b64e:	617b      	str	r3, [r7, #20]
 800b650:	e006      	b.n	800b660 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b652:	bf00      	nop
 800b654:	e004      	b.n	800b660 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b656:	bf00      	nop
 800b658:	e002      	b.n	800b660 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b65a:	bf00      	nop
 800b65c:	e000      	b.n	800b660 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b65e:	bf00      	nop
		}
	}

	return val;
 800b660:	697b      	ldr	r3, [r7, #20]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3718      	adds	r7, #24
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b66a:	b590      	push	{r4, r7, lr}
 800b66c:	b089      	sub	sp, #36	; 0x24
 800b66e:	af00      	add	r7, sp, #0
 800b670:	60f8      	str	r0, [r7, #12]
 800b672:	60b9      	str	r1, [r7, #8]
 800b674:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b676:	2302      	movs	r3, #2
 800b678:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	f240 80d6 	bls.w	800b82e <put_fat+0x1c4>
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	695b      	ldr	r3, [r3, #20]
 800b686:	68ba      	ldr	r2, [r7, #8]
 800b688:	429a      	cmp	r2, r3
 800b68a:	f080 80d0 	bcs.w	800b82e <put_fat+0x1c4>
		switch (fs->fs_type) {
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	2b02      	cmp	r3, #2
 800b694:	d073      	beq.n	800b77e <put_fat+0x114>
 800b696:	2b03      	cmp	r3, #3
 800b698:	f000 8091 	beq.w	800b7be <put_fat+0x154>
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	f040 80c6 	bne.w	800b82e <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	61bb      	str	r3, [r7, #24]
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	085b      	lsrs	r3, r3, #1
 800b6aa:	69ba      	ldr	r2, [r7, #24]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6a1a      	ldr	r2, [r3, #32]
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	0a5b      	lsrs	r3, r3, #9
 800b6b8:	4413      	add	r3, r2
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f7ff fee3 	bl	800b488 <move_window>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b6c6:	7ffb      	ldrb	r3, [r7, #31]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f040 80a9 	bne.w	800b820 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	1c59      	adds	r1, r3, #1
 800b6d8:	61b9      	str	r1, [r7, #24]
 800b6da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6de:	4413      	add	r3, r2
 800b6e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	f003 0301 	and.w	r3, r3, #1
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00d      	beq.n	800b708 <put_fat+0x9e>
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	b25b      	sxtb	r3, r3
 800b6f2:	f003 030f 	and.w	r3, r3, #15
 800b6f6:	b25a      	sxtb	r2, r3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	011b      	lsls	r3, r3, #4
 800b6fe:	b25b      	sxtb	r3, r3
 800b700:	4313      	orrs	r3, r2
 800b702:	b25b      	sxtb	r3, r3
 800b704:	b2db      	uxtb	r3, r3
 800b706:	e001      	b.n	800b70c <put_fat+0xa2>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	697a      	ldr	r2, [r7, #20]
 800b70e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2201      	movs	r2, #1
 800b714:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6a1a      	ldr	r2, [r3, #32]
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	0a5b      	lsrs	r3, r3, #9
 800b71e:	4413      	add	r3, r2
 800b720:	4619      	mov	r1, r3
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	f7ff feb0 	bl	800b488 <move_window>
 800b728:	4603      	mov	r3, r0
 800b72a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b72c:	7ffb      	ldrb	r3, [r7, #31]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d178      	bne.n	800b824 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b73e:	4413      	add	r3, r2
 800b740:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	f003 0301 	and.w	r3, r3, #1
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d003      	beq.n	800b754 <put_fat+0xea>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	091b      	lsrs	r3, r3, #4
 800b750:	b2db      	uxtb	r3, r3
 800b752:	e00e      	b.n	800b772 <put_fat+0x108>
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	b25b      	sxtb	r3, r3
 800b75a:	f023 030f 	bic.w	r3, r3, #15
 800b75e:	b25a      	sxtb	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	0a1b      	lsrs	r3, r3, #8
 800b764:	b25b      	sxtb	r3, r3
 800b766:	f003 030f 	and.w	r3, r3, #15
 800b76a:	b25b      	sxtb	r3, r3
 800b76c:	4313      	orrs	r3, r2
 800b76e:	b25b      	sxtb	r3, r3
 800b770:	b2db      	uxtb	r3, r3
 800b772:	697a      	ldr	r2, [r7, #20]
 800b774:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2201      	movs	r2, #1
 800b77a:	70da      	strb	r2, [r3, #3]
			break;
 800b77c:	e057      	b.n	800b82e <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	6a1a      	ldr	r2, [r3, #32]
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	0a1b      	lsrs	r3, r3, #8
 800b786:	4413      	add	r3, r2
 800b788:	4619      	mov	r1, r3
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f7ff fe7c 	bl	800b488 <move_window>
 800b790:	4603      	mov	r3, r0
 800b792:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b794:	7ffb      	ldrb	r3, [r7, #31]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d146      	bne.n	800b828 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	005b      	lsls	r3, r3, #1
 800b7a4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b7a8:	4413      	add	r3, r2
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	b292      	uxth	r2, r2
 800b7ae:	4611      	mov	r1, r2
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7ff fc94 	bl	800b0de <st_word>
			fs->wflag = 1;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	70da      	strb	r2, [r3, #3]
			break;
 800b7bc:	e037      	b.n	800b82e <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	6a1a      	ldr	r2, [r3, #32]
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	09db      	lsrs	r3, r3, #7
 800b7c6:	4413      	add	r3, r2
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f7ff fe5c 	bl	800b488 <move_window>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b7d4:	7ffb      	ldrb	r3, [r7, #31]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d128      	bne.n	800b82c <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	009b      	lsls	r3, r3, #2
 800b7ea:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b7ee:	4413      	add	r3, r2
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7ff fc51 	bl	800b098 <ld_dword>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b7fc:	4323      	orrs	r3, r4
 800b7fe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b80e:	4413      	add	r3, r2
 800b810:	6879      	ldr	r1, [r7, #4]
 800b812:	4618      	mov	r0, r3
 800b814:	f7ff fc7e 	bl	800b114 <st_dword>
			fs->wflag = 1;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2201      	movs	r2, #1
 800b81c:	70da      	strb	r2, [r3, #3]
			break;
 800b81e:	e006      	b.n	800b82e <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b820:	bf00      	nop
 800b822:	e004      	b.n	800b82e <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b824:	bf00      	nop
 800b826:	e002      	b.n	800b82e <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b828:	bf00      	nop
 800b82a:	e000      	b.n	800b82e <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b82c:	bf00      	nop
		}
	}
	return res;
 800b82e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b830:	4618      	mov	r0, r3
 800b832:	3724      	adds	r7, #36	; 0x24
 800b834:	46bd      	mov	sp, r7
 800b836:	bd90      	pop	{r4, r7, pc}

0800b838 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b088      	sub	sp, #32
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d10d      	bne.n	800b86a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d004      	beq.n	800b864 <create_chain+0x2c>
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	695b      	ldr	r3, [r3, #20]
 800b85e:	69ba      	ldr	r2, [r7, #24]
 800b860:	429a      	cmp	r2, r3
 800b862:	d31b      	bcc.n	800b89c <create_chain+0x64>
 800b864:	2301      	movs	r3, #1
 800b866:	61bb      	str	r3, [r7, #24]
 800b868:	e018      	b.n	800b89c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b86a:	6839      	ldr	r1, [r7, #0]
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f7ff fe57 	bl	800b520 <get_fat>
 800b872:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2b01      	cmp	r3, #1
 800b878:	d801      	bhi.n	800b87e <create_chain+0x46>
 800b87a:	2301      	movs	r3, #1
 800b87c:	e070      	b.n	800b960 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b884:	d101      	bne.n	800b88a <create_chain+0x52>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	e06a      	b.n	800b960 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	695b      	ldr	r3, [r3, #20]
 800b88e:	68fa      	ldr	r2, [r7, #12]
 800b890:	429a      	cmp	r2, r3
 800b892:	d201      	bcs.n	800b898 <create_chain+0x60>
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	e063      	b.n	800b960 <create_chain+0x128>
		scl = clst;
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	695b      	ldr	r3, [r3, #20]
 800b8aa:	69fa      	ldr	r2, [r7, #28]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d307      	bcc.n	800b8c0 <create_chain+0x88>
				ncl = 2;
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b8b4:	69fa      	ldr	r2, [r7, #28]
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d901      	bls.n	800b8c0 <create_chain+0x88>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	e04f      	b.n	800b960 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b8c0:	69f9      	ldr	r1, [r7, #28]
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f7ff fe2c 	bl	800b520 <get_fat>
 800b8c8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00e      	beq.n	800b8ee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d003      	beq.n	800b8de <create_chain+0xa6>
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8dc:	d101      	bne.n	800b8e2 <create_chain+0xaa>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	e03e      	b.n	800b960 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b8e2:	69fa      	ldr	r2, [r7, #28]
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d1da      	bne.n	800b8a0 <create_chain+0x68>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	e038      	b.n	800b960 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b8ee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8f4:	69f9      	ldr	r1, [r7, #28]
 800b8f6:	6938      	ldr	r0, [r7, #16]
 800b8f8:	f7ff feb7 	bl	800b66a <put_fat>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b900:	7dfb      	ldrb	r3, [r7, #23]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d109      	bne.n	800b91a <create_chain+0xe2>
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d006      	beq.n	800b91a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b90c:	69fa      	ldr	r2, [r7, #28]
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	6938      	ldr	r0, [r7, #16]
 800b912:	f7ff feaa 	bl	800b66a <put_fat>
 800b916:	4603      	mov	r3, r0
 800b918:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b91a:	7dfb      	ldrb	r3, [r7, #23]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d116      	bne.n	800b94e <create_chain+0x116>
		fs->last_clst = ncl;
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	69fa      	ldr	r2, [r7, #28]
 800b924:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	691a      	ldr	r2, [r3, #16]
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	695b      	ldr	r3, [r3, #20]
 800b92e:	3b02      	subs	r3, #2
 800b930:	429a      	cmp	r2, r3
 800b932:	d804      	bhi.n	800b93e <create_chain+0x106>
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	691b      	ldr	r3, [r3, #16]
 800b938:	1e5a      	subs	r2, r3, #1
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	791b      	ldrb	r3, [r3, #4]
 800b942:	f043 0301 	orr.w	r3, r3, #1
 800b946:	b2da      	uxtb	r2, r3
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	711a      	strb	r2, [r3, #4]
 800b94c:	e007      	b.n	800b95e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b94e:	7dfb      	ldrb	r3, [r7, #23]
 800b950:	2b01      	cmp	r3, #1
 800b952:	d102      	bne.n	800b95a <create_chain+0x122>
 800b954:	f04f 33ff 	mov.w	r3, #4294967295
 800b958:	e000      	b.n	800b95c <create_chain+0x124>
 800b95a:	2301      	movs	r3, #1
 800b95c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b95e:	69fb      	ldr	r3, [r7, #28]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3720      	adds	r7, #32
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b97e:	d204      	bcs.n	800b98a <dir_sdi+0x22>
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	f003 031f 	and.w	r3, r3, #31
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <dir_sdi+0x26>
		return FR_INT_ERR;
 800b98a:	2302      	movs	r3, #2
 800b98c:	e063      	b.n	800ba56 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d106      	bne.n	800b9ae <dir_sdi+0x46>
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	d902      	bls.n	800b9ae <dir_sdi+0x46>
		clst = fs->dirbase;
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d10c      	bne.n	800b9ce <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	095b      	lsrs	r3, r3, #5
 800b9b8:	693a      	ldr	r2, [r7, #16]
 800b9ba:	8912      	ldrh	r2, [r2, #8]
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d301      	bcc.n	800b9c4 <dir_sdi+0x5c>
 800b9c0:	2302      	movs	r3, #2
 800b9c2:	e048      	b.n	800ba56 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	61da      	str	r2, [r3, #28]
 800b9cc:	e029      	b.n	800ba22 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	895b      	ldrh	r3, [r3, #10]
 800b9d2:	025b      	lsls	r3, r3, #9
 800b9d4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b9d6:	e019      	b.n	800ba0c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6979      	ldr	r1, [r7, #20]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7ff fd9f 	bl	800b520 <get_fat>
 800b9e2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ea:	d101      	bne.n	800b9f0 <dir_sdi+0x88>
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e032      	b.n	800ba56 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d904      	bls.n	800ba00 <dir_sdi+0x98>
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	695b      	ldr	r3, [r3, #20]
 800b9fa:	697a      	ldr	r2, [r7, #20]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d301      	bcc.n	800ba04 <dir_sdi+0x9c>
 800ba00:	2302      	movs	r3, #2
 800ba02:	e028      	b.n	800ba56 <dir_sdi+0xee>
			ofs -= csz;
 800ba04:	683a      	ldr	r2, [r7, #0]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	1ad3      	subs	r3, r2, r3
 800ba0a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ba0c:	683a      	ldr	r2, [r7, #0]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d2e1      	bcs.n	800b9d8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ba14:	6979      	ldr	r1, [r7, #20]
 800ba16:	6938      	ldr	r0, [r7, #16]
 800ba18:	f7ff fd63 	bl	800b4e2 <clust2sect>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	69db      	ldr	r3, [r3, #28]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d101      	bne.n	800ba34 <dir_sdi+0xcc>
 800ba30:	2302      	movs	r3, #2
 800ba32:	e010      	b.n	800ba56 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	69da      	ldr	r2, [r3, #28]
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	0a5b      	lsrs	r3, r3, #9
 800ba3c:	441a      	add	r2, r3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba4e:	441a      	add	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3718      	adds	r7, #24
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b086      	sub	sp, #24
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
 800ba66:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	695b      	ldr	r3, [r3, #20]
 800ba72:	3320      	adds	r3, #32
 800ba74:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	69db      	ldr	r3, [r3, #28]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d003      	beq.n	800ba86 <dir_next+0x28>
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba84:	d301      	bcc.n	800ba8a <dir_next+0x2c>
 800ba86:	2304      	movs	r3, #4
 800ba88:	e0aa      	b.n	800bbe0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f040 8098 	bne.w	800bbc6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	69db      	ldr	r3, [r3, #28]
 800ba9a:	1c5a      	adds	r2, r3, #1
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	699b      	ldr	r3, [r3, #24]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d10b      	bne.n	800bac0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	095b      	lsrs	r3, r3, #5
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	8912      	ldrh	r2, [r2, #8]
 800bab0:	4293      	cmp	r3, r2
 800bab2:	f0c0 8088 	bcc.w	800bbc6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	61da      	str	r2, [r3, #28]
 800babc:	2304      	movs	r3, #4
 800babe:	e08f      	b.n	800bbe0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	0a5b      	lsrs	r3, r3, #9
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	8952      	ldrh	r2, [r2, #10]
 800bac8:	3a01      	subs	r2, #1
 800baca:	4013      	ands	r3, r2
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d17a      	bne.n	800bbc6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	699b      	ldr	r3, [r3, #24]
 800bad6:	4619      	mov	r1, r3
 800bad8:	4610      	mov	r0, r2
 800bada:	f7ff fd21 	bl	800b520 <get_fat>
 800bade:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d801      	bhi.n	800baea <dir_next+0x8c>
 800bae6:	2302      	movs	r3, #2
 800bae8:	e07a      	b.n	800bbe0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baf0:	d101      	bne.n	800baf6 <dir_next+0x98>
 800baf2:	2301      	movs	r3, #1
 800baf4:	e074      	b.n	800bbe0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	695b      	ldr	r3, [r3, #20]
 800bafa:	697a      	ldr	r2, [r7, #20]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d358      	bcc.n	800bbb2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d104      	bne.n	800bb10 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	61da      	str	r2, [r3, #28]
 800bb0c:	2304      	movs	r3, #4
 800bb0e:	e067      	b.n	800bbe0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	699b      	ldr	r3, [r3, #24]
 800bb16:	4619      	mov	r1, r3
 800bb18:	4610      	mov	r0, r2
 800bb1a:	f7ff fe8d 	bl	800b838 <create_chain>
 800bb1e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d101      	bne.n	800bb2a <dir_next+0xcc>
 800bb26:	2307      	movs	r3, #7
 800bb28:	e05a      	b.n	800bbe0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d101      	bne.n	800bb34 <dir_next+0xd6>
 800bb30:	2302      	movs	r3, #2
 800bb32:	e055      	b.n	800bbe0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb3a:	d101      	bne.n	800bb40 <dir_next+0xe2>
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	e04f      	b.n	800bbe0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f7ff fc5d 	bl	800b400 <sync_window>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d001      	beq.n	800bb50 <dir_next+0xf2>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e047      	b.n	800bbe0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	3330      	adds	r3, #48	; 0x30
 800bb54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb58:	2100      	movs	r1, #0
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7ff fb06 	bl	800b16c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bb60:	2300      	movs	r3, #0
 800bb62:	613b      	str	r3, [r7, #16]
 800bb64:	6979      	ldr	r1, [r7, #20]
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f7ff fcbb 	bl	800b4e2 <clust2sect>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	62da      	str	r2, [r3, #44]	; 0x2c
 800bb72:	e012      	b.n	800bb9a <dir_next+0x13c>
						fs->wflag = 1;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2201      	movs	r2, #1
 800bb78:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f7ff fc40 	bl	800b400 <sync_window>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d001      	beq.n	800bb8a <dir_next+0x12c>
 800bb86:	2301      	movs	r3, #1
 800bb88:	e02a      	b.n	800bbe0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	613b      	str	r3, [r7, #16]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb94:	1c5a      	adds	r2, r3, #1
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	62da      	str	r2, [r3, #44]	; 0x2c
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	895b      	ldrh	r3, [r3, #10]
 800bb9e:	461a      	mov	r2, r3
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d3e6      	bcc.n	800bb74 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	1ad2      	subs	r2, r2, r3
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bbb8:	6979      	ldr	r1, [r7, #20]
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	f7ff fc91 	bl	800b4e2 <clust2sect>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbd8:	441a      	add	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3718      	adds	r7, #24
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	331a      	adds	r3, #26
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7ff fa36 	bl	800b068 <ld_word>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	2b03      	cmp	r3, #3
 800bc06:	d109      	bne.n	800bc1c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	3314      	adds	r3, #20
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7ff fa2b 	bl	800b068 <ld_word>
 800bc12:	4603      	mov	r3, r0
 800bc14:	041b      	lsls	r3, r3, #16
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b086      	sub	sp, #24
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
 800bc2e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800bc30:	2304      	movs	r3, #4
 800bc32:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800bc3a:	e03c      	b.n	800bcb6 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	69db      	ldr	r3, [r3, #28]
 800bc40:	4619      	mov	r1, r3
 800bc42:	6938      	ldr	r0, [r7, #16]
 800bc44:	f7ff fc20 	bl	800b488 <move_window>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bc4c:	7dfb      	ldrb	r3, [r7, #23]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d136      	bne.n	800bcc0 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6a1b      	ldr	r3, [r3, #32]
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800bc5a:	7bfb      	ldrb	r3, [r7, #15]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d102      	bne.n	800bc66 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800bc60:	2304      	movs	r3, #4
 800bc62:	75fb      	strb	r3, [r7, #23]
 800bc64:	e031      	b.n	800bcca <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6a1b      	ldr	r3, [r3, #32]
 800bc6a:	330b      	adds	r3, #11
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc72:	73bb      	strb	r3, [r7, #14]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	7bba      	ldrb	r2, [r7, #14]
 800bc78:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800bc7a:	7bfb      	ldrb	r3, [r7, #15]
 800bc7c:	2be5      	cmp	r3, #229	; 0xe5
 800bc7e:	d011      	beq.n	800bca4 <dir_read+0x7e>
 800bc80:	7bfb      	ldrb	r3, [r7, #15]
 800bc82:	2b2e      	cmp	r3, #46	; 0x2e
 800bc84:	d00e      	beq.n	800bca4 <dir_read+0x7e>
 800bc86:	7bbb      	ldrb	r3, [r7, #14]
 800bc88:	2b0f      	cmp	r3, #15
 800bc8a:	d00b      	beq.n	800bca4 <dir_read+0x7e>
 800bc8c:	7bbb      	ldrb	r3, [r7, #14]
 800bc8e:	f023 0320 	bic.w	r3, r3, #32
 800bc92:	2b08      	cmp	r3, #8
 800bc94:	bf0c      	ite	eq
 800bc96:	2301      	moveq	r3, #1
 800bc98:	2300      	movne	r3, #0
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d00f      	beq.n	800bcc4 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800bca4:	2100      	movs	r1, #0
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f7ff fed9 	bl	800ba5e <dir_next>
 800bcac:	4603      	mov	r3, r0
 800bcae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bcb0:	7dfb      	ldrb	r3, [r7, #23]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d108      	bne.n	800bcc8 <dir_read+0xa2>
	while (dp->sect) {
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	69db      	ldr	r3, [r3, #28]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d1be      	bne.n	800bc3c <dir_read+0x16>
 800bcbe:	e004      	b.n	800bcca <dir_read+0xa4>
		if (res != FR_OK) break;
 800bcc0:	bf00      	nop
 800bcc2:	e002      	b.n	800bcca <dir_read+0xa4>
				break;
 800bcc4:	bf00      	nop
 800bcc6:	e000      	b.n	800bcca <dir_read+0xa4>
		if (res != FR_OK) break;
 800bcc8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800bcca:	7dfb      	ldrb	r3, [r7, #23]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d002      	beq.n	800bcd6 <dir_read+0xb0>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	61da      	str	r2, [r3, #28]
	return res;
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3718      	adds	r7, #24
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b086      	sub	sp, #24
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bcee:	2100      	movs	r1, #0
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7ff fe39 	bl	800b968 <dir_sdi>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bcfa:	7dfb      	ldrb	r3, [r7, #23]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d001      	beq.n	800bd04 <dir_find+0x24>
 800bd00:	7dfb      	ldrb	r3, [r7, #23]
 800bd02:	e03e      	b.n	800bd82 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	69db      	ldr	r3, [r3, #28]
 800bd08:	4619      	mov	r1, r3
 800bd0a:	6938      	ldr	r0, [r7, #16]
 800bd0c:	f7ff fbbc 	bl	800b488 <move_window>
 800bd10:	4603      	mov	r3, r0
 800bd12:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bd14:	7dfb      	ldrb	r3, [r7, #23]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d12f      	bne.n	800bd7a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a1b      	ldr	r3, [r3, #32]
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bd22:	7bfb      	ldrb	r3, [r7, #15]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d102      	bne.n	800bd2e <dir_find+0x4e>
 800bd28:	2304      	movs	r3, #4
 800bd2a:	75fb      	strb	r3, [r7, #23]
 800bd2c:	e028      	b.n	800bd80 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a1b      	ldr	r3, [r3, #32]
 800bd32:	330b      	adds	r3, #11
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd3a:	b2da      	uxtb	r2, r3
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6a1b      	ldr	r3, [r3, #32]
 800bd44:	330b      	adds	r3, #11
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	f003 0308 	and.w	r3, r3, #8
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10a      	bne.n	800bd66 <dir_find+0x86>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a18      	ldr	r0, [r3, #32]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	3324      	adds	r3, #36	; 0x24
 800bd58:	220b      	movs	r2, #11
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	f7ff fa20 	bl	800b1a0 <mem_cmp>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00b      	beq.n	800bd7e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bd66:	2100      	movs	r1, #0
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f7ff fe78 	bl	800ba5e <dir_next>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bd72:	7dfb      	ldrb	r3, [r7, #23]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d0c5      	beq.n	800bd04 <dir_find+0x24>
 800bd78:	e002      	b.n	800bd80 <dir_find+0xa0>
		if (res != FR_OK) break;
 800bd7a:	bf00      	nop
 800bd7c:	e000      	b.n	800bd80 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bd7e:	bf00      	nop

	return res;
 800bd80:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3718      	adds	r7, #24
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}

0800bd8a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bd8a:	b580      	push	{r7, lr}
 800bd8c:	b086      	sub	sp, #24
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
 800bd92:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	2200      	movs	r2, #0
 800bd98:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	69db      	ldr	r3, [r3, #28]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d04e      	beq.n	800be40 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800bda2:	2300      	movs	r3, #0
 800bda4:	613b      	str	r3, [r7, #16]
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800bdaa:	e021      	b.n	800bdf0 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a1a      	ldr	r2, [r3, #32]
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	1c59      	adds	r1, r3, #1
 800bdb4:	6179      	str	r1, [r7, #20]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800bdbc:	7bfb      	ldrb	r3, [r7, #15]
 800bdbe:	2b20      	cmp	r3, #32
 800bdc0:	d100      	bne.n	800bdc4 <get_fileinfo+0x3a>
 800bdc2:	e015      	b.n	800bdf0 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800bdc4:	7bfb      	ldrb	r3, [r7, #15]
 800bdc6:	2b05      	cmp	r3, #5
 800bdc8:	d101      	bne.n	800bdce <get_fileinfo+0x44>
 800bdca:	23e5      	movs	r3, #229	; 0xe5
 800bdcc:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	2b09      	cmp	r3, #9
 800bdd2:	d106      	bne.n	800bde2 <get_fileinfo+0x58>
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	1c5a      	adds	r2, r3, #1
 800bdd8:	613a      	str	r2, [r7, #16]
 800bdda:	683a      	ldr	r2, [r7, #0]
 800bddc:	4413      	add	r3, r2
 800bdde:	222e      	movs	r2, #46	; 0x2e
 800bde0:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	1c5a      	adds	r2, r3, #1
 800bde6:	613a      	str	r2, [r7, #16]
 800bde8:	683a      	ldr	r2, [r7, #0]
 800bdea:	4413      	add	r3, r2
 800bdec:	7bfa      	ldrb	r2, [r7, #15]
 800bdee:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	2b0a      	cmp	r3, #10
 800bdf4:	d9da      	bls.n	800bdac <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800bdf6:	683a      	ldr	r2, [r7, #0]
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	3309      	adds	r3, #9
 800bdfe:	2200      	movs	r2, #0
 800be00:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6a1b      	ldr	r3, [r3, #32]
 800be06:	7ada      	ldrb	r2, [r3, #11]
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a1b      	ldr	r3, [r3, #32]
 800be10:	331c      	adds	r3, #28
 800be12:	4618      	mov	r0, r3
 800be14:	f7ff f940 	bl	800b098 <ld_dword>
 800be18:	4602      	mov	r2, r0
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a1b      	ldr	r3, [r3, #32]
 800be22:	3316      	adds	r3, #22
 800be24:	4618      	mov	r0, r3
 800be26:	f7ff f937 	bl	800b098 <ld_dword>
 800be2a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	b29a      	uxth	r2, r3
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	80da      	strh	r2, [r3, #6]
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	0c1b      	lsrs	r3, r3, #16
 800be38:	b29a      	uxth	r2, r3
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	809a      	strh	r2, [r3, #4]
 800be3e:	e000      	b.n	800be42 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800be40:	bf00      	nop
}
 800be42:	3718      	adds	r7, #24
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b088      	sub	sp, #32
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	60fb      	str	r3, [r7, #12]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	3324      	adds	r3, #36	; 0x24
 800be5c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800be5e:	220b      	movs	r2, #11
 800be60:	2120      	movs	r1, #32
 800be62:	68b8      	ldr	r0, [r7, #8]
 800be64:	f7ff f982 	bl	800b16c <mem_set>
	si = i = 0; ni = 8;
 800be68:	2300      	movs	r3, #0
 800be6a:	613b      	str	r3, [r7, #16]
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	617b      	str	r3, [r7, #20]
 800be70:	2308      	movs	r3, #8
 800be72:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	1c5a      	adds	r2, r3, #1
 800be78:	617a      	str	r2, [r7, #20]
 800be7a:	68fa      	ldr	r2, [r7, #12]
 800be7c:	4413      	add	r3, r2
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800be82:	7ffb      	ldrb	r3, [r7, #31]
 800be84:	2b20      	cmp	r3, #32
 800be86:	d94e      	bls.n	800bf26 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800be88:	7ffb      	ldrb	r3, [r7, #31]
 800be8a:	2b2f      	cmp	r3, #47	; 0x2f
 800be8c:	d006      	beq.n	800be9c <create_name+0x54>
 800be8e:	7ffb      	ldrb	r3, [r7, #31]
 800be90:	2b5c      	cmp	r3, #92	; 0x5c
 800be92:	d110      	bne.n	800beb6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800be94:	e002      	b.n	800be9c <create_name+0x54>
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	3301      	adds	r3, #1
 800be9a:	617b      	str	r3, [r7, #20]
 800be9c:	68fa      	ldr	r2, [r7, #12]
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	4413      	add	r3, r2
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	2b2f      	cmp	r3, #47	; 0x2f
 800bea6:	d0f6      	beq.n	800be96 <create_name+0x4e>
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	4413      	add	r3, r2
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	2b5c      	cmp	r3, #92	; 0x5c
 800beb2:	d0f0      	beq.n	800be96 <create_name+0x4e>
			break;
 800beb4:	e038      	b.n	800bf28 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800beb6:	7ffb      	ldrb	r3, [r7, #31]
 800beb8:	2b2e      	cmp	r3, #46	; 0x2e
 800beba:	d003      	beq.n	800bec4 <create_name+0x7c>
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d30c      	bcc.n	800bede <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	2b0b      	cmp	r3, #11
 800bec8:	d002      	beq.n	800bed0 <create_name+0x88>
 800beca:	7ffb      	ldrb	r3, [r7, #31]
 800becc:	2b2e      	cmp	r3, #46	; 0x2e
 800bece:	d001      	beq.n	800bed4 <create_name+0x8c>
 800bed0:	2306      	movs	r3, #6
 800bed2:	e044      	b.n	800bf5e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bed4:	2308      	movs	r3, #8
 800bed6:	613b      	str	r3, [r7, #16]
 800bed8:	230b      	movs	r3, #11
 800beda:	61bb      	str	r3, [r7, #24]
			continue;
 800bedc:	e022      	b.n	800bf24 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bede:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	da04      	bge.n	800bef0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bee6:	7ffb      	ldrb	r3, [r7, #31]
 800bee8:	3b80      	subs	r3, #128	; 0x80
 800beea:	4a1f      	ldr	r2, [pc, #124]	; (800bf68 <create_name+0x120>)
 800beec:	5cd3      	ldrb	r3, [r2, r3]
 800beee:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bef0:	7ffb      	ldrb	r3, [r7, #31]
 800bef2:	4619      	mov	r1, r3
 800bef4:	481d      	ldr	r0, [pc, #116]	; (800bf6c <create_name+0x124>)
 800bef6:	f7ff f97a 	bl	800b1ee <chk_chr>
 800befa:	4603      	mov	r3, r0
 800befc:	2b00      	cmp	r3, #0
 800befe:	d001      	beq.n	800bf04 <create_name+0xbc>
 800bf00:	2306      	movs	r3, #6
 800bf02:	e02c      	b.n	800bf5e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bf04:	7ffb      	ldrb	r3, [r7, #31]
 800bf06:	2b60      	cmp	r3, #96	; 0x60
 800bf08:	d905      	bls.n	800bf16 <create_name+0xce>
 800bf0a:	7ffb      	ldrb	r3, [r7, #31]
 800bf0c:	2b7a      	cmp	r3, #122	; 0x7a
 800bf0e:	d802      	bhi.n	800bf16 <create_name+0xce>
 800bf10:	7ffb      	ldrb	r3, [r7, #31]
 800bf12:	3b20      	subs	r3, #32
 800bf14:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	1c5a      	adds	r2, r3, #1
 800bf1a:	613a      	str	r2, [r7, #16]
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	4413      	add	r3, r2
 800bf20:	7ffa      	ldrb	r2, [r7, #31]
 800bf22:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bf24:	e7a6      	b.n	800be74 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bf26:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bf28:	68fa      	ldr	r2, [r7, #12]
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	441a      	add	r2, r3
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d101      	bne.n	800bf3c <create_name+0xf4>
 800bf38:	2306      	movs	r3, #6
 800bf3a:	e010      	b.n	800bf5e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	2be5      	cmp	r3, #229	; 0xe5
 800bf42:	d102      	bne.n	800bf4a <create_name+0x102>
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	2205      	movs	r2, #5
 800bf48:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bf4a:	7ffb      	ldrb	r3, [r7, #31]
 800bf4c:	2b20      	cmp	r3, #32
 800bf4e:	d801      	bhi.n	800bf54 <create_name+0x10c>
 800bf50:	2204      	movs	r2, #4
 800bf52:	e000      	b.n	800bf56 <create_name+0x10e>
 800bf54:	2200      	movs	r2, #0
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	330b      	adds	r3, #11
 800bf5a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bf5c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3720      	adds	r7, #32
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	0800f8d0 	.word	0x0800f8d0
 800bf6c:	0800db8c 	.word	0x0800db8c

0800bf70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b086      	sub	sp, #24
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bf84:	e002      	b.n	800bf8c <follow_path+0x1c>
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	603b      	str	r3, [r7, #0]
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	2b2f      	cmp	r3, #47	; 0x2f
 800bf92:	d0f8      	beq.n	800bf86 <follow_path+0x16>
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	2b5c      	cmp	r3, #92	; 0x5c
 800bf9a:	d0f4      	beq.n	800bf86 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	2b1f      	cmp	r3, #31
 800bfa8:	d80a      	bhi.n	800bfc0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2280      	movs	r2, #128	; 0x80
 800bfae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f7ff fcd7 	bl	800b968 <dir_sdi>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	75fb      	strb	r3, [r7, #23]
 800bfbe:	e043      	b.n	800c048 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bfc0:	463b      	mov	r3, r7
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f7ff ff3f 	bl	800be48 <create_name>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bfce:	7dfb      	ldrb	r3, [r7, #23]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d134      	bne.n	800c03e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f7ff fe83 	bl	800bce0 <dir_find>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bfe4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bfe6:	7dfb      	ldrb	r3, [r7, #23]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00a      	beq.n	800c002 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bfec:	7dfb      	ldrb	r3, [r7, #23]
 800bfee:	2b04      	cmp	r3, #4
 800bff0:	d127      	bne.n	800c042 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bff2:	7afb      	ldrb	r3, [r7, #11]
 800bff4:	f003 0304 	and.w	r3, r3, #4
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d122      	bne.n	800c042 <follow_path+0xd2>
 800bffc:	2305      	movs	r3, #5
 800bffe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c000:	e01f      	b.n	800c042 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c002:	7afb      	ldrb	r3, [r7, #11]
 800c004:	f003 0304 	and.w	r3, r3, #4
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d11c      	bne.n	800c046 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	799b      	ldrb	r3, [r3, #6]
 800c010:	f003 0310 	and.w	r3, r3, #16
 800c014:	2b00      	cmp	r3, #0
 800c016:	d102      	bne.n	800c01e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c018:	2305      	movs	r3, #5
 800c01a:	75fb      	strb	r3, [r7, #23]
 800c01c:	e014      	b.n	800c048 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	695b      	ldr	r3, [r3, #20]
 800c028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c02c:	4413      	add	r3, r2
 800c02e:	4619      	mov	r1, r3
 800c030:	68f8      	ldr	r0, [r7, #12]
 800c032:	f7ff fdd9 	bl	800bbe8 <ld_clust>
 800c036:	4602      	mov	r2, r0
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c03c:	e7c0      	b.n	800bfc0 <follow_path+0x50>
			if (res != FR_OK) break;
 800c03e:	bf00      	nop
 800c040:	e002      	b.n	800c048 <follow_path+0xd8>
				break;
 800c042:	bf00      	nop
 800c044:	e000      	b.n	800c048 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c046:	bf00      	nop
			}
		}
	}

	return res;
 800c048:	7dfb      	ldrb	r3, [r7, #23]
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3718      	adds	r7, #24
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c052:	b480      	push	{r7}
 800c054:	b087      	sub	sp, #28
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c05a:	f04f 33ff 	mov.w	r3, #4294967295
 800c05e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d031      	beq.n	800c0cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	617b      	str	r3, [r7, #20]
 800c06e:	e002      	b.n	800c076 <get_ldnumber+0x24>
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	3301      	adds	r3, #1
 800c074:	617b      	str	r3, [r7, #20]
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	2b20      	cmp	r3, #32
 800c07c:	d903      	bls.n	800c086 <get_ldnumber+0x34>
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	2b3a      	cmp	r3, #58	; 0x3a
 800c084:	d1f4      	bne.n	800c070 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	2b3a      	cmp	r3, #58	; 0x3a
 800c08c:	d11c      	bne.n	800c0c8 <get_ldnumber+0x76>
			tp = *path;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	1c5a      	adds	r2, r3, #1
 800c098:	60fa      	str	r2, [r7, #12]
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	3b30      	subs	r3, #48	; 0x30
 800c09e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	2b09      	cmp	r3, #9
 800c0a4:	d80e      	bhi.n	800c0c4 <get_ldnumber+0x72>
 800c0a6:	68fa      	ldr	r2, [r7, #12]
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d10a      	bne.n	800c0c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d107      	bne.n	800c0c4 <get_ldnumber+0x72>
					vol = (int)i;
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	617b      	str	r3, [r7, #20]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	697a      	ldr	r2, [r7, #20]
 800c0c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	e002      	b.n	800c0ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c0cc:	693b      	ldr	r3, [r7, #16]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	371c      	adds	r7, #28
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr
	...

0800c0dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	70da      	strb	r2, [r3, #3]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c0f2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c0f4:	6839      	ldr	r1, [r7, #0]
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f7ff f9c6 	bl	800b488 <move_window>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d001      	beq.n	800c106 <check_fs+0x2a>
 800c102:	2304      	movs	r3, #4
 800c104:	e038      	b.n	800c178 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	3330      	adds	r3, #48	; 0x30
 800c10a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fe ffaa 	bl	800b068 <ld_word>
 800c114:	4603      	mov	r3, r0
 800c116:	461a      	mov	r2, r3
 800c118:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d001      	beq.n	800c124 <check_fs+0x48>
 800c120:	2303      	movs	r3, #3
 800c122:	e029      	b.n	800c178 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c12a:	2be9      	cmp	r3, #233	; 0xe9
 800c12c:	d009      	beq.n	800c142 <check_fs+0x66>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c134:	2beb      	cmp	r3, #235	; 0xeb
 800c136:	d11e      	bne.n	800c176 <check_fs+0x9a>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c13e:	2b90      	cmp	r3, #144	; 0x90
 800c140:	d119      	bne.n	800c176 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	3330      	adds	r3, #48	; 0x30
 800c146:	3336      	adds	r3, #54	; 0x36
 800c148:	4618      	mov	r0, r3
 800c14a:	f7fe ffa5 	bl	800b098 <ld_dword>
 800c14e:	4603      	mov	r3, r0
 800c150:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c154:	4a0a      	ldr	r2, [pc, #40]	; (800c180 <check_fs+0xa4>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d101      	bne.n	800c15e <check_fs+0x82>
 800c15a:	2300      	movs	r3, #0
 800c15c:	e00c      	b.n	800c178 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	3330      	adds	r3, #48	; 0x30
 800c162:	3352      	adds	r3, #82	; 0x52
 800c164:	4618      	mov	r0, r3
 800c166:	f7fe ff97 	bl	800b098 <ld_dword>
 800c16a:	4602      	mov	r2, r0
 800c16c:	4b05      	ldr	r3, [pc, #20]	; (800c184 <check_fs+0xa8>)
 800c16e:	429a      	cmp	r2, r3
 800c170:	d101      	bne.n	800c176 <check_fs+0x9a>
 800c172:	2300      	movs	r3, #0
 800c174:	e000      	b.n	800c178 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c176:	2302      	movs	r3, #2
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3708      	adds	r7, #8
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	00544146 	.word	0x00544146
 800c184:	33544146 	.word	0x33544146

0800c188 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b096      	sub	sp, #88	; 0x58
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	4613      	mov	r3, r2
 800c194:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	2200      	movs	r2, #0
 800c19a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c19c:	68f8      	ldr	r0, [r7, #12]
 800c19e:	f7ff ff58 	bl	800c052 <get_ldnumber>
 800c1a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	da01      	bge.n	800c1ae <find_volume+0x26>
 800c1aa:	230b      	movs	r3, #11
 800c1ac:	e22e      	b.n	800c60c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c1ae:	4aa8      	ldr	r2, [pc, #672]	; (800c450 <find_volume+0x2c8>)
 800c1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d101      	bne.n	800c1c2 <find_volume+0x3a>
 800c1be:	230c      	movs	r3, #12
 800c1c0:	e224      	b.n	800c60c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c1c8:	79fb      	ldrb	r3, [r7, #7]
 800c1ca:	f023 0301 	bic.w	r3, r3, #1
 800c1ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d01a      	beq.n	800c20e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1da:	785b      	ldrb	r3, [r3, #1]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fe fec3 	bl	800af68 <disk_status>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c1e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1ec:	f003 0301 	and.w	r3, r3, #1
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d10c      	bne.n	800c20e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c1f4:	79fb      	ldrb	r3, [r7, #7]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d007      	beq.n	800c20a <find_volume+0x82>
 800c1fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1fe:	f003 0304 	and.w	r3, r3, #4
 800c202:	2b00      	cmp	r3, #0
 800c204:	d001      	beq.n	800c20a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c206:	230a      	movs	r3, #10
 800c208:	e200      	b.n	800c60c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800c20a:	2300      	movs	r3, #0
 800c20c:	e1fe      	b.n	800c60c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c210:	2200      	movs	r2, #0
 800c212:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c216:	b2da      	uxtb	r2, r3
 800c218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21e:	785b      	ldrb	r3, [r3, #1]
 800c220:	4618      	mov	r0, r3
 800c222:	f7fe febb 	bl	800af9c <disk_initialize>
 800c226:	4603      	mov	r3, r0
 800c228:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c22c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c230:	f003 0301 	and.w	r3, r3, #1
 800c234:	2b00      	cmp	r3, #0
 800c236:	d001      	beq.n	800c23c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c238:	2303      	movs	r3, #3
 800c23a:	e1e7      	b.n	800c60c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c23c:	79fb      	ldrb	r3, [r7, #7]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d007      	beq.n	800c252 <find_volume+0xca>
 800c242:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c246:	f003 0304 	and.w	r3, r3, #4
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d001      	beq.n	800c252 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c24e:	230a      	movs	r3, #10
 800c250:	e1dc      	b.n	800c60c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c252:	2300      	movs	r3, #0
 800c254:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c256:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c258:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c25a:	f7ff ff3f 	bl	800c0dc <check_fs>
 800c25e:	4603      	mov	r3, r0
 800c260:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c264:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c268:	2b02      	cmp	r3, #2
 800c26a:	d14b      	bne.n	800c304 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c26c:	2300      	movs	r3, #0
 800c26e:	643b      	str	r3, [r7, #64]	; 0x40
 800c270:	e01f      	b.n	800c2b2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c274:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c27a:	011b      	lsls	r3, r3, #4
 800c27c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c280:	4413      	add	r3, r2
 800c282:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c286:	3304      	adds	r3, #4
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d006      	beq.n	800c29c <find_volume+0x114>
 800c28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c290:	3308      	adds	r3, #8
 800c292:	4618      	mov	r0, r3
 800c294:	f7fe ff00 	bl	800b098 <ld_dword>
 800c298:	4602      	mov	r2, r0
 800c29a:	e000      	b.n	800c29e <find_volume+0x116>
 800c29c:	2200      	movs	r2, #0
 800c29e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c2a6:	440b      	add	r3, r1
 800c2a8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c2ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	643b      	str	r3, [r7, #64]	; 0x40
 800c2b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2b4:	2b03      	cmp	r3, #3
 800c2b6:	d9dc      	bls.n	800c272 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c2bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d002      	beq.n	800c2c8 <find_volume+0x140>
 800c2c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c2c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c2d0:	4413      	add	r3, r2
 800c2d2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c2d6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c2d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d005      	beq.n	800c2ea <find_volume+0x162>
 800c2de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c2e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c2e2:	f7ff fefb 	bl	800c0dc <check_fs>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	e000      	b.n	800c2ec <find_volume+0x164>
 800c2ea:	2303      	movs	r3, #3
 800c2ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c2f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d905      	bls.n	800c304 <find_volume+0x17c>
 800c2f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	643b      	str	r3, [r7, #64]	; 0x40
 800c2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c300:	2b03      	cmp	r3, #3
 800c302:	d9e1      	bls.n	800c2c8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c304:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c308:	2b04      	cmp	r3, #4
 800c30a:	d101      	bne.n	800c310 <find_volume+0x188>
 800c30c:	2301      	movs	r3, #1
 800c30e:	e17d      	b.n	800c60c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c310:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c314:	2b01      	cmp	r3, #1
 800c316:	d901      	bls.n	800c31c <find_volume+0x194>
 800c318:	230d      	movs	r3, #13
 800c31a:	e177      	b.n	800c60c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31e:	3330      	adds	r3, #48	; 0x30
 800c320:	330b      	adds	r3, #11
 800c322:	4618      	mov	r0, r3
 800c324:	f7fe fea0 	bl	800b068 <ld_word>
 800c328:	4603      	mov	r3, r0
 800c32a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c32e:	d001      	beq.n	800c334 <find_volume+0x1ac>
 800c330:	230d      	movs	r3, #13
 800c332:	e16b      	b.n	800c60c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c336:	3330      	adds	r3, #48	; 0x30
 800c338:	3316      	adds	r3, #22
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fe fe94 	bl	800b068 <ld_word>
 800c340:	4603      	mov	r3, r0
 800c342:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c346:	2b00      	cmp	r3, #0
 800c348:	d106      	bne.n	800c358 <find_volume+0x1d0>
 800c34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34c:	3330      	adds	r3, #48	; 0x30
 800c34e:	3324      	adds	r3, #36	; 0x24
 800c350:	4618      	mov	r0, r3
 800c352:	f7fe fea1 	bl	800b098 <ld_dword>
 800c356:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c35c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c360:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c366:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36a:	789b      	ldrb	r3, [r3, #2]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d005      	beq.n	800c37c <find_volume+0x1f4>
 800c370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c372:	789b      	ldrb	r3, [r3, #2]
 800c374:	2b02      	cmp	r3, #2
 800c376:	d001      	beq.n	800c37c <find_volume+0x1f4>
 800c378:	230d      	movs	r3, #13
 800c37a:	e147      	b.n	800c60c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37e:	789b      	ldrb	r3, [r3, #2]
 800c380:	461a      	mov	r2, r3
 800c382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c384:	fb02 f303 	mul.w	r3, r2, r3
 800c388:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c390:	b29a      	uxth	r2, r3
 800c392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c394:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c398:	895b      	ldrh	r3, [r3, #10]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d008      	beq.n	800c3b0 <find_volume+0x228>
 800c39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a0:	895b      	ldrh	r3, [r3, #10]
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a6:	895b      	ldrh	r3, [r3, #10]
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	4013      	ands	r3, r2
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d001      	beq.n	800c3b4 <find_volume+0x22c>
 800c3b0:	230d      	movs	r3, #13
 800c3b2:	e12b      	b.n	800c60c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b6:	3330      	adds	r3, #48	; 0x30
 800c3b8:	3311      	adds	r3, #17
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fe fe54 	bl	800b068 <ld_word>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ca:	891b      	ldrh	r3, [r3, #8]
 800c3cc:	f003 030f 	and.w	r3, r3, #15
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d001      	beq.n	800c3da <find_volume+0x252>
 800c3d6:	230d      	movs	r3, #13
 800c3d8:	e118      	b.n	800c60c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3dc:	3330      	adds	r3, #48	; 0x30
 800c3de:	3313      	adds	r3, #19
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7fe fe41 	bl	800b068 <ld_word>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c3ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d106      	bne.n	800c3fe <find_volume+0x276>
 800c3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f2:	3330      	adds	r3, #48	; 0x30
 800c3f4:	3320      	adds	r3, #32
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7fe fe4e 	bl	800b098 <ld_dword>
 800c3fc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c400:	3330      	adds	r3, #48	; 0x30
 800c402:	330e      	adds	r3, #14
 800c404:	4618      	mov	r0, r3
 800c406:	f7fe fe2f 	bl	800b068 <ld_word>
 800c40a:	4603      	mov	r3, r0
 800c40c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c40e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c410:	2b00      	cmp	r3, #0
 800c412:	d101      	bne.n	800c418 <find_volume+0x290>
 800c414:	230d      	movs	r3, #13
 800c416:	e0f9      	b.n	800c60c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c418:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c41a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c41c:	4413      	add	r3, r2
 800c41e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c420:	8912      	ldrh	r2, [r2, #8]
 800c422:	0912      	lsrs	r2, r2, #4
 800c424:	b292      	uxth	r2, r2
 800c426:	4413      	add	r3, r2
 800c428:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c42a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42e:	429a      	cmp	r2, r3
 800c430:	d201      	bcs.n	800c436 <find_volume+0x2ae>
 800c432:	230d      	movs	r3, #13
 800c434:	e0ea      	b.n	800c60c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c436:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43a:	1ad3      	subs	r3, r2, r3
 800c43c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c43e:	8952      	ldrh	r2, [r2, #10]
 800c440:	fbb3 f3f2 	udiv	r3, r3, r2
 800c444:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d103      	bne.n	800c454 <find_volume+0x2cc>
 800c44c:	230d      	movs	r3, #13
 800c44e:	e0dd      	b.n	800c60c <find_volume+0x484>
 800c450:	200002e0 	.word	0x200002e0
		fmt = FS_FAT32;
 800c454:	2303      	movs	r3, #3
 800c456:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c460:	4293      	cmp	r3, r2
 800c462:	d802      	bhi.n	800c46a <find_volume+0x2e2>
 800c464:	2302      	movs	r3, #2
 800c466:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c470:	4293      	cmp	r3, r2
 800c472:	d802      	bhi.n	800c47a <find_volume+0x2f2>
 800c474:	2301      	movs	r3, #1
 800c476:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47c:	1c9a      	adds	r2, r3, #2
 800c47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c480:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c484:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c486:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c488:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c48a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c48c:	441a      	add	r2, r3
 800c48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c490:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c492:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c496:	441a      	add	r2, r3
 800c498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800c49c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c4a0:	2b03      	cmp	r3, #3
 800c4a2:	d11e      	bne.n	800c4e2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a6:	3330      	adds	r3, #48	; 0x30
 800c4a8:	332a      	adds	r3, #42	; 0x2a
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fe fddc 	bl	800b068 <ld_word>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d001      	beq.n	800c4ba <find_volume+0x332>
 800c4b6:	230d      	movs	r3, #13
 800c4b8:	e0a8      	b.n	800c60c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4bc:	891b      	ldrh	r3, [r3, #8]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d001      	beq.n	800c4c6 <find_volume+0x33e>
 800c4c2:	230d      	movs	r3, #13
 800c4c4:	e0a2      	b.n	800c60c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c8:	3330      	adds	r3, #48	; 0x30
 800c4ca:	332c      	adds	r3, #44	; 0x2c
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7fe fde3 	bl	800b098 <ld_dword>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4da:	695b      	ldr	r3, [r3, #20]
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	647b      	str	r3, [r7, #68]	; 0x44
 800c4e0:	e01f      	b.n	800c522 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e4:	891b      	ldrh	r3, [r3, #8]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d101      	bne.n	800c4ee <find_volume+0x366>
 800c4ea:	230d      	movs	r3, #13
 800c4ec:	e08e      	b.n	800c60c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f0:	6a1a      	ldr	r2, [r3, #32]
 800c4f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4f4:	441a      	add	r2, r3
 800c4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c4fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c4fe:	2b02      	cmp	r3, #2
 800c500:	d103      	bne.n	800c50a <find_volume+0x382>
 800c502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c504:	695b      	ldr	r3, [r3, #20]
 800c506:	005b      	lsls	r3, r3, #1
 800c508:	e00a      	b.n	800c520 <find_volume+0x398>
 800c50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50c:	695a      	ldr	r2, [r3, #20]
 800c50e:	4613      	mov	r3, r2
 800c510:	005b      	lsls	r3, r3, #1
 800c512:	4413      	add	r3, r2
 800c514:	085a      	lsrs	r2, r3, #1
 800c516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c518:	695b      	ldr	r3, [r3, #20]
 800c51a:	f003 0301 	and.w	r3, r3, #1
 800c51e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c520:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c524:	699a      	ldr	r2, [r3, #24]
 800c526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c528:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c52c:	0a5b      	lsrs	r3, r3, #9
 800c52e:	429a      	cmp	r2, r3
 800c530:	d201      	bcs.n	800c536 <find_volume+0x3ae>
 800c532:	230d      	movs	r3, #13
 800c534:	e06a      	b.n	800c60c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c538:	f04f 32ff 	mov.w	r2, #4294967295
 800c53c:	611a      	str	r2, [r3, #16]
 800c53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c540:	691a      	ldr	r2, [r3, #16]
 800c542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c544:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c548:	2280      	movs	r2, #128	; 0x80
 800c54a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c54c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c550:	2b03      	cmp	r3, #3
 800c552:	d149      	bne.n	800c5e8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c556:	3330      	adds	r3, #48	; 0x30
 800c558:	3330      	adds	r3, #48	; 0x30
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7fe fd84 	bl	800b068 <ld_word>
 800c560:	4603      	mov	r3, r0
 800c562:	2b01      	cmp	r3, #1
 800c564:	d140      	bne.n	800c5e8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c568:	3301      	adds	r3, #1
 800c56a:	4619      	mov	r1, r3
 800c56c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c56e:	f7fe ff8b 	bl	800b488 <move_window>
 800c572:	4603      	mov	r3, r0
 800c574:	2b00      	cmp	r3, #0
 800c576:	d137      	bne.n	800c5e8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800c578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57a:	2200      	movs	r2, #0
 800c57c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c580:	3330      	adds	r3, #48	; 0x30
 800c582:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c586:	4618      	mov	r0, r3
 800c588:	f7fe fd6e 	bl	800b068 <ld_word>
 800c58c:	4603      	mov	r3, r0
 800c58e:	461a      	mov	r2, r3
 800c590:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c594:	429a      	cmp	r2, r3
 800c596:	d127      	bne.n	800c5e8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59a:	3330      	adds	r3, #48	; 0x30
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7fe fd7b 	bl	800b098 <ld_dword>
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	4b1b      	ldr	r3, [pc, #108]	; (800c614 <find_volume+0x48c>)
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d11e      	bne.n	800c5e8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ac:	3330      	adds	r3, #48	; 0x30
 800c5ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7fe fd70 	bl	800b098 <ld_dword>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	4b17      	ldr	r3, [pc, #92]	; (800c618 <find_volume+0x490>)
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d113      	bne.n	800c5e8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c2:	3330      	adds	r3, #48	; 0x30
 800c5c4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7fe fd65 	bl	800b098 <ld_dword>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d6:	3330      	adds	r3, #48	; 0x30
 800c5d8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fe fd5b 	bl	800b098 <ld_dword>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c5ee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c5f0:	4b0a      	ldr	r3, [pc, #40]	; (800c61c <find_volume+0x494>)
 800c5f2:	881b      	ldrh	r3, [r3, #0]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	b29a      	uxth	r2, r3
 800c5f8:	4b08      	ldr	r3, [pc, #32]	; (800c61c <find_volume+0x494>)
 800c5fa:	801a      	strh	r2, [r3, #0]
 800c5fc:	4b07      	ldr	r3, [pc, #28]	; (800c61c <find_volume+0x494>)
 800c5fe:	881a      	ldrh	r2, [r3, #0]
 800c600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c602:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c604:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c606:	f7fe fed7 	bl	800b3b8 <clear_lock>
#endif
	return FR_OK;
 800c60a:	2300      	movs	r3, #0
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3758      	adds	r7, #88	; 0x58
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	41615252 	.word	0x41615252
 800c618:	61417272 	.word	0x61417272
 800c61c:	200002e4 	.word	0x200002e4

0800c620 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c62a:	2309      	movs	r3, #9
 800c62c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d01c      	beq.n	800c66e <validate+0x4e>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d018      	beq.n	800c66e <validate+0x4e>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d013      	beq.n	800c66e <validate+0x4e>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	889a      	ldrh	r2, [r3, #4]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	88db      	ldrh	r3, [r3, #6]
 800c650:	429a      	cmp	r2, r3
 800c652:	d10c      	bne.n	800c66e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	785b      	ldrb	r3, [r3, #1]
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7fe fc84 	bl	800af68 <disk_status>
 800c660:	4603      	mov	r3, r0
 800c662:	f003 0301 	and.w	r3, r3, #1
 800c666:	2b00      	cmp	r3, #0
 800c668:	d101      	bne.n	800c66e <validate+0x4e>
			res = FR_OK;
 800c66a:	2300      	movs	r3, #0
 800c66c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c66e:	7bfb      	ldrb	r3, [r7, #15]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d102      	bne.n	800c67a <validate+0x5a>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	e000      	b.n	800c67c <validate+0x5c>
 800c67a:	2300      	movs	r3, #0
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	6013      	str	r3, [r2, #0]
	return res;
 800c680:	7bfb      	ldrb	r3, [r7, #15]
}
 800c682:	4618      	mov	r0, r3
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
	...

0800c68c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b088      	sub	sp, #32
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	4613      	mov	r3, r2
 800c698:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c69e:	f107 0310 	add.w	r3, r7, #16
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7ff fcd5 	bl	800c052 <get_ldnumber>
 800c6a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	da01      	bge.n	800c6b4 <f_mount+0x28>
 800c6b0:	230b      	movs	r3, #11
 800c6b2:	e02b      	b.n	800c70c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c6b4:	4a17      	ldr	r2, [pc, #92]	; (800c714 <f_mount+0x88>)
 800c6b6:	69fb      	ldr	r3, [r7, #28]
 800c6b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c6be:	69bb      	ldr	r3, [r7, #24]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d005      	beq.n	800c6d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c6c4:	69b8      	ldr	r0, [r7, #24]
 800c6c6:	f7fe fe77 	bl	800b3b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d002      	beq.n	800c6dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c6dc:	68fa      	ldr	r2, [r7, #12]
 800c6de:	490d      	ldr	r1, [pc, #52]	; (800c714 <f_mount+0x88>)
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d002      	beq.n	800c6f2 <f_mount+0x66>
 800c6ec:	79fb      	ldrb	r3, [r7, #7]
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d001      	beq.n	800c6f6 <f_mount+0x6a>
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	e00a      	b.n	800c70c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c6f6:	f107 010c 	add.w	r1, r7, #12
 800c6fa:	f107 0308 	add.w	r3, r7, #8
 800c6fe:	2200      	movs	r2, #0
 800c700:	4618      	mov	r0, r3
 800c702:	f7ff fd41 	bl	800c188 <find_volume>
 800c706:	4603      	mov	r3, r0
 800c708:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c70a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3720      	adds	r7, #32
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	200002e0 	.word	0x200002e0

0800c718 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b086      	sub	sp, #24
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d101      	bne.n	800c72c <f_opendir+0x14>
 800c728:	2309      	movs	r3, #9
 800c72a:	e064      	b.n	800c7f6 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c730:	f107 010c 	add.w	r1, r7, #12
 800c734:	463b      	mov	r3, r7
 800c736:	2200      	movs	r2, #0
 800c738:	4618      	mov	r0, r3
 800c73a:	f7ff fd25 	bl	800c188 <find_volume>
 800c73e:	4603      	mov	r3, r0
 800c740:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c742:	7dfb      	ldrb	r3, [r7, #23]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d14f      	bne.n	800c7e8 <f_opendir+0xd0>
		obj->fs = fs;
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	4619      	mov	r1, r3
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f7ff fc0c 	bl	800bf70 <follow_path>
 800c758:	4603      	mov	r3, r0
 800c75a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c75c:	7dfb      	ldrb	r3, [r7, #23]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d13d      	bne.n	800c7de <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c768:	b25b      	sxtb	r3, r3
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	db12      	blt.n	800c794 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	799b      	ldrb	r3, [r3, #6]
 800c772:	f003 0310 	and.w	r3, r3, #16
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00a      	beq.n	800c790 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c77a:	68fa      	ldr	r2, [r7, #12]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6a1b      	ldr	r3, [r3, #32]
 800c780:	4619      	mov	r1, r3
 800c782:	4610      	mov	r0, r2
 800c784:	f7ff fa30 	bl	800bbe8 <ld_clust>
 800c788:	4602      	mov	r2, r0
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	609a      	str	r2, [r3, #8]
 800c78e:	e001      	b.n	800c794 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c790:	2305      	movs	r3, #5
 800c792:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c794:	7dfb      	ldrb	r3, [r7, #23]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d121      	bne.n	800c7de <f_opendir+0xc6>
				obj->id = fs->id;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	88da      	ldrh	r2, [r3, #6]
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c7a2:	2100      	movs	r1, #0
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7ff f8df 	bl	800b968 <dir_sdi>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c7ae:	7dfb      	ldrb	r3, [r7, #23]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d114      	bne.n	800c7de <f_opendir+0xc6>
					if (obj->sclust) {
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d00d      	beq.n	800c7d8 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c7bc:	2100      	movs	r1, #0
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f7fe fd30 	bl	800b224 <inc_lock>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	691b      	ldr	r3, [r3, #16]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d105      	bne.n	800c7de <f_opendir+0xc6>
 800c7d2:	2312      	movs	r3, #18
 800c7d4:	75fb      	strb	r3, [r7, #23]
 800c7d6:	e002      	b.n	800c7de <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c7de:	7dfb      	ldrb	r3, [r7, #23]
 800c7e0:	2b04      	cmp	r3, #4
 800c7e2:	d101      	bne.n	800c7e8 <f_opendir+0xd0>
 800c7e4:	2305      	movs	r3, #5
 800c7e6:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c7e8:	7dfb      	ldrb	r3, [r7, #23]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d002      	beq.n	800c7f4 <f_opendir+0xdc>
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c7f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3718      	adds	r7, #24
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b084      	sub	sp, #16
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f107 0208 	add.w	r2, r7, #8
 800c80c:	4611      	mov	r1, r2
 800c80e:	4618      	mov	r0, r3
 800c810:	f7ff ff06 	bl	800c620 <validate>
 800c814:	4603      	mov	r3, r0
 800c816:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c818:	7bfb      	ldrb	r3, [r7, #15]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d110      	bne.n	800c840 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	691b      	ldr	r3, [r3, #16]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d006      	beq.n	800c834 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	691b      	ldr	r3, [r3, #16]
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7fe fd88 	bl	800b340 <dec_lock>
 800c830:	4603      	mov	r3, r0
 800c832:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800c834:	7bfb      	ldrb	r3, [r7, #15]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d102      	bne.n	800c840 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2200      	movs	r2, #0
 800c83e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800c840:	7bfb      	ldrb	r3, [r7, #15]
}
 800c842:	4618      	mov	r0, r3
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b084      	sub	sp, #16
 800c84e:	af00      	add	r7, sp, #0
 800c850:	6078      	str	r0, [r7, #4]
 800c852:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f107 0208 	add.w	r2, r7, #8
 800c85a:	4611      	mov	r1, r2
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7ff fedf 	bl	800c620 <validate>
 800c862:	4603      	mov	r3, r0
 800c864:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c866:	7bfb      	ldrb	r3, [r7, #15]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d126      	bne.n	800c8ba <f_readdir+0x70>
		if (!fno) {
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d106      	bne.n	800c880 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800c872:	2100      	movs	r1, #0
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f7ff f877 	bl	800b968 <dir_sdi>
 800c87a:	4603      	mov	r3, r0
 800c87c:	73fb      	strb	r3, [r7, #15]
 800c87e:	e01c      	b.n	800c8ba <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800c880:	2100      	movs	r1, #0
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f7ff f9cf 	bl	800bc26 <dir_read>
 800c888:	4603      	mov	r3, r0
 800c88a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800c88c:	7bfb      	ldrb	r3, [r7, #15]
 800c88e:	2b04      	cmp	r3, #4
 800c890:	d101      	bne.n	800c896 <f_readdir+0x4c>
 800c892:	2300      	movs	r3, #0
 800c894:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800c896:	7bfb      	ldrb	r3, [r7, #15]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d10e      	bne.n	800c8ba <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800c89c:	6839      	ldr	r1, [r7, #0]
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f7ff fa73 	bl	800bd8a <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800c8a4:	2100      	movs	r1, #0
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f7ff f8d9 	bl	800ba5e <dir_next>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800c8b0:	7bfb      	ldrb	r3, [r7, #15]
 800c8b2:	2b04      	cmp	r3, #4
 800c8b4:	d101      	bne.n	800c8ba <f_readdir+0x70>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800c8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3710      	adds	r7, #16
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b087      	sub	sp, #28
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	4613      	mov	r3, r2
 800c8d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c8da:	4b1f      	ldr	r3, [pc, #124]	; (800c958 <FATFS_LinkDriverEx+0x94>)
 800c8dc:	7a5b      	ldrb	r3, [r3, #9]
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d131      	bne.n	800c948 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c8e4:	4b1c      	ldr	r3, [pc, #112]	; (800c958 <FATFS_LinkDriverEx+0x94>)
 800c8e6:	7a5b      	ldrb	r3, [r3, #9]
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	4b1a      	ldr	r3, [pc, #104]	; (800c958 <FATFS_LinkDriverEx+0x94>)
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c8f2:	4b19      	ldr	r3, [pc, #100]	; (800c958 <FATFS_LinkDriverEx+0x94>)
 800c8f4:	7a5b      	ldrb	r3, [r3, #9]
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	4a17      	ldr	r2, [pc, #92]	; (800c958 <FATFS_LinkDriverEx+0x94>)
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	4413      	add	r3, r2
 800c8fe:	68fa      	ldr	r2, [r7, #12]
 800c900:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c902:	4b15      	ldr	r3, [pc, #84]	; (800c958 <FATFS_LinkDriverEx+0x94>)
 800c904:	7a5b      	ldrb	r3, [r3, #9]
 800c906:	b2db      	uxtb	r3, r3
 800c908:	461a      	mov	r2, r3
 800c90a:	4b13      	ldr	r3, [pc, #76]	; (800c958 <FATFS_LinkDriverEx+0x94>)
 800c90c:	4413      	add	r3, r2
 800c90e:	79fa      	ldrb	r2, [r7, #7]
 800c910:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c912:	4b11      	ldr	r3, [pc, #68]	; (800c958 <FATFS_LinkDriverEx+0x94>)
 800c914:	7a5b      	ldrb	r3, [r3, #9]
 800c916:	b2db      	uxtb	r3, r3
 800c918:	1c5a      	adds	r2, r3, #1
 800c91a:	b2d1      	uxtb	r1, r2
 800c91c:	4a0e      	ldr	r2, [pc, #56]	; (800c958 <FATFS_LinkDriverEx+0x94>)
 800c91e:	7251      	strb	r1, [r2, #9]
 800c920:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c922:	7dbb      	ldrb	r3, [r7, #22]
 800c924:	3330      	adds	r3, #48	; 0x30
 800c926:	b2da      	uxtb	r2, r3
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	3301      	adds	r3, #1
 800c930:	223a      	movs	r2, #58	; 0x3a
 800c932:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	3302      	adds	r3, #2
 800c938:	222f      	movs	r2, #47	; 0x2f
 800c93a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	3303      	adds	r3, #3
 800c940:	2200      	movs	r2, #0
 800c942:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c944:	2300      	movs	r3, #0
 800c946:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c948:	7dfb      	ldrb	r3, [r7, #23]
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	371c      	adds	r7, #28
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr
 800c956:	bf00      	nop
 800c958:	20000308 	.word	0x20000308

0800c95c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c966:	2200      	movs	r2, #0
 800c968:	6839      	ldr	r1, [r7, #0]
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f7ff ffaa 	bl	800c8c4 <FATFS_LinkDriverEx>
 800c970:	4603      	mov	r3, r0
}
 800c972:	4618      	mov	r0, r3
 800c974:	3708      	adds	r7, #8
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
	...

0800c97c <__errno>:
 800c97c:	4b01      	ldr	r3, [pc, #4]	; (800c984 <__errno+0x8>)
 800c97e:	6818      	ldr	r0, [r3, #0]
 800c980:	4770      	bx	lr
 800c982:	bf00      	nop
 800c984:	20000040 	.word	0x20000040

0800c988 <__libc_init_array>:
 800c988:	b570      	push	{r4, r5, r6, lr}
 800c98a:	4e0d      	ldr	r6, [pc, #52]	; (800c9c0 <__libc_init_array+0x38>)
 800c98c:	4c0d      	ldr	r4, [pc, #52]	; (800c9c4 <__libc_init_array+0x3c>)
 800c98e:	1ba4      	subs	r4, r4, r6
 800c990:	10a4      	asrs	r4, r4, #2
 800c992:	2500      	movs	r5, #0
 800c994:	42a5      	cmp	r5, r4
 800c996:	d109      	bne.n	800c9ac <__libc_init_array+0x24>
 800c998:	4e0b      	ldr	r6, [pc, #44]	; (800c9c8 <__libc_init_array+0x40>)
 800c99a:	4c0c      	ldr	r4, [pc, #48]	; (800c9cc <__libc_init_array+0x44>)
 800c99c:	f001 f8c8 	bl	800db30 <_init>
 800c9a0:	1ba4      	subs	r4, r4, r6
 800c9a2:	10a4      	asrs	r4, r4, #2
 800c9a4:	2500      	movs	r5, #0
 800c9a6:	42a5      	cmp	r5, r4
 800c9a8:	d105      	bne.n	800c9b6 <__libc_init_array+0x2e>
 800c9aa:	bd70      	pop	{r4, r5, r6, pc}
 800c9ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c9b0:	4798      	blx	r3
 800c9b2:	3501      	adds	r5, #1
 800c9b4:	e7ee      	b.n	800c994 <__libc_init_array+0xc>
 800c9b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c9ba:	4798      	blx	r3
 800c9bc:	3501      	adds	r5, #1
 800c9be:	e7f2      	b.n	800c9a6 <__libc_init_array+0x1e>
 800c9c0:	0800f9f0 	.word	0x0800f9f0
 800c9c4:	0800f9f0 	.word	0x0800f9f0
 800c9c8:	0800f9f0 	.word	0x0800f9f0
 800c9cc:	0800f9f4 	.word	0x0800f9f4

0800c9d0 <memset>:
 800c9d0:	4402      	add	r2, r0
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d100      	bne.n	800c9da <memset+0xa>
 800c9d8:	4770      	bx	lr
 800c9da:	f803 1b01 	strb.w	r1, [r3], #1
 800c9de:	e7f9      	b.n	800c9d4 <memset+0x4>

0800c9e0 <iprintf>:
 800c9e0:	b40f      	push	{r0, r1, r2, r3}
 800c9e2:	4b0a      	ldr	r3, [pc, #40]	; (800ca0c <iprintf+0x2c>)
 800c9e4:	b513      	push	{r0, r1, r4, lr}
 800c9e6:	681c      	ldr	r4, [r3, #0]
 800c9e8:	b124      	cbz	r4, 800c9f4 <iprintf+0x14>
 800c9ea:	69a3      	ldr	r3, [r4, #24]
 800c9ec:	b913      	cbnz	r3, 800c9f4 <iprintf+0x14>
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f000 f86e 	bl	800cad0 <__sinit>
 800c9f4:	ab05      	add	r3, sp, #20
 800c9f6:	9a04      	ldr	r2, [sp, #16]
 800c9f8:	68a1      	ldr	r1, [r4, #8]
 800c9fa:	9301      	str	r3, [sp, #4]
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	f000 fac7 	bl	800cf90 <_vfiprintf_r>
 800ca02:	b002      	add	sp, #8
 800ca04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca08:	b004      	add	sp, #16
 800ca0a:	4770      	bx	lr
 800ca0c:	20000040 	.word	0x20000040

0800ca10 <siprintf>:
 800ca10:	b40e      	push	{r1, r2, r3}
 800ca12:	b500      	push	{lr}
 800ca14:	b09c      	sub	sp, #112	; 0x70
 800ca16:	ab1d      	add	r3, sp, #116	; 0x74
 800ca18:	9002      	str	r0, [sp, #8]
 800ca1a:	9006      	str	r0, [sp, #24]
 800ca1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca20:	4809      	ldr	r0, [pc, #36]	; (800ca48 <siprintf+0x38>)
 800ca22:	9107      	str	r1, [sp, #28]
 800ca24:	9104      	str	r1, [sp, #16]
 800ca26:	4909      	ldr	r1, [pc, #36]	; (800ca4c <siprintf+0x3c>)
 800ca28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca2c:	9105      	str	r1, [sp, #20]
 800ca2e:	6800      	ldr	r0, [r0, #0]
 800ca30:	9301      	str	r3, [sp, #4]
 800ca32:	a902      	add	r1, sp, #8
 800ca34:	f000 f98a 	bl	800cd4c <_svfiprintf_r>
 800ca38:	9b02      	ldr	r3, [sp, #8]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	701a      	strb	r2, [r3, #0]
 800ca3e:	b01c      	add	sp, #112	; 0x70
 800ca40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca44:	b003      	add	sp, #12
 800ca46:	4770      	bx	lr
 800ca48:	20000040 	.word	0x20000040
 800ca4c:	ffff0208 	.word	0xffff0208

0800ca50 <std>:
 800ca50:	2300      	movs	r3, #0
 800ca52:	b510      	push	{r4, lr}
 800ca54:	4604      	mov	r4, r0
 800ca56:	e9c0 3300 	strd	r3, r3, [r0]
 800ca5a:	6083      	str	r3, [r0, #8]
 800ca5c:	8181      	strh	r1, [r0, #12]
 800ca5e:	6643      	str	r3, [r0, #100]	; 0x64
 800ca60:	81c2      	strh	r2, [r0, #14]
 800ca62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca66:	6183      	str	r3, [r0, #24]
 800ca68:	4619      	mov	r1, r3
 800ca6a:	2208      	movs	r2, #8
 800ca6c:	305c      	adds	r0, #92	; 0x5c
 800ca6e:	f7ff ffaf 	bl	800c9d0 <memset>
 800ca72:	4b05      	ldr	r3, [pc, #20]	; (800ca88 <std+0x38>)
 800ca74:	6263      	str	r3, [r4, #36]	; 0x24
 800ca76:	4b05      	ldr	r3, [pc, #20]	; (800ca8c <std+0x3c>)
 800ca78:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca7a:	4b05      	ldr	r3, [pc, #20]	; (800ca90 <std+0x40>)
 800ca7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca7e:	4b05      	ldr	r3, [pc, #20]	; (800ca94 <std+0x44>)
 800ca80:	6224      	str	r4, [r4, #32]
 800ca82:	6323      	str	r3, [r4, #48]	; 0x30
 800ca84:	bd10      	pop	{r4, pc}
 800ca86:	bf00      	nop
 800ca88:	0800d4ed 	.word	0x0800d4ed
 800ca8c:	0800d50f 	.word	0x0800d50f
 800ca90:	0800d547 	.word	0x0800d547
 800ca94:	0800d56b 	.word	0x0800d56b

0800ca98 <_cleanup_r>:
 800ca98:	4901      	ldr	r1, [pc, #4]	; (800caa0 <_cleanup_r+0x8>)
 800ca9a:	f000 b885 	b.w	800cba8 <_fwalk_reent>
 800ca9e:	bf00      	nop
 800caa0:	0800d845 	.word	0x0800d845

0800caa4 <__sfmoreglue>:
 800caa4:	b570      	push	{r4, r5, r6, lr}
 800caa6:	1e4a      	subs	r2, r1, #1
 800caa8:	2568      	movs	r5, #104	; 0x68
 800caaa:	4355      	muls	r5, r2
 800caac:	460e      	mov	r6, r1
 800caae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cab2:	f000 f897 	bl	800cbe4 <_malloc_r>
 800cab6:	4604      	mov	r4, r0
 800cab8:	b140      	cbz	r0, 800cacc <__sfmoreglue+0x28>
 800caba:	2100      	movs	r1, #0
 800cabc:	e9c0 1600 	strd	r1, r6, [r0]
 800cac0:	300c      	adds	r0, #12
 800cac2:	60a0      	str	r0, [r4, #8]
 800cac4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cac8:	f7ff ff82 	bl	800c9d0 <memset>
 800cacc:	4620      	mov	r0, r4
 800cace:	bd70      	pop	{r4, r5, r6, pc}

0800cad0 <__sinit>:
 800cad0:	6983      	ldr	r3, [r0, #24]
 800cad2:	b510      	push	{r4, lr}
 800cad4:	4604      	mov	r4, r0
 800cad6:	bb33      	cbnz	r3, 800cb26 <__sinit+0x56>
 800cad8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cadc:	6503      	str	r3, [r0, #80]	; 0x50
 800cade:	4b12      	ldr	r3, [pc, #72]	; (800cb28 <__sinit+0x58>)
 800cae0:	4a12      	ldr	r2, [pc, #72]	; (800cb2c <__sinit+0x5c>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	6282      	str	r2, [r0, #40]	; 0x28
 800cae6:	4298      	cmp	r0, r3
 800cae8:	bf04      	itt	eq
 800caea:	2301      	moveq	r3, #1
 800caec:	6183      	streq	r3, [r0, #24]
 800caee:	f000 f81f 	bl	800cb30 <__sfp>
 800caf2:	6060      	str	r0, [r4, #4]
 800caf4:	4620      	mov	r0, r4
 800caf6:	f000 f81b 	bl	800cb30 <__sfp>
 800cafa:	60a0      	str	r0, [r4, #8]
 800cafc:	4620      	mov	r0, r4
 800cafe:	f000 f817 	bl	800cb30 <__sfp>
 800cb02:	2200      	movs	r2, #0
 800cb04:	60e0      	str	r0, [r4, #12]
 800cb06:	2104      	movs	r1, #4
 800cb08:	6860      	ldr	r0, [r4, #4]
 800cb0a:	f7ff ffa1 	bl	800ca50 <std>
 800cb0e:	2201      	movs	r2, #1
 800cb10:	2109      	movs	r1, #9
 800cb12:	68a0      	ldr	r0, [r4, #8]
 800cb14:	f7ff ff9c 	bl	800ca50 <std>
 800cb18:	2202      	movs	r2, #2
 800cb1a:	2112      	movs	r1, #18
 800cb1c:	68e0      	ldr	r0, [r4, #12]
 800cb1e:	f7ff ff97 	bl	800ca50 <std>
 800cb22:	2301      	movs	r3, #1
 800cb24:	61a3      	str	r3, [r4, #24]
 800cb26:	bd10      	pop	{r4, pc}
 800cb28:	0800f950 	.word	0x0800f950
 800cb2c:	0800ca99 	.word	0x0800ca99

0800cb30 <__sfp>:
 800cb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb32:	4b1b      	ldr	r3, [pc, #108]	; (800cba0 <__sfp+0x70>)
 800cb34:	681e      	ldr	r6, [r3, #0]
 800cb36:	69b3      	ldr	r3, [r6, #24]
 800cb38:	4607      	mov	r7, r0
 800cb3a:	b913      	cbnz	r3, 800cb42 <__sfp+0x12>
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	f7ff ffc7 	bl	800cad0 <__sinit>
 800cb42:	3648      	adds	r6, #72	; 0x48
 800cb44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	d503      	bpl.n	800cb54 <__sfp+0x24>
 800cb4c:	6833      	ldr	r3, [r6, #0]
 800cb4e:	b133      	cbz	r3, 800cb5e <__sfp+0x2e>
 800cb50:	6836      	ldr	r6, [r6, #0]
 800cb52:	e7f7      	b.n	800cb44 <__sfp+0x14>
 800cb54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cb58:	b16d      	cbz	r5, 800cb76 <__sfp+0x46>
 800cb5a:	3468      	adds	r4, #104	; 0x68
 800cb5c:	e7f4      	b.n	800cb48 <__sfp+0x18>
 800cb5e:	2104      	movs	r1, #4
 800cb60:	4638      	mov	r0, r7
 800cb62:	f7ff ff9f 	bl	800caa4 <__sfmoreglue>
 800cb66:	6030      	str	r0, [r6, #0]
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d1f1      	bne.n	800cb50 <__sfp+0x20>
 800cb6c:	230c      	movs	r3, #12
 800cb6e:	603b      	str	r3, [r7, #0]
 800cb70:	4604      	mov	r4, r0
 800cb72:	4620      	mov	r0, r4
 800cb74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb76:	4b0b      	ldr	r3, [pc, #44]	; (800cba4 <__sfp+0x74>)
 800cb78:	6665      	str	r5, [r4, #100]	; 0x64
 800cb7a:	e9c4 5500 	strd	r5, r5, [r4]
 800cb7e:	60a5      	str	r5, [r4, #8]
 800cb80:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cb84:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cb88:	2208      	movs	r2, #8
 800cb8a:	4629      	mov	r1, r5
 800cb8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cb90:	f7ff ff1e 	bl	800c9d0 <memset>
 800cb94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cb98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cb9c:	e7e9      	b.n	800cb72 <__sfp+0x42>
 800cb9e:	bf00      	nop
 800cba0:	0800f950 	.word	0x0800f950
 800cba4:	ffff0001 	.word	0xffff0001

0800cba8 <_fwalk_reent>:
 800cba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbac:	4680      	mov	r8, r0
 800cbae:	4689      	mov	r9, r1
 800cbb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cbb4:	2600      	movs	r6, #0
 800cbb6:	b914      	cbnz	r4, 800cbbe <_fwalk_reent+0x16>
 800cbb8:	4630      	mov	r0, r6
 800cbba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbbe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cbc2:	3f01      	subs	r7, #1
 800cbc4:	d501      	bpl.n	800cbca <_fwalk_reent+0x22>
 800cbc6:	6824      	ldr	r4, [r4, #0]
 800cbc8:	e7f5      	b.n	800cbb6 <_fwalk_reent+0xe>
 800cbca:	89ab      	ldrh	r3, [r5, #12]
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d907      	bls.n	800cbe0 <_fwalk_reent+0x38>
 800cbd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	d003      	beq.n	800cbe0 <_fwalk_reent+0x38>
 800cbd8:	4629      	mov	r1, r5
 800cbda:	4640      	mov	r0, r8
 800cbdc:	47c8      	blx	r9
 800cbde:	4306      	orrs	r6, r0
 800cbe0:	3568      	adds	r5, #104	; 0x68
 800cbe2:	e7ee      	b.n	800cbc2 <_fwalk_reent+0x1a>

0800cbe4 <_malloc_r>:
 800cbe4:	b570      	push	{r4, r5, r6, lr}
 800cbe6:	1ccd      	adds	r5, r1, #3
 800cbe8:	f025 0503 	bic.w	r5, r5, #3
 800cbec:	3508      	adds	r5, #8
 800cbee:	2d0c      	cmp	r5, #12
 800cbf0:	bf38      	it	cc
 800cbf2:	250c      	movcc	r5, #12
 800cbf4:	2d00      	cmp	r5, #0
 800cbf6:	4606      	mov	r6, r0
 800cbf8:	db01      	blt.n	800cbfe <_malloc_r+0x1a>
 800cbfa:	42a9      	cmp	r1, r5
 800cbfc:	d903      	bls.n	800cc06 <_malloc_r+0x22>
 800cbfe:	230c      	movs	r3, #12
 800cc00:	6033      	str	r3, [r6, #0]
 800cc02:	2000      	movs	r0, #0
 800cc04:	bd70      	pop	{r4, r5, r6, pc}
 800cc06:	f000 fee1 	bl	800d9cc <__malloc_lock>
 800cc0a:	4a21      	ldr	r2, [pc, #132]	; (800cc90 <_malloc_r+0xac>)
 800cc0c:	6814      	ldr	r4, [r2, #0]
 800cc0e:	4621      	mov	r1, r4
 800cc10:	b991      	cbnz	r1, 800cc38 <_malloc_r+0x54>
 800cc12:	4c20      	ldr	r4, [pc, #128]	; (800cc94 <_malloc_r+0xb0>)
 800cc14:	6823      	ldr	r3, [r4, #0]
 800cc16:	b91b      	cbnz	r3, 800cc20 <_malloc_r+0x3c>
 800cc18:	4630      	mov	r0, r6
 800cc1a:	f000 fc57 	bl	800d4cc <_sbrk_r>
 800cc1e:	6020      	str	r0, [r4, #0]
 800cc20:	4629      	mov	r1, r5
 800cc22:	4630      	mov	r0, r6
 800cc24:	f000 fc52 	bl	800d4cc <_sbrk_r>
 800cc28:	1c43      	adds	r3, r0, #1
 800cc2a:	d124      	bne.n	800cc76 <_malloc_r+0x92>
 800cc2c:	230c      	movs	r3, #12
 800cc2e:	6033      	str	r3, [r6, #0]
 800cc30:	4630      	mov	r0, r6
 800cc32:	f000 fecc 	bl	800d9ce <__malloc_unlock>
 800cc36:	e7e4      	b.n	800cc02 <_malloc_r+0x1e>
 800cc38:	680b      	ldr	r3, [r1, #0]
 800cc3a:	1b5b      	subs	r3, r3, r5
 800cc3c:	d418      	bmi.n	800cc70 <_malloc_r+0x8c>
 800cc3e:	2b0b      	cmp	r3, #11
 800cc40:	d90f      	bls.n	800cc62 <_malloc_r+0x7e>
 800cc42:	600b      	str	r3, [r1, #0]
 800cc44:	50cd      	str	r5, [r1, r3]
 800cc46:	18cc      	adds	r4, r1, r3
 800cc48:	4630      	mov	r0, r6
 800cc4a:	f000 fec0 	bl	800d9ce <__malloc_unlock>
 800cc4e:	f104 000b 	add.w	r0, r4, #11
 800cc52:	1d23      	adds	r3, r4, #4
 800cc54:	f020 0007 	bic.w	r0, r0, #7
 800cc58:	1ac3      	subs	r3, r0, r3
 800cc5a:	d0d3      	beq.n	800cc04 <_malloc_r+0x20>
 800cc5c:	425a      	negs	r2, r3
 800cc5e:	50e2      	str	r2, [r4, r3]
 800cc60:	e7d0      	b.n	800cc04 <_malloc_r+0x20>
 800cc62:	428c      	cmp	r4, r1
 800cc64:	684b      	ldr	r3, [r1, #4]
 800cc66:	bf16      	itet	ne
 800cc68:	6063      	strne	r3, [r4, #4]
 800cc6a:	6013      	streq	r3, [r2, #0]
 800cc6c:	460c      	movne	r4, r1
 800cc6e:	e7eb      	b.n	800cc48 <_malloc_r+0x64>
 800cc70:	460c      	mov	r4, r1
 800cc72:	6849      	ldr	r1, [r1, #4]
 800cc74:	e7cc      	b.n	800cc10 <_malloc_r+0x2c>
 800cc76:	1cc4      	adds	r4, r0, #3
 800cc78:	f024 0403 	bic.w	r4, r4, #3
 800cc7c:	42a0      	cmp	r0, r4
 800cc7e:	d005      	beq.n	800cc8c <_malloc_r+0xa8>
 800cc80:	1a21      	subs	r1, r4, r0
 800cc82:	4630      	mov	r0, r6
 800cc84:	f000 fc22 	bl	800d4cc <_sbrk_r>
 800cc88:	3001      	adds	r0, #1
 800cc8a:	d0cf      	beq.n	800cc2c <_malloc_r+0x48>
 800cc8c:	6025      	str	r5, [r4, #0]
 800cc8e:	e7db      	b.n	800cc48 <_malloc_r+0x64>
 800cc90:	20000314 	.word	0x20000314
 800cc94:	20000318 	.word	0x20000318

0800cc98 <__ssputs_r>:
 800cc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc9c:	688e      	ldr	r6, [r1, #8]
 800cc9e:	429e      	cmp	r6, r3
 800cca0:	4682      	mov	sl, r0
 800cca2:	460c      	mov	r4, r1
 800cca4:	4690      	mov	r8, r2
 800cca6:	4699      	mov	r9, r3
 800cca8:	d837      	bhi.n	800cd1a <__ssputs_r+0x82>
 800ccaa:	898a      	ldrh	r2, [r1, #12]
 800ccac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ccb0:	d031      	beq.n	800cd16 <__ssputs_r+0x7e>
 800ccb2:	6825      	ldr	r5, [r4, #0]
 800ccb4:	6909      	ldr	r1, [r1, #16]
 800ccb6:	1a6f      	subs	r7, r5, r1
 800ccb8:	6965      	ldr	r5, [r4, #20]
 800ccba:	2302      	movs	r3, #2
 800ccbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ccc0:	fb95 f5f3 	sdiv	r5, r5, r3
 800ccc4:	f109 0301 	add.w	r3, r9, #1
 800ccc8:	443b      	add	r3, r7
 800ccca:	429d      	cmp	r5, r3
 800cccc:	bf38      	it	cc
 800ccce:	461d      	movcc	r5, r3
 800ccd0:	0553      	lsls	r3, r2, #21
 800ccd2:	d530      	bpl.n	800cd36 <__ssputs_r+0x9e>
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	f7ff ff85 	bl	800cbe4 <_malloc_r>
 800ccda:	4606      	mov	r6, r0
 800ccdc:	b950      	cbnz	r0, 800ccf4 <__ssputs_r+0x5c>
 800ccde:	230c      	movs	r3, #12
 800cce0:	f8ca 3000 	str.w	r3, [sl]
 800cce4:	89a3      	ldrh	r3, [r4, #12]
 800cce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccea:	81a3      	strh	r3, [r4, #12]
 800ccec:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccf4:	463a      	mov	r2, r7
 800ccf6:	6921      	ldr	r1, [r4, #16]
 800ccf8:	f000 fe44 	bl	800d984 <memcpy>
 800ccfc:	89a3      	ldrh	r3, [r4, #12]
 800ccfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd06:	81a3      	strh	r3, [r4, #12]
 800cd08:	6126      	str	r6, [r4, #16]
 800cd0a:	6165      	str	r5, [r4, #20]
 800cd0c:	443e      	add	r6, r7
 800cd0e:	1bed      	subs	r5, r5, r7
 800cd10:	6026      	str	r6, [r4, #0]
 800cd12:	60a5      	str	r5, [r4, #8]
 800cd14:	464e      	mov	r6, r9
 800cd16:	454e      	cmp	r6, r9
 800cd18:	d900      	bls.n	800cd1c <__ssputs_r+0x84>
 800cd1a:	464e      	mov	r6, r9
 800cd1c:	4632      	mov	r2, r6
 800cd1e:	4641      	mov	r1, r8
 800cd20:	6820      	ldr	r0, [r4, #0]
 800cd22:	f000 fe3a 	bl	800d99a <memmove>
 800cd26:	68a3      	ldr	r3, [r4, #8]
 800cd28:	1b9b      	subs	r3, r3, r6
 800cd2a:	60a3      	str	r3, [r4, #8]
 800cd2c:	6823      	ldr	r3, [r4, #0]
 800cd2e:	441e      	add	r6, r3
 800cd30:	6026      	str	r6, [r4, #0]
 800cd32:	2000      	movs	r0, #0
 800cd34:	e7dc      	b.n	800ccf0 <__ssputs_r+0x58>
 800cd36:	462a      	mov	r2, r5
 800cd38:	f000 fe98 	bl	800da6c <_realloc_r>
 800cd3c:	4606      	mov	r6, r0
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	d1e2      	bne.n	800cd08 <__ssputs_r+0x70>
 800cd42:	6921      	ldr	r1, [r4, #16]
 800cd44:	4650      	mov	r0, sl
 800cd46:	f000 fe43 	bl	800d9d0 <_free_r>
 800cd4a:	e7c8      	b.n	800ccde <__ssputs_r+0x46>

0800cd4c <_svfiprintf_r>:
 800cd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd50:	461d      	mov	r5, r3
 800cd52:	898b      	ldrh	r3, [r1, #12]
 800cd54:	061f      	lsls	r7, r3, #24
 800cd56:	b09d      	sub	sp, #116	; 0x74
 800cd58:	4680      	mov	r8, r0
 800cd5a:	460c      	mov	r4, r1
 800cd5c:	4616      	mov	r6, r2
 800cd5e:	d50f      	bpl.n	800cd80 <_svfiprintf_r+0x34>
 800cd60:	690b      	ldr	r3, [r1, #16]
 800cd62:	b96b      	cbnz	r3, 800cd80 <_svfiprintf_r+0x34>
 800cd64:	2140      	movs	r1, #64	; 0x40
 800cd66:	f7ff ff3d 	bl	800cbe4 <_malloc_r>
 800cd6a:	6020      	str	r0, [r4, #0]
 800cd6c:	6120      	str	r0, [r4, #16]
 800cd6e:	b928      	cbnz	r0, 800cd7c <_svfiprintf_r+0x30>
 800cd70:	230c      	movs	r3, #12
 800cd72:	f8c8 3000 	str.w	r3, [r8]
 800cd76:	f04f 30ff 	mov.w	r0, #4294967295
 800cd7a:	e0c8      	b.n	800cf0e <_svfiprintf_r+0x1c2>
 800cd7c:	2340      	movs	r3, #64	; 0x40
 800cd7e:	6163      	str	r3, [r4, #20]
 800cd80:	2300      	movs	r3, #0
 800cd82:	9309      	str	r3, [sp, #36]	; 0x24
 800cd84:	2320      	movs	r3, #32
 800cd86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd8a:	2330      	movs	r3, #48	; 0x30
 800cd8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd90:	9503      	str	r5, [sp, #12]
 800cd92:	f04f 0b01 	mov.w	fp, #1
 800cd96:	4637      	mov	r7, r6
 800cd98:	463d      	mov	r5, r7
 800cd9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cd9e:	b10b      	cbz	r3, 800cda4 <_svfiprintf_r+0x58>
 800cda0:	2b25      	cmp	r3, #37	; 0x25
 800cda2:	d13e      	bne.n	800ce22 <_svfiprintf_r+0xd6>
 800cda4:	ebb7 0a06 	subs.w	sl, r7, r6
 800cda8:	d00b      	beq.n	800cdc2 <_svfiprintf_r+0x76>
 800cdaa:	4653      	mov	r3, sl
 800cdac:	4632      	mov	r2, r6
 800cdae:	4621      	mov	r1, r4
 800cdb0:	4640      	mov	r0, r8
 800cdb2:	f7ff ff71 	bl	800cc98 <__ssputs_r>
 800cdb6:	3001      	adds	r0, #1
 800cdb8:	f000 80a4 	beq.w	800cf04 <_svfiprintf_r+0x1b8>
 800cdbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdbe:	4453      	add	r3, sl
 800cdc0:	9309      	str	r3, [sp, #36]	; 0x24
 800cdc2:	783b      	ldrb	r3, [r7, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f000 809d 	beq.w	800cf04 <_svfiprintf_r+0x1b8>
 800cdca:	2300      	movs	r3, #0
 800cdcc:	f04f 32ff 	mov.w	r2, #4294967295
 800cdd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdd4:	9304      	str	r3, [sp, #16]
 800cdd6:	9307      	str	r3, [sp, #28]
 800cdd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cddc:	931a      	str	r3, [sp, #104]	; 0x68
 800cdde:	462f      	mov	r7, r5
 800cde0:	2205      	movs	r2, #5
 800cde2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cde6:	4850      	ldr	r0, [pc, #320]	; (800cf28 <_svfiprintf_r+0x1dc>)
 800cde8:	f7f3 fa32 	bl	8000250 <memchr>
 800cdec:	9b04      	ldr	r3, [sp, #16]
 800cdee:	b9d0      	cbnz	r0, 800ce26 <_svfiprintf_r+0xda>
 800cdf0:	06d9      	lsls	r1, r3, #27
 800cdf2:	bf44      	itt	mi
 800cdf4:	2220      	movmi	r2, #32
 800cdf6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cdfa:	071a      	lsls	r2, r3, #28
 800cdfc:	bf44      	itt	mi
 800cdfe:	222b      	movmi	r2, #43	; 0x2b
 800ce00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ce04:	782a      	ldrb	r2, [r5, #0]
 800ce06:	2a2a      	cmp	r2, #42	; 0x2a
 800ce08:	d015      	beq.n	800ce36 <_svfiprintf_r+0xea>
 800ce0a:	9a07      	ldr	r2, [sp, #28]
 800ce0c:	462f      	mov	r7, r5
 800ce0e:	2000      	movs	r0, #0
 800ce10:	250a      	movs	r5, #10
 800ce12:	4639      	mov	r1, r7
 800ce14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce18:	3b30      	subs	r3, #48	; 0x30
 800ce1a:	2b09      	cmp	r3, #9
 800ce1c:	d94d      	bls.n	800ceba <_svfiprintf_r+0x16e>
 800ce1e:	b1b8      	cbz	r0, 800ce50 <_svfiprintf_r+0x104>
 800ce20:	e00f      	b.n	800ce42 <_svfiprintf_r+0xf6>
 800ce22:	462f      	mov	r7, r5
 800ce24:	e7b8      	b.n	800cd98 <_svfiprintf_r+0x4c>
 800ce26:	4a40      	ldr	r2, [pc, #256]	; (800cf28 <_svfiprintf_r+0x1dc>)
 800ce28:	1a80      	subs	r0, r0, r2
 800ce2a:	fa0b f000 	lsl.w	r0, fp, r0
 800ce2e:	4318      	orrs	r0, r3
 800ce30:	9004      	str	r0, [sp, #16]
 800ce32:	463d      	mov	r5, r7
 800ce34:	e7d3      	b.n	800cdde <_svfiprintf_r+0x92>
 800ce36:	9a03      	ldr	r2, [sp, #12]
 800ce38:	1d11      	adds	r1, r2, #4
 800ce3a:	6812      	ldr	r2, [r2, #0]
 800ce3c:	9103      	str	r1, [sp, #12]
 800ce3e:	2a00      	cmp	r2, #0
 800ce40:	db01      	blt.n	800ce46 <_svfiprintf_r+0xfa>
 800ce42:	9207      	str	r2, [sp, #28]
 800ce44:	e004      	b.n	800ce50 <_svfiprintf_r+0x104>
 800ce46:	4252      	negs	r2, r2
 800ce48:	f043 0302 	orr.w	r3, r3, #2
 800ce4c:	9207      	str	r2, [sp, #28]
 800ce4e:	9304      	str	r3, [sp, #16]
 800ce50:	783b      	ldrb	r3, [r7, #0]
 800ce52:	2b2e      	cmp	r3, #46	; 0x2e
 800ce54:	d10c      	bne.n	800ce70 <_svfiprintf_r+0x124>
 800ce56:	787b      	ldrb	r3, [r7, #1]
 800ce58:	2b2a      	cmp	r3, #42	; 0x2a
 800ce5a:	d133      	bne.n	800cec4 <_svfiprintf_r+0x178>
 800ce5c:	9b03      	ldr	r3, [sp, #12]
 800ce5e:	1d1a      	adds	r2, r3, #4
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	9203      	str	r2, [sp, #12]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	bfb8      	it	lt
 800ce68:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce6c:	3702      	adds	r7, #2
 800ce6e:	9305      	str	r3, [sp, #20]
 800ce70:	4d2e      	ldr	r5, [pc, #184]	; (800cf2c <_svfiprintf_r+0x1e0>)
 800ce72:	7839      	ldrb	r1, [r7, #0]
 800ce74:	2203      	movs	r2, #3
 800ce76:	4628      	mov	r0, r5
 800ce78:	f7f3 f9ea 	bl	8000250 <memchr>
 800ce7c:	b138      	cbz	r0, 800ce8e <_svfiprintf_r+0x142>
 800ce7e:	2340      	movs	r3, #64	; 0x40
 800ce80:	1b40      	subs	r0, r0, r5
 800ce82:	fa03 f000 	lsl.w	r0, r3, r0
 800ce86:	9b04      	ldr	r3, [sp, #16]
 800ce88:	4303      	orrs	r3, r0
 800ce8a:	3701      	adds	r7, #1
 800ce8c:	9304      	str	r3, [sp, #16]
 800ce8e:	7839      	ldrb	r1, [r7, #0]
 800ce90:	4827      	ldr	r0, [pc, #156]	; (800cf30 <_svfiprintf_r+0x1e4>)
 800ce92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce96:	2206      	movs	r2, #6
 800ce98:	1c7e      	adds	r6, r7, #1
 800ce9a:	f7f3 f9d9 	bl	8000250 <memchr>
 800ce9e:	2800      	cmp	r0, #0
 800cea0:	d038      	beq.n	800cf14 <_svfiprintf_r+0x1c8>
 800cea2:	4b24      	ldr	r3, [pc, #144]	; (800cf34 <_svfiprintf_r+0x1e8>)
 800cea4:	bb13      	cbnz	r3, 800ceec <_svfiprintf_r+0x1a0>
 800cea6:	9b03      	ldr	r3, [sp, #12]
 800cea8:	3307      	adds	r3, #7
 800ceaa:	f023 0307 	bic.w	r3, r3, #7
 800ceae:	3308      	adds	r3, #8
 800ceb0:	9303      	str	r3, [sp, #12]
 800ceb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceb4:	444b      	add	r3, r9
 800ceb6:	9309      	str	r3, [sp, #36]	; 0x24
 800ceb8:	e76d      	b.n	800cd96 <_svfiprintf_r+0x4a>
 800ceba:	fb05 3202 	mla	r2, r5, r2, r3
 800cebe:	2001      	movs	r0, #1
 800cec0:	460f      	mov	r7, r1
 800cec2:	e7a6      	b.n	800ce12 <_svfiprintf_r+0xc6>
 800cec4:	2300      	movs	r3, #0
 800cec6:	3701      	adds	r7, #1
 800cec8:	9305      	str	r3, [sp, #20]
 800ceca:	4619      	mov	r1, r3
 800cecc:	250a      	movs	r5, #10
 800cece:	4638      	mov	r0, r7
 800ced0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ced4:	3a30      	subs	r2, #48	; 0x30
 800ced6:	2a09      	cmp	r2, #9
 800ced8:	d903      	bls.n	800cee2 <_svfiprintf_r+0x196>
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d0c8      	beq.n	800ce70 <_svfiprintf_r+0x124>
 800cede:	9105      	str	r1, [sp, #20]
 800cee0:	e7c6      	b.n	800ce70 <_svfiprintf_r+0x124>
 800cee2:	fb05 2101 	mla	r1, r5, r1, r2
 800cee6:	2301      	movs	r3, #1
 800cee8:	4607      	mov	r7, r0
 800ceea:	e7f0      	b.n	800cece <_svfiprintf_r+0x182>
 800ceec:	ab03      	add	r3, sp, #12
 800ceee:	9300      	str	r3, [sp, #0]
 800cef0:	4622      	mov	r2, r4
 800cef2:	4b11      	ldr	r3, [pc, #68]	; (800cf38 <_svfiprintf_r+0x1ec>)
 800cef4:	a904      	add	r1, sp, #16
 800cef6:	4640      	mov	r0, r8
 800cef8:	f3af 8000 	nop.w
 800cefc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cf00:	4681      	mov	r9, r0
 800cf02:	d1d6      	bne.n	800ceb2 <_svfiprintf_r+0x166>
 800cf04:	89a3      	ldrh	r3, [r4, #12]
 800cf06:	065b      	lsls	r3, r3, #25
 800cf08:	f53f af35 	bmi.w	800cd76 <_svfiprintf_r+0x2a>
 800cf0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf0e:	b01d      	add	sp, #116	; 0x74
 800cf10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf14:	ab03      	add	r3, sp, #12
 800cf16:	9300      	str	r3, [sp, #0]
 800cf18:	4622      	mov	r2, r4
 800cf1a:	4b07      	ldr	r3, [pc, #28]	; (800cf38 <_svfiprintf_r+0x1ec>)
 800cf1c:	a904      	add	r1, sp, #16
 800cf1e:	4640      	mov	r0, r8
 800cf20:	f000 f9c2 	bl	800d2a8 <_printf_i>
 800cf24:	e7ea      	b.n	800cefc <_svfiprintf_r+0x1b0>
 800cf26:	bf00      	nop
 800cf28:	0800f9b4 	.word	0x0800f9b4
 800cf2c:	0800f9ba 	.word	0x0800f9ba
 800cf30:	0800f9be 	.word	0x0800f9be
 800cf34:	00000000 	.word	0x00000000
 800cf38:	0800cc99 	.word	0x0800cc99

0800cf3c <__sfputc_r>:
 800cf3c:	6893      	ldr	r3, [r2, #8]
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	b410      	push	{r4}
 800cf44:	6093      	str	r3, [r2, #8]
 800cf46:	da08      	bge.n	800cf5a <__sfputc_r+0x1e>
 800cf48:	6994      	ldr	r4, [r2, #24]
 800cf4a:	42a3      	cmp	r3, r4
 800cf4c:	db01      	blt.n	800cf52 <__sfputc_r+0x16>
 800cf4e:	290a      	cmp	r1, #10
 800cf50:	d103      	bne.n	800cf5a <__sfputc_r+0x1e>
 800cf52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf56:	f000 bb0d 	b.w	800d574 <__swbuf_r>
 800cf5a:	6813      	ldr	r3, [r2, #0]
 800cf5c:	1c58      	adds	r0, r3, #1
 800cf5e:	6010      	str	r0, [r2, #0]
 800cf60:	7019      	strb	r1, [r3, #0]
 800cf62:	4608      	mov	r0, r1
 800cf64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf68:	4770      	bx	lr

0800cf6a <__sfputs_r>:
 800cf6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf6c:	4606      	mov	r6, r0
 800cf6e:	460f      	mov	r7, r1
 800cf70:	4614      	mov	r4, r2
 800cf72:	18d5      	adds	r5, r2, r3
 800cf74:	42ac      	cmp	r4, r5
 800cf76:	d101      	bne.n	800cf7c <__sfputs_r+0x12>
 800cf78:	2000      	movs	r0, #0
 800cf7a:	e007      	b.n	800cf8c <__sfputs_r+0x22>
 800cf7c:	463a      	mov	r2, r7
 800cf7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf82:	4630      	mov	r0, r6
 800cf84:	f7ff ffda 	bl	800cf3c <__sfputc_r>
 800cf88:	1c43      	adds	r3, r0, #1
 800cf8a:	d1f3      	bne.n	800cf74 <__sfputs_r+0xa>
 800cf8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf90 <_vfiprintf_r>:
 800cf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf94:	460c      	mov	r4, r1
 800cf96:	b09d      	sub	sp, #116	; 0x74
 800cf98:	4617      	mov	r7, r2
 800cf9a:	461d      	mov	r5, r3
 800cf9c:	4606      	mov	r6, r0
 800cf9e:	b118      	cbz	r0, 800cfa8 <_vfiprintf_r+0x18>
 800cfa0:	6983      	ldr	r3, [r0, #24]
 800cfa2:	b90b      	cbnz	r3, 800cfa8 <_vfiprintf_r+0x18>
 800cfa4:	f7ff fd94 	bl	800cad0 <__sinit>
 800cfa8:	4b7c      	ldr	r3, [pc, #496]	; (800d19c <_vfiprintf_r+0x20c>)
 800cfaa:	429c      	cmp	r4, r3
 800cfac:	d158      	bne.n	800d060 <_vfiprintf_r+0xd0>
 800cfae:	6874      	ldr	r4, [r6, #4]
 800cfb0:	89a3      	ldrh	r3, [r4, #12]
 800cfb2:	0718      	lsls	r0, r3, #28
 800cfb4:	d55e      	bpl.n	800d074 <_vfiprintf_r+0xe4>
 800cfb6:	6923      	ldr	r3, [r4, #16]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d05b      	beq.n	800d074 <_vfiprintf_r+0xe4>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	9309      	str	r3, [sp, #36]	; 0x24
 800cfc0:	2320      	movs	r3, #32
 800cfc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfc6:	2330      	movs	r3, #48	; 0x30
 800cfc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfcc:	9503      	str	r5, [sp, #12]
 800cfce:	f04f 0b01 	mov.w	fp, #1
 800cfd2:	46b8      	mov	r8, r7
 800cfd4:	4645      	mov	r5, r8
 800cfd6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cfda:	b10b      	cbz	r3, 800cfe0 <_vfiprintf_r+0x50>
 800cfdc:	2b25      	cmp	r3, #37	; 0x25
 800cfde:	d154      	bne.n	800d08a <_vfiprintf_r+0xfa>
 800cfe0:	ebb8 0a07 	subs.w	sl, r8, r7
 800cfe4:	d00b      	beq.n	800cffe <_vfiprintf_r+0x6e>
 800cfe6:	4653      	mov	r3, sl
 800cfe8:	463a      	mov	r2, r7
 800cfea:	4621      	mov	r1, r4
 800cfec:	4630      	mov	r0, r6
 800cfee:	f7ff ffbc 	bl	800cf6a <__sfputs_r>
 800cff2:	3001      	adds	r0, #1
 800cff4:	f000 80c2 	beq.w	800d17c <_vfiprintf_r+0x1ec>
 800cff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cffa:	4453      	add	r3, sl
 800cffc:	9309      	str	r3, [sp, #36]	; 0x24
 800cffe:	f898 3000 	ldrb.w	r3, [r8]
 800d002:	2b00      	cmp	r3, #0
 800d004:	f000 80ba 	beq.w	800d17c <_vfiprintf_r+0x1ec>
 800d008:	2300      	movs	r3, #0
 800d00a:	f04f 32ff 	mov.w	r2, #4294967295
 800d00e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d012:	9304      	str	r3, [sp, #16]
 800d014:	9307      	str	r3, [sp, #28]
 800d016:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d01a:	931a      	str	r3, [sp, #104]	; 0x68
 800d01c:	46a8      	mov	r8, r5
 800d01e:	2205      	movs	r2, #5
 800d020:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d024:	485e      	ldr	r0, [pc, #376]	; (800d1a0 <_vfiprintf_r+0x210>)
 800d026:	f7f3 f913 	bl	8000250 <memchr>
 800d02a:	9b04      	ldr	r3, [sp, #16]
 800d02c:	bb78      	cbnz	r0, 800d08e <_vfiprintf_r+0xfe>
 800d02e:	06d9      	lsls	r1, r3, #27
 800d030:	bf44      	itt	mi
 800d032:	2220      	movmi	r2, #32
 800d034:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d038:	071a      	lsls	r2, r3, #28
 800d03a:	bf44      	itt	mi
 800d03c:	222b      	movmi	r2, #43	; 0x2b
 800d03e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d042:	782a      	ldrb	r2, [r5, #0]
 800d044:	2a2a      	cmp	r2, #42	; 0x2a
 800d046:	d02a      	beq.n	800d09e <_vfiprintf_r+0x10e>
 800d048:	9a07      	ldr	r2, [sp, #28]
 800d04a:	46a8      	mov	r8, r5
 800d04c:	2000      	movs	r0, #0
 800d04e:	250a      	movs	r5, #10
 800d050:	4641      	mov	r1, r8
 800d052:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d056:	3b30      	subs	r3, #48	; 0x30
 800d058:	2b09      	cmp	r3, #9
 800d05a:	d969      	bls.n	800d130 <_vfiprintf_r+0x1a0>
 800d05c:	b360      	cbz	r0, 800d0b8 <_vfiprintf_r+0x128>
 800d05e:	e024      	b.n	800d0aa <_vfiprintf_r+0x11a>
 800d060:	4b50      	ldr	r3, [pc, #320]	; (800d1a4 <_vfiprintf_r+0x214>)
 800d062:	429c      	cmp	r4, r3
 800d064:	d101      	bne.n	800d06a <_vfiprintf_r+0xda>
 800d066:	68b4      	ldr	r4, [r6, #8]
 800d068:	e7a2      	b.n	800cfb0 <_vfiprintf_r+0x20>
 800d06a:	4b4f      	ldr	r3, [pc, #316]	; (800d1a8 <_vfiprintf_r+0x218>)
 800d06c:	429c      	cmp	r4, r3
 800d06e:	bf08      	it	eq
 800d070:	68f4      	ldreq	r4, [r6, #12]
 800d072:	e79d      	b.n	800cfb0 <_vfiprintf_r+0x20>
 800d074:	4621      	mov	r1, r4
 800d076:	4630      	mov	r0, r6
 800d078:	f000 fae0 	bl	800d63c <__swsetup_r>
 800d07c:	2800      	cmp	r0, #0
 800d07e:	d09d      	beq.n	800cfbc <_vfiprintf_r+0x2c>
 800d080:	f04f 30ff 	mov.w	r0, #4294967295
 800d084:	b01d      	add	sp, #116	; 0x74
 800d086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08a:	46a8      	mov	r8, r5
 800d08c:	e7a2      	b.n	800cfd4 <_vfiprintf_r+0x44>
 800d08e:	4a44      	ldr	r2, [pc, #272]	; (800d1a0 <_vfiprintf_r+0x210>)
 800d090:	1a80      	subs	r0, r0, r2
 800d092:	fa0b f000 	lsl.w	r0, fp, r0
 800d096:	4318      	orrs	r0, r3
 800d098:	9004      	str	r0, [sp, #16]
 800d09a:	4645      	mov	r5, r8
 800d09c:	e7be      	b.n	800d01c <_vfiprintf_r+0x8c>
 800d09e:	9a03      	ldr	r2, [sp, #12]
 800d0a0:	1d11      	adds	r1, r2, #4
 800d0a2:	6812      	ldr	r2, [r2, #0]
 800d0a4:	9103      	str	r1, [sp, #12]
 800d0a6:	2a00      	cmp	r2, #0
 800d0a8:	db01      	blt.n	800d0ae <_vfiprintf_r+0x11e>
 800d0aa:	9207      	str	r2, [sp, #28]
 800d0ac:	e004      	b.n	800d0b8 <_vfiprintf_r+0x128>
 800d0ae:	4252      	negs	r2, r2
 800d0b0:	f043 0302 	orr.w	r3, r3, #2
 800d0b4:	9207      	str	r2, [sp, #28]
 800d0b6:	9304      	str	r3, [sp, #16]
 800d0b8:	f898 3000 	ldrb.w	r3, [r8]
 800d0bc:	2b2e      	cmp	r3, #46	; 0x2e
 800d0be:	d10e      	bne.n	800d0de <_vfiprintf_r+0x14e>
 800d0c0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d0c4:	2b2a      	cmp	r3, #42	; 0x2a
 800d0c6:	d138      	bne.n	800d13a <_vfiprintf_r+0x1aa>
 800d0c8:	9b03      	ldr	r3, [sp, #12]
 800d0ca:	1d1a      	adds	r2, r3, #4
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	9203      	str	r2, [sp, #12]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	bfb8      	it	lt
 800d0d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0d8:	f108 0802 	add.w	r8, r8, #2
 800d0dc:	9305      	str	r3, [sp, #20]
 800d0de:	4d33      	ldr	r5, [pc, #204]	; (800d1ac <_vfiprintf_r+0x21c>)
 800d0e0:	f898 1000 	ldrb.w	r1, [r8]
 800d0e4:	2203      	movs	r2, #3
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	f7f3 f8b2 	bl	8000250 <memchr>
 800d0ec:	b140      	cbz	r0, 800d100 <_vfiprintf_r+0x170>
 800d0ee:	2340      	movs	r3, #64	; 0x40
 800d0f0:	1b40      	subs	r0, r0, r5
 800d0f2:	fa03 f000 	lsl.w	r0, r3, r0
 800d0f6:	9b04      	ldr	r3, [sp, #16]
 800d0f8:	4303      	orrs	r3, r0
 800d0fa:	f108 0801 	add.w	r8, r8, #1
 800d0fe:	9304      	str	r3, [sp, #16]
 800d100:	f898 1000 	ldrb.w	r1, [r8]
 800d104:	482a      	ldr	r0, [pc, #168]	; (800d1b0 <_vfiprintf_r+0x220>)
 800d106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d10a:	2206      	movs	r2, #6
 800d10c:	f108 0701 	add.w	r7, r8, #1
 800d110:	f7f3 f89e 	bl	8000250 <memchr>
 800d114:	2800      	cmp	r0, #0
 800d116:	d037      	beq.n	800d188 <_vfiprintf_r+0x1f8>
 800d118:	4b26      	ldr	r3, [pc, #152]	; (800d1b4 <_vfiprintf_r+0x224>)
 800d11a:	bb1b      	cbnz	r3, 800d164 <_vfiprintf_r+0x1d4>
 800d11c:	9b03      	ldr	r3, [sp, #12]
 800d11e:	3307      	adds	r3, #7
 800d120:	f023 0307 	bic.w	r3, r3, #7
 800d124:	3308      	adds	r3, #8
 800d126:	9303      	str	r3, [sp, #12]
 800d128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d12a:	444b      	add	r3, r9
 800d12c:	9309      	str	r3, [sp, #36]	; 0x24
 800d12e:	e750      	b.n	800cfd2 <_vfiprintf_r+0x42>
 800d130:	fb05 3202 	mla	r2, r5, r2, r3
 800d134:	2001      	movs	r0, #1
 800d136:	4688      	mov	r8, r1
 800d138:	e78a      	b.n	800d050 <_vfiprintf_r+0xc0>
 800d13a:	2300      	movs	r3, #0
 800d13c:	f108 0801 	add.w	r8, r8, #1
 800d140:	9305      	str	r3, [sp, #20]
 800d142:	4619      	mov	r1, r3
 800d144:	250a      	movs	r5, #10
 800d146:	4640      	mov	r0, r8
 800d148:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d14c:	3a30      	subs	r2, #48	; 0x30
 800d14e:	2a09      	cmp	r2, #9
 800d150:	d903      	bls.n	800d15a <_vfiprintf_r+0x1ca>
 800d152:	2b00      	cmp	r3, #0
 800d154:	d0c3      	beq.n	800d0de <_vfiprintf_r+0x14e>
 800d156:	9105      	str	r1, [sp, #20]
 800d158:	e7c1      	b.n	800d0de <_vfiprintf_r+0x14e>
 800d15a:	fb05 2101 	mla	r1, r5, r1, r2
 800d15e:	2301      	movs	r3, #1
 800d160:	4680      	mov	r8, r0
 800d162:	e7f0      	b.n	800d146 <_vfiprintf_r+0x1b6>
 800d164:	ab03      	add	r3, sp, #12
 800d166:	9300      	str	r3, [sp, #0]
 800d168:	4622      	mov	r2, r4
 800d16a:	4b13      	ldr	r3, [pc, #76]	; (800d1b8 <_vfiprintf_r+0x228>)
 800d16c:	a904      	add	r1, sp, #16
 800d16e:	4630      	mov	r0, r6
 800d170:	f3af 8000 	nop.w
 800d174:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d178:	4681      	mov	r9, r0
 800d17a:	d1d5      	bne.n	800d128 <_vfiprintf_r+0x198>
 800d17c:	89a3      	ldrh	r3, [r4, #12]
 800d17e:	065b      	lsls	r3, r3, #25
 800d180:	f53f af7e 	bmi.w	800d080 <_vfiprintf_r+0xf0>
 800d184:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d186:	e77d      	b.n	800d084 <_vfiprintf_r+0xf4>
 800d188:	ab03      	add	r3, sp, #12
 800d18a:	9300      	str	r3, [sp, #0]
 800d18c:	4622      	mov	r2, r4
 800d18e:	4b0a      	ldr	r3, [pc, #40]	; (800d1b8 <_vfiprintf_r+0x228>)
 800d190:	a904      	add	r1, sp, #16
 800d192:	4630      	mov	r0, r6
 800d194:	f000 f888 	bl	800d2a8 <_printf_i>
 800d198:	e7ec      	b.n	800d174 <_vfiprintf_r+0x1e4>
 800d19a:	bf00      	nop
 800d19c:	0800f974 	.word	0x0800f974
 800d1a0:	0800f9b4 	.word	0x0800f9b4
 800d1a4:	0800f994 	.word	0x0800f994
 800d1a8:	0800f954 	.word	0x0800f954
 800d1ac:	0800f9ba 	.word	0x0800f9ba
 800d1b0:	0800f9be 	.word	0x0800f9be
 800d1b4:	00000000 	.word	0x00000000
 800d1b8:	0800cf6b 	.word	0x0800cf6b

0800d1bc <_printf_common>:
 800d1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c0:	4691      	mov	r9, r2
 800d1c2:	461f      	mov	r7, r3
 800d1c4:	688a      	ldr	r2, [r1, #8]
 800d1c6:	690b      	ldr	r3, [r1, #16]
 800d1c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	bfb8      	it	lt
 800d1d0:	4613      	movlt	r3, r2
 800d1d2:	f8c9 3000 	str.w	r3, [r9]
 800d1d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1da:	4606      	mov	r6, r0
 800d1dc:	460c      	mov	r4, r1
 800d1de:	b112      	cbz	r2, 800d1e6 <_printf_common+0x2a>
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	f8c9 3000 	str.w	r3, [r9]
 800d1e6:	6823      	ldr	r3, [r4, #0]
 800d1e8:	0699      	lsls	r1, r3, #26
 800d1ea:	bf42      	ittt	mi
 800d1ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d1f0:	3302      	addmi	r3, #2
 800d1f2:	f8c9 3000 	strmi.w	r3, [r9]
 800d1f6:	6825      	ldr	r5, [r4, #0]
 800d1f8:	f015 0506 	ands.w	r5, r5, #6
 800d1fc:	d107      	bne.n	800d20e <_printf_common+0x52>
 800d1fe:	f104 0a19 	add.w	sl, r4, #25
 800d202:	68e3      	ldr	r3, [r4, #12]
 800d204:	f8d9 2000 	ldr.w	r2, [r9]
 800d208:	1a9b      	subs	r3, r3, r2
 800d20a:	42ab      	cmp	r3, r5
 800d20c:	dc28      	bgt.n	800d260 <_printf_common+0xa4>
 800d20e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d212:	6822      	ldr	r2, [r4, #0]
 800d214:	3300      	adds	r3, #0
 800d216:	bf18      	it	ne
 800d218:	2301      	movne	r3, #1
 800d21a:	0692      	lsls	r2, r2, #26
 800d21c:	d42d      	bmi.n	800d27a <_printf_common+0xbe>
 800d21e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d222:	4639      	mov	r1, r7
 800d224:	4630      	mov	r0, r6
 800d226:	47c0      	blx	r8
 800d228:	3001      	adds	r0, #1
 800d22a:	d020      	beq.n	800d26e <_printf_common+0xb2>
 800d22c:	6823      	ldr	r3, [r4, #0]
 800d22e:	68e5      	ldr	r5, [r4, #12]
 800d230:	f8d9 2000 	ldr.w	r2, [r9]
 800d234:	f003 0306 	and.w	r3, r3, #6
 800d238:	2b04      	cmp	r3, #4
 800d23a:	bf08      	it	eq
 800d23c:	1aad      	subeq	r5, r5, r2
 800d23e:	68a3      	ldr	r3, [r4, #8]
 800d240:	6922      	ldr	r2, [r4, #16]
 800d242:	bf0c      	ite	eq
 800d244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d248:	2500      	movne	r5, #0
 800d24a:	4293      	cmp	r3, r2
 800d24c:	bfc4      	itt	gt
 800d24e:	1a9b      	subgt	r3, r3, r2
 800d250:	18ed      	addgt	r5, r5, r3
 800d252:	f04f 0900 	mov.w	r9, #0
 800d256:	341a      	adds	r4, #26
 800d258:	454d      	cmp	r5, r9
 800d25a:	d11a      	bne.n	800d292 <_printf_common+0xd6>
 800d25c:	2000      	movs	r0, #0
 800d25e:	e008      	b.n	800d272 <_printf_common+0xb6>
 800d260:	2301      	movs	r3, #1
 800d262:	4652      	mov	r2, sl
 800d264:	4639      	mov	r1, r7
 800d266:	4630      	mov	r0, r6
 800d268:	47c0      	blx	r8
 800d26a:	3001      	adds	r0, #1
 800d26c:	d103      	bne.n	800d276 <_printf_common+0xba>
 800d26e:	f04f 30ff 	mov.w	r0, #4294967295
 800d272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d276:	3501      	adds	r5, #1
 800d278:	e7c3      	b.n	800d202 <_printf_common+0x46>
 800d27a:	18e1      	adds	r1, r4, r3
 800d27c:	1c5a      	adds	r2, r3, #1
 800d27e:	2030      	movs	r0, #48	; 0x30
 800d280:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d284:	4422      	add	r2, r4
 800d286:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d28a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d28e:	3302      	adds	r3, #2
 800d290:	e7c5      	b.n	800d21e <_printf_common+0x62>
 800d292:	2301      	movs	r3, #1
 800d294:	4622      	mov	r2, r4
 800d296:	4639      	mov	r1, r7
 800d298:	4630      	mov	r0, r6
 800d29a:	47c0      	blx	r8
 800d29c:	3001      	adds	r0, #1
 800d29e:	d0e6      	beq.n	800d26e <_printf_common+0xb2>
 800d2a0:	f109 0901 	add.w	r9, r9, #1
 800d2a4:	e7d8      	b.n	800d258 <_printf_common+0x9c>
	...

0800d2a8 <_printf_i>:
 800d2a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d2b0:	460c      	mov	r4, r1
 800d2b2:	7e09      	ldrb	r1, [r1, #24]
 800d2b4:	b085      	sub	sp, #20
 800d2b6:	296e      	cmp	r1, #110	; 0x6e
 800d2b8:	4617      	mov	r7, r2
 800d2ba:	4606      	mov	r6, r0
 800d2bc:	4698      	mov	r8, r3
 800d2be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d2c0:	f000 80b3 	beq.w	800d42a <_printf_i+0x182>
 800d2c4:	d822      	bhi.n	800d30c <_printf_i+0x64>
 800d2c6:	2963      	cmp	r1, #99	; 0x63
 800d2c8:	d036      	beq.n	800d338 <_printf_i+0x90>
 800d2ca:	d80a      	bhi.n	800d2e2 <_printf_i+0x3a>
 800d2cc:	2900      	cmp	r1, #0
 800d2ce:	f000 80b9 	beq.w	800d444 <_printf_i+0x19c>
 800d2d2:	2958      	cmp	r1, #88	; 0x58
 800d2d4:	f000 8083 	beq.w	800d3de <_printf_i+0x136>
 800d2d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d2e0:	e032      	b.n	800d348 <_printf_i+0xa0>
 800d2e2:	2964      	cmp	r1, #100	; 0x64
 800d2e4:	d001      	beq.n	800d2ea <_printf_i+0x42>
 800d2e6:	2969      	cmp	r1, #105	; 0x69
 800d2e8:	d1f6      	bne.n	800d2d8 <_printf_i+0x30>
 800d2ea:	6820      	ldr	r0, [r4, #0]
 800d2ec:	6813      	ldr	r3, [r2, #0]
 800d2ee:	0605      	lsls	r5, r0, #24
 800d2f0:	f103 0104 	add.w	r1, r3, #4
 800d2f4:	d52a      	bpl.n	800d34c <_printf_i+0xa4>
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	6011      	str	r1, [r2, #0]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	da03      	bge.n	800d306 <_printf_i+0x5e>
 800d2fe:	222d      	movs	r2, #45	; 0x2d
 800d300:	425b      	negs	r3, r3
 800d302:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d306:	486f      	ldr	r0, [pc, #444]	; (800d4c4 <_printf_i+0x21c>)
 800d308:	220a      	movs	r2, #10
 800d30a:	e039      	b.n	800d380 <_printf_i+0xd8>
 800d30c:	2973      	cmp	r1, #115	; 0x73
 800d30e:	f000 809d 	beq.w	800d44c <_printf_i+0x1a4>
 800d312:	d808      	bhi.n	800d326 <_printf_i+0x7e>
 800d314:	296f      	cmp	r1, #111	; 0x6f
 800d316:	d020      	beq.n	800d35a <_printf_i+0xb2>
 800d318:	2970      	cmp	r1, #112	; 0x70
 800d31a:	d1dd      	bne.n	800d2d8 <_printf_i+0x30>
 800d31c:	6823      	ldr	r3, [r4, #0]
 800d31e:	f043 0320 	orr.w	r3, r3, #32
 800d322:	6023      	str	r3, [r4, #0]
 800d324:	e003      	b.n	800d32e <_printf_i+0x86>
 800d326:	2975      	cmp	r1, #117	; 0x75
 800d328:	d017      	beq.n	800d35a <_printf_i+0xb2>
 800d32a:	2978      	cmp	r1, #120	; 0x78
 800d32c:	d1d4      	bne.n	800d2d8 <_printf_i+0x30>
 800d32e:	2378      	movs	r3, #120	; 0x78
 800d330:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d334:	4864      	ldr	r0, [pc, #400]	; (800d4c8 <_printf_i+0x220>)
 800d336:	e055      	b.n	800d3e4 <_printf_i+0x13c>
 800d338:	6813      	ldr	r3, [r2, #0]
 800d33a:	1d19      	adds	r1, r3, #4
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	6011      	str	r1, [r2, #0]
 800d340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d348:	2301      	movs	r3, #1
 800d34a:	e08c      	b.n	800d466 <_printf_i+0x1be>
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	6011      	str	r1, [r2, #0]
 800d350:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d354:	bf18      	it	ne
 800d356:	b21b      	sxthne	r3, r3
 800d358:	e7cf      	b.n	800d2fa <_printf_i+0x52>
 800d35a:	6813      	ldr	r3, [r2, #0]
 800d35c:	6825      	ldr	r5, [r4, #0]
 800d35e:	1d18      	adds	r0, r3, #4
 800d360:	6010      	str	r0, [r2, #0]
 800d362:	0628      	lsls	r0, r5, #24
 800d364:	d501      	bpl.n	800d36a <_printf_i+0xc2>
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	e002      	b.n	800d370 <_printf_i+0xc8>
 800d36a:	0668      	lsls	r0, r5, #25
 800d36c:	d5fb      	bpl.n	800d366 <_printf_i+0xbe>
 800d36e:	881b      	ldrh	r3, [r3, #0]
 800d370:	4854      	ldr	r0, [pc, #336]	; (800d4c4 <_printf_i+0x21c>)
 800d372:	296f      	cmp	r1, #111	; 0x6f
 800d374:	bf14      	ite	ne
 800d376:	220a      	movne	r2, #10
 800d378:	2208      	moveq	r2, #8
 800d37a:	2100      	movs	r1, #0
 800d37c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d380:	6865      	ldr	r5, [r4, #4]
 800d382:	60a5      	str	r5, [r4, #8]
 800d384:	2d00      	cmp	r5, #0
 800d386:	f2c0 8095 	blt.w	800d4b4 <_printf_i+0x20c>
 800d38a:	6821      	ldr	r1, [r4, #0]
 800d38c:	f021 0104 	bic.w	r1, r1, #4
 800d390:	6021      	str	r1, [r4, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d13d      	bne.n	800d412 <_printf_i+0x16a>
 800d396:	2d00      	cmp	r5, #0
 800d398:	f040 808e 	bne.w	800d4b8 <_printf_i+0x210>
 800d39c:	4665      	mov	r5, ip
 800d39e:	2a08      	cmp	r2, #8
 800d3a0:	d10b      	bne.n	800d3ba <_printf_i+0x112>
 800d3a2:	6823      	ldr	r3, [r4, #0]
 800d3a4:	07db      	lsls	r3, r3, #31
 800d3a6:	d508      	bpl.n	800d3ba <_printf_i+0x112>
 800d3a8:	6923      	ldr	r3, [r4, #16]
 800d3aa:	6862      	ldr	r2, [r4, #4]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	bfde      	ittt	le
 800d3b0:	2330      	movle	r3, #48	; 0x30
 800d3b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d3ba:	ebac 0305 	sub.w	r3, ip, r5
 800d3be:	6123      	str	r3, [r4, #16]
 800d3c0:	f8cd 8000 	str.w	r8, [sp]
 800d3c4:	463b      	mov	r3, r7
 800d3c6:	aa03      	add	r2, sp, #12
 800d3c8:	4621      	mov	r1, r4
 800d3ca:	4630      	mov	r0, r6
 800d3cc:	f7ff fef6 	bl	800d1bc <_printf_common>
 800d3d0:	3001      	adds	r0, #1
 800d3d2:	d14d      	bne.n	800d470 <_printf_i+0x1c8>
 800d3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d8:	b005      	add	sp, #20
 800d3da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3de:	4839      	ldr	r0, [pc, #228]	; (800d4c4 <_printf_i+0x21c>)
 800d3e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d3e4:	6813      	ldr	r3, [r2, #0]
 800d3e6:	6821      	ldr	r1, [r4, #0]
 800d3e8:	1d1d      	adds	r5, r3, #4
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	6015      	str	r5, [r2, #0]
 800d3ee:	060a      	lsls	r2, r1, #24
 800d3f0:	d50b      	bpl.n	800d40a <_printf_i+0x162>
 800d3f2:	07ca      	lsls	r2, r1, #31
 800d3f4:	bf44      	itt	mi
 800d3f6:	f041 0120 	orrmi.w	r1, r1, #32
 800d3fa:	6021      	strmi	r1, [r4, #0]
 800d3fc:	b91b      	cbnz	r3, 800d406 <_printf_i+0x15e>
 800d3fe:	6822      	ldr	r2, [r4, #0]
 800d400:	f022 0220 	bic.w	r2, r2, #32
 800d404:	6022      	str	r2, [r4, #0]
 800d406:	2210      	movs	r2, #16
 800d408:	e7b7      	b.n	800d37a <_printf_i+0xd2>
 800d40a:	064d      	lsls	r5, r1, #25
 800d40c:	bf48      	it	mi
 800d40e:	b29b      	uxthmi	r3, r3
 800d410:	e7ef      	b.n	800d3f2 <_printf_i+0x14a>
 800d412:	4665      	mov	r5, ip
 800d414:	fbb3 f1f2 	udiv	r1, r3, r2
 800d418:	fb02 3311 	mls	r3, r2, r1, r3
 800d41c:	5cc3      	ldrb	r3, [r0, r3]
 800d41e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d422:	460b      	mov	r3, r1
 800d424:	2900      	cmp	r1, #0
 800d426:	d1f5      	bne.n	800d414 <_printf_i+0x16c>
 800d428:	e7b9      	b.n	800d39e <_printf_i+0xf6>
 800d42a:	6813      	ldr	r3, [r2, #0]
 800d42c:	6825      	ldr	r5, [r4, #0]
 800d42e:	6961      	ldr	r1, [r4, #20]
 800d430:	1d18      	adds	r0, r3, #4
 800d432:	6010      	str	r0, [r2, #0]
 800d434:	0628      	lsls	r0, r5, #24
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	d501      	bpl.n	800d43e <_printf_i+0x196>
 800d43a:	6019      	str	r1, [r3, #0]
 800d43c:	e002      	b.n	800d444 <_printf_i+0x19c>
 800d43e:	066a      	lsls	r2, r5, #25
 800d440:	d5fb      	bpl.n	800d43a <_printf_i+0x192>
 800d442:	8019      	strh	r1, [r3, #0]
 800d444:	2300      	movs	r3, #0
 800d446:	6123      	str	r3, [r4, #16]
 800d448:	4665      	mov	r5, ip
 800d44a:	e7b9      	b.n	800d3c0 <_printf_i+0x118>
 800d44c:	6813      	ldr	r3, [r2, #0]
 800d44e:	1d19      	adds	r1, r3, #4
 800d450:	6011      	str	r1, [r2, #0]
 800d452:	681d      	ldr	r5, [r3, #0]
 800d454:	6862      	ldr	r2, [r4, #4]
 800d456:	2100      	movs	r1, #0
 800d458:	4628      	mov	r0, r5
 800d45a:	f7f2 fef9 	bl	8000250 <memchr>
 800d45e:	b108      	cbz	r0, 800d464 <_printf_i+0x1bc>
 800d460:	1b40      	subs	r0, r0, r5
 800d462:	6060      	str	r0, [r4, #4]
 800d464:	6863      	ldr	r3, [r4, #4]
 800d466:	6123      	str	r3, [r4, #16]
 800d468:	2300      	movs	r3, #0
 800d46a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d46e:	e7a7      	b.n	800d3c0 <_printf_i+0x118>
 800d470:	6923      	ldr	r3, [r4, #16]
 800d472:	462a      	mov	r2, r5
 800d474:	4639      	mov	r1, r7
 800d476:	4630      	mov	r0, r6
 800d478:	47c0      	blx	r8
 800d47a:	3001      	adds	r0, #1
 800d47c:	d0aa      	beq.n	800d3d4 <_printf_i+0x12c>
 800d47e:	6823      	ldr	r3, [r4, #0]
 800d480:	079b      	lsls	r3, r3, #30
 800d482:	d413      	bmi.n	800d4ac <_printf_i+0x204>
 800d484:	68e0      	ldr	r0, [r4, #12]
 800d486:	9b03      	ldr	r3, [sp, #12]
 800d488:	4298      	cmp	r0, r3
 800d48a:	bfb8      	it	lt
 800d48c:	4618      	movlt	r0, r3
 800d48e:	e7a3      	b.n	800d3d8 <_printf_i+0x130>
 800d490:	2301      	movs	r3, #1
 800d492:	464a      	mov	r2, r9
 800d494:	4639      	mov	r1, r7
 800d496:	4630      	mov	r0, r6
 800d498:	47c0      	blx	r8
 800d49a:	3001      	adds	r0, #1
 800d49c:	d09a      	beq.n	800d3d4 <_printf_i+0x12c>
 800d49e:	3501      	adds	r5, #1
 800d4a0:	68e3      	ldr	r3, [r4, #12]
 800d4a2:	9a03      	ldr	r2, [sp, #12]
 800d4a4:	1a9b      	subs	r3, r3, r2
 800d4a6:	42ab      	cmp	r3, r5
 800d4a8:	dcf2      	bgt.n	800d490 <_printf_i+0x1e8>
 800d4aa:	e7eb      	b.n	800d484 <_printf_i+0x1dc>
 800d4ac:	2500      	movs	r5, #0
 800d4ae:	f104 0919 	add.w	r9, r4, #25
 800d4b2:	e7f5      	b.n	800d4a0 <_printf_i+0x1f8>
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d1ac      	bne.n	800d412 <_printf_i+0x16a>
 800d4b8:	7803      	ldrb	r3, [r0, #0]
 800d4ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d4be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4c2:	e76c      	b.n	800d39e <_printf_i+0xf6>
 800d4c4:	0800f9c5 	.word	0x0800f9c5
 800d4c8:	0800f9d6 	.word	0x0800f9d6

0800d4cc <_sbrk_r>:
 800d4cc:	b538      	push	{r3, r4, r5, lr}
 800d4ce:	4c06      	ldr	r4, [pc, #24]	; (800d4e8 <_sbrk_r+0x1c>)
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	4605      	mov	r5, r0
 800d4d4:	4608      	mov	r0, r1
 800d4d6:	6023      	str	r3, [r4, #0]
 800d4d8:	f7f4 fbcc 	bl	8001c74 <_sbrk>
 800d4dc:	1c43      	adds	r3, r0, #1
 800d4de:	d102      	bne.n	800d4e6 <_sbrk_r+0x1a>
 800d4e0:	6823      	ldr	r3, [r4, #0]
 800d4e2:	b103      	cbz	r3, 800d4e6 <_sbrk_r+0x1a>
 800d4e4:	602b      	str	r3, [r5, #0]
 800d4e6:	bd38      	pop	{r3, r4, r5, pc}
 800d4e8:	20000b6c 	.word	0x20000b6c

0800d4ec <__sread>:
 800d4ec:	b510      	push	{r4, lr}
 800d4ee:	460c      	mov	r4, r1
 800d4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4f4:	f000 fae0 	bl	800dab8 <_read_r>
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	bfab      	itete	ge
 800d4fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4fe:	89a3      	ldrhlt	r3, [r4, #12]
 800d500:	181b      	addge	r3, r3, r0
 800d502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d506:	bfac      	ite	ge
 800d508:	6563      	strge	r3, [r4, #84]	; 0x54
 800d50a:	81a3      	strhlt	r3, [r4, #12]
 800d50c:	bd10      	pop	{r4, pc}

0800d50e <__swrite>:
 800d50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d512:	461f      	mov	r7, r3
 800d514:	898b      	ldrh	r3, [r1, #12]
 800d516:	05db      	lsls	r3, r3, #23
 800d518:	4605      	mov	r5, r0
 800d51a:	460c      	mov	r4, r1
 800d51c:	4616      	mov	r6, r2
 800d51e:	d505      	bpl.n	800d52c <__swrite+0x1e>
 800d520:	2302      	movs	r3, #2
 800d522:	2200      	movs	r2, #0
 800d524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d528:	f000 f9b6 	bl	800d898 <_lseek_r>
 800d52c:	89a3      	ldrh	r3, [r4, #12]
 800d52e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d536:	81a3      	strh	r3, [r4, #12]
 800d538:	4632      	mov	r2, r6
 800d53a:	463b      	mov	r3, r7
 800d53c:	4628      	mov	r0, r5
 800d53e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d542:	f000 b869 	b.w	800d618 <_write_r>

0800d546 <__sseek>:
 800d546:	b510      	push	{r4, lr}
 800d548:	460c      	mov	r4, r1
 800d54a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d54e:	f000 f9a3 	bl	800d898 <_lseek_r>
 800d552:	1c43      	adds	r3, r0, #1
 800d554:	89a3      	ldrh	r3, [r4, #12]
 800d556:	bf15      	itete	ne
 800d558:	6560      	strne	r0, [r4, #84]	; 0x54
 800d55a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d55e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d562:	81a3      	strheq	r3, [r4, #12]
 800d564:	bf18      	it	ne
 800d566:	81a3      	strhne	r3, [r4, #12]
 800d568:	bd10      	pop	{r4, pc}

0800d56a <__sclose>:
 800d56a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d56e:	f000 b8d3 	b.w	800d718 <_close_r>
	...

0800d574 <__swbuf_r>:
 800d574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d576:	460e      	mov	r6, r1
 800d578:	4614      	mov	r4, r2
 800d57a:	4605      	mov	r5, r0
 800d57c:	b118      	cbz	r0, 800d586 <__swbuf_r+0x12>
 800d57e:	6983      	ldr	r3, [r0, #24]
 800d580:	b90b      	cbnz	r3, 800d586 <__swbuf_r+0x12>
 800d582:	f7ff faa5 	bl	800cad0 <__sinit>
 800d586:	4b21      	ldr	r3, [pc, #132]	; (800d60c <__swbuf_r+0x98>)
 800d588:	429c      	cmp	r4, r3
 800d58a:	d12a      	bne.n	800d5e2 <__swbuf_r+0x6e>
 800d58c:	686c      	ldr	r4, [r5, #4]
 800d58e:	69a3      	ldr	r3, [r4, #24]
 800d590:	60a3      	str	r3, [r4, #8]
 800d592:	89a3      	ldrh	r3, [r4, #12]
 800d594:	071a      	lsls	r2, r3, #28
 800d596:	d52e      	bpl.n	800d5f6 <__swbuf_r+0x82>
 800d598:	6923      	ldr	r3, [r4, #16]
 800d59a:	b363      	cbz	r3, 800d5f6 <__swbuf_r+0x82>
 800d59c:	6923      	ldr	r3, [r4, #16]
 800d59e:	6820      	ldr	r0, [r4, #0]
 800d5a0:	1ac0      	subs	r0, r0, r3
 800d5a2:	6963      	ldr	r3, [r4, #20]
 800d5a4:	b2f6      	uxtb	r6, r6
 800d5a6:	4283      	cmp	r3, r0
 800d5a8:	4637      	mov	r7, r6
 800d5aa:	dc04      	bgt.n	800d5b6 <__swbuf_r+0x42>
 800d5ac:	4621      	mov	r1, r4
 800d5ae:	4628      	mov	r0, r5
 800d5b0:	f000 f948 	bl	800d844 <_fflush_r>
 800d5b4:	bb28      	cbnz	r0, 800d602 <__swbuf_r+0x8e>
 800d5b6:	68a3      	ldr	r3, [r4, #8]
 800d5b8:	3b01      	subs	r3, #1
 800d5ba:	60a3      	str	r3, [r4, #8]
 800d5bc:	6823      	ldr	r3, [r4, #0]
 800d5be:	1c5a      	adds	r2, r3, #1
 800d5c0:	6022      	str	r2, [r4, #0]
 800d5c2:	701e      	strb	r6, [r3, #0]
 800d5c4:	6963      	ldr	r3, [r4, #20]
 800d5c6:	3001      	adds	r0, #1
 800d5c8:	4283      	cmp	r3, r0
 800d5ca:	d004      	beq.n	800d5d6 <__swbuf_r+0x62>
 800d5cc:	89a3      	ldrh	r3, [r4, #12]
 800d5ce:	07db      	lsls	r3, r3, #31
 800d5d0:	d519      	bpl.n	800d606 <__swbuf_r+0x92>
 800d5d2:	2e0a      	cmp	r6, #10
 800d5d4:	d117      	bne.n	800d606 <__swbuf_r+0x92>
 800d5d6:	4621      	mov	r1, r4
 800d5d8:	4628      	mov	r0, r5
 800d5da:	f000 f933 	bl	800d844 <_fflush_r>
 800d5de:	b190      	cbz	r0, 800d606 <__swbuf_r+0x92>
 800d5e0:	e00f      	b.n	800d602 <__swbuf_r+0x8e>
 800d5e2:	4b0b      	ldr	r3, [pc, #44]	; (800d610 <__swbuf_r+0x9c>)
 800d5e4:	429c      	cmp	r4, r3
 800d5e6:	d101      	bne.n	800d5ec <__swbuf_r+0x78>
 800d5e8:	68ac      	ldr	r4, [r5, #8]
 800d5ea:	e7d0      	b.n	800d58e <__swbuf_r+0x1a>
 800d5ec:	4b09      	ldr	r3, [pc, #36]	; (800d614 <__swbuf_r+0xa0>)
 800d5ee:	429c      	cmp	r4, r3
 800d5f0:	bf08      	it	eq
 800d5f2:	68ec      	ldreq	r4, [r5, #12]
 800d5f4:	e7cb      	b.n	800d58e <__swbuf_r+0x1a>
 800d5f6:	4621      	mov	r1, r4
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	f000 f81f 	bl	800d63c <__swsetup_r>
 800d5fe:	2800      	cmp	r0, #0
 800d600:	d0cc      	beq.n	800d59c <__swbuf_r+0x28>
 800d602:	f04f 37ff 	mov.w	r7, #4294967295
 800d606:	4638      	mov	r0, r7
 800d608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d60a:	bf00      	nop
 800d60c:	0800f974 	.word	0x0800f974
 800d610:	0800f994 	.word	0x0800f994
 800d614:	0800f954 	.word	0x0800f954

0800d618 <_write_r>:
 800d618:	b538      	push	{r3, r4, r5, lr}
 800d61a:	4c07      	ldr	r4, [pc, #28]	; (800d638 <_write_r+0x20>)
 800d61c:	4605      	mov	r5, r0
 800d61e:	4608      	mov	r0, r1
 800d620:	4611      	mov	r1, r2
 800d622:	2200      	movs	r2, #0
 800d624:	6022      	str	r2, [r4, #0]
 800d626:	461a      	mov	r2, r3
 800d628:	f7f4 fad3 	bl	8001bd2 <_write>
 800d62c:	1c43      	adds	r3, r0, #1
 800d62e:	d102      	bne.n	800d636 <_write_r+0x1e>
 800d630:	6823      	ldr	r3, [r4, #0]
 800d632:	b103      	cbz	r3, 800d636 <_write_r+0x1e>
 800d634:	602b      	str	r3, [r5, #0]
 800d636:	bd38      	pop	{r3, r4, r5, pc}
 800d638:	20000b6c 	.word	0x20000b6c

0800d63c <__swsetup_r>:
 800d63c:	4b32      	ldr	r3, [pc, #200]	; (800d708 <__swsetup_r+0xcc>)
 800d63e:	b570      	push	{r4, r5, r6, lr}
 800d640:	681d      	ldr	r5, [r3, #0]
 800d642:	4606      	mov	r6, r0
 800d644:	460c      	mov	r4, r1
 800d646:	b125      	cbz	r5, 800d652 <__swsetup_r+0x16>
 800d648:	69ab      	ldr	r3, [r5, #24]
 800d64a:	b913      	cbnz	r3, 800d652 <__swsetup_r+0x16>
 800d64c:	4628      	mov	r0, r5
 800d64e:	f7ff fa3f 	bl	800cad0 <__sinit>
 800d652:	4b2e      	ldr	r3, [pc, #184]	; (800d70c <__swsetup_r+0xd0>)
 800d654:	429c      	cmp	r4, r3
 800d656:	d10f      	bne.n	800d678 <__swsetup_r+0x3c>
 800d658:	686c      	ldr	r4, [r5, #4]
 800d65a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d65e:	b29a      	uxth	r2, r3
 800d660:	0715      	lsls	r5, r2, #28
 800d662:	d42c      	bmi.n	800d6be <__swsetup_r+0x82>
 800d664:	06d0      	lsls	r0, r2, #27
 800d666:	d411      	bmi.n	800d68c <__swsetup_r+0x50>
 800d668:	2209      	movs	r2, #9
 800d66a:	6032      	str	r2, [r6, #0]
 800d66c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d670:	81a3      	strh	r3, [r4, #12]
 800d672:	f04f 30ff 	mov.w	r0, #4294967295
 800d676:	e03e      	b.n	800d6f6 <__swsetup_r+0xba>
 800d678:	4b25      	ldr	r3, [pc, #148]	; (800d710 <__swsetup_r+0xd4>)
 800d67a:	429c      	cmp	r4, r3
 800d67c:	d101      	bne.n	800d682 <__swsetup_r+0x46>
 800d67e:	68ac      	ldr	r4, [r5, #8]
 800d680:	e7eb      	b.n	800d65a <__swsetup_r+0x1e>
 800d682:	4b24      	ldr	r3, [pc, #144]	; (800d714 <__swsetup_r+0xd8>)
 800d684:	429c      	cmp	r4, r3
 800d686:	bf08      	it	eq
 800d688:	68ec      	ldreq	r4, [r5, #12]
 800d68a:	e7e6      	b.n	800d65a <__swsetup_r+0x1e>
 800d68c:	0751      	lsls	r1, r2, #29
 800d68e:	d512      	bpl.n	800d6b6 <__swsetup_r+0x7a>
 800d690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d692:	b141      	cbz	r1, 800d6a6 <__swsetup_r+0x6a>
 800d694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d698:	4299      	cmp	r1, r3
 800d69a:	d002      	beq.n	800d6a2 <__swsetup_r+0x66>
 800d69c:	4630      	mov	r0, r6
 800d69e:	f000 f997 	bl	800d9d0 <_free_r>
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	6363      	str	r3, [r4, #52]	; 0x34
 800d6a6:	89a3      	ldrh	r3, [r4, #12]
 800d6a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d6ac:	81a3      	strh	r3, [r4, #12]
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	6063      	str	r3, [r4, #4]
 800d6b2:	6923      	ldr	r3, [r4, #16]
 800d6b4:	6023      	str	r3, [r4, #0]
 800d6b6:	89a3      	ldrh	r3, [r4, #12]
 800d6b8:	f043 0308 	orr.w	r3, r3, #8
 800d6bc:	81a3      	strh	r3, [r4, #12]
 800d6be:	6923      	ldr	r3, [r4, #16]
 800d6c0:	b94b      	cbnz	r3, 800d6d6 <__swsetup_r+0x9a>
 800d6c2:	89a3      	ldrh	r3, [r4, #12]
 800d6c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d6c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6cc:	d003      	beq.n	800d6d6 <__swsetup_r+0x9a>
 800d6ce:	4621      	mov	r1, r4
 800d6d0:	4630      	mov	r0, r6
 800d6d2:	f000 f917 	bl	800d904 <__smakebuf_r>
 800d6d6:	89a2      	ldrh	r2, [r4, #12]
 800d6d8:	f012 0301 	ands.w	r3, r2, #1
 800d6dc:	d00c      	beq.n	800d6f8 <__swsetup_r+0xbc>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	60a3      	str	r3, [r4, #8]
 800d6e2:	6963      	ldr	r3, [r4, #20]
 800d6e4:	425b      	negs	r3, r3
 800d6e6:	61a3      	str	r3, [r4, #24]
 800d6e8:	6923      	ldr	r3, [r4, #16]
 800d6ea:	b953      	cbnz	r3, 800d702 <__swsetup_r+0xc6>
 800d6ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d6f4:	d1ba      	bne.n	800d66c <__swsetup_r+0x30>
 800d6f6:	bd70      	pop	{r4, r5, r6, pc}
 800d6f8:	0792      	lsls	r2, r2, #30
 800d6fa:	bf58      	it	pl
 800d6fc:	6963      	ldrpl	r3, [r4, #20]
 800d6fe:	60a3      	str	r3, [r4, #8]
 800d700:	e7f2      	b.n	800d6e8 <__swsetup_r+0xac>
 800d702:	2000      	movs	r0, #0
 800d704:	e7f7      	b.n	800d6f6 <__swsetup_r+0xba>
 800d706:	bf00      	nop
 800d708:	20000040 	.word	0x20000040
 800d70c:	0800f974 	.word	0x0800f974
 800d710:	0800f994 	.word	0x0800f994
 800d714:	0800f954 	.word	0x0800f954

0800d718 <_close_r>:
 800d718:	b538      	push	{r3, r4, r5, lr}
 800d71a:	4c06      	ldr	r4, [pc, #24]	; (800d734 <_close_r+0x1c>)
 800d71c:	2300      	movs	r3, #0
 800d71e:	4605      	mov	r5, r0
 800d720:	4608      	mov	r0, r1
 800d722:	6023      	str	r3, [r4, #0]
 800d724:	f7f4 fa71 	bl	8001c0a <_close>
 800d728:	1c43      	adds	r3, r0, #1
 800d72a:	d102      	bne.n	800d732 <_close_r+0x1a>
 800d72c:	6823      	ldr	r3, [r4, #0]
 800d72e:	b103      	cbz	r3, 800d732 <_close_r+0x1a>
 800d730:	602b      	str	r3, [r5, #0]
 800d732:	bd38      	pop	{r3, r4, r5, pc}
 800d734:	20000b6c 	.word	0x20000b6c

0800d738 <__sflush_r>:
 800d738:	898a      	ldrh	r2, [r1, #12]
 800d73a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d73e:	4605      	mov	r5, r0
 800d740:	0710      	lsls	r0, r2, #28
 800d742:	460c      	mov	r4, r1
 800d744:	d458      	bmi.n	800d7f8 <__sflush_r+0xc0>
 800d746:	684b      	ldr	r3, [r1, #4]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	dc05      	bgt.n	800d758 <__sflush_r+0x20>
 800d74c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d74e:	2b00      	cmp	r3, #0
 800d750:	dc02      	bgt.n	800d758 <__sflush_r+0x20>
 800d752:	2000      	movs	r0, #0
 800d754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d75a:	2e00      	cmp	r6, #0
 800d75c:	d0f9      	beq.n	800d752 <__sflush_r+0x1a>
 800d75e:	2300      	movs	r3, #0
 800d760:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d764:	682f      	ldr	r7, [r5, #0]
 800d766:	6a21      	ldr	r1, [r4, #32]
 800d768:	602b      	str	r3, [r5, #0]
 800d76a:	d032      	beq.n	800d7d2 <__sflush_r+0x9a>
 800d76c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d76e:	89a3      	ldrh	r3, [r4, #12]
 800d770:	075a      	lsls	r2, r3, #29
 800d772:	d505      	bpl.n	800d780 <__sflush_r+0x48>
 800d774:	6863      	ldr	r3, [r4, #4]
 800d776:	1ac0      	subs	r0, r0, r3
 800d778:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d77a:	b10b      	cbz	r3, 800d780 <__sflush_r+0x48>
 800d77c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d77e:	1ac0      	subs	r0, r0, r3
 800d780:	2300      	movs	r3, #0
 800d782:	4602      	mov	r2, r0
 800d784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d786:	6a21      	ldr	r1, [r4, #32]
 800d788:	4628      	mov	r0, r5
 800d78a:	47b0      	blx	r6
 800d78c:	1c43      	adds	r3, r0, #1
 800d78e:	89a3      	ldrh	r3, [r4, #12]
 800d790:	d106      	bne.n	800d7a0 <__sflush_r+0x68>
 800d792:	6829      	ldr	r1, [r5, #0]
 800d794:	291d      	cmp	r1, #29
 800d796:	d848      	bhi.n	800d82a <__sflush_r+0xf2>
 800d798:	4a29      	ldr	r2, [pc, #164]	; (800d840 <__sflush_r+0x108>)
 800d79a:	40ca      	lsrs	r2, r1
 800d79c:	07d6      	lsls	r6, r2, #31
 800d79e:	d544      	bpl.n	800d82a <__sflush_r+0xf2>
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	6062      	str	r2, [r4, #4]
 800d7a4:	04d9      	lsls	r1, r3, #19
 800d7a6:	6922      	ldr	r2, [r4, #16]
 800d7a8:	6022      	str	r2, [r4, #0]
 800d7aa:	d504      	bpl.n	800d7b6 <__sflush_r+0x7e>
 800d7ac:	1c42      	adds	r2, r0, #1
 800d7ae:	d101      	bne.n	800d7b4 <__sflush_r+0x7c>
 800d7b0:	682b      	ldr	r3, [r5, #0]
 800d7b2:	b903      	cbnz	r3, 800d7b6 <__sflush_r+0x7e>
 800d7b4:	6560      	str	r0, [r4, #84]	; 0x54
 800d7b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7b8:	602f      	str	r7, [r5, #0]
 800d7ba:	2900      	cmp	r1, #0
 800d7bc:	d0c9      	beq.n	800d752 <__sflush_r+0x1a>
 800d7be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7c2:	4299      	cmp	r1, r3
 800d7c4:	d002      	beq.n	800d7cc <__sflush_r+0x94>
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	f000 f902 	bl	800d9d0 <_free_r>
 800d7cc:	2000      	movs	r0, #0
 800d7ce:	6360      	str	r0, [r4, #52]	; 0x34
 800d7d0:	e7c0      	b.n	800d754 <__sflush_r+0x1c>
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	47b0      	blx	r6
 800d7d8:	1c41      	adds	r1, r0, #1
 800d7da:	d1c8      	bne.n	800d76e <__sflush_r+0x36>
 800d7dc:	682b      	ldr	r3, [r5, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d0c5      	beq.n	800d76e <__sflush_r+0x36>
 800d7e2:	2b1d      	cmp	r3, #29
 800d7e4:	d001      	beq.n	800d7ea <__sflush_r+0xb2>
 800d7e6:	2b16      	cmp	r3, #22
 800d7e8:	d101      	bne.n	800d7ee <__sflush_r+0xb6>
 800d7ea:	602f      	str	r7, [r5, #0]
 800d7ec:	e7b1      	b.n	800d752 <__sflush_r+0x1a>
 800d7ee:	89a3      	ldrh	r3, [r4, #12]
 800d7f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7f4:	81a3      	strh	r3, [r4, #12]
 800d7f6:	e7ad      	b.n	800d754 <__sflush_r+0x1c>
 800d7f8:	690f      	ldr	r7, [r1, #16]
 800d7fa:	2f00      	cmp	r7, #0
 800d7fc:	d0a9      	beq.n	800d752 <__sflush_r+0x1a>
 800d7fe:	0793      	lsls	r3, r2, #30
 800d800:	680e      	ldr	r6, [r1, #0]
 800d802:	bf08      	it	eq
 800d804:	694b      	ldreq	r3, [r1, #20]
 800d806:	600f      	str	r7, [r1, #0]
 800d808:	bf18      	it	ne
 800d80a:	2300      	movne	r3, #0
 800d80c:	eba6 0807 	sub.w	r8, r6, r7
 800d810:	608b      	str	r3, [r1, #8]
 800d812:	f1b8 0f00 	cmp.w	r8, #0
 800d816:	dd9c      	ble.n	800d752 <__sflush_r+0x1a>
 800d818:	4643      	mov	r3, r8
 800d81a:	463a      	mov	r2, r7
 800d81c:	6a21      	ldr	r1, [r4, #32]
 800d81e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d820:	4628      	mov	r0, r5
 800d822:	47b0      	blx	r6
 800d824:	2800      	cmp	r0, #0
 800d826:	dc06      	bgt.n	800d836 <__sflush_r+0xfe>
 800d828:	89a3      	ldrh	r3, [r4, #12]
 800d82a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d82e:	81a3      	strh	r3, [r4, #12]
 800d830:	f04f 30ff 	mov.w	r0, #4294967295
 800d834:	e78e      	b.n	800d754 <__sflush_r+0x1c>
 800d836:	4407      	add	r7, r0
 800d838:	eba8 0800 	sub.w	r8, r8, r0
 800d83c:	e7e9      	b.n	800d812 <__sflush_r+0xda>
 800d83e:	bf00      	nop
 800d840:	20400001 	.word	0x20400001

0800d844 <_fflush_r>:
 800d844:	b538      	push	{r3, r4, r5, lr}
 800d846:	690b      	ldr	r3, [r1, #16]
 800d848:	4605      	mov	r5, r0
 800d84a:	460c      	mov	r4, r1
 800d84c:	b1db      	cbz	r3, 800d886 <_fflush_r+0x42>
 800d84e:	b118      	cbz	r0, 800d858 <_fflush_r+0x14>
 800d850:	6983      	ldr	r3, [r0, #24]
 800d852:	b90b      	cbnz	r3, 800d858 <_fflush_r+0x14>
 800d854:	f7ff f93c 	bl	800cad0 <__sinit>
 800d858:	4b0c      	ldr	r3, [pc, #48]	; (800d88c <_fflush_r+0x48>)
 800d85a:	429c      	cmp	r4, r3
 800d85c:	d109      	bne.n	800d872 <_fflush_r+0x2e>
 800d85e:	686c      	ldr	r4, [r5, #4]
 800d860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d864:	b17b      	cbz	r3, 800d886 <_fflush_r+0x42>
 800d866:	4621      	mov	r1, r4
 800d868:	4628      	mov	r0, r5
 800d86a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d86e:	f7ff bf63 	b.w	800d738 <__sflush_r>
 800d872:	4b07      	ldr	r3, [pc, #28]	; (800d890 <_fflush_r+0x4c>)
 800d874:	429c      	cmp	r4, r3
 800d876:	d101      	bne.n	800d87c <_fflush_r+0x38>
 800d878:	68ac      	ldr	r4, [r5, #8]
 800d87a:	e7f1      	b.n	800d860 <_fflush_r+0x1c>
 800d87c:	4b05      	ldr	r3, [pc, #20]	; (800d894 <_fflush_r+0x50>)
 800d87e:	429c      	cmp	r4, r3
 800d880:	bf08      	it	eq
 800d882:	68ec      	ldreq	r4, [r5, #12]
 800d884:	e7ec      	b.n	800d860 <_fflush_r+0x1c>
 800d886:	2000      	movs	r0, #0
 800d888:	bd38      	pop	{r3, r4, r5, pc}
 800d88a:	bf00      	nop
 800d88c:	0800f974 	.word	0x0800f974
 800d890:	0800f994 	.word	0x0800f994
 800d894:	0800f954 	.word	0x0800f954

0800d898 <_lseek_r>:
 800d898:	b538      	push	{r3, r4, r5, lr}
 800d89a:	4c07      	ldr	r4, [pc, #28]	; (800d8b8 <_lseek_r+0x20>)
 800d89c:	4605      	mov	r5, r0
 800d89e:	4608      	mov	r0, r1
 800d8a0:	4611      	mov	r1, r2
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	6022      	str	r2, [r4, #0]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	f7f4 f9d6 	bl	8001c58 <_lseek>
 800d8ac:	1c43      	adds	r3, r0, #1
 800d8ae:	d102      	bne.n	800d8b6 <_lseek_r+0x1e>
 800d8b0:	6823      	ldr	r3, [r4, #0]
 800d8b2:	b103      	cbz	r3, 800d8b6 <_lseek_r+0x1e>
 800d8b4:	602b      	str	r3, [r5, #0]
 800d8b6:	bd38      	pop	{r3, r4, r5, pc}
 800d8b8:	20000b6c 	.word	0x20000b6c

0800d8bc <__swhatbuf_r>:
 800d8bc:	b570      	push	{r4, r5, r6, lr}
 800d8be:	460e      	mov	r6, r1
 800d8c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8c4:	2900      	cmp	r1, #0
 800d8c6:	b096      	sub	sp, #88	; 0x58
 800d8c8:	4614      	mov	r4, r2
 800d8ca:	461d      	mov	r5, r3
 800d8cc:	da07      	bge.n	800d8de <__swhatbuf_r+0x22>
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	602b      	str	r3, [r5, #0]
 800d8d2:	89b3      	ldrh	r3, [r6, #12]
 800d8d4:	061a      	lsls	r2, r3, #24
 800d8d6:	d410      	bmi.n	800d8fa <__swhatbuf_r+0x3e>
 800d8d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8dc:	e00e      	b.n	800d8fc <__swhatbuf_r+0x40>
 800d8de:	466a      	mov	r2, sp
 800d8e0:	f000 f8fc 	bl	800dadc <_fstat_r>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	dbf2      	blt.n	800d8ce <__swhatbuf_r+0x12>
 800d8e8:	9a01      	ldr	r2, [sp, #4]
 800d8ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d8ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d8f2:	425a      	negs	r2, r3
 800d8f4:	415a      	adcs	r2, r3
 800d8f6:	602a      	str	r2, [r5, #0]
 800d8f8:	e7ee      	b.n	800d8d8 <__swhatbuf_r+0x1c>
 800d8fa:	2340      	movs	r3, #64	; 0x40
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	6023      	str	r3, [r4, #0]
 800d900:	b016      	add	sp, #88	; 0x58
 800d902:	bd70      	pop	{r4, r5, r6, pc}

0800d904 <__smakebuf_r>:
 800d904:	898b      	ldrh	r3, [r1, #12]
 800d906:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d908:	079d      	lsls	r5, r3, #30
 800d90a:	4606      	mov	r6, r0
 800d90c:	460c      	mov	r4, r1
 800d90e:	d507      	bpl.n	800d920 <__smakebuf_r+0x1c>
 800d910:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d914:	6023      	str	r3, [r4, #0]
 800d916:	6123      	str	r3, [r4, #16]
 800d918:	2301      	movs	r3, #1
 800d91a:	6163      	str	r3, [r4, #20]
 800d91c:	b002      	add	sp, #8
 800d91e:	bd70      	pop	{r4, r5, r6, pc}
 800d920:	ab01      	add	r3, sp, #4
 800d922:	466a      	mov	r2, sp
 800d924:	f7ff ffca 	bl	800d8bc <__swhatbuf_r>
 800d928:	9900      	ldr	r1, [sp, #0]
 800d92a:	4605      	mov	r5, r0
 800d92c:	4630      	mov	r0, r6
 800d92e:	f7ff f959 	bl	800cbe4 <_malloc_r>
 800d932:	b948      	cbnz	r0, 800d948 <__smakebuf_r+0x44>
 800d934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d938:	059a      	lsls	r2, r3, #22
 800d93a:	d4ef      	bmi.n	800d91c <__smakebuf_r+0x18>
 800d93c:	f023 0303 	bic.w	r3, r3, #3
 800d940:	f043 0302 	orr.w	r3, r3, #2
 800d944:	81a3      	strh	r3, [r4, #12]
 800d946:	e7e3      	b.n	800d910 <__smakebuf_r+0xc>
 800d948:	4b0d      	ldr	r3, [pc, #52]	; (800d980 <__smakebuf_r+0x7c>)
 800d94a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d94c:	89a3      	ldrh	r3, [r4, #12]
 800d94e:	6020      	str	r0, [r4, #0]
 800d950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d954:	81a3      	strh	r3, [r4, #12]
 800d956:	9b00      	ldr	r3, [sp, #0]
 800d958:	6163      	str	r3, [r4, #20]
 800d95a:	9b01      	ldr	r3, [sp, #4]
 800d95c:	6120      	str	r0, [r4, #16]
 800d95e:	b15b      	cbz	r3, 800d978 <__smakebuf_r+0x74>
 800d960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d964:	4630      	mov	r0, r6
 800d966:	f000 f8cb 	bl	800db00 <_isatty_r>
 800d96a:	b128      	cbz	r0, 800d978 <__smakebuf_r+0x74>
 800d96c:	89a3      	ldrh	r3, [r4, #12]
 800d96e:	f023 0303 	bic.w	r3, r3, #3
 800d972:	f043 0301 	orr.w	r3, r3, #1
 800d976:	81a3      	strh	r3, [r4, #12]
 800d978:	89a3      	ldrh	r3, [r4, #12]
 800d97a:	431d      	orrs	r5, r3
 800d97c:	81a5      	strh	r5, [r4, #12]
 800d97e:	e7cd      	b.n	800d91c <__smakebuf_r+0x18>
 800d980:	0800ca99 	.word	0x0800ca99

0800d984 <memcpy>:
 800d984:	b510      	push	{r4, lr}
 800d986:	1e43      	subs	r3, r0, #1
 800d988:	440a      	add	r2, r1
 800d98a:	4291      	cmp	r1, r2
 800d98c:	d100      	bne.n	800d990 <memcpy+0xc>
 800d98e:	bd10      	pop	{r4, pc}
 800d990:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d994:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d998:	e7f7      	b.n	800d98a <memcpy+0x6>

0800d99a <memmove>:
 800d99a:	4288      	cmp	r0, r1
 800d99c:	b510      	push	{r4, lr}
 800d99e:	eb01 0302 	add.w	r3, r1, r2
 800d9a2:	d807      	bhi.n	800d9b4 <memmove+0x1a>
 800d9a4:	1e42      	subs	r2, r0, #1
 800d9a6:	4299      	cmp	r1, r3
 800d9a8:	d00a      	beq.n	800d9c0 <memmove+0x26>
 800d9aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9ae:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d9b2:	e7f8      	b.n	800d9a6 <memmove+0xc>
 800d9b4:	4283      	cmp	r3, r0
 800d9b6:	d9f5      	bls.n	800d9a4 <memmove+0xa>
 800d9b8:	1881      	adds	r1, r0, r2
 800d9ba:	1ad2      	subs	r2, r2, r3
 800d9bc:	42d3      	cmn	r3, r2
 800d9be:	d100      	bne.n	800d9c2 <memmove+0x28>
 800d9c0:	bd10      	pop	{r4, pc}
 800d9c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9c6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d9ca:	e7f7      	b.n	800d9bc <memmove+0x22>

0800d9cc <__malloc_lock>:
 800d9cc:	4770      	bx	lr

0800d9ce <__malloc_unlock>:
 800d9ce:	4770      	bx	lr

0800d9d0 <_free_r>:
 800d9d0:	b538      	push	{r3, r4, r5, lr}
 800d9d2:	4605      	mov	r5, r0
 800d9d4:	2900      	cmp	r1, #0
 800d9d6:	d045      	beq.n	800da64 <_free_r+0x94>
 800d9d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9dc:	1f0c      	subs	r4, r1, #4
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	bfb8      	it	lt
 800d9e2:	18e4      	addlt	r4, r4, r3
 800d9e4:	f7ff fff2 	bl	800d9cc <__malloc_lock>
 800d9e8:	4a1f      	ldr	r2, [pc, #124]	; (800da68 <_free_r+0x98>)
 800d9ea:	6813      	ldr	r3, [r2, #0]
 800d9ec:	4610      	mov	r0, r2
 800d9ee:	b933      	cbnz	r3, 800d9fe <_free_r+0x2e>
 800d9f0:	6063      	str	r3, [r4, #4]
 800d9f2:	6014      	str	r4, [r2, #0]
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9fa:	f7ff bfe8 	b.w	800d9ce <__malloc_unlock>
 800d9fe:	42a3      	cmp	r3, r4
 800da00:	d90c      	bls.n	800da1c <_free_r+0x4c>
 800da02:	6821      	ldr	r1, [r4, #0]
 800da04:	1862      	adds	r2, r4, r1
 800da06:	4293      	cmp	r3, r2
 800da08:	bf04      	itt	eq
 800da0a:	681a      	ldreq	r2, [r3, #0]
 800da0c:	685b      	ldreq	r3, [r3, #4]
 800da0e:	6063      	str	r3, [r4, #4]
 800da10:	bf04      	itt	eq
 800da12:	1852      	addeq	r2, r2, r1
 800da14:	6022      	streq	r2, [r4, #0]
 800da16:	6004      	str	r4, [r0, #0]
 800da18:	e7ec      	b.n	800d9f4 <_free_r+0x24>
 800da1a:	4613      	mov	r3, r2
 800da1c:	685a      	ldr	r2, [r3, #4]
 800da1e:	b10a      	cbz	r2, 800da24 <_free_r+0x54>
 800da20:	42a2      	cmp	r2, r4
 800da22:	d9fa      	bls.n	800da1a <_free_r+0x4a>
 800da24:	6819      	ldr	r1, [r3, #0]
 800da26:	1858      	adds	r0, r3, r1
 800da28:	42a0      	cmp	r0, r4
 800da2a:	d10b      	bne.n	800da44 <_free_r+0x74>
 800da2c:	6820      	ldr	r0, [r4, #0]
 800da2e:	4401      	add	r1, r0
 800da30:	1858      	adds	r0, r3, r1
 800da32:	4282      	cmp	r2, r0
 800da34:	6019      	str	r1, [r3, #0]
 800da36:	d1dd      	bne.n	800d9f4 <_free_r+0x24>
 800da38:	6810      	ldr	r0, [r2, #0]
 800da3a:	6852      	ldr	r2, [r2, #4]
 800da3c:	605a      	str	r2, [r3, #4]
 800da3e:	4401      	add	r1, r0
 800da40:	6019      	str	r1, [r3, #0]
 800da42:	e7d7      	b.n	800d9f4 <_free_r+0x24>
 800da44:	d902      	bls.n	800da4c <_free_r+0x7c>
 800da46:	230c      	movs	r3, #12
 800da48:	602b      	str	r3, [r5, #0]
 800da4a:	e7d3      	b.n	800d9f4 <_free_r+0x24>
 800da4c:	6820      	ldr	r0, [r4, #0]
 800da4e:	1821      	adds	r1, r4, r0
 800da50:	428a      	cmp	r2, r1
 800da52:	bf04      	itt	eq
 800da54:	6811      	ldreq	r1, [r2, #0]
 800da56:	6852      	ldreq	r2, [r2, #4]
 800da58:	6062      	str	r2, [r4, #4]
 800da5a:	bf04      	itt	eq
 800da5c:	1809      	addeq	r1, r1, r0
 800da5e:	6021      	streq	r1, [r4, #0]
 800da60:	605c      	str	r4, [r3, #4]
 800da62:	e7c7      	b.n	800d9f4 <_free_r+0x24>
 800da64:	bd38      	pop	{r3, r4, r5, pc}
 800da66:	bf00      	nop
 800da68:	20000314 	.word	0x20000314

0800da6c <_realloc_r>:
 800da6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da6e:	4607      	mov	r7, r0
 800da70:	4614      	mov	r4, r2
 800da72:	460e      	mov	r6, r1
 800da74:	b921      	cbnz	r1, 800da80 <_realloc_r+0x14>
 800da76:	4611      	mov	r1, r2
 800da78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da7c:	f7ff b8b2 	b.w	800cbe4 <_malloc_r>
 800da80:	b922      	cbnz	r2, 800da8c <_realloc_r+0x20>
 800da82:	f7ff ffa5 	bl	800d9d0 <_free_r>
 800da86:	4625      	mov	r5, r4
 800da88:	4628      	mov	r0, r5
 800da8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da8c:	f000 f848 	bl	800db20 <_malloc_usable_size_r>
 800da90:	42a0      	cmp	r0, r4
 800da92:	d20f      	bcs.n	800dab4 <_realloc_r+0x48>
 800da94:	4621      	mov	r1, r4
 800da96:	4638      	mov	r0, r7
 800da98:	f7ff f8a4 	bl	800cbe4 <_malloc_r>
 800da9c:	4605      	mov	r5, r0
 800da9e:	2800      	cmp	r0, #0
 800daa0:	d0f2      	beq.n	800da88 <_realloc_r+0x1c>
 800daa2:	4631      	mov	r1, r6
 800daa4:	4622      	mov	r2, r4
 800daa6:	f7ff ff6d 	bl	800d984 <memcpy>
 800daaa:	4631      	mov	r1, r6
 800daac:	4638      	mov	r0, r7
 800daae:	f7ff ff8f 	bl	800d9d0 <_free_r>
 800dab2:	e7e9      	b.n	800da88 <_realloc_r+0x1c>
 800dab4:	4635      	mov	r5, r6
 800dab6:	e7e7      	b.n	800da88 <_realloc_r+0x1c>

0800dab8 <_read_r>:
 800dab8:	b538      	push	{r3, r4, r5, lr}
 800daba:	4c07      	ldr	r4, [pc, #28]	; (800dad8 <_read_r+0x20>)
 800dabc:	4605      	mov	r5, r0
 800dabe:	4608      	mov	r0, r1
 800dac0:	4611      	mov	r1, r2
 800dac2:	2200      	movs	r2, #0
 800dac4:	6022      	str	r2, [r4, #0]
 800dac6:	461a      	mov	r2, r3
 800dac8:	f7f4 f866 	bl	8001b98 <_read>
 800dacc:	1c43      	adds	r3, r0, #1
 800dace:	d102      	bne.n	800dad6 <_read_r+0x1e>
 800dad0:	6823      	ldr	r3, [r4, #0]
 800dad2:	b103      	cbz	r3, 800dad6 <_read_r+0x1e>
 800dad4:	602b      	str	r3, [r5, #0]
 800dad6:	bd38      	pop	{r3, r4, r5, pc}
 800dad8:	20000b6c 	.word	0x20000b6c

0800dadc <_fstat_r>:
 800dadc:	b538      	push	{r3, r4, r5, lr}
 800dade:	4c07      	ldr	r4, [pc, #28]	; (800dafc <_fstat_r+0x20>)
 800dae0:	2300      	movs	r3, #0
 800dae2:	4605      	mov	r5, r0
 800dae4:	4608      	mov	r0, r1
 800dae6:	4611      	mov	r1, r2
 800dae8:	6023      	str	r3, [r4, #0]
 800daea:	f7f4 f89a 	bl	8001c22 <_fstat>
 800daee:	1c43      	adds	r3, r0, #1
 800daf0:	d102      	bne.n	800daf8 <_fstat_r+0x1c>
 800daf2:	6823      	ldr	r3, [r4, #0]
 800daf4:	b103      	cbz	r3, 800daf8 <_fstat_r+0x1c>
 800daf6:	602b      	str	r3, [r5, #0]
 800daf8:	bd38      	pop	{r3, r4, r5, pc}
 800dafa:	bf00      	nop
 800dafc:	20000b6c 	.word	0x20000b6c

0800db00 <_isatty_r>:
 800db00:	b538      	push	{r3, r4, r5, lr}
 800db02:	4c06      	ldr	r4, [pc, #24]	; (800db1c <_isatty_r+0x1c>)
 800db04:	2300      	movs	r3, #0
 800db06:	4605      	mov	r5, r0
 800db08:	4608      	mov	r0, r1
 800db0a:	6023      	str	r3, [r4, #0]
 800db0c:	f7f4 f899 	bl	8001c42 <_isatty>
 800db10:	1c43      	adds	r3, r0, #1
 800db12:	d102      	bne.n	800db1a <_isatty_r+0x1a>
 800db14:	6823      	ldr	r3, [r4, #0]
 800db16:	b103      	cbz	r3, 800db1a <_isatty_r+0x1a>
 800db18:	602b      	str	r3, [r5, #0]
 800db1a:	bd38      	pop	{r3, r4, r5, pc}
 800db1c:	20000b6c 	.word	0x20000b6c

0800db20 <_malloc_usable_size_r>:
 800db20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db24:	1f18      	subs	r0, r3, #4
 800db26:	2b00      	cmp	r3, #0
 800db28:	bfbc      	itt	lt
 800db2a:	580b      	ldrlt	r3, [r1, r0]
 800db2c:	18c0      	addlt	r0, r0, r3
 800db2e:	4770      	bx	lr

0800db30 <_init>:
 800db30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db32:	bf00      	nop
 800db34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db36:	bc08      	pop	{r3}
 800db38:	469e      	mov	lr, r3
 800db3a:	4770      	bx	lr

0800db3c <_fini>:
 800db3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db3e:	bf00      	nop
 800db40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db42:	bc08      	pop	{r3}
 800db44:	469e      	mov	lr, r3
 800db46:	4770      	bx	lr
