
STM32F769_LCD_SDCARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9a4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001eac  0800dba4  0800dba4  0001dba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa50  0800fa50  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa50  0800fa50  0001fa50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa58  0800fa58  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa58  0800fa58  0001fa58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa5c  0800fa5c  0001fa5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800fa60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000acc  200000a8  0800fb08  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b74  0800fb08  00020b74  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c2e6  00000000  00000000  000200d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000511a  00000000  00000000  0004c3bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021d8  00000000  00000000  000514d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f38  00000000  00000000  000536b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354d3  00000000  00000000  000555e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e0fe  00000000  00000000  0008aabb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012ca1c  00000000  00000000  000a8bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d55d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096a4  00000000  00000000  001d5650  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a8 	.word	0x200000a8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800db8c 	.word	0x0800db8c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000ac 	.word	0x200000ac
 800023c:	0800db8c 	.word	0x0800db8c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
 80005f6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f003 f900 	bl	80037fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f8a4 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fb9c 	bl	8000d3c <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000604:	f000 f946 	bl	8000894 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8000608:	f000 f97c 	bl	8000904 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 800060c:	f000 fb48 	bl	8000ca0 <MX_FMC_Init>
  MX_LTDC_Init();
 8000610:	f000 fa78 	bl	8000b04 <MX_LTDC_Init>
  MX_SDMMC2_SD_Init();
 8000614:	f000 faf4 	bl	8000c00 <MX_SDMMC2_SD_Init>
  MX_USART1_UART_Init();
 8000618:	f000 fb12 	bl	8000c40 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800061c:	f00a fb42 	bl	800aca4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000620:	f002 f93f 	bl	80028a2 <BSP_LCD_Init>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000624:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000628:	2000      	movs	r0, #0
 800062a:	f002 fad7 	bl	8002bdc <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 800062e:	2000      	movs	r0, #0
 8000630:	f002 fb34 	bl	8002c9c <BSP_LCD_SelectLayer>

  /* Touchscreen initialization */
  if (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize()) == TS_ERROR) {
 8000634:	f002 faba 	bl	8002bac <BSP_LCD_GetXSize>
 8000638:	4603      	mov	r3, r0
 800063a:	b29c      	uxth	r4, r3
 800063c:	f002 fac2 	bl	8002bc4 <BSP_LCD_GetYSize>
 8000640:	4603      	mov	r3, r0
 8000642:	b29b      	uxth	r3, r3
 8000644:	4619      	mov	r1, r3
 8000646:	4620      	mov	r0, r4
 8000648:	f003 f878 	bl	800373c <BSP_TS_Init>
	  //printf("BSP_TS_Init error\n");
  }

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	f002 fb80 	bl	8002d54 <BSP_LCD_Clear>

  /* Set Touchscreen Demo1 description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000654:	4834      	ldr	r0, [pc, #208]	; (8000728 <main+0x138>)
 8000656:	f002 fb31 	bl	8002cbc <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 40);
 800065a:	f002 faa7 	bl	8002bac <BSP_LCD_GetXSize>
 800065e:	4603      	mov	r3, r0
 8000660:	b29a      	uxth	r2, r3
 8000662:	2328      	movs	r3, #40	; 0x28
 8000664:	2100      	movs	r1, #0
 8000666:	2000      	movs	r0, #0
 8000668:	f002 fca4 	bl	8002fb4 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
 8000670:	f002 fb24 	bl	8002cbc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8000674:	482c      	ldr	r0, [pc, #176]	; (8000728 <main+0x138>)
 8000676:	f002 fb39 	bl	8002cec <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 800067a:	482c      	ldr	r0, [pc, #176]	; (800072c <main+0x13c>)
 800067c:	f002 fb50 	bl	8002d20 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"Projekt za predmet vgrajeni sistemi", CENTER_MODE);
 8000680:	2301      	movs	r3, #1
 8000682:	4a2b      	ldr	r2, [pc, #172]	; (8000730 <main+0x140>)
 8000684:	2100      	movs	r1, #0
 8000686:	2000      	movs	r0, #0
 8000688:	f002 fbd0 	bl	8002e2c <BSP_LCD_DisplayStringAt>

  if(BSP_SD_IsDetected() == SD_PRESENT) {
 800068c:	f00a fb8e 	bl	800adac <BSP_SD_IsDetected>
 8000690:	4603      	mov	r3, r0
 8000692:	2b01      	cmp	r3, #1
 8000694:	d10e      	bne.n	80006b4 <main+0xc4>
	  HAL_UART_Transmit(&huart1, (uint8_t *)"SDCARD OK", 9, HAL_MAX_DELAY);
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	2209      	movs	r2, #9
 800069c:	4925      	ldr	r1, [pc, #148]	; (8000734 <main+0x144>)
 800069e:	4826      	ldr	r0, [pc, #152]	; (8000738 <main+0x148>)
 80006a0:	f009 f870 	bl	8009784 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t *) "\n\r", 2, HAL_MAX_DELAY);
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	2202      	movs	r2, #2
 80006aa:	4924      	ldr	r1, [pc, #144]	; (800073c <main+0x14c>)
 80006ac:	4822      	ldr	r0, [pc, #136]	; (8000738 <main+0x148>)
 80006ae:	f009 f869 	bl	8009784 <HAL_UART_Transmit>
 80006b2:	e00d      	b.n	80006d0 <main+0xe0>

  } else {
	  HAL_UART_Transmit(&huart1, (uint8_t *)"SDCARD NOK", 10, HAL_MAX_DELAY);
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	220a      	movs	r2, #10
 80006ba:	4921      	ldr	r1, [pc, #132]	; (8000740 <main+0x150>)
 80006bc:	481e      	ldr	r0, [pc, #120]	; (8000738 <main+0x148>)
 80006be:	f009 f861 	bl	8009784 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t *) "\n\r", 2, HAL_MAX_DELAY);
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	2202      	movs	r2, #2
 80006c8:	491c      	ldr	r1, [pc, #112]	; (800073c <main+0x14c>)
 80006ca:	481b      	ldr	r0, [pc, #108]	; (8000738 <main+0x148>)
 80006cc:	f009 f85a 	bl	8009784 <HAL_UART_Transmit>
  FRESULT res; /* Variable that shows the status of fatfs functions */
  FATFS SDFatFs;
  char buff[256];


  res = BSP_SD_Init(); /* Initialize SD card, if initialization is not complete the value if res will be different than FR_OK */
 80006d0:	f00a fafa 	bl	800acc8 <BSP_SD_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
  if(res != FR_OK) {
 80006da:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <main+0xf6>
	  Error_Handler();
 80006e2:	f000 ff89 	bl	80015f8 <Error_Handler>
  }

  res = f_mount(&SDFatFs, "", 1); /* Mount the SD card and register the work area*/
 80006e6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80006ea:	2201      	movs	r2, #1
 80006ec:	4915      	ldr	r1, [pc, #84]	; (8000744 <main+0x154>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f00b fffa 	bl	800c6e8 <f_mount>
 80006f4:	4603      	mov	r3, r0
 80006f6:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
  if(res != FR_OK) {
 80006fa:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <main+0x116>
	  Error_Handler();
 8000702:	f000 ff79 	bl	80015f8 <Error_Handler>
  }

  strcpy(buff, "/");
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	222f      	movs	r2, #47	; 0x2f
 800070a:	801a      	strh	r2, [r3, #0]
  res = scan_files(buff); /* Search the SD card for directories and files */
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fea6 	bl	8001460 <scan_files>
 8000714:	4603      	mov	r3, r0
 8000716:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
  if(res != FR_OK) {
 800071a:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <main+0x136>
	  Error_Handler();
 8000722:	f000 ff69 	bl	80015f8 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000726:	e7fe      	b.n	8000726 <main+0x136>
 8000728:	ff0000ff 	.word	0xff0000ff
 800072c:	20000030 	.word	0x20000030
 8000730:	0800dba4 	.word	0x0800dba4
 8000734:	0800dbc8 	.word	0x0800dbc8
 8000738:	2000049c 	.word	0x2000049c
 800073c:	0800dbd4 	.word	0x0800dbd4
 8000740:	0800dbd8 	.word	0x0800dbd8
 8000744:	0800dbe4 	.word	0x0800dbe4

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b0b8      	sub	sp, #224	; 0xe0
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000752:	2234      	movs	r2, #52	; 0x34
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f00c f968 	bl	800ca2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	2290      	movs	r2, #144	; 0x90
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f00c f959 	bl	800ca2c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800077a:	f006 fc39 	bl	8006ff0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b42      	ldr	r3, [pc, #264]	; (8000888 <SystemClock_Config+0x140>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	4a41      	ldr	r2, [pc, #260]	; (8000888 <SystemClock_Config+0x140>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	6413      	str	r3, [r2, #64]	; 0x40
 800078a:	4b3f      	ldr	r3, [pc, #252]	; (8000888 <SystemClock_Config+0x140>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000796:	4b3d      	ldr	r3, [pc, #244]	; (800088c <SystemClock_Config+0x144>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a3c      	ldr	r2, [pc, #240]	; (800088c <SystemClock_Config+0x144>)
 800079c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	4b3a      	ldr	r3, [pc, #232]	; (800088c <SystemClock_Config+0x144>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ae:	2301      	movs	r3, #1
 80007b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007bc:	2302      	movs	r3, #2
 80007be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007ca:	2319      	movs	r3, #25
 80007cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 80007d0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80007d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007de:	2304      	movs	r3, #4
 80007e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007e8:	4618      	mov	r0, r3
 80007ea:	f006 fc61 	bl	80070b0 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80007f4:	f000 ff00 	bl	80015f8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007f8:	f006 fc0a 	bl	8007010 <HAL_PWREx_EnableOverDrive>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000802:	f000 fef9 	bl	80015f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000806:	230f      	movs	r3, #15
 8000808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080c:	2302      	movs	r3, #2
 800080e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000818:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800081c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000824:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000828:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800082c:	2107      	movs	r1, #7
 800082e:	4618      	mov	r0, r3
 8000830:	f006 feb0 	bl	8007594 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800083a:	f000 fedd 	bl	80015f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <SystemClock_Config+0x148>)
 8000840:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDMMC2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000842:	23c0      	movs	r3, #192	; 0xc0
 8000844:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 800084a:	2303      	movs	r3, #3
 800084c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800084e:	2301      	movs	r3, #1
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000852:	2301      	movs	r3, #1
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000856:	2300      	movs	r3, #0
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800085a:	2300      	movs	r3, #0
 800085c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800085e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000862:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	4618      	mov	r0, r3
 8000872:	f007 f88f 	bl	8007994 <HAL_RCCEx_PeriphCLKConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x138>
  {
    Error_Handler();
 800087c:	f000 febc 	bl	80015f8 <Error_Handler>
  }
}
 8000880:	bf00      	nop
 8000882:	37e0      	adds	r7, #224	; 0xe0
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40023800 	.word	0x40023800
 800088c:	40007000 	.word	0x40007000
 8000890:	04200048 	.word	0x04200048

08000894 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_DMA2D_Init+0x68>)
 800089a:	4a19      	ldr	r2, [pc, #100]	; (8000900 <MX_DMA2D_Init+0x6c>)
 800089c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008be:	2200      	movs	r2, #0
 80008c0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008d4:	4809      	ldr	r0, [pc, #36]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008d6:	f003 faaf 	bl	8003e38 <HAL_DMA2D_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 80008e0:	f000 fe8a 	bl	80015f8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008e4:	2101      	movs	r1, #1
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_DMA2D_Init+0x68>)
 80008e8:	f003 fd24 	bl	8004334 <HAL_DMA2D_ConfigLayer>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 80008f2:	f000 fe81 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000051c 	.word	0x2000051c
 8000900:	4002b000 	.word	0x4002b000

08000904 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b0aa      	sub	sp, #168	; 0xa8
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800090a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000916:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800091a:	2224      	movs	r2, #36	; 0x24
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f00c f884 	bl	800ca2c <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000924:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
 8000934:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000936:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800093a:	2234      	movs	r2, #52	; 0x34
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f00c f874 	bl	800ca2c <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000944:	463b      	mov	r3, r7
 8000946:	222c      	movs	r2, #44	; 0x2c
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f00c f86e 	bl	800ca2c <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000950:	4b6a      	ldr	r3, [pc, #424]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000952:	4a6b      	ldr	r2, [pc, #428]	; (8000b00 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000954:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000956:	4b69      	ldr	r3, [pc, #420]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800095c:	4b67      	ldr	r3, [pc, #412]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 800095e:	2204      	movs	r2, #4
 8000960:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000962:	4b66      	ldr	r3, [pc, #408]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000964:	2201      	movs	r2, #1
 8000966:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8000968:	2314      	movs	r3, #20
 800096a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800096e:	2301      	movs	r3, #1
 8000970:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800097a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800097e:	4619      	mov	r1, r3
 8000980:	485e      	ldr	r0, [pc, #376]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000982:	f003 fe59 	bl	8004638 <HAL_DSI_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 800098c:	f000 fe34 	bl	80015f8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009c2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80009c6:	4619      	mov	r1, r3
 80009c8:	484c      	ldr	r0, [pc, #304]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 80009ca:	f004 fd59 	bl	8005480 <HAL_DSI_ConfigHostTimeouts>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 80009d4:	f000 fe10 	bl	80015f8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80009d8:	231c      	movs	r3, #28
 80009da:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 80009dc:	2321      	movs	r3, #33	; 0x21
 80009de:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 80009e0:	230f      	movs	r3, #15
 80009e2:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 80009e4:	2319      	movs	r3, #25
 80009e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 10;
 80009ec:	230a      	movs	r3, #10
 80009ee:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80009f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009f4:	4619      	mov	r1, r3
 80009f6:	4841      	ldr	r0, [pc, #260]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 80009f8:	f004 fcd8 	bl	80053ac <HAL_DSI_ConfigPhyTimer>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000a02:	f000 fdf9 	bl	80015f8 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a06:	2104      	movs	r1, #4
 8000a08:	483c      	ldr	r0, [pc, #240]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a0a:	f004 fca7 	bl	800535c <HAL_DSI_ConfigFlowControl>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000a14:	f000 fdf0 	bl	80015f8 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a18:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a1c:	4837      	ldr	r0, [pc, #220]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a1e:	f004 feed 	bl	80057fc <HAL_DSI_SetLowPowerRXFilter>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000a28:	f000 fde6 	bl	80015f8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4833      	ldr	r0, [pc, #204]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a30:	f003 ff90 	bl	8004954 <HAL_DSI_ConfigErrorMonitor>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000a3a:	f000 fddd 	bl	80015f8 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a4e:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a54:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a60:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000a62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a66:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6c:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000a6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a72:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a78:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000a7a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a7e:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a84:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8e:	4619      	mov	r1, r3
 8000a90:	481a      	ldr	r0, [pc, #104]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a92:	f004 fc05 	bl	80052a0 <HAL_DSI_ConfigCommand>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000a9c:	f000 fdac 	bl	80015f8 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000aa4:	2305      	movs	r3, #5
 8000aa6:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 400;
 8000aa8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000aac:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_DSILINK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000ac6:	2340      	movs	r3, #64	; 0x40
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000aca:	2301      	movs	r3, #1
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480a      	ldr	r0, [pc, #40]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ad4:	f004 fb0a 	bl	80050ec <HAL_DSI_ConfigAdaptedCommandMode>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_DSIHOST_DSI_Init+0x1de>
  {
    Error_Handler();
 8000ade:	f000 fd8b 	bl	80015f8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ae6:	f004 f8d8 	bl	8004c9a <HAL_DSI_SetGenericVCID>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_DSIHOST_DSI_Init+0x1f0>
  {
    Error_Handler();
 8000af0:	f000 fd82 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	37a8      	adds	r7, #168	; 0xa8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000320 	.word	0x20000320
 8000b00:	40016c00 	.word	0x40016c00

08000b04 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2234      	movs	r2, #52	; 0x34
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f00b ff8b 	bl	800ca2c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b16:	4b38      	ldr	r3, [pc, #224]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b18:	4a38      	ldr	r2, [pc, #224]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b1a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b1c:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b22:	4b35      	ldr	r3, [pc, #212]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b28:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b2e:	4b32      	ldr	r3, [pc, #200]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000b34:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000b40:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000b46:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b4e:	22c9      	movs	r2, #201	; 0xc9
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000b52:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b54:	f240 12e1 	movw	r2, #481	; 0x1e1
 8000b58:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 202;
 8000b5a:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b5c:	22ca      	movs	r2, #202	; 0xca
 8000b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000b60:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b62:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000b66:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b68:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b70:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b80:	481d      	ldr	r0, [pc, #116]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000b82:	f005 fe7b 	bl	800687c <HAL_LTDC_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000b8c:	f000 fd34 	bl	80015f8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000b94:	23c8      	movs	r3, #200	; 0xc8
 8000b96:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000b9c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ba0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000ba6:	23ff      	movs	r3, #255	; 0xff
 8000ba8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000bae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bb2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000bb8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 8000bbe:	23c8      	movs	r3, #200	; 0xc8
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8000bc2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_LTDC_Init+0xf4>)
 8000be2:	f005 ffdd 	bl	8006ba0 <HAL_LTDC_ConfigLayer>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000bec:	f000 fd04 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3738      	adds	r7, #56	; 0x38
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200003c0 	.word	0x200003c0
 8000bfc:	40016800 	.word	0x40016800

08000c00 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_SDMMC2_SD_Init+0x38>)
 8000c06:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <MX_SDMMC2_SD_Init+0x3c>)
 8000c08:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_SDMMC2_SD_Init+0x38>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_SDMMC2_SD_Init+0x38>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MX_SDMMC2_SD_Init+0x38>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_SDMMC2_SD_Init+0x38>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <MX_SDMMC2_SD_Init+0x38>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <MX_SDMMC2_SD_Init+0x38>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	2000033c 	.word	0x2000033c
 8000c3c:	40011c00 	.word	0x40011c00

08000c40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c46:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <MX_USART1_UART_Init+0x5c>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c84:	f008 fd30 	bl	80096e8 <HAL_UART_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c8e:	f000 fcb3 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000049c 	.word	0x2000049c
 8000c9c:	40011000 	.word	0x40011000

08000ca0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
 8000cb4:	615a      	str	r2, [r3, #20]
 8000cb6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cba:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <MX_FMC_Init+0x98>)
 8000cbc:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK1;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_FMC_Init+0x94>)
 8000ccc:	2204      	movs	r2, #4
 8000cce:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cd8:	2240      	movs	r2, #64	; 0x40
 8000cda:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_FMC_Init+0x94>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000cfe:	2310      	movs	r3, #16
 8000d00:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000d02:	2310      	movs	r3, #16
 8000d04:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000d06:	2310      	movs	r3, #16
 8000d08:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000d0e:	2310      	movs	r3, #16
 8000d10:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000d12:	2310      	movs	r3, #16
 8000d14:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <MX_FMC_Init+0x94>)
 8000d1c:	f008 fa00 	bl	8009120 <HAL_SDRAM_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000d26:	f000 fc67 	bl	80015f8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3720      	adds	r7, #32
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000468 	.word	0x20000468
 8000d38:	a0000140 	.word	0xa0000140

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b090      	sub	sp, #64	; 0x40
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d52:	4bac      	ldr	r3, [pc, #688]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4aab      	ldr	r2, [pc, #684]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4ba9      	ldr	r3, [pc, #676]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d6a:	4ba6      	ldr	r3, [pc, #664]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4aa5      	ldr	r2, [pc, #660]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4ba3      	ldr	r3, [pc, #652]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	4ba0      	ldr	r3, [pc, #640]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a9f      	ldr	r2, [pc, #636]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b9d      	ldr	r3, [pc, #628]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	623b      	str	r3, [r7, #32]
 8000d98:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9a:	4b9a      	ldr	r3, [pc, #616]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a99      	ldr	r2, [pc, #612]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000da0:	f043 0308 	orr.w	r3, r3, #8
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b97      	ldr	r3, [pc, #604]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	61fb      	str	r3, [r7, #28]
 8000db0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	4b94      	ldr	r3, [pc, #592]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a93      	ldr	r2, [pc, #588]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b91      	ldr	r3, [pc, #580]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	61bb      	str	r3, [r7, #24]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b8e      	ldr	r3, [pc, #568]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a8d      	ldr	r2, [pc, #564]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b8b      	ldr	r3, [pc, #556]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000de2:	4b88      	ldr	r3, [pc, #544]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a87      	ldr	r2, [pc, #540]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000de8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b85      	ldr	r3, [pc, #532]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dfa:	4b82      	ldr	r3, [pc, #520]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a81      	ldr	r2, [pc, #516]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b7f      	ldr	r3, [pc, #508]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e12:	4b7c      	ldr	r3, [pc, #496]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a7b      	ldr	r2, [pc, #492]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b79      	ldr	r3, [pc, #484]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e2a:	4b76      	ldr	r3, [pc, #472]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a75      	ldr	r2, [pc, #468]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e30:	f043 0320 	orr.w	r3, r3, #32
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b73      	ldr	r3, [pc, #460]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0320 	and.w	r3, r3, #32
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e42:	4b70      	ldr	r3, [pc, #448]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a6f      	ldr	r2, [pc, #444]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b6d      	ldr	r3, [pc, #436]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e60:	4869      	ldr	r0, [pc, #420]	; (8001008 <MX_GPIO_Init+0x2cc>)
 8000e62:	f004 ffc5 	bl	8005df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_SCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8000e66:	2378      	movs	r3, #120	; 0x78
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000e76:	2306      	movs	r3, #6
 8000e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4862      	ldr	r0, [pc, #392]	; (800100c <MX_GPIO_Init+0x2d0>)
 8000e82:	f004 fce9 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000e86:	2304      	movs	r3, #4
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e96:	2309      	movs	r3, #9
 8000e98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	485a      	ldr	r0, [pc, #360]	; (800100c <MX_GPIO_Init+0x2d0>)
 8000ea2:	f004 fcd9 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000ea6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb8:	230b      	movs	r3, #11
 8000eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4853      	ldr	r0, [pc, #332]	; (8001010 <MX_GPIO_Init+0x2d4>)
 8000ec4:	f004 fcc8 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000ec8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ece:	2312      	movs	r3, #18
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eda:	2304      	movs	r3, #4
 8000edc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	484b      	ldr	r0, [pc, #300]	; (8001014 <MX_GPIO_Init+0x2d8>)
 8000ee6:	f004 fcb7 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8000eea:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000efc:	230a      	movs	r3, #10
 8000efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f04:	4619      	mov	r1, r3
 8000f06:	4843      	ldr	r0, [pc, #268]	; (8001014 <MX_GPIO_Init+0x2d8>)
 8000f08:	f004 fca6 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RX_Pin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8000f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f1e:	2308      	movs	r3, #8
 8000f20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f26:	4619      	mov	r1, r3
 8000f28:	483b      	ldr	r0, [pc, #236]	; (8001018 <MX_GPIO_Init+0x2dc>)
 8000f2a:	f004 fc95 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_Pin */
  GPIO_InitStruct.Pin = CEC_Pin;
 8000f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f34:	2312      	movs	r3, #18
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8000f40:	2304      	movs	r3, #4
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4834      	ldr	r0, [pc, #208]	; (800101c <MX_GPIO_Init+0x2e0>)
 8000f4c:	f004 fc84 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SDA_Pin */
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f54:	2312      	movs	r3, #18
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8000f60:	230b      	movs	r3, #11
 8000f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f68:	4619      	mov	r1, r3
 8000f6a:	482a      	ldr	r0, [pc, #168]	; (8001014 <MX_GPIO_Init+0x2d8>)
 8000f6c:	f004 fc74 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000f70:	2340      	movs	r3, #64	; 0x40
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f80:	230a      	movs	r3, #10
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4822      	ldr	r0, [pc, #136]	; (8001014 <MX_GPIO_Init+0x2d8>)
 8000f8c:	f004 fc64 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_USER1_Pin Audio_INT_Pin WIFI_RST_Pin ARD_D8_Pin 
                           LD_USER2_Pin ARD_D7_Pin ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin 
 8000f90:	f247 033b 	movw	r3, #28731	; 0x703b
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f96:	2300      	movs	r3, #0
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4818      	ldr	r0, [pc, #96]	; (8001008 <MX_GPIO_Init+0x2cc>)
 8000fa6:	f004 fc57 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN5_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 8000faa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4814      	ldr	r0, [pc, #80]	; (8001018 <MX_GPIO_Init+0x2dc>)
 8000fc8:	f004 fc46 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8000fcc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fde:	2309      	movs	r3, #9
 8000fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480b      	ldr	r0, [pc, #44]	; (8001018 <MX_GPIO_Init+0x2dc>)
 8000fea:	f004 fc35 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_SCK_Pin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8000fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001000:	2305      	movs	r3, #5
 8001002:	e00d      	b.n	8001020 <MX_GPIO_Init+0x2e4>
 8001004:	40023800 	.word	0x40023800
 8001008:	40022400 	.word	0x40022400
 800100c:	40021000 	.word	0x40021000
 8001010:	40021800 	.word	0x40021800
 8001014:	40020400 	.word	0x40020400
 8001018:	40020800 	.word	0x40020800
 800101c:	40020000 	.word	0x40020000
 8001020:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001026:	4619      	mov	r1, r3
 8001028:	48bb      	ldr	r0, [pc, #748]	; (8001318 <MX_GPIO_Init+0x5dc>)
 800102a:	f004 fc15 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin uSD_Detect_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 800102e:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001034:	2300      	movs	r3, #0
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800103c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001040:	4619      	mov	r1, r3
 8001042:	48b6      	ldr	r0, [pc, #728]	; (800131c <MX_GPIO_Init+0x5e0>)
 8001044:	f004 fc08 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin 
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin 
 8001048:	23f8      	movs	r3, #248	; 0xf8
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104c:	2300      	movs	r3, #0
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001058:	4619      	mov	r1, r3
 800105a:	48b1      	ldr	r0, [pc, #708]	; (8001320 <MX_GPIO_Init+0x5e4>)
 800105c:	f004 fbfc 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8001060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8001072:	2307      	movs	r3, #7
 8001074:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800107a:	4619      	mov	r1, r3
 800107c:	48a9      	ldr	r0, [pc, #676]	; (8001324 <MX_GPIO_Init+0x5e8>)
 800107e:	f004 fbeb 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8001082:	2330      	movs	r3, #48	; 0x30
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001086:	2300      	movs	r3, #0
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001092:	4619      	mov	r1, r3
 8001094:	48a4      	ldr	r0, [pc, #656]	; (8001328 <MX_GPIO_Init+0x5ec>)
 8001096:	f004 fbdf 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 800109a:	2308      	movs	r3, #8
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80010aa:	2303      	movs	r3, #3
 80010ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b2:	4619      	mov	r1, r3
 80010b4:	489c      	ldr	r0, [pc, #624]	; (8001328 <MX_GPIO_Init+0x5ec>)
 80010b6:	f004 fbcf 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 80010ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010cc:	2305      	movs	r3, #5
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d4:	4619      	mov	r1, r3
 80010d6:	4890      	ldr	r0, [pc, #576]	; (8001318 <MX_GPIO_Init+0x5dc>)
 80010d8:	f004 fbbe 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_RESET_Pin */
  GPIO_InitStruct.Pin = DSI_RESET_Pin;
 80010dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 80010ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f2:	4619      	mov	r1, r3
 80010f4:	488d      	ldr	r0, [pc, #564]	; (800132c <MX_GPIO_Init+0x5f0>)
 80010f6:	f004 fbaf 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_TX_Pin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 80010fa:	2304      	movs	r3, #4
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800110a:	2308      	movs	r3, #8
 800110c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001112:	4619      	mov	r1, r3
 8001114:	4884      	ldr	r0, [pc, #528]	; (8001328 <MX_GPIO_Init+0x5ec>)
 8001116:	f004 fb9f 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 800111a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800112c:	230a      	movs	r3, #10
 800112e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001134:	4619      	mov	r1, r3
 8001136:	4879      	ldr	r0, [pc, #484]	; (800131c <MX_GPIO_Init+0x5e0>)
 8001138:	f004 fb8e 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CLK_Pin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 800113c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800114e:	2300      	movs	r3, #0
 8001150:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001156:	4619      	mov	r1, r3
 8001158:	486f      	ldr	r0, [pc, #444]	; (8001318 <MX_GPIO_Init+0x5dc>)
 800115a:	f004 fb7d 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800115e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001164:	4b72      	ldr	r3, [pc, #456]	; (8001330 <MX_GPIO_Init+0x5f4>)
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001170:	4619      	mov	r1, r3
 8001172:	486a      	ldr	r0, [pc, #424]	; (800131c <MX_GPIO_Init+0x5e0>)
 8001174:	f004 fb70 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8001178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800118a:	2302      	movs	r3, #2
 800118c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001192:	4619      	mov	r1, r3
 8001194:	4867      	ldr	r0, [pc, #412]	; (8001334 <MX_GPIO_Init+0x5f8>)
 8001196:	f004 fb5f 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_RX_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 800119a:	23c0      	movs	r3, #192	; 0xc0
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011aa:	2308      	movs	r3, #8
 80011ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b2:	4619      	mov	r1, r3
 80011b4:	485f      	ldr	r0, [pc, #380]	; (8001334 <MX_GPIO_Init+0x5f8>)
 80011b6:	f004 fb4f 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80011ba:	2310      	movs	r3, #16
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80011ca:	230a      	movs	r3, #10
 80011cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d2:	4619      	mov	r1, r3
 80011d4:	4858      	ldr	r0, [pc, #352]	; (8001338 <MX_GPIO_Init+0x5fc>)
 80011d6:	f004 fb3f 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_MCLKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80011ea:	2306      	movs	r3, #6
 80011ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f2:	4619      	mov	r1, r3
 80011f4:	484b      	ldr	r0, [pc, #300]	; (8001324 <MX_GPIO_Init+0x5e8>)
 80011f6:	f004 fb2f 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 80011fa:	2348      	movs	r3, #72	; 0x48
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001206:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800120a:	4619      	mov	r1, r3
 800120c:	4845      	ldr	r0, [pc, #276]	; (8001324 <MX_GPIO_Init+0x5e8>)
 800120e:	f004 fb23 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001222:	2303      	movs	r3, #3
 8001224:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800122a:	4619      	mov	r1, r3
 800122c:	4843      	ldr	r0, [pc, #268]	; (800133c <MX_GPIO_Init+0x600>)
 800122e:	f004 fb13 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8001232:	2340      	movs	r3, #64	; 0x40
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001242:	2303      	movs	r3, #3
 8001244:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124a:	4619      	mov	r1, r3
 800124c:	483b      	ldr	r0, [pc, #236]	; (800133c <MX_GPIO_Init+0x600>)
 800124e:	f004 fb03 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001252:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001258:	2303      	movs	r3, #3
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001260:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001264:	4619      	mov	r1, r3
 8001266:	4835      	ldr	r0, [pc, #212]	; (800133c <MX_GPIO_Init+0x600>)
 8001268:	f004 faf6 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_STP_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 800126c:	2301      	movs	r3, #1
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800127c:	230a      	movs	r3, #10
 800127e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001284:	4619      	mov	r1, r3
 8001286:	482b      	ldr	r0, [pc, #172]	; (8001334 <MX_GPIO_Init+0x5f8>)
 8001288:	f004 fae6 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800128c:	2332      	movs	r3, #50	; 0x32
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129c:	230b      	movs	r3, #11
 800129e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a4:	4619      	mov	r1, r3
 80012a6:	4823      	ldr	r0, [pc, #140]	; (8001334 <MX_GPIO_Init+0x5f8>)
 80012a8:	f004 fad6 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin;
 80012ac:	2304      	movs	r3, #4
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b0:	2303      	movs	r3, #3
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012bc:	4619      	mov	r1, r3
 80012be:	481d      	ldr	r0, [pc, #116]	; (8001334 <MX_GPIO_Init+0x5f8>)
 80012c0:	f004 faca 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012c4:	2304      	movs	r3, #4
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012d4:	2309      	movs	r3, #9
 80012d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012dc:	4619      	mov	r1, r3
 80012de:	4818      	ldr	r0, [pc, #96]	; (8001340 <MX_GPIO_Init+0x604>)
 80012e0:	f004 faba 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SCL_Pin */
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ea:	2312      	movs	r3, #18
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80012f6:	2304      	movs	r3, #4
 80012f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012fe:	4619      	mov	r1, r3
 8001300:	4809      	ldr	r0, [pc, #36]	; (8001328 <MX_GPIO_Init+0x5ec>)
 8001302:	f004 faa9 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8001306:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	637b      	str	r3, [r7, #52]	; 0x34
 8001314:	e016      	b.n	8001344 <MX_GPIO_Init+0x608>
 8001316:	bf00      	nop
 8001318:	40020000 	.word	0x40020000
 800131c:	40022000 	.word	0x40022000
 8001320:	40022800 	.word	0x40022800
 8001324:	40021800 	.word	0x40021800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40022400 	.word	0x40022400
 8001330:	10120000 	.word	0x10120000
 8001334:	40020800 	.word	0x40020800
 8001338:	40021c00 	.word	0x40021c00
 800133c:	40021400 	.word	0x40021400
 8001340:	40020400 	.word	0x40020400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001348:	2309      	movs	r3, #9
 800134a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001350:	4619      	mov	r1, r3
 8001352:	483e      	ldr	r0, [pc, #248]	; (800144c <MX_GPIO_Init+0x710>)
 8001354:	f004 fa80 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001358:	2386      	movs	r3, #134	; 0x86
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001368:	230b      	movs	r3, #11
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001370:	4619      	mov	r1, r3
 8001372:	4837      	ldr	r0, [pc, #220]	; (8001450 <MX_GPIO_Init+0x714>)
 8001374:	f004 fa70 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001378:	2301      	movs	r3, #1
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137c:	4b35      	ldr	r3, [pc, #212]	; (8001454 <MX_GPIO_Init+0x718>)
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001388:	4619      	mov	r1, r3
 800138a:	4831      	ldr	r0, [pc, #196]	; (8001450 <MX_GPIO_Init+0x714>)
 800138c:	f004 fa64 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8001390:	2350      	movs	r3, #80	; 0x50
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001394:	2303      	movs	r3, #3
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a0:	4619      	mov	r1, r3
 80013a2:	482b      	ldr	r0, [pc, #172]	; (8001450 <MX_GPIO_Init+0x714>)
 80013a4:	f004 fa58 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_TX_Pin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 80013a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80013ba:	230a      	movs	r3, #10
 80013bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c2:	4619      	mov	r1, r3
 80013c4:	4821      	ldr	r0, [pc, #132]	; (800144c <MX_GPIO_Init+0x710>)
 80013c6:	f004 fa47 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ce:	2300      	movs	r3, #0
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013da:	4619      	mov	r1, r3
 80013dc:	481e      	ldr	r0, [pc, #120]	; (8001458 <MX_GPIO_Init+0x71c>)
 80013de:	f004 fa3b 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80013e2:	2328      	movs	r3, #40	; 0x28
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80013f2:	230a      	movs	r3, #10
 80013f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013fa:	4619      	mov	r1, r3
 80013fc:	4814      	ldr	r0, [pc, #80]	; (8001450 <MX_GPIO_Init+0x714>)
 80013fe:	f004 fa2b 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001402:	2340      	movs	r3, #64	; 0x40
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001412:	2309      	movs	r3, #9
 8001414:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800141a:	4619      	mov	r1, r3
 800141c:	480e      	ldr	r0, [pc, #56]	; (8001458 <MX_GPIO_Init+0x71c>)
 800141e:	f004 fa1b 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001422:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001434:	2305      	movs	r3, #5
 8001436:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143c:	4619      	mov	r1, r3
 800143e:	4807      	ldr	r0, [pc, #28]	; (800145c <MX_GPIO_Init+0x720>)
 8001440:	f004 fa0a 	bl	8005858 <HAL_GPIO_Init>

}
 8001444:	bf00      	nop
 8001446:	3740      	adds	r7, #64	; 0x40
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40020c00 	.word	0x40020c00
 8001450:	40020000 	.word	0x40020000
 8001454:	10110000 	.word	0x10110000
 8001458:	40021c00 	.word	0x40021c00
 800145c:	40020400 	.word	0x40020400

08001460 <scan_files>:

/* USER CODE BEGIN 4 */
FRESULT scan_files (
    char* path        /* Start node to be scanned (***also used as work area***) */
)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b093      	sub	sp, #76	; 0x4c
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dir;
	UINT i;
	static FILINFO fno;

	int xPosDir = 10;
 8001468:	230a      	movs	r3, #10
 800146a:	643b      	str	r3, [r7, #64]	; 0x40
	int xPosFile = 30;
 800146c:	231e      	movs	r3, #30
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK); /* Set color of text to be displayed to balck */
 8001470:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001474:	f001 fc22 	bl	8002cbc <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f001 fc36 	bl	8002cec <BSP_LCD_SetBackColor>

	res = f_opendir(&dir, path);                       /* Open the directory */
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	4618      	mov	r0, r3
 8001488:	f00b f974 	bl	800c774 <f_opendir>
 800148c:	4603      	mov	r3, r0
 800148e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8001492:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 8087 	bne.w	80015aa <scan_files+0x14a>
		for (;;) {
			res = f_readdir(&dir, &fno);                   /* Read a directory item */
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	4945      	ldr	r1, [pc, #276]	; (80015b8 <scan_files+0x158>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f00b f9ff 	bl	800c8a6 <f_readdir>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80014ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d174      	bne.n	80015a0 <scan_files+0x140>
 80014b6:	4b40      	ldr	r3, [pc, #256]	; (80015b8 <scan_files+0x158>)
 80014b8:	7a5b      	ldrb	r3, [r3, #9]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d070      	beq.n	80015a0 <scan_files+0x140>
			if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 80014be:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <scan_files+0x158>)
 80014c0:	7a1b      	ldrb	r3, [r3, #8]
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d043      	beq.n	8001552 <scan_files+0xf2>
				i = strlen(path);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7fe feb8 	bl	8000240 <strlen>
 80014d0:	63b8      	str	r0, [r7, #56]	; 0x38
				sprintf(&path[i], "/%s", fno.fname); /* Build string to display */
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014d6:	4413      	add	r3, r2
 80014d8:	4a38      	ldr	r2, [pc, #224]	; (80015bc <scan_files+0x15c>)
 80014da:	4939      	ldr	r1, [pc, #228]	; (80015c0 <scan_files+0x160>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f00b fac5 	bl	800ca6c <siprintf>
				HAL_UART_Transmit(&huart1, &path[i], strlen(&path[i]), HAL_MAX_DELAY); /* Send directory name to UART */
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014e6:	18d4      	adds	r4, r2, r3
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ec:	4413      	add	r3, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe fea6 	bl	8000240 <strlen>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295
 80014fc:	4621      	mov	r1, r4
 80014fe:	4831      	ldr	r0, [pc, #196]	; (80015c4 <scan_files+0x164>)
 8001500:	f008 f940 	bl	8009784 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t *) "\n\r", 2, HAL_MAX_DELAY); /* Send new line to UART */
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	2202      	movs	r2, #2
 800150a:	492f      	ldr	r1, [pc, #188]	; (80015c8 <scan_files+0x168>)
 800150c:	482d      	ldr	r0, [pc, #180]	; (80015c4 <scan_files+0x164>)
 800150e:	f008 f939 	bl	8009784 <HAL_UART_Transmit>

				yPos = yPos + 20;
 8001512:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <scan_files+0x16c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	3314      	adds	r3, #20
 8001518:	4a2c      	ldr	r2, [pc, #176]	; (80015cc <scan_files+0x16c>)
 800151a:	6013      	str	r3, [r2, #0]
				BSP_LCD_DisplayStringAt(xPosDir, yPos, &path[i], LEFT_MODE); /* Display directory name to lcd */
 800151c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800151e:	b298      	uxth	r0, r3
 8001520:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <scan_files+0x16c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	b299      	uxth	r1, r3
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800152a:	441a      	add	r2, r3
 800152c:	2303      	movs	r3, #3
 800152e:	f001 fc7d 	bl	8002e2c <BSP_LCD_DisplayStringAt>

				res = scan_files(path);                    /* Enter the directory */
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ff94 	bl	8001460 <scan_files>
 8001538:	4603      	mov	r3, r0
 800153a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (res != FR_OK) break;
 800153e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001542:	2b00      	cmp	r3, #0
 8001544:	d12b      	bne.n	800159e <scan_files+0x13e>
				path[i] = 0;
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800154a:	4413      	add	r3, r2
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	e7a4      	b.n	800149c <scan_files+0x3c>
			} else {                                       /* It is a file. */
				printf("%s/%s\n", path, fno.fname); /* TEST IF YOU NEED THIS */
 8001552:	4a1a      	ldr	r2, [pc, #104]	; (80015bc <scan_files+0x15c>)
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	481e      	ldr	r0, [pc, #120]	; (80015d0 <scan_files+0x170>)
 8001558:	f00b fa70 	bl	800ca3c <iprintf>
				HAL_UART_Transmit(&huart1, fno.fname, strlen(fno.fname), HAL_MAX_DELAY); /* Send file name to UART */
 800155c:	4817      	ldr	r0, [pc, #92]	; (80015bc <scan_files+0x15c>)
 800155e:	f7fe fe6f 	bl	8000240 <strlen>
 8001562:	4603      	mov	r3, r0
 8001564:	b29a      	uxth	r2, r3
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	4914      	ldr	r1, [pc, #80]	; (80015bc <scan_files+0x15c>)
 800156c:	4815      	ldr	r0, [pc, #84]	; (80015c4 <scan_files+0x164>)
 800156e:	f008 f909 	bl	8009784 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t *) "\n\r", 2, HAL_MAX_DELAY); /* Send new line to UART */
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	2202      	movs	r2, #2
 8001578:	4913      	ldr	r1, [pc, #76]	; (80015c8 <scan_files+0x168>)
 800157a:	4812      	ldr	r0, [pc, #72]	; (80015c4 <scan_files+0x164>)
 800157c:	f008 f902 	bl	8009784 <HAL_UART_Transmit>

				yPos = yPos + 20;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <scan_files+0x16c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3314      	adds	r3, #20
 8001586:	4a11      	ldr	r2, [pc, #68]	; (80015cc <scan_files+0x16c>)
 8001588:	6013      	str	r3, [r2, #0]

				BSP_LCD_DisplayStringAt(xPosFile, yPos, fno.fname, LEFT_MODE); /* Display file name to lcd */
 800158a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800158c:	b298      	uxth	r0, r3
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <scan_files+0x16c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	b299      	uxth	r1, r3
 8001594:	2303      	movs	r3, #3
 8001596:	4a09      	ldr	r2, [pc, #36]	; (80015bc <scan_files+0x15c>)
 8001598:	f001 fc48 	bl	8002e2c <BSP_LCD_DisplayStringAt>
			res = f_readdir(&dir, &fno);                   /* Read a directory item */
 800159c:	e77e      	b.n	800149c <scan_files+0x3c>
				if (res != FR_OK) break;
 800159e:	bf00      	nop


			}
		}
		f_closedir(&dir);
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	4618      	mov	r0, r3
 80015a6:	f00b f958 	bl	800c85a <f_closedir>
	}
	return res;
 80015aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	374c      	adds	r7, #76	; 0x4c
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd90      	pop	{r4, r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200000c4 	.word	0x200000c4
 80015bc:	200000cd 	.word	0x200000cd
 80015c0:	0800dbe8 	.word	0x0800dbe8
 80015c4:	2000049c 	.word	0x2000049c
 80015c8:	0800dbd4 	.word	0x0800dbd4
 80015cc:	20000000 	.word	0x20000000
 80015d0:	0800dbec 	.word	0x0800dbec

080015d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d101      	bne.n	80015ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015e6:	f002 f917 	bl	8003818 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40001000 	.word	0x40001000

080015f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_MspInit+0x44>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	4a0e      	ldr	r2, [pc, #56]	; (800164c <HAL_MspInit+0x44>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	6413      	str	r3, [r2, #64]	; 0x40
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_MspInit+0x44>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_MspInit+0x44>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	4a08      	ldr	r2, [pc, #32]	; (800164c <HAL_MspInit+0x44>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001630:	6453      	str	r3, [r2, #68]	; 0x44
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_MspInit+0x44>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800

08001650 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <HAL_DMA2D_MspInit+0x44>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d113      	bne.n	800168a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_DMA2D_MspInit+0x48>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a0c      	ldr	r2, [pc, #48]	; (8001698 <HAL_DMA2D_MspInit+0x48>)
 8001668:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_DMA2D_MspInit+0x48>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	205a      	movs	r0, #90	; 0x5a
 8001680:	f002 f9e6 	bl	8003a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001684:	205a      	movs	r0, #90	; 0x5a
 8001686:	f002 f9ff 	bl	8003a88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	4002b000 	.word	0x4002b000
 8001698:	40023800 	.word	0x40023800

0800169c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <HAL_DSI_MspInit+0x8c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d12f      	bne.n	800171e <HAL_DSI_MspInit+0x82>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80016be:	4b1b      	ldr	r3, [pc, #108]	; (800172c <HAL_DSI_MspInit+0x90>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	4a1a      	ldr	r2, [pc, #104]	; (800172c <HAL_DSI_MspInit+0x90>)
 80016c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016c8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_DSI_MspInit+0x90>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_DSI_MspInit+0x90>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a14      	ldr	r2, [pc, #80]	; (800172c <HAL_DSI_MspInit+0x90>)
 80016dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_DSI_MspInit+0x90>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 80016ee:	2304      	movs	r3, #4
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80016fe:	230d      	movs	r3, #13
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4809      	ldr	r0, [pc, #36]	; (8001730 <HAL_DSI_MspInit+0x94>)
 800170a:	f004 f8a5 	bl	8005858 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2062      	movs	r0, #98	; 0x62
 8001714:	f002 f99c 	bl	8003a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001718:	2062      	movs	r0, #98	; 0x62
 800171a:	f002 f9b5 	bl	8003a88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800171e:	bf00      	nop
 8001720:	3728      	adds	r7, #40	; 0x28
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40016c00 	.word	0x40016c00
 800172c:	40023800 	.word	0x40023800
 8001730:	40022400 	.word	0x40022400

08001734 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a09      	ldr	r2, [pc, #36]	; (8001768 <HAL_DSI_MspDeInit+0x34>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d10c      	bne.n	8001760 <HAL_DSI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_DSI_MspDeInit+0x38>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	4a08      	ldr	r2, [pc, #32]	; (800176c <HAL_DSI_MspDeInit+0x38>)
 800174c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001750:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(DSIHOST_TE_GPIO_Port, DSIHOST_TE_Pin);
 8001752:	2104      	movs	r1, #4
 8001754:	4806      	ldr	r0, [pc, #24]	; (8001770 <HAL_DSI_MspDeInit+0x3c>)
 8001756:	f004 fa29 	bl	8005bac <HAL_GPIO_DeInit>

    /* DSI interrupt DeInit */
    HAL_NVIC_DisableIRQ(DSI_IRQn);
 800175a:	2062      	movs	r0, #98	; 0x62
 800175c:	f002 f9a2 	bl	8003aa4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40016c00 	.word	0x40016c00
 800176c:	40023800 	.word	0x40023800
 8001770:	40022400 	.word	0x40022400

08001774 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0d      	ldr	r2, [pc, #52]	; (80017b8 <HAL_LTDC_MspInit+0x44>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d113      	bne.n	80017ae <HAL_LTDC_MspInit+0x3a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_LTDC_MspInit+0x48>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	4a0c      	ldr	r2, [pc, #48]	; (80017bc <HAL_LTDC_MspInit+0x48>)
 800178c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001790:	6453      	str	r3, [r2, #68]	; 0x44
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_LTDC_MspInit+0x48>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	2058      	movs	r0, #88	; 0x58
 80017a4:	f002 f954 	bl	8003a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80017a8:	2058      	movs	r0, #88	; 0x58
 80017aa:	f002 f96d 	bl	8003a88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40016800 	.word	0x40016800
 80017bc:	40023800 	.word	0x40023800

080017c0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08c      	sub	sp, #48	; 0x30
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 031c 	add.w	r3, r7, #28
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a33      	ldr	r2, [pc, #204]	; (80018ac <HAL_SD_MspInit+0xec>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d160      	bne.n	80018a4 <HAL_SD_MspInit+0xe4>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80017e2:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <HAL_SD_MspInit+0xf0>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	4a32      	ldr	r2, [pc, #200]	; (80018b0 <HAL_SD_MspInit+0xf0>)
 80017e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
 80017ee:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <HAL_SD_MspInit+0xf0>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f6:	61bb      	str	r3, [r7, #24]
 80017f8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <HAL_SD_MspInit+0xf0>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a2c      	ldr	r2, [pc, #176]	; (80018b0 <HAL_SD_MspInit+0xf0>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <HAL_SD_MspInit+0xf0>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001812:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_SD_MspInit+0xf0>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a26      	ldr	r2, [pc, #152]	; (80018b0 <HAL_SD_MspInit+0xf0>)
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_SD_MspInit+0xf0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800182a:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <HAL_SD_MspInit+0xf0>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a20      	ldr	r2, [pc, #128]	; (80018b0 <HAL_SD_MspInit+0xf0>)
 8001830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <HAL_SD_MspInit+0xf0>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0 
    */
    GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8001842:	2318      	movs	r3, #24
 8001844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8001852:	230a      	movs	r3, #10
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	4619      	mov	r1, r3
 800185c:	4815      	ldr	r0, [pc, #84]	; (80018b4 <HAL_SD_MspInit+0xf4>)
 800185e:	f003 fffb 	bl	8005858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8001862:	23c0      	movs	r3, #192	; 0xc0
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001872:	230b      	movs	r3, #11
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	4619      	mov	r1, r3
 800187c:	480e      	ldr	r0, [pc, #56]	; (80018b8 <HAL_SD_MspInit+0xf8>)
 800187e:	f003 ffeb 	bl	8005858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8001882:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001894:	230b      	movs	r3, #11
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	4619      	mov	r1, r3
 800189e:	4807      	ldr	r0, [pc, #28]	; (80018bc <HAL_SD_MspInit+0xfc>)
 80018a0:	f003 ffda 	bl	8005858 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 80018a4:	bf00      	nop
 80018a6:	3730      	adds	r7, #48	; 0x30
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40011c00 	.word	0x40011c00
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020400 	.word	0x40020400
 80018b8:	40020c00 	.word	0x40020c00
 80018bc:	40021800 	.word	0x40021800

080018c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a20      	ldr	r2, [pc, #128]	; (8001960 <HAL_UART_MspInit+0xa0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d139      	bne.n	8001956 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_UART_MspInit+0xa4>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	4a1f      	ldr	r2, [pc, #124]	; (8001964 <HAL_UART_MspInit+0xa4>)
 80018e8:	f043 0310 	orr.w	r3, r3, #16
 80018ec:	6453      	str	r3, [r2, #68]	; 0x44
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <HAL_UART_MspInit+0xa4>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <HAL_UART_MspInit+0xa4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a19      	ldr	r2, [pc, #100]	; (8001964 <HAL_UART_MspInit+0xa4>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <HAL_UART_MspInit+0xa4>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001924:	2307      	movs	r3, #7
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	480e      	ldr	r0, [pc, #56]	; (8001968 <HAL_UART_MspInit+0xa8>)
 8001930:	f003 ff92 	bl	8005858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001946:	2307      	movs	r3, #7
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <HAL_UART_MspInit+0xa8>)
 8001952:	f003 ff81 	bl	8005858 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	; 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40011000 	.word	0x40011000
 8001964:	40023800 	.word	0x40023800
 8001968:	40020000 	.word	0x40020000

0800196c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001980:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <HAL_FMC_MspInit+0x104>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d16f      	bne.n	8001a68 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001988:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <HAL_FMC_MspInit+0x104>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800198e:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <HAL_FMC_MspInit+0x108>)
 8001990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001992:	4a38      	ldr	r2, [pc, #224]	; (8001a74 <HAL_FMC_MspInit+0x108>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6393      	str	r3, [r2, #56]	; 0x38
 800199a:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <HAL_FMC_MspInit+0x108>)
 800199c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 80019a6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80019aa:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019b8:	230c      	movs	r3, #12
 80019ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	4619      	mov	r1, r3
 80019c0:	482d      	ldr	r0, [pc, #180]	; (8001a78 <HAL_FMC_MspInit+0x10c>)
 80019c2:	f003 ff49 	bl	8005858 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin 
 80019c6:	f248 1337 	movw	r3, #33079	; 0x8137
 80019ca:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d4:	2303      	movs	r3, #3
 80019d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019d8:	230c      	movs	r3, #12
 80019da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	4619      	mov	r1, r3
 80019e0:	4826      	ldr	r0, [pc, #152]	; (8001a7c <HAL_FMC_MspInit+0x110>)
 80019e2:	f003 ff39 	bl	8005858 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80019e6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80019ea:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019f8:	230c      	movs	r3, #12
 80019fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	4619      	mov	r1, r3
 8001a00:	481f      	ldr	r0, [pc, #124]	; (8001a80 <HAL_FMC_MspInit+0x114>)
 8001a02:	f003 ff29 	bl	8005858 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 8001a06:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001a0a:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin 
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a18:	230c      	movs	r3, #12
 8001a1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4818      	ldr	r0, [pc, #96]	; (8001a84 <HAL_FMC_MspInit+0x118>)
 8001a22:	f003 ff19 	bl	8005858 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8001a26:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001a2a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a38:	230c      	movs	r3, #12
 8001a3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4811      	ldr	r0, [pc, #68]	; (8001a88 <HAL_FMC_MspInit+0x11c>)
 8001a42:	f003 ff09 	bl	8005858 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin 
 8001a46:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8001a4a:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin 
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a58:	230c      	movs	r3, #12
 8001a5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	480a      	ldr	r0, [pc, #40]	; (8001a8c <HAL_FMC_MspInit+0x120>)
 8001a62:	f003 fef9 	bl	8005858 <HAL_GPIO_Init>
 8001a66:	e000      	b.n	8001a6a <HAL_FMC_MspInit+0xfe>
    return;
 8001a68:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200000dc 	.word	0x200000dc
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40021800 	.word	0x40021800
 8001a80:	40020c00 	.word	0x40020c00
 8001a84:	40022000 	.word	0x40022000
 8001a88:	40021400 	.word	0x40021400
 8001a8c:	40021c00 	.word	0x40021c00

08001a90 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001a98:	f7ff ff68 	bl	800196c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08c      	sub	sp, #48	; 0x30
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	2036      	movs	r0, #54	; 0x36
 8001aba:	f001 ffc9 	bl	8003a50 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001abe:	2036      	movs	r0, #54	; 0x36
 8001ac0:	f001 ffe2 	bl	8003a88 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <HAL_InitTick+0xa0>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	4a1e      	ldr	r2, [pc, #120]	; (8001b44 <HAL_InitTick+0xa0>)
 8001aca:	f043 0310 	orr.w	r3, r3, #16
 8001ace:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <HAL_InitTick+0xa0>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001adc:	f107 0210 	add.w	r2, r7, #16
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f005 ff22 	bl	8007930 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001aec:	f005 fef8 	bl	80078e0 <HAL_RCC_GetPCLK1Freq>
 8001af0:	4603      	mov	r3, r0
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af8:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <HAL_InitTick+0xa4>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	0c9b      	lsrs	r3, r3, #18
 8001b00:	3b01      	subs	r3, #1
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <HAL_InitTick+0xa8>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <HAL_InitTick+0xac>)
 8001b08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_InitTick+0xa8>)
 8001b0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b12:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <HAL_InitTick+0xa8>)
 8001b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_InitTick+0xa8>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_InitTick+0xa8>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b24:	4809      	ldr	r0, [pc, #36]	; (8001b4c <HAL_InitTick+0xa8>)
 8001b26:	f007 fb7a 	bl	800921e <HAL_TIM_Base_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d104      	bne.n	8001b3a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b30:	4806      	ldr	r0, [pc, #24]	; (8001b4c <HAL_InitTick+0xa8>)
 8001b32:	f007 fba9 	bl	8009288 <HAL_TIM_Base_Start_IT>
 8001b36:	4603      	mov	r3, r0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3730      	adds	r7, #48	; 0x30
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	431bde83 	.word	0x431bde83
 8001b4c:	20000574 	.word	0x20000574
 8001b50:	40001000 	.word	0x40001000

08001b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <MemManage_Handler+0x4>

08001b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <TIM6_DAC_IRQHandler+0x10>)
 8001baa:	f007 fb97 	bl	80092dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000574 	.word	0x20000574

08001bb8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <LTDC_IRQHandler+0x10>)
 8001bbe:	f004 ff2d 	bl	8006a1c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200003c0 	.word	0x200003c0

08001bcc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <DMA2D_IRQHandler+0x10>)
 8001bd2:	f002 fa9f 	bl	8004114 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	2000051c 	.word	0x2000051c

08001be0 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <DSI_IRQHandler+0x10>)
 8001be6:	f002 ff71 	bl	8004acc <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000320 	.word	0x20000320

08001bf4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	e00a      	b.n	8001c1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c06:	f3af 8000 	nop.w
 8001c0a:	4601      	mov	r1, r0
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	60ba      	str	r2, [r7, #8]
 8001c12:	b2ca      	uxtb	r2, r1
 8001c14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	dbf0      	blt.n	8001c06 <_read+0x12>
	}

return len;
 8001c24:	687b      	ldr	r3, [r7, #4]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	e009      	b.n	8001c54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	60ba      	str	r2, [r7, #8]
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbf1      	blt.n	8001c40 <_write+0x12>
	}
	return len;
 8001c5c:	687b      	ldr	r3, [r7, #4]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <_close>:

int _close(int file)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c8e:	605a      	str	r2, [r3, #4]
	return 0;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <_isatty>:

int _isatty(int file)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
	return 0;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <_sbrk+0x50>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <_sbrk+0x16>
		heap_end = &end;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <_sbrk+0x50>)
 8001ce2:	4a10      	ldr	r2, [pc, #64]	; (8001d24 <_sbrk+0x54>)
 8001ce4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <_sbrk+0x50>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <_sbrk+0x50>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	466a      	mov	r2, sp
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d907      	bls.n	8001d0a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001cfa:	f00a fe6d 	bl	800c9d8 <__errno>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	230c      	movs	r3, #12
 8001d02:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295
 8001d08:	e006      	b.n	8001d18 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <_sbrk+0x50>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <_sbrk+0x50>)
 8001d14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	200000e0 	.word	0x200000e0
 8001d24:	20000b78 	.word	0x20000b78

08001d28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <SystemInit+0x5c>)
 8001d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d32:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <SystemInit+0x5c>)
 8001d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <SystemInit+0x60>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a11      	ldr	r2, [pc, #68]	; (8001d88 <SystemInit+0x60>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <SystemInit+0x60>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <SystemInit+0x60>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	490d      	ldr	r1, [pc, #52]	; (8001d88 <SystemInit+0x60>)
 8001d54:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <SystemInit+0x64>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <SystemInit+0x60>)
 8001d5c:	4a0c      	ldr	r2, [pc, #48]	; (8001d90 <SystemInit+0x68>)
 8001d5e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <SystemInit+0x60>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a08      	ldr	r2, [pc, #32]	; (8001d88 <SystemInit+0x60>)
 8001d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <SystemInit+0x60>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SystemInit+0x5c>)
 8001d74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d78:	609a      	str	r2, [r3, #8]
#endif
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	fef6ffff 	.word	0xfef6ffff
 8001d90:	24003010 	.word	0x24003010

08001d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dcc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d9a:	e003      	b.n	8001da4 <LoopCopyDataInit>

08001d9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001da0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001da2:	3104      	adds	r1, #4

08001da4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001da4:	480b      	ldr	r0, [pc, #44]	; (8001dd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001da8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001daa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001dac:	d3f6      	bcc.n	8001d9c <CopyDataInit>
  ldr  r2, =_sbss
 8001dae:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001db0:	e002      	b.n	8001db8 <LoopFillZerobss>

08001db2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001db2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001db4:	f842 3b04 	str.w	r3, [r2], #4

08001db8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001dba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001dbc:	d3f9      	bcc.n	8001db2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dbe:	f7ff ffb3 	bl	8001d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dc2:	f00a fe0f 	bl	800c9e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc6:	f7fe fc13 	bl	80005f0 <main>
  bx  lr    
 8001dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dcc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001dd0:	0800fa60 	.word	0x0800fa60
  ldr  r0, =_sdata
 8001dd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dd8:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 8001ddc:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 8001de0:	20000b74 	.word	0x20000b74

08001de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <ADC_IRQHandler>
	...

08001de8 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 f90d 	bl	8002014 <ft6x06_GetInstance>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	2bff      	cmp	r3, #255	; 0xff
 8001e02:	d10e      	bne.n	8001e22 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8001e04:	2000      	movs	r0, #0
 8001e06:	f000 f905 	bl	8002014 <ft6x06_GetInstance>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8001e0e:	7bbb      	ldrb	r3, [r7, #14]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d806      	bhi.n	8001e22 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8001e14:	7bbb      	ldrb	r3, [r7, #14]
 8001e16:	88fa      	ldrh	r2, [r7, #6]
 8001e18:	b2d1      	uxtb	r1, r2
 8001e1a:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <ft6x06_Init+0x44>)
 8001e1c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8001e1e:	f000 fcd5 	bl	80027cc <TS_IO_Init>
    }
  }
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200000e4 	.word	0x200000e4

08001e30 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8001e50:	f000 fcbc 	bl	80027cc <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	21a8      	movs	r1, #168	; 0xa8
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 fcda 	bl	8002814 <TS_IO_Read>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b29b      	uxth	r3, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 8001e76:	88fb      	ldrh	r3, [r7, #6]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 f8bc 	bl	8001ff6 <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 f88d 	bl	8001fa0 <ft6x06_TS_DisableIT>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 fcb5 	bl	8002814 <TS_IO_Read>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <ft6x06_TS_DetectTouch+0x50>)
 8001ecc:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8001ece:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <ft6x06_TS_DetectTouch+0x50>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	b2db      	uxtb	r3, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	200000e8 	.word	0x200000e8

08001ee4 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <ft6x06_TS_GetXY+0x90>)
 8001ef8:	789a      	ldrb	r2, [r3, #2]
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <ft6x06_TS_GetXY+0x90>)
 8001efc:	785b      	ldrb	r3, [r3, #1]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d234      	bcs.n	8001f6c <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8001f02:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <ft6x06_TS_GetXY+0x90>)
 8001f04:	789b      	ldrb	r3, [r3, #2]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <ft6x06_TS_GetXY+0x2c>
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d003      	beq.n	8001f16 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8001f0e:	e005      	b.n	8001f1c <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8001f10:	2303      	movs	r3, #3
 8001f12:	75fb      	strb	r3, [r7, #23]
      break;
 8001f14:	e002      	b.n	8001f1c <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8001f16:	2309      	movs	r3, #9
 8001f18:	75fb      	strb	r3, [r7, #23]
      break;
 8001f1a:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8001f1c:	89fb      	ldrh	r3, [r7, #14]
 8001f1e:	b2d8      	uxtb	r0, r3
 8001f20:	f107 0210 	add.w	r2, r7, #16
 8001f24:	7df9      	ldrb	r1, [r7, #23]
 8001f26:	2304      	movs	r3, #4
 8001f28:	f000 fc92 	bl	8002850 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8001f2c:	7c3b      	ldrb	r3, [r7, #16]
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	7c7b      	ldrb	r3, [r7, #17]
 8001f3a:	b21b      	sxth	r3, r3
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	b21b      	sxth	r3, r3
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8001f46:	7cbb      	ldrb	r3, [r7, #18]
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001f50:	b21a      	sxth	r2, r3
 8001f52:	7cfb      	ldrb	r3, [r7, #19]
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	4313      	orrs	r3, r2
 8001f58:	b21b      	sxth	r3, r3
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <ft6x06_TS_GetXY+0x90>)
 8001f62:	789b      	ldrb	r3, [r3, #2]
 8001f64:	3301      	adds	r3, #1
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	4b02      	ldr	r3, [pc, #8]	; (8001f74 <ft6x06_TS_GetXY+0x90>)
 8001f6a:	709a      	strb	r2, [r3, #2]
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200000e8 	.word	0x200000e8

08001f78 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8001f86:	2301      	movs	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	21a4      	movs	r1, #164	; 0xa4
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fc24 	bl	80027e0 <TS_IO_Write>
}
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	7bfa      	ldrb	r2, [r7, #15]
 8001fb8:	21a4      	movs	r1, #164	; 0xa4
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fc10 	bl	80027e0 <TS_IO_Write>
}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b085      	sub	sp, #20
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8002004:	68fb      	ldr	r3, [r7, #12]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]
 8002026:	e00b      	b.n	8002040 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <ft6x06_GetInstance+0x40>)
 800202c:	5cd3      	ldrb	r3, [r2, r3]
 800202e:	b29b      	uxth	r3, r3
 8002030:	88fa      	ldrh	r2, [r7, #6]
 8002032:	429a      	cmp	r2, r3
 8002034:	d101      	bne.n	800203a <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	e006      	b.n	8002048 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	3301      	adds	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d9f0      	bls.n	8002028 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002046:	23ff      	movs	r3, #255	; 0xff
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	200000e4 	.word	0x200000e4

08002058 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002062:	49be      	ldr	r1, [pc, #760]	; (800235c <OTM8009A_Init+0x304>)
 8002064:	2000      	movs	r0, #0
 8002066:	f000 ffff 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 800206a:	49bd      	ldr	r1, [pc, #756]	; (8002360 <OTM8009A_Init+0x308>)
 800206c:	2003      	movs	r0, #3
 800206e:	f000 fffb 	bl	8003068 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8002072:	49bc      	ldr	r1, [pc, #752]	; (8002364 <OTM8009A_Init+0x30c>)
 8002074:	2000      	movs	r0, #0
 8002076:	f000 fff7 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 800207a:	49bb      	ldr	r1, [pc, #748]	; (8002368 <OTM8009A_Init+0x310>)
 800207c:	2002      	movs	r0, #2
 800207e:	f000 fff3 	bl	8003068 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002082:	49b8      	ldr	r1, [pc, #736]	; (8002364 <OTM8009A_Init+0x30c>)
 8002084:	2000      	movs	r0, #0
 8002086:	f000 ffef 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 800208a:	49b8      	ldr	r1, [pc, #736]	; (800236c <OTM8009A_Init+0x314>)
 800208c:	2000      	movs	r0, #0
 800208e:	f000 ffeb 	bl	8003068 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8002092:	200a      	movs	r0, #10
 8002094:	f000 fbfa 	bl	800288c <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8002098:	49b5      	ldr	r1, [pc, #724]	; (8002370 <OTM8009A_Init+0x318>)
 800209a:	2000      	movs	r0, #0
 800209c:	f000 ffe4 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80020a0:	49b4      	ldr	r1, [pc, #720]	; (8002374 <OTM8009A_Init+0x31c>)
 80020a2:	2000      	movs	r0, #0
 80020a4:	f000 ffe0 	bl	8003068 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80020a8:	200a      	movs	r0, #10
 80020aa:	f000 fbef 	bl	800288c <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80020ae:	49b2      	ldr	r1, [pc, #712]	; (8002378 <OTM8009A_Init+0x320>)
 80020b0:	2000      	movs	r0, #0
 80020b2:	f000 ffd9 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80020b6:	49b1      	ldr	r1, [pc, #708]	; (800237c <OTM8009A_Init+0x324>)
 80020b8:	2000      	movs	r0, #0
 80020ba:	f000 ffd5 	bl	8003068 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80020be:	49b0      	ldr	r1, [pc, #704]	; (8002380 <OTM8009A_Init+0x328>)
 80020c0:	2000      	movs	r0, #0
 80020c2:	f000 ffd1 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80020c6:	49af      	ldr	r1, [pc, #700]	; (8002384 <OTM8009A_Init+0x32c>)
 80020c8:	2000      	movs	r0, #0
 80020ca:	f000 ffcd 	bl	8003068 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80020ce:	49ae      	ldr	r1, [pc, #696]	; (8002388 <OTM8009A_Init+0x330>)
 80020d0:	2000      	movs	r0, #0
 80020d2:	f000 ffc9 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80020d6:	49ad      	ldr	r1, [pc, #692]	; (800238c <OTM8009A_Init+0x334>)
 80020d8:	2000      	movs	r0, #0
 80020da:	f000 ffc5 	bl	8003068 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80020de:	499f      	ldr	r1, [pc, #636]	; (800235c <OTM8009A_Init+0x304>)
 80020e0:	2000      	movs	r0, #0
 80020e2:	f000 ffc1 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80020e6:	49aa      	ldr	r1, [pc, #680]	; (8002390 <OTM8009A_Init+0x338>)
 80020e8:	2000      	movs	r0, #0
 80020ea:	f000 ffbd 	bl	8003068 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80020ee:	49a9      	ldr	r1, [pc, #676]	; (8002394 <OTM8009A_Init+0x33c>)
 80020f0:	2000      	movs	r0, #0
 80020f2:	f000 ffb9 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80020f6:	49a8      	ldr	r1, [pc, #672]	; (8002398 <OTM8009A_Init+0x340>)
 80020f8:	2000      	movs	r0, #0
 80020fa:	f000 ffb5 	bl	8003068 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80020fe:	49a7      	ldr	r1, [pc, #668]	; (800239c <OTM8009A_Init+0x344>)
 8002100:	2000      	movs	r0, #0
 8002102:	f000 ffb1 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8002106:	49a6      	ldr	r1, [pc, #664]	; (80023a0 <OTM8009A_Init+0x348>)
 8002108:	2000      	movs	r0, #0
 800210a:	f000 ffad 	bl	8003068 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 800210e:	49a5      	ldr	r1, [pc, #660]	; (80023a4 <OTM8009A_Init+0x34c>)
 8002110:	2000      	movs	r0, #0
 8002112:	f000 ffa9 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8002116:	49a4      	ldr	r1, [pc, #656]	; (80023a8 <OTM8009A_Init+0x350>)
 8002118:	2000      	movs	r0, #0
 800211a:	f000 ffa5 	bl	8003068 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 800211e:	49a3      	ldr	r1, [pc, #652]	; (80023ac <OTM8009A_Init+0x354>)
 8002120:	2000      	movs	r0, #0
 8002122:	f000 ffa1 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8002126:	4997      	ldr	r1, [pc, #604]	; (8002384 <OTM8009A_Init+0x32c>)
 8002128:	2000      	movs	r0, #0
 800212a:	f000 ff9d 	bl	8003068 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800212e:	498b      	ldr	r1, [pc, #556]	; (800235c <OTM8009A_Init+0x304>)
 8002130:	2000      	movs	r0, #0
 8002132:	f000 ff99 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8002136:	499e      	ldr	r1, [pc, #632]	; (80023b0 <OTM8009A_Init+0x358>)
 8002138:	2002      	movs	r0, #2
 800213a:	f000 ff95 	bl	8003068 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 800213e:	499d      	ldr	r1, [pc, #628]	; (80023b4 <OTM8009A_Init+0x35c>)
 8002140:	2000      	movs	r0, #0
 8002142:	f000 ff91 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8002146:	499c      	ldr	r1, [pc, #624]	; (80023b8 <OTM8009A_Init+0x360>)
 8002148:	2000      	movs	r0, #0
 800214a:	f000 ff8d 	bl	8003068 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 800214e:	499b      	ldr	r1, [pc, #620]	; (80023bc <OTM8009A_Init+0x364>)
 8002150:	2000      	movs	r0, #0
 8002152:	f000 ff89 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8002156:	499a      	ldr	r1, [pc, #616]	; (80023c0 <OTM8009A_Init+0x368>)
 8002158:	2000      	movs	r0, #0
 800215a:	f000 ff85 	bl	8003068 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 800215e:	4999      	ldr	r1, [pc, #612]	; (80023c4 <OTM8009A_Init+0x36c>)
 8002160:	2000      	movs	r0, #0
 8002162:	f000 ff81 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8002166:	4998      	ldr	r1, [pc, #608]	; (80023c8 <OTM8009A_Init+0x370>)
 8002168:	2000      	movs	r0, #0
 800216a:	f000 ff7d 	bl	8003068 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800216e:	4989      	ldr	r1, [pc, #548]	; (8002394 <OTM8009A_Init+0x33c>)
 8002170:	2000      	movs	r0, #0
 8002172:	f000 ff79 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8002176:	4995      	ldr	r1, [pc, #596]	; (80023cc <OTM8009A_Init+0x374>)
 8002178:	2000      	movs	r0, #0
 800217a:	f000 ff75 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800217e:	4987      	ldr	r1, [pc, #540]	; (800239c <OTM8009A_Init+0x344>)
 8002180:	2000      	movs	r0, #0
 8002182:	f000 ff71 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8002186:	4992      	ldr	r1, [pc, #584]	; (80023d0 <OTM8009A_Init+0x378>)
 8002188:	2000      	movs	r0, #0
 800218a:	f000 ff6d 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 800218e:	4991      	ldr	r1, [pc, #580]	; (80023d4 <OTM8009A_Init+0x37c>)
 8002190:	2000      	movs	r0, #0
 8002192:	f000 ff69 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8002196:	4990      	ldr	r1, [pc, #576]	; (80023d8 <OTM8009A_Init+0x380>)
 8002198:	2002      	movs	r0, #2
 800219a:	f000 ff65 	bl	8003068 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800219e:	4971      	ldr	r1, [pc, #452]	; (8002364 <OTM8009A_Init+0x30c>)
 80021a0:	2000      	movs	r0, #0
 80021a2:	f000 ff61 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80021a6:	498d      	ldr	r1, [pc, #564]	; (80023dc <OTM8009A_Init+0x384>)
 80021a8:	2006      	movs	r0, #6
 80021aa:	f000 ff5d 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80021ae:	498c      	ldr	r1, [pc, #560]	; (80023e0 <OTM8009A_Init+0x388>)
 80021b0:	2000      	movs	r0, #0
 80021b2:	f000 ff59 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80021b6:	498b      	ldr	r1, [pc, #556]	; (80023e4 <OTM8009A_Init+0x38c>)
 80021b8:	200e      	movs	r0, #14
 80021ba:	f000 ff55 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80021be:	498a      	ldr	r1, [pc, #552]	; (80023e8 <OTM8009A_Init+0x390>)
 80021c0:	2000      	movs	r0, #0
 80021c2:	f000 ff51 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80021c6:	4989      	ldr	r1, [pc, #548]	; (80023ec <OTM8009A_Init+0x394>)
 80021c8:	200e      	movs	r0, #14
 80021ca:	f000 ff4d 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80021ce:	4988      	ldr	r1, [pc, #544]	; (80023f0 <OTM8009A_Init+0x398>)
 80021d0:	2000      	movs	r0, #0
 80021d2:	f000 ff49 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80021d6:	4987      	ldr	r1, [pc, #540]	; (80023f4 <OTM8009A_Init+0x39c>)
 80021d8:	200a      	movs	r0, #10
 80021da:	f000 ff45 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80021de:	4986      	ldr	r1, [pc, #536]	; (80023f8 <OTM8009A_Init+0x3a0>)
 80021e0:	2000      	movs	r0, #0
 80021e2:	f000 ff41 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80021e6:	4985      	ldr	r1, [pc, #532]	; (80023fc <OTM8009A_Init+0x3a4>)
 80021e8:	2000      	movs	r0, #0
 80021ea:	f000 ff3d 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80021ee:	495d      	ldr	r1, [pc, #372]	; (8002364 <OTM8009A_Init+0x30c>)
 80021f0:	2000      	movs	r0, #0
 80021f2:	f000 ff39 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80021f6:	4982      	ldr	r1, [pc, #520]	; (8002400 <OTM8009A_Init+0x3a8>)
 80021f8:	200a      	movs	r0, #10
 80021fa:	f000 ff35 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80021fe:	4981      	ldr	r1, [pc, #516]	; (8002404 <OTM8009A_Init+0x3ac>)
 8002200:	2000      	movs	r0, #0
 8002202:	f000 ff31 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8002206:	4980      	ldr	r1, [pc, #512]	; (8002408 <OTM8009A_Init+0x3b0>)
 8002208:	200f      	movs	r0, #15
 800220a:	f000 ff2d 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800220e:	4974      	ldr	r1, [pc, #464]	; (80023e0 <OTM8009A_Init+0x388>)
 8002210:	2000      	movs	r0, #0
 8002212:	f000 ff29 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8002216:	497d      	ldr	r1, [pc, #500]	; (800240c <OTM8009A_Init+0x3b4>)
 8002218:	200f      	movs	r0, #15
 800221a:	f000 ff25 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800221e:	4972      	ldr	r1, [pc, #456]	; (80023e8 <OTM8009A_Init+0x390>)
 8002220:	2000      	movs	r0, #0
 8002222:	f000 ff21 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8002226:	497a      	ldr	r1, [pc, #488]	; (8002410 <OTM8009A_Init+0x3b8>)
 8002228:	200a      	movs	r0, #10
 800222a:	f000 ff1d 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800222e:	4970      	ldr	r1, [pc, #448]	; (80023f0 <OTM8009A_Init+0x398>)
 8002230:	2000      	movs	r0, #0
 8002232:	f000 ff19 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8002236:	4977      	ldr	r1, [pc, #476]	; (8002414 <OTM8009A_Init+0x3bc>)
 8002238:	200f      	movs	r0, #15
 800223a:	f000 ff15 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800223e:	496e      	ldr	r1, [pc, #440]	; (80023f8 <OTM8009A_Init+0x3a0>)
 8002240:	2000      	movs	r0, #0
 8002242:	f000 ff11 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8002246:	4974      	ldr	r1, [pc, #464]	; (8002418 <OTM8009A_Init+0x3c0>)
 8002248:	200f      	movs	r0, #15
 800224a:	f000 ff0d 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 800224e:	4973      	ldr	r1, [pc, #460]	; (800241c <OTM8009A_Init+0x3c4>)
 8002250:	2000      	movs	r0, #0
 8002252:	f000 ff09 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8002256:	4972      	ldr	r1, [pc, #456]	; (8002420 <OTM8009A_Init+0x3c8>)
 8002258:	200a      	movs	r0, #10
 800225a:	f000 ff05 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 800225e:	4971      	ldr	r1, [pc, #452]	; (8002424 <OTM8009A_Init+0x3cc>)
 8002260:	2000      	movs	r0, #0
 8002262:	f000 ff01 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8002266:	4970      	ldr	r1, [pc, #448]	; (8002428 <OTM8009A_Init+0x3d0>)
 8002268:	200a      	movs	r0, #10
 800226a:	f000 fefd 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800226e:	493d      	ldr	r1, [pc, #244]	; (8002364 <OTM8009A_Init+0x30c>)
 8002270:	2000      	movs	r0, #0
 8002272:	f000 fef9 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8002276:	496d      	ldr	r1, [pc, #436]	; (800242c <OTM8009A_Init+0x3d4>)
 8002278:	200a      	movs	r0, #10
 800227a:	f000 fef5 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800227e:	4961      	ldr	r1, [pc, #388]	; (8002404 <OTM8009A_Init+0x3ac>)
 8002280:	2000      	movs	r0, #0
 8002282:	f000 fef1 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8002286:	496a      	ldr	r1, [pc, #424]	; (8002430 <OTM8009A_Init+0x3d8>)
 8002288:	200f      	movs	r0, #15
 800228a:	f000 feed 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800228e:	4954      	ldr	r1, [pc, #336]	; (80023e0 <OTM8009A_Init+0x388>)
 8002290:	2000      	movs	r0, #0
 8002292:	f000 fee9 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8002296:	4967      	ldr	r1, [pc, #412]	; (8002434 <OTM8009A_Init+0x3dc>)
 8002298:	200f      	movs	r0, #15
 800229a:	f000 fee5 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800229e:	4952      	ldr	r1, [pc, #328]	; (80023e8 <OTM8009A_Init+0x390>)
 80022a0:	2000      	movs	r0, #0
 80022a2:	f000 fee1 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80022a6:	4964      	ldr	r1, [pc, #400]	; (8002438 <OTM8009A_Init+0x3e0>)
 80022a8:	200a      	movs	r0, #10
 80022aa:	f000 fedd 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80022ae:	4950      	ldr	r1, [pc, #320]	; (80023f0 <OTM8009A_Init+0x398>)
 80022b0:	2000      	movs	r0, #0
 80022b2:	f000 fed9 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 80022b6:	4961      	ldr	r1, [pc, #388]	; (800243c <OTM8009A_Init+0x3e4>)
 80022b8:	200f      	movs	r0, #15
 80022ba:	f000 fed5 	bl	8003068 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80022be:	494e      	ldr	r1, [pc, #312]	; (80023f8 <OTM8009A_Init+0x3a0>)
 80022c0:	2000      	movs	r0, #0
 80022c2:	f000 fed1 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 80022c6:	495e      	ldr	r1, [pc, #376]	; (8002440 <OTM8009A_Init+0x3e8>)
 80022c8:	200f      	movs	r0, #15
 80022ca:	f000 fecd 	bl	8003068 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80022ce:	4931      	ldr	r1, [pc, #196]	; (8002394 <OTM8009A_Init+0x33c>)
 80022d0:	2000      	movs	r0, #0
 80022d2:	f000 fec9 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 80022d6:	495b      	ldr	r1, [pc, #364]	; (8002444 <OTM8009A_Init+0x3ec>)
 80022d8:	2000      	movs	r0, #0
 80022da:	f000 fec5 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80022de:	495a      	ldr	r1, [pc, #360]	; (8002448 <OTM8009A_Init+0x3f0>)
 80022e0:	2000      	movs	r0, #0
 80022e2:	f000 fec1 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 80022e6:	4959      	ldr	r1, [pc, #356]	; (800244c <OTM8009A_Init+0x3f4>)
 80022e8:	2000      	movs	r0, #0
 80022ea:	f000 febd 	bl	8003068 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 80022ee:	4958      	ldr	r1, [pc, #352]	; (8002450 <OTM8009A_Init+0x3f8>)
 80022f0:	2000      	movs	r0, #0
 80022f2:	f000 feb9 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 80022f6:	4957      	ldr	r1, [pc, #348]	; (8002454 <OTM8009A_Init+0x3fc>)
 80022f8:	2000      	movs	r0, #0
 80022fa:	f000 feb5 	bl	8003068 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80022fe:	4917      	ldr	r1, [pc, #92]	; (800235c <OTM8009A_Init+0x304>)
 8002300:	2000      	movs	r0, #0
 8002302:	f000 feb1 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8002306:	4954      	ldr	r1, [pc, #336]	; (8002458 <OTM8009A_Init+0x400>)
 8002308:	2003      	movs	r0, #3
 800230a:	f000 fead 	bl	8003068 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800230e:	4913      	ldr	r1, [pc, #76]	; (800235c <OTM8009A_Init+0x304>)
 8002310:	2000      	movs	r0, #0
 8002312:	f000 fea9 	bl	8003068 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002316:	4911      	ldr	r1, [pc, #68]	; (800235c <OTM8009A_Init+0x304>)
 8002318:	2000      	movs	r0, #0
 800231a:	f000 fea5 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 800231e:	494f      	ldr	r1, [pc, #316]	; (800245c <OTM8009A_Init+0x404>)
 8002320:	2010      	movs	r0, #16
 8002322:	f000 fea1 	bl	8003068 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002326:	490d      	ldr	r1, [pc, #52]	; (800235c <OTM8009A_Init+0x304>)
 8002328:	2000      	movs	r0, #0
 800232a:	f000 fe9d 	bl	8003068 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 800232e:	494c      	ldr	r1, [pc, #304]	; (8002460 <OTM8009A_Init+0x408>)
 8002330:	2010      	movs	r0, #16
 8002332:	f000 fe99 	bl	8003068 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8002336:	494b      	ldr	r1, [pc, #300]	; (8002464 <OTM8009A_Init+0x40c>)
 8002338:	2000      	movs	r0, #0
 800233a:	f000 fe95 	bl	8003068 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 800233e:	2078      	movs	r0, #120	; 0x78
 8002340:	f000 faa4 	bl	800288c <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8090 	beq.w	800246c <OTM8009A_Init+0x414>
 800234c:	2b02      	cmp	r3, #2
 800234e:	d000      	beq.n	8002352 <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8002350:	e091      	b.n	8002476 <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8002352:	4945      	ldr	r1, [pc, #276]	; (8002468 <OTM8009A_Init+0x410>)
 8002354:	2000      	movs	r0, #0
 8002356:	f000 fe87 	bl	8003068 <DSI_IO_WriteCmd>
    break;
 800235a:	e08c      	b.n	8002476 <OTM8009A_Init+0x41e>
 800235c:	0800dd98 	.word	0x0800dd98
 8002360:	0800dc50 	.word	0x0800dc50
 8002364:	0800dd9c 	.word	0x0800dd9c
 8002368:	0800dc54 	.word	0x0800dc54
 800236c:	0800dda0 	.word	0x0800dda0
 8002370:	0800dda4 	.word	0x0800dda4
 8002374:	0800dda8 	.word	0x0800dda8
 8002378:	0800ddac 	.word	0x0800ddac
 800237c:	0800ddb0 	.word	0x0800ddb0
 8002380:	0800ddb4 	.word	0x0800ddb4
 8002384:	0800ddb8 	.word	0x0800ddb8
 8002388:	0800ddbc 	.word	0x0800ddbc
 800238c:	0800ddc0 	.word	0x0800ddc0
 8002390:	0800ddc4 	.word	0x0800ddc4
 8002394:	0800ddc8 	.word	0x0800ddc8
 8002398:	0800ddcc 	.word	0x0800ddcc
 800239c:	0800ddd0 	.word	0x0800ddd0
 80023a0:	0800ddd4 	.word	0x0800ddd4
 80023a4:	0800ddd8 	.word	0x0800ddd8
 80023a8:	0800dddc 	.word	0x0800dddc
 80023ac:	0800dde0 	.word	0x0800dde0
 80023b0:	0800dc80 	.word	0x0800dc80
 80023b4:	0800dde4 	.word	0x0800dde4
 80023b8:	0800dde8 	.word	0x0800dde8
 80023bc:	0800ddec 	.word	0x0800ddec
 80023c0:	0800ddf0 	.word	0x0800ddf0
 80023c4:	0800ddf4 	.word	0x0800ddf4
 80023c8:	0800ddf8 	.word	0x0800ddf8
 80023cc:	0800ddfc 	.word	0x0800ddfc
 80023d0:	0800de00 	.word	0x0800de00
 80023d4:	0800de04 	.word	0x0800de04
 80023d8:	0800dc84 	.word	0x0800dc84
 80023dc:	0800dc88 	.word	0x0800dc88
 80023e0:	0800de08 	.word	0x0800de08
 80023e4:	0800dc90 	.word	0x0800dc90
 80023e8:	0800de0c 	.word	0x0800de0c
 80023ec:	0800dca0 	.word	0x0800dca0
 80023f0:	0800de10 	.word	0x0800de10
 80023f4:	0800dcb0 	.word	0x0800dcb0
 80023f8:	0800de14 	.word	0x0800de14
 80023fc:	0800de4c 	.word	0x0800de4c
 8002400:	0800dcbc 	.word	0x0800dcbc
 8002404:	0800de18 	.word	0x0800de18
 8002408:	0800dcc8 	.word	0x0800dcc8
 800240c:	0800dcd8 	.word	0x0800dcd8
 8002410:	0800dce8 	.word	0x0800dce8
 8002414:	0800dcf4 	.word	0x0800dcf4
 8002418:	0800dd04 	.word	0x0800dd04
 800241c:	0800de1c 	.word	0x0800de1c
 8002420:	0800dd14 	.word	0x0800dd14
 8002424:	0800de20 	.word	0x0800de20
 8002428:	0800dd20 	.word	0x0800dd20
 800242c:	0800dd2c 	.word	0x0800dd2c
 8002430:	0800dd38 	.word	0x0800dd38
 8002434:	0800dd48 	.word	0x0800dd48
 8002438:	0800dd58 	.word	0x0800dd58
 800243c:	0800dd64 	.word	0x0800dd64
 8002440:	0800dd74 	.word	0x0800dd74
 8002444:	0800de50 	.word	0x0800de50
 8002448:	0800de54 	.word	0x0800de54
 800244c:	0800de58 	.word	0x0800de58
 8002450:	0800de5c 	.word	0x0800de5c
 8002454:	0800de60 	.word	0x0800de60
 8002458:	0800dd84 	.word	0x0800dd84
 800245c:	0800dc58 	.word	0x0800dc58
 8002460:	0800dc6c 	.word	0x0800dc6c
 8002464:	0800de24 	.word	0x0800de24
 8002468:	0800de28 	.word	0x0800de28
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 800246c:	491a      	ldr	r1, [pc, #104]	; (80024d8 <OTM8009A_Init+0x480>)
 800246e:	2000      	movs	r0, #0
 8002470:	f000 fdfa 	bl	8003068 <DSI_IO_WriteCmd>
    break;
 8002474:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d10b      	bne.n	8002494 <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 800247c:	4917      	ldr	r1, [pc, #92]	; (80024dc <OTM8009A_Init+0x484>)
 800247e:	2000      	movs	r0, #0
 8002480:	f000 fdf2 	bl	8003068 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8002484:	4916      	ldr	r1, [pc, #88]	; (80024e0 <OTM8009A_Init+0x488>)
 8002486:	2004      	movs	r0, #4
 8002488:	f000 fdee 	bl	8003068 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 800248c:	4915      	ldr	r1, [pc, #84]	; (80024e4 <OTM8009A_Init+0x48c>)
 800248e:	2004      	movs	r0, #4
 8002490:	f000 fdea 	bl	8003068 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8002494:	4914      	ldr	r1, [pc, #80]	; (80024e8 <OTM8009A_Init+0x490>)
 8002496:	2000      	movs	r0, #0
 8002498:	f000 fde6 	bl	8003068 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 800249c:	4913      	ldr	r1, [pc, #76]	; (80024ec <OTM8009A_Init+0x494>)
 800249e:	2000      	movs	r0, #0
 80024a0:	f000 fde2 	bl	8003068 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 80024a4:	4912      	ldr	r1, [pc, #72]	; (80024f0 <OTM8009A_Init+0x498>)
 80024a6:	2000      	movs	r0, #0
 80024a8:	f000 fdde 	bl	8003068 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 80024ac:	4911      	ldr	r1, [pc, #68]	; (80024f4 <OTM8009A_Init+0x49c>)
 80024ae:	2000      	movs	r0, #0
 80024b0:	f000 fdda 	bl	8003068 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 80024b4:	4910      	ldr	r1, [pc, #64]	; (80024f8 <OTM8009A_Init+0x4a0>)
 80024b6:	2000      	movs	r0, #0
 80024b8:	f000 fdd6 	bl	8003068 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80024bc:	490f      	ldr	r1, [pc, #60]	; (80024fc <OTM8009A_Init+0x4a4>)
 80024be:	2000      	movs	r0, #0
 80024c0:	f000 fdd2 	bl	8003068 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 80024c4:	490e      	ldr	r1, [pc, #56]	; (8002500 <OTM8009A_Init+0x4a8>)
 80024c6:	2000      	movs	r0, #0
 80024c8:	f000 fdce 	bl	8003068 <DSI_IO_WriteCmd>

  return 0;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	0800de2c 	.word	0x0800de2c
 80024dc:	0800de30 	.word	0x0800de30
 80024e0:	0800dd88 	.word	0x0800dd88
 80024e4:	0800dd90 	.word	0x0800dd90
 80024e8:	0800de34 	.word	0x0800de34
 80024ec:	0800de38 	.word	0x0800de38
 80024f0:	0800de3c 	.word	0x0800de3c
 80024f4:	0800de40 	.word	0x0800de40
 80024f8:	0800de44 	.word	0x0800de44
 80024fc:	0800dd98 	.word	0x0800dd98
 8002500:	0800de48 	.word	0x0800de48

08002504 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08c      	sub	sp, #48	; 0x30
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a58      	ldr	r2, [pc, #352]	; (8002670 <I2Cx_MspInit+0x16c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d15b      	bne.n	80025cc <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002514:	4b57      	ldr	r3, [pc, #348]	; (8002674 <I2Cx_MspInit+0x170>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	4a56      	ldr	r2, [pc, #344]	; (8002674 <I2Cx_MspInit+0x170>)
 800251a:	f043 0308 	orr.w	r3, r3, #8
 800251e:	6313      	str	r3, [r2, #48]	; 0x30
 8002520:	4b54      	ldr	r3, [pc, #336]	; (8002674 <I2Cx_MspInit+0x170>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	61bb      	str	r3, [r7, #24]
 800252a:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 800252c:	4b51      	ldr	r3, [pc, #324]	; (8002674 <I2Cx_MspInit+0x170>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	4a50      	ldr	r2, [pc, #320]	; (8002674 <I2Cx_MspInit+0x170>)
 8002532:	f043 0302 	orr.w	r3, r3, #2
 8002536:	6313      	str	r3, [r2, #48]	; 0x30
 8002538:	4b4e      	ldr	r3, [pc, #312]	; (8002674 <I2Cx_MspInit+0x170>)
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002548:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800254a:	2312      	movs	r3, #18
 800254c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002552:	2302      	movs	r3, #2
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8002556:	2304      	movs	r3, #4
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 800255a:	f107 031c 	add.w	r3, r7, #28
 800255e:	4619      	mov	r1, r3
 8002560:	4845      	ldr	r0, [pc, #276]	; (8002678 <I2Cx_MspInit+0x174>)
 8002562:	f003 f979 	bl	8005858 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 800256a:	230b      	movs	r3, #11
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	4619      	mov	r1, r3
 8002574:	4841      	ldr	r0, [pc, #260]	; (800267c <I2Cx_MspInit+0x178>)
 8002576:	f003 f96f 	bl	8005858 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800257a:	4b3e      	ldr	r3, [pc, #248]	; (8002674 <I2Cx_MspInit+0x170>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	4a3d      	ldr	r2, [pc, #244]	; (8002674 <I2Cx_MspInit+0x170>)
 8002580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002584:	6413      	str	r3, [r2, #64]	; 0x40
 8002586:	4b3b      	ldr	r3, [pc, #236]	; (8002674 <I2Cx_MspInit+0x170>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002592:	4b38      	ldr	r3, [pc, #224]	; (8002674 <I2Cx_MspInit+0x170>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4a37      	ldr	r2, [pc, #220]	; (8002674 <I2Cx_MspInit+0x170>)
 8002598:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800259c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800259e:	4b35      	ldr	r3, [pc, #212]	; (8002674 <I2Cx_MspInit+0x170>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4a34      	ldr	r2, [pc, #208]	; (8002674 <I2Cx_MspInit+0x170>)
 80025a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025a8:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	210f      	movs	r1, #15
 80025ae:	205f      	movs	r0, #95	; 0x5f
 80025b0:	f001 fa4e 	bl	8003a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80025b4:	205f      	movs	r0, #95	; 0x5f
 80025b6:	f001 fa67 	bl	8003a88 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	210f      	movs	r1, #15
 80025be:	2060      	movs	r0, #96	; 0x60
 80025c0:	f001 fa46 	bl	8003a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 80025c4:	2060      	movs	r0, #96	; 0x60
 80025c6:	f001 fa5f 	bl	8003a88 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80025ca:	e04d      	b.n	8002668 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80025cc:	4b29      	ldr	r3, [pc, #164]	; (8002674 <I2Cx_MspInit+0x170>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	4a28      	ldr	r2, [pc, #160]	; (8002674 <I2Cx_MspInit+0x170>)
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	6313      	str	r3, [r2, #48]	; 0x30
 80025d8:	4b26      	ldr	r3, [pc, #152]	; (8002674 <I2Cx_MspInit+0x170>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80025e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025e8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80025ea:	2312      	movs	r3, #18
 80025ec:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80025f2:	2302      	movs	r3, #2
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80025f6:	2304      	movs	r3, #4
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025fa:	f107 031c 	add.w	r3, r7, #28
 80025fe:	4619      	mov	r1, r3
 8002600:	481e      	ldr	r0, [pc, #120]	; (800267c <I2Cx_MspInit+0x178>)
 8002602:	f003 f929 	bl	8005858 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800260a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800260c:	f107 031c 	add.w	r3, r7, #28
 8002610:	4619      	mov	r1, r3
 8002612:	481a      	ldr	r0, [pc, #104]	; (800267c <I2Cx_MspInit+0x178>)
 8002614:	f003 f920 	bl	8005858 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002618:	4b16      	ldr	r3, [pc, #88]	; (8002674 <I2Cx_MspInit+0x170>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	4a15      	ldr	r2, [pc, #84]	; (8002674 <I2Cx_MspInit+0x170>)
 800261e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002622:	6413      	str	r3, [r2, #64]	; 0x40
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <I2Cx_MspInit+0x170>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002630:	4b10      	ldr	r3, [pc, #64]	; (8002674 <I2Cx_MspInit+0x170>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4a0f      	ldr	r2, [pc, #60]	; (8002674 <I2Cx_MspInit+0x170>)
 8002636:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800263a:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800263c:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <I2Cx_MspInit+0x170>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	4a0c      	ldr	r2, [pc, #48]	; (8002674 <I2Cx_MspInit+0x170>)
 8002642:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002646:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002648:	2200      	movs	r2, #0
 800264a:	210f      	movs	r1, #15
 800264c:	201f      	movs	r0, #31
 800264e:	f001 f9ff 	bl	8003a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002652:	201f      	movs	r0, #31
 8002654:	f001 fa18 	bl	8003a88 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002658:	2200      	movs	r2, #0
 800265a:	210f      	movs	r1, #15
 800265c:	2020      	movs	r0, #32
 800265e:	f001 f9f7 	bl	8003a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002662:	2020      	movs	r0, #32
 8002664:	f001 fa10 	bl	8003a88 <HAL_NVIC_EnableIRQ>
}
 8002668:	bf00      	nop
 800266a:	3730      	adds	r7, #48	; 0x30
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	200000ec 	.word	0x200000ec
 8002674:	40023800 	.word	0x40023800
 8002678:	40020c00 	.word	0x40020c00
 800267c:	40020400 	.word	0x40020400

08002680 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f003 fecd 	bl	8006428 <HAL_I2C_GetState>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d125      	bne.n	80026e0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <I2Cx_Init+0x68>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d103      	bne.n	80026a4 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a13      	ldr	r2, [pc, #76]	; (80026ec <I2Cx_Init+0x6c>)
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e002      	b.n	80026aa <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <I2Cx_Init+0x70>)
 80026a8:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a11      	ldr	r2, [pc, #68]	; (80026f4 <I2Cx_Init+0x74>)
 80026ae:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ff15 	bl	8002504 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f003 fba2 	bl	8005e24 <HAL_I2C_Init>
  }
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	200000ec 	.word	0x200000ec
 80026ec:	40006000 	.word	0x40006000
 80026f0:	40005400 	.word	0x40005400
 80026f4:	40912732 	.word	0x40912732

080026f8 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	; 0x28
 80026fc:	af04      	add	r7, sp, #16
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	4608      	mov	r0, r1
 8002702:	4611      	mov	r1, r2
 8002704:	461a      	mov	r2, r3
 8002706:	4603      	mov	r3, r0
 8002708:	72fb      	strb	r3, [r7, #11]
 800270a:	460b      	mov	r3, r1
 800270c:	813b      	strh	r3, [r7, #8]
 800270e:	4613      	mov	r3, r2
 8002710:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002716:	7afb      	ldrb	r3, [r7, #11]
 8002718:	b299      	uxth	r1, r3
 800271a:	88f8      	ldrh	r0, [r7, #6]
 800271c:	893a      	ldrh	r2, [r7, #8]
 800271e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002722:	9302      	str	r3, [sp, #8]
 8002724:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	4603      	mov	r3, r0
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f003 fd60 	bl	80061f4 <HAL_I2C_Mem_Read>
 8002734:	4603      	mov	r3, r0
 8002736:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002738:	7dfb      	ldrb	r3, [r7, #23]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d004      	beq.n	8002748 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800273e:	7afb      	ldrb	r3, [r7, #11]
 8002740:	4619      	mov	r1, r3
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f832 	bl	80027ac <I2Cx_Error>
  }
  return status;
 8002748:	7dfb      	ldrb	r3, [r7, #23]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b08a      	sub	sp, #40	; 0x28
 8002756:	af04      	add	r7, sp, #16
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	4608      	mov	r0, r1
 800275c:	4611      	mov	r1, r2
 800275e:	461a      	mov	r2, r3
 8002760:	4603      	mov	r3, r0
 8002762:	72fb      	strb	r3, [r7, #11]
 8002764:	460b      	mov	r3, r1
 8002766:	813b      	strh	r3, [r7, #8]
 8002768:	4613      	mov	r3, r2
 800276a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002770:	7afb      	ldrb	r3, [r7, #11]
 8002772:	b299      	uxth	r1, r3
 8002774:	88f8      	ldrh	r0, [r7, #6]
 8002776:	893a      	ldrh	r2, [r7, #8]
 8002778:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800277c:	9302      	str	r3, [sp, #8]
 800277e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	4603      	mov	r3, r0
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f003 fc1f 	bl	8005fcc <HAL_I2C_Mem_Write>
 800278e:	4603      	mov	r3, r0
 8002790:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d004      	beq.n	80027a2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002798:	7afb      	ldrb	r3, [r7, #11]
 800279a:	4619      	mov	r1, r3
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 f805 	bl	80027ac <I2Cx_Error>
  }
  return status;
 80027a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f003 fbc3 	bl	8005f44 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ff5e 	bl	8002680 <I2Cx_Init>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <TS_IO_Init+0x10>)
 80027d2:	f7ff ff55 	bl	8002680 <I2Cx_Init>
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200000ec 	.word	0x200000ec

080027e0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
 80027ea:	460b      	mov	r3, r1
 80027ec:	71bb      	strb	r3, [r7, #6]
 80027ee:	4613      	mov	r3, r2
 80027f0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80027f2:	79bb      	ldrb	r3, [r7, #6]
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	79f9      	ldrb	r1, [r7, #7]
 80027f8:	2301      	movs	r3, #1
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	1d7b      	adds	r3, r7, #5
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	2301      	movs	r3, #1
 8002802:	4803      	ldr	r0, [pc, #12]	; (8002810 <TS_IO_Write+0x30>)
 8002804:	f7ff ffa5 	bl	8002752 <I2Cx_WriteMultiple>
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	200000ec 	.word	0x200000ec

08002814 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af02      	add	r7, sp, #8
 800281a:	4603      	mov	r3, r0
 800281c:	460a      	mov	r2, r1
 800281e:	71fb      	strb	r3, [r7, #7]
 8002820:	4613      	mov	r3, r2
 8002822:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002828:	79bb      	ldrb	r3, [r7, #6]
 800282a:	b29a      	uxth	r2, r3
 800282c:	79f9      	ldrb	r1, [r7, #7]
 800282e:	2301      	movs	r3, #1
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	f107 030f 	add.w	r3, r7, #15
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	2301      	movs	r3, #1
 800283a:	4804      	ldr	r0, [pc, #16]	; (800284c <TS_IO_Read+0x38>)
 800283c:	f7ff ff5c 	bl	80026f8 <I2Cx_ReadMultiple>

  return read_value;
 8002840:	7bfb      	ldrb	r3, [r7, #15]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	200000ec 	.word	0x200000ec

08002850 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af02      	add	r7, sp, #8
 8002856:	603a      	str	r2, [r7, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
 800285e:	460b      	mov	r3, r1
 8002860:	71bb      	strb	r3, [r7, #6]
 8002862:	4613      	mov	r3, r2
 8002864:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002866:	79bb      	ldrb	r3, [r7, #6]
 8002868:	b29a      	uxth	r2, r3
 800286a:	79f9      	ldrb	r1, [r7, #7]
 800286c:	88bb      	ldrh	r3, [r7, #4]
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2301      	movs	r3, #1
 8002876:	4804      	ldr	r0, [pc, #16]	; (8002888 <TS_IO_ReadMultiple+0x38>)
 8002878:	f7ff ff3e 	bl	80026f8 <I2Cx_ReadMultiple>
 800287c:	4603      	mov	r3, r0
 800287e:	b29b      	uxth	r3, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	200000ec 	.word	0x200000ec

0800288c <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 ffdf 	bl	8003858 <HAL_Delay>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80028a6:	2001      	movs	r0, #1
 80028a8:	f000 f804 	bl	80028b4 <BSP_LCD_InitEx>
 80028ac:	4603      	mov	r3, r0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b090      	sub	sp, #64	; 0x40
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80028be:	f646 3325 	movw	r3, #27429	; 0x6b25
 80028c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 80028cc:	f000 f936 	bl	8002b3c <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 80028d0:	f000 fbf4 	bl	80030bc <LCD_IO_GetID>
 80028d4:	4603      	mov	r3, r0
 80028d6:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 80028d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80028da:	2b11      	cmp	r3, #17
 80028dc:	d001      	beq.n	80028e2 <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 80028de:	2301      	movs	r3, #1
 80028e0:	e113      	b.n	8002b0a <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 80028e2:	f000 fbf3 	bl	80030cc <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 80028e6:	4b8b      	ldr	r3, [pc, #556]	; (8002b14 <BSP_LCD_InitEx+0x260>)
 80028e8:	4a8b      	ldr	r2, [pc, #556]	; (8002b18 <BSP_LCD_InitEx+0x264>)
 80028ea:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 80028ec:	4889      	ldr	r0, [pc, #548]	; (8002b14 <BSP_LCD_InitEx+0x260>)
 80028ee:	f001 ffbd 	bl	800486c <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 80028f2:	2364      	movs	r3, #100	; 0x64
 80028f4:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 80028f6:	2305      	movs	r3, #5
 80028f8:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 80028fe:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002902:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8002904:	4b83      	ldr	r3, [pc, #524]	; (8002b14 <BSP_LCD_InitEx+0x260>)
 8002906:	2201      	movs	r2, #1
 8002908:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 800290a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	4a83      	ldr	r2, [pc, #524]	; (8002b1c <BSP_LCD_InitEx+0x268>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	0a9b      	lsrs	r3, r3, #10
 8002916:	4a7f      	ldr	r2, [pc, #508]	; (8002b14 <BSP_LCD_InitEx+0x260>)
 8002918:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 800291a:	f107 0308 	add.w	r3, r7, #8
 800291e:	4619      	mov	r1, r3
 8002920:	487c      	ldr	r0, [pc, #496]	; (8002b14 <BSP_LCD_InitEx+0x260>)
 8002922:	f001 fe89 	bl	8004638 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d108      	bne.n	800293e <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 800292c:	4b7c      	ldr	r3, [pc, #496]	; (8002b20 <BSP_LCD_InitEx+0x26c>)
 800292e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002932:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8002934:	4b7b      	ldr	r3, [pc, #492]	; (8002b24 <BSP_LCD_InitEx+0x270>)
 8002936:	f44f 7248 	mov.w	r2, #800	; 0x320
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e007      	b.n	800294e <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 800293e:	4b78      	ldr	r3, [pc, #480]	; (8002b20 <BSP_LCD_InitEx+0x26c>)
 8002940:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002944:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8002946:	4b77      	ldr	r3, [pc, #476]	; (8002b24 <BSP_LCD_InitEx+0x270>)
 8002948:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800294c:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 800294e:	4b74      	ldr	r3, [pc, #464]	; (8002b20 <BSP_LCD_InitEx+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 8002954:	4b73      	ldr	r3, [pc, #460]	; (8002b24 <BSP_LCD_InitEx+0x270>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 800295a:	2301      	movs	r3, #1
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 800295e:	230f      	movs	r3, #15
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 8002962:	2310      	movs	r3, #16
 8002964:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 8002966:	2302      	movs	r3, #2
 8002968:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 800296a:	2322      	movs	r3, #34	; 0x22
 800296c:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 800296e:	2322      	movs	r3, #34	; 0x22
 8002970:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8002972:	4b6d      	ldr	r3, [pc, #436]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8002978:	4b6b      	ldr	r3, [pc, #428]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 800297a:	2205      	movs	r2, #5
 800297c:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 800297e:	4b6a      	ldr	r3, [pc, #424]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 8002980:	2200      	movs	r2, #0
 8002982:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8002984:	4b68      	ldr	r3, [pc, #416]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 8002986:	2200      	movs	r2, #0
 8002988:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 800298a:	4b67      	ldr	r3, [pc, #412]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 800298c:	2200      	movs	r2, #0
 800298e:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8002990:	4b65      	ldr	r3, [pc, #404]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 8002992:	2202      	movs	r2, #2
 8002994:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8002996:	4b64      	ldr	r3, [pc, #400]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 8002998:	f640 72ff 	movw	r2, #4095	; 0xfff
 800299c:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 800299e:	4b62      	ldr	r3, [pc, #392]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80029a4:	4a60      	ldr	r2, [pc, #384]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029ae:	fb02 f203 	mul.w	r2, r2, r3
 80029b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	4a5b      	ldr	r2, [pc, #364]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 80029ba:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029c0:	fb02 f203 	mul.w	r2, r2, r3
 80029c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	4a57      	ldr	r2, [pc, #348]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 80029cc:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 80029ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	441a      	add	r2, r3
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	441a      	add	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	4413      	add	r3, r2
 80029dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029de:	fb02 f203 	mul.w	r2, r2, r3
 80029e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e8:	4a4f      	ldr	r2, [pc, #316]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 80029ea:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 80029ec:	4a4e      	ldr	r2, [pc, #312]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 80029f2:	4a4d      	ldr	r2, [pc, #308]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 80029f8:	4a4b      	ldr	r2, [pc, #300]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 80029fe:	4a4a      	ldr	r2, [pc, #296]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 8002a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a02:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8002a04:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 8002a06:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8002a0c:	4b46      	ldr	r3, [pc, #280]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 8002a0e:	2210      	movs	r2, #16
 8002a10:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8002a12:	4b45      	ldr	r3, [pc, #276]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8002a18:	4b43      	ldr	r3, [pc, #268]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 8002a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a1e:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8002a20:	4b41      	ldr	r3, [pc, #260]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 8002a22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8002a28:	4b3f      	ldr	r3, [pc, #252]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 8002a2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a2e:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8002a30:	4b3d      	ldr	r3, [pc, #244]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 8002a32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a36:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8002a38:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 8002a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a3e:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8002a40:	4b39      	ldr	r3, [pc, #228]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 8002a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8002a48:	4937      	ldr	r1, [pc, #220]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 8002a4a:	4832      	ldr	r0, [pc, #200]	; (8002b14 <BSP_LCD_InitEx+0x260>)
 8002a4c:	f002 f94e 	bl	8004cec <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	4a35      	ldr	r2, [pc, #212]	; (8002b2c <BSP_LCD_InitEx+0x278>)
 8002a56:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	4a32      	ldr	r2, [pc, #200]	; (8002b2c <BSP_LCD_InitEx+0x278>)
 8002a62:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8002a64:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <BSP_LCD_InitEx+0x26c>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	441a      	add	r2, r3
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	4413      	add	r3, r2
 8002a70:	3b01      	subs	r3, #1
 8002a72:	4a2e      	ldr	r2, [pc, #184]	; (8002b2c <BSP_LCD_InitEx+0x278>)
 8002a74:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8002a76:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <BSP_LCD_InitEx+0x26c>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	441a      	add	r2, r3
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	441a      	add	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	4413      	add	r3, r2
 8002a86:	3b01      	subs	r3, #1
 8002a88:	4a28      	ldr	r2, [pc, #160]	; (8002b2c <BSP_LCD_InitEx+0x278>)
 8002a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8002a8c:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <BSP_LCD_InitEx+0x26c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a26      	ldr	r2, [pc, #152]	; (8002b2c <BSP_LCD_InitEx+0x278>)
 8002a92:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8002a94:	4b23      	ldr	r3, [pc, #140]	; (8002b24 <BSP_LCD_InitEx+0x270>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a24      	ldr	r2, [pc, #144]	; (8002b2c <BSP_LCD_InitEx+0x278>)
 8002a9a:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a9c:	4b24      	ldr	r3, [pc, #144]	; (8002b30 <BSP_LCD_InitEx+0x27c>)
 8002a9e:	2208      	movs	r2, #8
 8002aa0:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <BSP_LCD_InitEx+0x27c>)
 8002aa4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002aa8:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8002aaa:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <BSP_LCD_InitEx+0x27c>)
 8002aac:	2207      	movs	r2, #7
 8002aae:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002ab0:	4b1f      	ldr	r3, [pc, #124]	; (8002b30 <BSP_LCD_InitEx+0x27c>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002ab6:	481e      	ldr	r0, [pc, #120]	; (8002b30 <BSP_LCD_InitEx+0x27c>)
 8002ab8:	f004 ff6c 	bl	8007994 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <BSP_LCD_InitEx+0x278>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8002ac4:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <BSP_LCD_InitEx+0x278>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8002acc:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <BSP_LCD_InitEx+0x278>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002ad4:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <BSP_LCD_InitEx+0x278>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8002ada:	4b14      	ldr	r3, [pc, #80]	; (8002b2c <BSP_LCD_InitEx+0x278>)
 8002adc:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <BSP_LCD_InitEx+0x280>)
 8002ade:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8002ae0:	4911      	ldr	r1, [pc, #68]	; (8002b28 <BSP_LCD_InitEx+0x274>)
 8002ae2:	4812      	ldr	r0, [pc, #72]	; (8002b2c <BSP_LCD_InitEx+0x278>)
 8002ae4:	f004 fa34 	bl	8006f50 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8002ae8:	4810      	ldr	r0, [pc, #64]	; (8002b2c <BSP_LCD_InitEx+0x278>)
 8002aea:	f003 fec7 	bl	800687c <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8002aee:	4809      	ldr	r0, [pc, #36]	; (8002b14 <BSP_LCD_InitEx+0x260>)
 8002af0:	f002 fd8e 	bl	8005610 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002af4:	f000 fc6a 	bl	80033cc <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002af8:	480f      	ldr	r0, [pc, #60]	; (8002b38 <BSP_LCD_InitEx+0x284>)
 8002afa:	f000 f911 	bl	8002d20 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	4619      	mov	r1, r3
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7ff faa8 	bl	8002058 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3740      	adds	r7, #64	; 0x40
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200006b4 	.word	0x200006b4
 8002b18:	40016c00 	.word	0x40016c00
 8002b1c:	43215e57 	.word	0x43215e57
 8002b20:	20000038 	.word	0x20000038
 8002b24:	2000003c 	.word	0x2000003c
 8002b28:	20000138 	.word	0x20000138
 8002b2c:	2000060c 	.word	0x2000060c
 8002b30:	200001c0 	.word	0x200001c0
 8002b34:	40016800 	.word	0x40016800
 8002b38:	20000030 	.word	0x20000030

08002b3c <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002b42:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <BSP_LCD_Reset+0x68>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <BSP_LCD_Reset+0x68>)
 8002b48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <BSP_LCD_Reset+0x68>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8002b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b5e:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002b60:	2301      	movs	r3, #1
 8002b62:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8002b64:	2301      	movs	r3, #1
 8002b66:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8002b6c:	1d3b      	adds	r3, r7, #4
 8002b6e:	4619      	mov	r1, r3
 8002b70:	480d      	ldr	r0, [pc, #52]	; (8002ba8 <BSP_LCD_Reset+0x6c>)
 8002b72:	f002 fe71 	bl	8005858 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8002b76:	2200      	movs	r2, #0
 8002b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b7c:	480a      	ldr	r0, [pc, #40]	; (8002ba8 <BSP_LCD_Reset+0x6c>)
 8002b7e:	f003 f937 	bl	8005df0 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8002b82:	2014      	movs	r0, #20
 8002b84:	f000 fe68 	bl	8003858 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b8e:	4806      	ldr	r0, [pc, #24]	; (8002ba8 <BSP_LCD_Reset+0x6c>)
 8002b90:	f003 f92e 	bl	8005df0 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8002b94:	200a      	movs	r0, #10
 8002b96:	f000 fe5f 	bl	8003858 <HAL_Delay>
}
 8002b9a:	bf00      	nop
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40022400 	.word	0x40022400

08002bac <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <BSP_LCD_GetXSize+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000038 	.word	0x20000038

08002bc4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8002bc8:	4b03      	ldr	r3, [pc, #12]	; (8002bd8 <BSP_LCD_GetYSize+0x14>)
 8002bca:	681b      	ldr	r3, [r3, #0]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	2000003c 	.word	0x2000003c

08002bdc <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b090      	sub	sp, #64	; 0x40
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	6039      	str	r1, [r7, #0]
 8002be6:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002bec:	f7ff ffde 	bl	8002bac <BSP_LCD_GetXSize>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002bf8:	f7ff ffe4 	bl	8002bc4 <BSP_LCD_GetYSize>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002c08:	23ff      	movs	r3, #255	; 0xff
 8002c0a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002c22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c26:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002c28:	2307      	movs	r3, #7
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002c2c:	f7ff ffbe 	bl	8002bac <BSP_LCD_GetXSize>
 8002c30:	4603      	mov	r3, r0
 8002c32:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002c34:	f7ff ffc6 	bl	8002bc4 <BSP_LCD_GetYSize>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8002c3c:	88fa      	ldrh	r2, [r7, #6]
 8002c3e:	f107 030c 	add.w	r3, r7, #12
 8002c42:	4619      	mov	r1, r3
 8002c44:	4812      	ldr	r0, [pc, #72]	; (8002c90 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002c46:	f003 ffab 	bl	8006ba0 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	4911      	ldr	r1, [pc, #68]	; (8002c94 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002c4e:	4613      	mov	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	3304      	adds	r3, #4
 8002c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c5e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002c60:	88fa      	ldrh	r2, [r7, #6]
 8002c62:	490c      	ldr	r1, [pc, #48]	; (8002c94 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3308      	adds	r3, #8
 8002c70:	4a09      	ldr	r2, [pc, #36]	; (8002c98 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002c72:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8002c74:	88fa      	ldrh	r2, [r7, #6]
 8002c76:	4907      	ldr	r1, [pc, #28]	; (8002c94 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002c78:	4613      	mov	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002c86:	601a      	str	r2, [r3, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	3740      	adds	r7, #64	; 0x40
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	2000060c 	.word	0x2000060c
 8002c94:	200001a8 	.word	0x200001a8
 8002c98:	20000030 	.word	0x20000030

08002c9c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002ca4:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <BSP_LCD_SelectLayer+0x1c>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	200001a4 	.word	0x200001a4

08002cbc <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002cc4:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <BSP_LCD_SetTextColor+0x28>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4907      	ldr	r1, [pc, #28]	; (8002ce8 <BSP_LCD_SetTextColor+0x2c>)
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	601a      	str	r2, [r3, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	200001a4 	.word	0x200001a4
 8002ce8:	200001a8 	.word	0x200001a8

08002cec <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <BSP_LCD_SetBackColor+0x2c>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4908      	ldr	r1, [pc, #32]	; (8002d1c <BSP_LCD_SetBackColor+0x30>)
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	3304      	adds	r3, #4
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	601a      	str	r2, [r3, #0]
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	200001a4 	.word	0x200001a4
 8002d1c:	200001a8 	.word	0x200001a8

08002d20 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002d28:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <BSP_LCD_SetFont+0x2c>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4908      	ldr	r1, [pc, #32]	; (8002d50 <BSP_LCD_SetFont+0x30>)
 8002d2e:	4613      	mov	r3, r2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	3308      	adds	r3, #8
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	601a      	str	r2, [r3, #0]
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	200001a4 	.word	0x200001a4
 8002d50:	200001a8 	.word	0x200001a8

08002d54 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8002d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <BSP_LCD_Clear+0x48>)
 8002d5e:	681c      	ldr	r4, [r3, #0]
 8002d60:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <BSP_LCD_Clear+0x48>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0e      	ldr	r2, [pc, #56]	; (8002da0 <BSP_LCD_Clear+0x4c>)
 8002d66:	2134      	movs	r1, #52	; 0x34
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	335c      	adds	r3, #92	; 0x5c
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	461d      	mov	r5, r3
 8002d74:	f7ff ff1a 	bl	8002bac <BSP_LCD_GetXSize>
 8002d78:	4606      	mov	r6, r0
 8002d7a:	f7ff ff23 	bl	8002bc4 <BSP_LCD_GetYSize>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	9301      	str	r3, [sp, #4]
 8002d84:	2300      	movs	r3, #0
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	4632      	mov	r2, r6
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f000 fae4 	bl	800335c <LL_FillBuffer>
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d9c:	200001a4 	.word	0x200001a4
 8002da0:	2000060c 	.word	0x2000060c

08002da4 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	80fb      	strh	r3, [r7, #6]
 8002dae:	460b      	mov	r3, r1
 8002db0:	80bb      	strh	r3, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002db6:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <BSP_LCD_DisplayChar+0x80>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	491b      	ldr	r1, [pc, #108]	; (8002e28 <BSP_LCD_DisplayChar+0x84>)
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	3308      	adds	r3, #8
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6819      	ldr	r1, [r3, #0]
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <BSP_LCD_DisplayChar+0x80>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	4c14      	ldr	r4, [pc, #80]	; (8002e28 <BSP_LCD_DisplayChar+0x84>)
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4423      	add	r3, r4
 8002de2:	3308      	adds	r3, #8
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002de8:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002dec:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <BSP_LCD_DisplayChar+0x80>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4c0d      	ldr	r4, [pc, #52]	; (8002e28 <BSP_LCD_DisplayChar+0x84>)
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4423      	add	r3, r4
 8002dfc:	3308      	adds	r3, #8
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	889b      	ldrh	r3, [r3, #4]
 8002e02:	3307      	adds	r3, #7
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	da00      	bge.n	8002e0a <BSP_LCD_DisplayChar+0x66>
 8002e08:	3307      	adds	r3, #7
 8002e0a:	10db      	asrs	r3, r3, #3
 8002e0c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002e10:	18ca      	adds	r2, r1, r3
 8002e12:	88b9      	ldrh	r1, [r7, #4]
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f9e8 	bl	80031ec <DrawChar>
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd90      	pop	{r4, r7, pc}
 8002e24:	200001a4 	.word	0x200001a4
 8002e28:	200001a8 	.word	0x200001a8

08002e2c <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002e2c:	b5b0      	push	{r4, r5, r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60ba      	str	r2, [r7, #8]
 8002e34:	461a      	mov	r2, r3
 8002e36:	4603      	mov	r3, r0
 8002e38:	81fb      	strh	r3, [r7, #14]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	81bb      	strh	r3, [r7, #12]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002e42:	2301      	movs	r3, #1
 8002e44:	83fb      	strh	r3, [r7, #30]
 8002e46:	2300      	movs	r3, #0
 8002e48:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8002e56:	e002      	b.n	8002e5e <BSP_LCD_DisplayStringAt+0x32>
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	61bb      	str	r3, [r7, #24]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	617a      	str	r2, [r7, #20]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f6      	bne.n	8002e58 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002e6a:	f7ff fe9f 	bl	8002bac <BSP_LCD_GetXSize>
 8002e6e:	4b4f      	ldr	r3, [pc, #316]	; (8002fac <BSP_LCD_DisplayStringAt+0x180>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	494f      	ldr	r1, [pc, #316]	; (8002fb0 <BSP_LCD_DisplayStringAt+0x184>)
 8002e74:	4613      	mov	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	3308      	adds	r3, #8
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	889b      	ldrh	r3, [r3, #4]
 8002e84:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e88:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d01c      	beq.n	8002eca <BSP_LCD_DisplayStringAt+0x9e>
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d017      	beq.n	8002ec4 <BSP_LCD_DisplayStringAt+0x98>
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d12e      	bne.n	8002ef6 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	1ad1      	subs	r1, r2, r3
 8002e9e:	4b43      	ldr	r3, [pc, #268]	; (8002fac <BSP_LCD_DisplayStringAt+0x180>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4843      	ldr	r0, [pc, #268]	; (8002fb0 <BSP_LCD_DisplayStringAt+0x184>)
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4403      	add	r3, r0
 8002eae:	3308      	adds	r3, #8
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	889b      	ldrh	r3, [r3, #4]
 8002eb4:	fb03 f301 	mul.w	r3, r3, r1
 8002eb8:	085b      	lsrs	r3, r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	89fb      	ldrh	r3, [r7, #14]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	83fb      	strh	r3, [r7, #30]
      break;
 8002ec2:	e01b      	b.n	8002efc <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8002ec4:	89fb      	ldrh	r3, [r7, #14]
 8002ec6:	83fb      	strh	r3, [r7, #30]
      break;
 8002ec8:	e018      	b.n	8002efc <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	b299      	uxth	r1, r3
 8002ed2:	4b36      	ldr	r3, [pc, #216]	; (8002fac <BSP_LCD_DisplayStringAt+0x180>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4836      	ldr	r0, [pc, #216]	; (8002fb0 <BSP_LCD_DisplayStringAt+0x184>)
 8002ed8:	4613      	mov	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4403      	add	r3, r0
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	889b      	ldrh	r3, [r3, #4]
 8002ee8:	fb11 f303 	smulbb	r3, r1, r3
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	89fb      	ldrh	r3, [r7, #14]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	83fb      	strh	r3, [r7, #30]
      break;
 8002ef4:	e002      	b.n	8002efc <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 8002ef6:	89fb      	ldrh	r3, [r7, #14]
 8002ef8:	83fb      	strh	r3, [r7, #30]
      break;
 8002efa:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8002efc:	8bfb      	ldrh	r3, [r7, #30]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <BSP_LCD_DisplayStringAt+0xde>
 8002f02:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	da1d      	bge.n	8002f46 <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002f0e:	e01a      	b.n	8002f46 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	781a      	ldrb	r2, [r3, #0]
 8002f14:	89b9      	ldrh	r1, [r7, #12]
 8002f16:	8bfb      	ldrh	r3, [r7, #30]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff43 	bl	8002da4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002f1e:	4b23      	ldr	r3, [pc, #140]	; (8002fac <BSP_LCD_DisplayStringAt+0x180>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4923      	ldr	r1, [pc, #140]	; (8002fb0 <BSP_LCD_DisplayStringAt+0x184>)
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3308      	adds	r3, #8
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	889a      	ldrh	r2, [r3, #4]
 8002f34:	8bfb      	ldrh	r3, [r7, #30]
 8002f36:	4413      	add	r3, r2
 8002f38:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	60bb      	str	r3, [r7, #8]
    i++;
 8002f40:	8bbb      	ldrh	r3, [r7, #28]
 8002f42:	3301      	adds	r3, #1
 8002f44:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	bf14      	ite	ne
 8002f4e:	2301      	movne	r3, #1
 8002f50:	2300      	moveq	r3, #0
 8002f52:	b2dc      	uxtb	r4, r3
 8002f54:	f7ff fe2a 	bl	8002bac <BSP_LCD_GetXSize>
 8002f58:	4605      	mov	r5, r0
 8002f5a:	8bb9      	ldrh	r1, [r7, #28]
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <BSP_LCD_DisplayStringAt+0x180>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4813      	ldr	r0, [pc, #76]	; (8002fb0 <BSP_LCD_DisplayStringAt+0x184>)
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4403      	add	r3, r0
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	889b      	ldrh	r3, [r3, #4]
 8002f72:	fb03 f301 	mul.w	r3, r3, r1
 8002f76:	1aeb      	subs	r3, r5, r3
 8002f78:	b299      	uxth	r1, r3
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <BSP_LCD_DisplayStringAt+0x180>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	480c      	ldr	r0, [pc, #48]	; (8002fb0 <BSP_LCD_DisplayStringAt+0x184>)
 8002f80:	4613      	mov	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4403      	add	r3, r0
 8002f8a:	3308      	adds	r3, #8
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	889b      	ldrh	r3, [r3, #4]
 8002f90:	4299      	cmp	r1, r3
 8002f92:	bf2c      	ite	cs
 8002f94:	2301      	movcs	r3, #1
 8002f96:	2300      	movcc	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	4023      	ands	r3, r4
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1b6      	bne.n	8002f10 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 8002fa2:	bf00      	nop
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200001a4 	.word	0x200001a4
 8002fb0:	200001a8 	.word	0x200001a8

08002fb4 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fb8:	b086      	sub	sp, #24
 8002fba:	af02      	add	r7, sp, #8
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	4608      	mov	r0, r1
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4623      	mov	r3, r4
 8002fc6:	80fb      	strh	r3, [r7, #6]
 8002fc8:	4603      	mov	r3, r0
 8002fca:	80bb      	strh	r3, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	807b      	strh	r3, [r7, #2]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002fd8:	4b20      	ldr	r3, [pc, #128]	; (800305c <BSP_LCD_FillRect+0xa8>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	4920      	ldr	r1, [pc, #128]	; (8003060 <BSP_LCD_FillRect+0xac>)
 8002fde:	4613      	mov	r3, r2
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fe66 	bl	8002cbc <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002ff0:	4b1a      	ldr	r3, [pc, #104]	; (800305c <BSP_LCD_FillRect+0xa8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1b      	ldr	r2, [pc, #108]	; (8003064 <BSP_LCD_FillRect+0xb0>)
 8002ff6:	2134      	movs	r1, #52	; 0x34
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	335c      	adds	r3, #92	; 0x5c
 8003000:	681c      	ldr	r4, [r3, #0]
 8003002:	f7ff fdd3 	bl	8002bac <BSP_LCD_GetXSize>
 8003006:	4602      	mov	r2, r0
 8003008:	88bb      	ldrh	r3, [r7, #4]
 800300a:	fb03 f202 	mul.w	r2, r3, r2
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4423      	add	r3, r4
 8003016:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003018:	4b10      	ldr	r3, [pc, #64]	; (800305c <BSP_LCD_FillRect+0xa8>)
 800301a:	681c      	ldr	r4, [r3, #0]
 800301c:	68fd      	ldr	r5, [r7, #12]
 800301e:	887e      	ldrh	r6, [r7, #2]
 8003020:	f8b7 8000 	ldrh.w	r8, [r7]
 8003024:	f7ff fdc2 	bl	8002bac <BSP_LCD_GetXSize>
 8003028:	4602      	mov	r2, r0
 800302a:	887b      	ldrh	r3, [r7, #2]
 800302c:	1ad1      	subs	r1, r2, r3
 800302e:	4b0b      	ldr	r3, [pc, #44]	; (800305c <BSP_LCD_FillRect+0xa8>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	480b      	ldr	r0, [pc, #44]	; (8003060 <BSP_LCD_FillRect+0xac>)
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4403      	add	r3, r0
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	9301      	str	r3, [sp, #4]
 8003042:	9100      	str	r1, [sp, #0]
 8003044:	4643      	mov	r3, r8
 8003046:	4632      	mov	r2, r6
 8003048:	4629      	mov	r1, r5
 800304a:	4620      	mov	r0, r4
 800304c:	f000 f986 	bl	800335c <LL_FillBuffer>
}
 8003050:	bf00      	nop
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800305a:	bf00      	nop
 800305c:	200001a4 	.word	0x200001a4
 8003060:	200001a8 	.word	0x200001a8
 8003064:	2000060c 	.word	0x2000060c

08003068 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af02      	add	r7, sp, #8
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d80d      	bhi.n	8003094 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	4613      	mov	r3, r2
 8003088:	2215      	movs	r2, #21
 800308a:	2100      	movs	r1, #0
 800308c:	480a      	ldr	r0, [pc, #40]	; (80030b8 <DSI_IO_WriteCmd+0x50>)
 800308e:	f002 fafb 	bl	8005688 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8003092:	e00d      	b.n	80030b0 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	9301      	str	r3, [sp, #4]
 80030a2:	9200      	str	r2, [sp, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2239      	movs	r2, #57	; 0x39
 80030a8:	2100      	movs	r1, #0
 80030aa:	4803      	ldr	r0, [pc, #12]	; (80030b8 <DSI_IO_WriteCmd+0x50>)
 80030ac:	f002 fb0e 	bl	80056cc <HAL_DSI_LongWrite>
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	200006b4 	.word	0x200006b4

080030bc <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 80030c0:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80030d2:	4b32      	ldr	r3, [pc, #200]	; (800319c <BSP_LCD_MspInit+0xd0>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	4a31      	ldr	r2, [pc, #196]	; (800319c <BSP_LCD_MspInit+0xd0>)
 80030d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030dc:	6453      	str	r3, [r2, #68]	; 0x44
 80030de:	4b2f      	ldr	r3, [pc, #188]	; (800319c <BSP_LCD_MspInit+0xd0>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 80030ea:	4b2c      	ldr	r3, [pc, #176]	; (800319c <BSP_LCD_MspInit+0xd0>)
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	4a2b      	ldr	r2, [pc, #172]	; (800319c <BSP_LCD_MspInit+0xd0>)
 80030f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030f4:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 80030f6:	4b29      	ldr	r3, [pc, #164]	; (800319c <BSP_LCD_MspInit+0xd0>)
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	4a28      	ldr	r2, [pc, #160]	; (800319c <BSP_LCD_MspInit+0xd0>)
 80030fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003100:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003102:	4b26      	ldr	r3, [pc, #152]	; (800319c <BSP_LCD_MspInit+0xd0>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4a25      	ldr	r2, [pc, #148]	; (800319c <BSP_LCD_MspInit+0xd0>)
 8003108:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800310c:	6313      	str	r3, [r2, #48]	; 0x30
 800310e:	4b23      	ldr	r3, [pc, #140]	; (800319c <BSP_LCD_MspInit+0xd0>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 800311a:	4b20      	ldr	r3, [pc, #128]	; (800319c <BSP_LCD_MspInit+0xd0>)
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	4a1f      	ldr	r2, [pc, #124]	; (800319c <BSP_LCD_MspInit+0xd0>)
 8003120:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003124:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8003126:	4b1d      	ldr	r3, [pc, #116]	; (800319c <BSP_LCD_MspInit+0xd0>)
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	4a1c      	ldr	r2, [pc, #112]	; (800319c <BSP_LCD_MspInit+0xd0>)
 800312c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003130:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8003132:	4b1a      	ldr	r3, [pc, #104]	; (800319c <BSP_LCD_MspInit+0xd0>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	4a19      	ldr	r2, [pc, #100]	; (800319c <BSP_LCD_MspInit+0xd0>)
 8003138:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800313c:	6453      	str	r3, [r2, #68]	; 0x44
 800313e:	4b17      	ldr	r3, [pc, #92]	; (800319c <BSP_LCD_MspInit+0xd0>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003146:	607b      	str	r3, [r7, #4]
 8003148:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 800314a:	4b14      	ldr	r3, [pc, #80]	; (800319c <BSP_LCD_MspInit+0xd0>)
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	4a13      	ldr	r2, [pc, #76]	; (800319c <BSP_LCD_MspInit+0xd0>)
 8003150:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003154:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8003156:	4b11      	ldr	r3, [pc, #68]	; (800319c <BSP_LCD_MspInit+0xd0>)
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	4a10      	ldr	r2, [pc, #64]	; (800319c <BSP_LCD_MspInit+0xd0>)
 800315c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003160:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8003162:	2200      	movs	r2, #0
 8003164:	2103      	movs	r1, #3
 8003166:	2058      	movs	r0, #88	; 0x58
 8003168:	f000 fc72 	bl	8003a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800316c:	2058      	movs	r0, #88	; 0x58
 800316e:	f000 fc8b 	bl	8003a88 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8003172:	2200      	movs	r2, #0
 8003174:	2103      	movs	r1, #3
 8003176:	205a      	movs	r0, #90	; 0x5a
 8003178:	f000 fc6a 	bl	8003a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800317c:	205a      	movs	r0, #90	; 0x5a
 800317e:	f000 fc83 	bl	8003a88 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8003182:	2200      	movs	r2, #0
 8003184:	2103      	movs	r1, #3
 8003186:	2062      	movs	r0, #98	; 0x62
 8003188:	f000 fc62 	bl	8003a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 800318c:	2062      	movs	r0, #98	; 0x62
 800318e:	f000 fc7b 	bl	8003a88 <HAL_NVIC_EnableIRQ>
}
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800

080031a0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80031a0:	b5b0      	push	{r4, r5, r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	603a      	str	r2, [r7, #0]
 80031aa:	80fb      	strh	r3, [r7, #6]
 80031ac:	460b      	mov	r3, r1
 80031ae:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <BSP_LCD_DrawPixel+0x44>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a0c      	ldr	r2, [pc, #48]	; (80031e8 <BSP_LCD_DrawPixel+0x48>)
 80031b6:	2134      	movs	r1, #52	; 0x34
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	4413      	add	r3, r2
 80031be:	335c      	adds	r3, #92	; 0x5c
 80031c0:	681c      	ldr	r4, [r3, #0]
 80031c2:	88bd      	ldrh	r5, [r7, #4]
 80031c4:	f7ff fcf2 	bl	8002bac <BSP_LCD_GetXSize>
 80031c8:	4603      	mov	r3, r0
 80031ca:	fb03 f205 	mul.w	r2, r3, r5
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4423      	add	r3, r4
 80031d6:	461a      	mov	r2, r3
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	6013      	str	r3, [r2, #0]
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bdb0      	pop	{r4, r5, r7, pc}
 80031e4:	200001a4 	.word	0x200001a4
 80031e8:	2000060c 	.word	0x2000060c

080031ec <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	603a      	str	r2, [r7, #0]
 80031f6:	80fb      	strh	r3, [r7, #6]
 80031f8:	460b      	mov	r3, r1
 80031fa:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	2300      	movs	r3, #0
 8003202:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8003204:	4b53      	ldr	r3, [pc, #332]	; (8003354 <DrawChar+0x168>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4953      	ldr	r1, [pc, #332]	; (8003358 <DrawChar+0x16c>)
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	3308      	adds	r3, #8
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	88db      	ldrh	r3, [r3, #6]
 800321a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800321c:	4b4d      	ldr	r3, [pc, #308]	; (8003354 <DrawChar+0x168>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	494d      	ldr	r1, [pc, #308]	; (8003358 <DrawChar+0x16c>)
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	3308      	adds	r3, #8
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	889b      	ldrh	r3, [r3, #4]
 8003232:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8003234:	8a3b      	ldrh	r3, [r7, #16]
 8003236:	3307      	adds	r3, #7
 8003238:	2b00      	cmp	r3, #0
 800323a:	da00      	bge.n	800323e <DrawChar+0x52>
 800323c:	3307      	adds	r3, #7
 800323e:	10db      	asrs	r3, r3, #3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	b2da      	uxtb	r2, r3
 8003246:	8a3b      	ldrh	r3, [r7, #16]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	e076      	b.n	8003342 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003254:	8a3b      	ldrh	r3, [r7, #16]
 8003256:	3307      	adds	r3, #7
 8003258:	2b00      	cmp	r3, #0
 800325a:	da00      	bge.n	800325e <DrawChar+0x72>
 800325c:	3307      	adds	r3, #7
 800325e:	10db      	asrs	r3, r3, #3
 8003260:	461a      	mov	r2, r3
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	fb03 f302 	mul.w	r3, r3, r2
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	4413      	add	r3, r2
 800326c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800326e:	8a3b      	ldrh	r3, [r7, #16]
 8003270:	3307      	adds	r3, #7
 8003272:	2b00      	cmp	r3, #0
 8003274:	da00      	bge.n	8003278 <DrawChar+0x8c>
 8003276:	3307      	adds	r3, #7
 8003278:	10db      	asrs	r3, r3, #3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d002      	beq.n	8003284 <DrawChar+0x98>
 800327e:	2b02      	cmp	r3, #2
 8003280:	d004      	beq.n	800328c <DrawChar+0xa0>
 8003282:	e00c      	b.n	800329e <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	617b      	str	r3, [r7, #20]
      break;
 800328a:	e016      	b.n	80032ba <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	021b      	lsls	r3, r3, #8
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	3201      	adds	r2, #1
 8003296:	7812      	ldrb	r2, [r2, #0]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
      break;
 800329c:	e00d      	b.n	80032ba <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	041a      	lsls	r2, r3, #16
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	3301      	adds	r3, #1
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	4313      	orrs	r3, r2
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	3202      	adds	r2, #2
 80032b2:	7812      	ldrb	r2, [r2, #0]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
      break;
 80032b8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80032ba:	2300      	movs	r3, #0
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	e036      	b.n	800332e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 80032c0:	8a3a      	ldrh	r2, [r7, #16]
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	1ad2      	subs	r2, r2, r3
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	4413      	add	r3, r2
 80032ca:	3b01      	subs	r3, #1
 80032cc:	2201      	movs	r2, #1
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d012      	beq.n	8003302 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	b29a      	uxth	r2, r3
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	4413      	add	r3, r2
 80032e4:	b298      	uxth	r0, r3
 80032e6:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <DrawChar+0x168>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	491b      	ldr	r1, [pc, #108]	; (8003358 <DrawChar+0x16c>)
 80032ec:	4613      	mov	r3, r2
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	88bb      	ldrh	r3, [r7, #4]
 80032fa:	4619      	mov	r1, r3
 80032fc:	f7ff ff50 	bl	80031a0 <BSP_LCD_DrawPixel>
 8003300:	e012      	b.n	8003328 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	b29a      	uxth	r2, r3
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	4413      	add	r3, r2
 800330a:	b298      	uxth	r0, r3
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <DrawChar+0x168>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4911      	ldr	r1, [pc, #68]	; (8003358 <DrawChar+0x16c>)
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	3304      	adds	r3, #4
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	88bb      	ldrh	r3, [r7, #4]
 8003322:	4619      	mov	r1, r3
 8003324:	f7ff ff3c 	bl	80031a0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	3301      	adds	r3, #1
 800332c:	61bb      	str	r3, [r7, #24]
 800332e:	8a3b      	ldrh	r3, [r7, #16]
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	429a      	cmp	r2, r3
 8003334:	d3c4      	bcc.n	80032c0 <DrawChar+0xd4>
      }
    }
    Ypos++;
 8003336:	88bb      	ldrh	r3, [r7, #4]
 8003338:	3301      	adds	r3, #1
 800333a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	3301      	adds	r3, #1
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	8a7b      	ldrh	r3, [r7, #18]
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	429a      	cmp	r2, r3
 8003348:	d384      	bcc.n	8003254 <DrawChar+0x68>
  }
}
 800334a:	bf00      	nop
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	200001a4 	.word	0x200001a4
 8003358:	200001a8 	.word	0x200001a8

0800335c <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 800336a:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <LL_FillBuffer+0x68>)
 800336c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003370:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8003372:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <LL_FillBuffer+0x68>)
 8003374:	2200      	movs	r2, #0
 8003376:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8003378:	4a12      	ldr	r2, [pc, #72]	; (80033c4 <LL_FillBuffer+0x68>)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 800337e:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <LL_FillBuffer+0x68>)
 8003380:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <LL_FillBuffer+0x6c>)
 8003382:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8003384:	480f      	ldr	r0, [pc, #60]	; (80033c4 <LL_FillBuffer+0x68>)
 8003386:	f000 fd57 	bl	8003e38 <HAL_DMA2D_Init>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d115      	bne.n	80033bc <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8003390:	68f9      	ldr	r1, [r7, #12]
 8003392:	480c      	ldr	r0, [pc, #48]	; (80033c4 <LL_FillBuffer+0x68>)
 8003394:	f000 ffce 	bl	8004334 <HAL_DMA2D_ConfigLayer>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10e      	bne.n	80033bc <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69f9      	ldr	r1, [r7, #28]
 80033a8:	4806      	ldr	r0, [pc, #24]	; (80033c4 <LL_FillBuffer+0x68>)
 80033aa:	f000 fd9f 	bl	8003eec <HAL_DMA2D_Start>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d103      	bne.n	80033bc <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 80033b4:	210a      	movs	r1, #10
 80033b6:	4803      	ldr	r0, [pc, #12]	; (80033c4 <LL_FillBuffer+0x68>)
 80033b8:	f000 fdc3 	bl	8003f42 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80033bc:	bf00      	nop
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	200005b4 	.word	0x200005b4
 80033c8:	4002b000 	.word	0x4002b000

080033cc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80033d0:	4b29      	ldr	r3, [pc, #164]	; (8003478 <BSP_SDRAM_Init+0xac>)
 80033d2:	4a2a      	ldr	r2, [pc, #168]	; (800347c <BSP_SDRAM_Init+0xb0>)
 80033d4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80033d6:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <BSP_SDRAM_Init+0xb4>)
 80033d8:	2202      	movs	r2, #2
 80033da:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80033dc:	4b28      	ldr	r3, [pc, #160]	; (8003480 <BSP_SDRAM_Init+0xb4>)
 80033de:	2207      	movs	r2, #7
 80033e0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80033e2:	4b27      	ldr	r3, [pc, #156]	; (8003480 <BSP_SDRAM_Init+0xb4>)
 80033e4:	2204      	movs	r2, #4
 80033e6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80033e8:	4b25      	ldr	r3, [pc, #148]	; (8003480 <BSP_SDRAM_Init+0xb4>)
 80033ea:	2207      	movs	r2, #7
 80033ec:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80033ee:	4b24      	ldr	r3, [pc, #144]	; (8003480 <BSP_SDRAM_Init+0xb4>)
 80033f0:	2202      	movs	r2, #2
 80033f2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80033f4:	4b22      	ldr	r3, [pc, #136]	; (8003480 <BSP_SDRAM_Init+0xb4>)
 80033f6:	2202      	movs	r2, #2
 80033f8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80033fa:	4b21      	ldr	r3, [pc, #132]	; (8003480 <BSP_SDRAM_Init+0xb4>)
 80033fc:	2202      	movs	r2, #2
 80033fe:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003400:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <BSP_SDRAM_Init+0xac>)
 8003402:	2200      	movs	r2, #0
 8003404:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003406:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <BSP_SDRAM_Init+0xac>)
 8003408:	2200      	movs	r2, #0
 800340a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800340c:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <BSP_SDRAM_Init+0xac>)
 800340e:	2204      	movs	r2, #4
 8003410:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003412:	4b19      	ldr	r3, [pc, #100]	; (8003478 <BSP_SDRAM_Init+0xac>)
 8003414:	2220      	movs	r2, #32
 8003416:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003418:	4b17      	ldr	r3, [pc, #92]	; (8003478 <BSP_SDRAM_Init+0xac>)
 800341a:	2240      	movs	r2, #64	; 0x40
 800341c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800341e:	4b16      	ldr	r3, [pc, #88]	; (8003478 <BSP_SDRAM_Init+0xac>)
 8003420:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003424:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003426:	4b14      	ldr	r3, [pc, #80]	; (8003478 <BSP_SDRAM_Init+0xac>)
 8003428:	2200      	movs	r2, #0
 800342a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800342c:	4b12      	ldr	r3, [pc, #72]	; (8003478 <BSP_SDRAM_Init+0xac>)
 800342e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003432:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003434:	4b10      	ldr	r3, [pc, #64]	; (8003478 <BSP_SDRAM_Init+0xac>)
 8003436:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800343a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800343c:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <BSP_SDRAM_Init+0xac>)
 800343e:	2200      	movs	r2, #0
 8003440:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003442:	2100      	movs	r1, #0
 8003444:	480c      	ldr	r0, [pc, #48]	; (8003478 <BSP_SDRAM_Init+0xac>)
 8003446:	f000 f87f 	bl	8003548 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800344a:	490d      	ldr	r1, [pc, #52]	; (8003480 <BSP_SDRAM_Init+0xb4>)
 800344c:	480a      	ldr	r0, [pc, #40]	; (8003478 <BSP_SDRAM_Init+0xac>)
 800344e:	f005 fe67 	bl	8009120 <HAL_SDRAM_Init>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <BSP_SDRAM_Init+0xb8>)
 800345a:	2201      	movs	r2, #1
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	e002      	b.n	8003466 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003460:	4b08      	ldr	r3, [pc, #32]	; (8003484 <BSP_SDRAM_Init+0xb8>)
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003466:	f240 6003 	movw	r0, #1539	; 0x603
 800346a:	f000 f80d 	bl	8003488 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <BSP_SDRAM_Init+0xb8>)
 8003470:	781b      	ldrb	r3, [r3, #0]
}
 8003472:	4618      	mov	r0, r3
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	200006d0 	.word	0x200006d0
 800347c:	a0000140 	.word	0xa0000140
 8003480:	20000250 	.word	0x20000250
 8003484:	20000040 	.word	0x20000040

08003488 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003494:	4b2a      	ldr	r3, [pc, #168]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003496:	2201      	movs	r2, #1
 8003498:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800349a:	4b29      	ldr	r3, [pc, #164]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800349c:	2210      	movs	r2, #16
 800349e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80034a0:	4b27      	ldr	r3, [pc, #156]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80034a6:	4b26      	ldr	r3, [pc, #152]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80034ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034b0:	4923      	ldr	r1, [pc, #140]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034b2:	4824      	ldr	r0, [pc, #144]	; (8003544 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034b4:	f005 fe68 	bl	8009188 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80034b8:	2001      	movs	r0, #1
 80034ba:	f000 f9cd 	bl	8003858 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034c0:	2202      	movs	r2, #2
 80034c2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80034c4:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034c6:	2210      	movs	r2, #16
 80034c8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80034ca:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80034d0:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80034d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034da:	4919      	ldr	r1, [pc, #100]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034dc:	4819      	ldr	r0, [pc, #100]	; (8003544 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034de:	f005 fe53 	bl	8009188 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80034e2:	4b17      	ldr	r3, [pc, #92]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034e4:	2203      	movs	r2, #3
 80034e6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80034e8:	4b15      	ldr	r3, [pc, #84]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034ea:	2210      	movs	r2, #16
 80034ec:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80034ee:	4b14      	ldr	r3, [pc, #80]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034f0:	2208      	movs	r2, #8
 80034f2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80034f4:	4b12      	ldr	r3, [pc, #72]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80034fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034fe:	4910      	ldr	r1, [pc, #64]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003500:	4810      	ldr	r0, [pc, #64]	; (8003544 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003502:	f005 fe41 	bl	8009188 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003506:	f44f 730c 	mov.w	r3, #560	; 0x230
 800350a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800350e:	2204      	movs	r2, #4
 8003510:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003514:	2210      	movs	r2, #16
 8003516:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003518:	4b09      	ldr	r3, [pc, #36]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800351a:	2201      	movs	r2, #1
 800351c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4a07      	ldr	r2, [pc, #28]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003522:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003528:	4905      	ldr	r1, [pc, #20]	; (8003540 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800352a:	4806      	ldr	r0, [pc, #24]	; (8003544 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800352c:	f005 fe2c 	bl	8009188 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4804      	ldr	r0, [pc, #16]	; (8003544 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003534:	f005 fe53 	bl	80091de <HAL_SDRAM_ProgramRefreshRate>
}
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	2000026c 	.word	0x2000026c
 8003544:	200006d0 	.word	0x200006d0

08003548 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003548:	b580      	push	{r7, lr}
 800354a:	b090      	sub	sp, #64	; 0x40
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003552:	4b71      	ldr	r3, [pc, #452]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 8003554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003556:	4a70      	ldr	r2, [pc, #448]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	6393      	str	r3, [r2, #56]	; 0x38
 800355e:	4b6e      	ldr	r3, [pc, #440]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	62bb      	str	r3, [r7, #40]	; 0x28
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800356a:	4b6b      	ldr	r3, [pc, #428]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	4a6a      	ldr	r2, [pc, #424]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 8003570:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003574:	6313      	str	r3, [r2, #48]	; 0x30
 8003576:	4b68      	ldr	r3, [pc, #416]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003582:	4b65      	ldr	r3, [pc, #404]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	4a64      	ldr	r2, [pc, #400]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 8003588:	f043 0308 	orr.w	r3, r3, #8
 800358c:	6313      	str	r3, [r2, #48]	; 0x30
 800358e:	4b62      	ldr	r3, [pc, #392]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	623b      	str	r3, [r7, #32]
 8003598:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800359a:	4b5f      	ldr	r3, [pc, #380]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	4a5e      	ldr	r2, [pc, #376]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 80035a0:	f043 0310 	orr.w	r3, r3, #16
 80035a4:	6313      	str	r3, [r2, #48]	; 0x30
 80035a6:	4b5c      	ldr	r3, [pc, #368]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f003 0310 	and.w	r3, r3, #16
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035b2:	4b59      	ldr	r3, [pc, #356]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	4a58      	ldr	r2, [pc, #352]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 80035b8:	f043 0320 	orr.w	r3, r3, #32
 80035bc:	6313      	str	r3, [r2, #48]	; 0x30
 80035be:	4b56      	ldr	r3, [pc, #344]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	61bb      	str	r3, [r7, #24]
 80035c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80035ca:	4b53      	ldr	r3, [pc, #332]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	4a52      	ldr	r2, [pc, #328]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 80035d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035d4:	6313      	str	r3, [r2, #48]	; 0x30
 80035d6:	4b50      	ldr	r3, [pc, #320]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035e2:	4b4d      	ldr	r3, [pc, #308]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4a4c      	ldr	r2, [pc, #304]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 80035e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ec:	6313      	str	r3, [r2, #48]	; 0x30
 80035ee:	4b4a      	ldr	r3, [pc, #296]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80035fa:	4b47      	ldr	r3, [pc, #284]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	4a46      	ldr	r2, [pc, #280]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 8003600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003604:	6313      	str	r3, [r2, #48]	; 0x30
 8003606:	4b44      	ldr	r3, [pc, #272]	; (8003718 <BSP_SDRAM_MspInit+0x1d0>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003612:	2302      	movs	r3, #2
 8003614:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003616:	2301      	movs	r3, #1
 8003618:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800361a:	2303      	movs	r3, #3
 800361c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800361e:	230c      	movs	r3, #12
 8003620:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8003622:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800362c:	4619      	mov	r1, r3
 800362e:	483b      	ldr	r0, [pc, #236]	; (800371c <BSP_SDRAM_MspInit+0x1d4>)
 8003630:	f002 f912 	bl	8005858 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003634:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003638:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800363a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800363e:	4619      	mov	r1, r3
 8003640:	4837      	ldr	r0, [pc, #220]	; (8003720 <BSP_SDRAM_MspInit+0x1d8>)
 8003642:	f002 f909 	bl	8005858 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003646:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800364c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003650:	4619      	mov	r1, r3
 8003652:	4834      	ldr	r0, [pc, #208]	; (8003724 <BSP_SDRAM_MspInit+0x1dc>)
 8003654:	f002 f900 	bl	8005858 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8003658:	f248 1337 	movw	r3, #33079	; 0x8137
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800365e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003662:	4619      	mov	r1, r3
 8003664:	4830      	ldr	r0, [pc, #192]	; (8003728 <BSP_SDRAM_MspInit+0x1e0>)
 8003666:	f002 f8f7 	bl	8005858 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800366a:	f64f 732c 	movw	r3, #65324	; 0xff2c
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003670:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003674:	4619      	mov	r1, r3
 8003676:	482d      	ldr	r0, [pc, #180]	; (800372c <BSP_SDRAM_MspInit+0x1e4>)
 8003678:	f002 f8ee 	bl	8005858 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800367c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8003680:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8003682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003686:	4619      	mov	r1, r3
 8003688:	4829      	ldr	r0, [pc, #164]	; (8003730 <BSP_SDRAM_MspInit+0x1e8>)
 800368a:	f002 f8e5 	bl	8005858 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800368e:	4b29      	ldr	r3, [pc, #164]	; (8003734 <BSP_SDRAM_MspInit+0x1ec>)
 8003690:	2200      	movs	r2, #0
 8003692:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003694:	4b27      	ldr	r3, [pc, #156]	; (8003734 <BSP_SDRAM_MspInit+0x1ec>)
 8003696:	2280      	movs	r2, #128	; 0x80
 8003698:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800369a:	4b26      	ldr	r3, [pc, #152]	; (8003734 <BSP_SDRAM_MspInit+0x1ec>)
 800369c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036a0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80036a2:	4b24      	ldr	r3, [pc, #144]	; (8003734 <BSP_SDRAM_MspInit+0x1ec>)
 80036a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036a8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036aa:	4b22      	ldr	r3, [pc, #136]	; (8003734 <BSP_SDRAM_MspInit+0x1ec>)
 80036ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036b0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80036b2:	4b20      	ldr	r3, [pc, #128]	; (8003734 <BSP_SDRAM_MspInit+0x1ec>)
 80036b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036b8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80036ba:	4b1e      	ldr	r3, [pc, #120]	; (8003734 <BSP_SDRAM_MspInit+0x1ec>)
 80036bc:	2200      	movs	r2, #0
 80036be:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80036c0:	4b1c      	ldr	r3, [pc, #112]	; (8003734 <BSP_SDRAM_MspInit+0x1ec>)
 80036c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036c6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80036c8:	4b1a      	ldr	r3, [pc, #104]	; (8003734 <BSP_SDRAM_MspInit+0x1ec>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80036ce:	4b19      	ldr	r3, [pc, #100]	; (8003734 <BSP_SDRAM_MspInit+0x1ec>)
 80036d0:	2203      	movs	r2, #3
 80036d2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80036d4:	4b17      	ldr	r3, [pc, #92]	; (8003734 <BSP_SDRAM_MspInit+0x1ec>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80036da:	4b16      	ldr	r3, [pc, #88]	; (8003734 <BSP_SDRAM_MspInit+0x1ec>)
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80036e0:	4b14      	ldr	r3, [pc, #80]	; (8003734 <BSP_SDRAM_MspInit+0x1ec>)
 80036e2:	4a15      	ldr	r2, [pc, #84]	; (8003738 <BSP_SDRAM_MspInit+0x1f0>)
 80036e4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a12      	ldr	r2, [pc, #72]	; (8003734 <BSP_SDRAM_MspInit+0x1ec>)
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
 80036ec:	4a11      	ldr	r2, [pc, #68]	; (8003734 <BSP_SDRAM_MspInit+0x1ec>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80036f2:	4810      	ldr	r0, [pc, #64]	; (8003734 <BSP_SDRAM_MspInit+0x1ec>)
 80036f4:	f000 fa92 	bl	8003c1c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80036f8:	480e      	ldr	r0, [pc, #56]	; (8003734 <BSP_SDRAM_MspInit+0x1ec>)
 80036fa:	f000 f9e1 	bl	8003ac0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80036fe:	2200      	movs	r2, #0
 8003700:	210f      	movs	r1, #15
 8003702:	2038      	movs	r0, #56	; 0x38
 8003704:	f000 f9a4 	bl	8003a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003708:	2038      	movs	r0, #56	; 0x38
 800370a:	f000 f9bd 	bl	8003a88 <HAL_NVIC_EnableIRQ>
}
 800370e:	bf00      	nop
 8003710:	3740      	adds	r7, #64	; 0x40
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	40020c00 	.word	0x40020c00
 8003720:	40021000 	.word	0x40021000
 8003724:	40021400 	.word	0x40021400
 8003728:	40021800 	.word	0x40021800
 800372c:	40021c00 	.word	0x40021c00
 8003730:	40022000 	.word	0x40022000
 8003734:	2000027c 	.word	0x2000027c
 8003738:	40026410 	.word	0x40026410

0800373c <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	460a      	mov	r2, r1
 8003746:	80fb      	strh	r3, [r7, #6]
 8003748:	4613      	mov	r3, r2
 800374a:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8003754:	4b25      	ldr	r3, [pc, #148]	; (80037ec <BSP_TS_Init+0xb0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a25      	ldr	r2, [pc, #148]	; (80037f0 <BSP_TS_Init+0xb4>)
 800375a:	7812      	ldrb	r2, [r2, #0]
 800375c:	b292      	uxth	r2, r2
 800375e:	4610      	mov	r0, r2
 8003760:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8003762:	4b22      	ldr	r3, [pc, #136]	; (80037ec <BSP_TS_Init+0xb0>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2054      	movs	r0, #84	; 0x54
 8003768:	4798      	blx	r3
 800376a:	4603      	mov	r3, r0
 800376c:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 800376e:	7b7b      	ldrb	r3, [r7, #13]
 8003770:	2b11      	cmp	r3, #17
 8003772:	d009      	beq.n	8003788 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8003774:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <BSP_TS_Init+0xb0>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2070      	movs	r0, #112	; 0x70
 800377a:	4798      	blx	r3
 800377c:	4603      	mov	r3, r0
 800377e:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8003780:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <BSP_TS_Init+0xb4>)
 8003782:	2270      	movs	r2, #112	; 0x70
 8003784:	701a      	strb	r2, [r3, #0]
 8003786:	e002      	b.n	800378e <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8003788:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <BSP_TS_Init+0xb4>)
 800378a:	2254      	movs	r2, #84	; 0x54
 800378c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 800378e:	7b7b      	ldrb	r3, [r7, #13]
 8003790:	2b11      	cmp	r3, #17
 8003792:	d002      	beq.n	800379a <BSP_TS_Init+0x5e>
 8003794:	7bbb      	ldrb	r3, [r7, #14]
 8003796:	2b11      	cmp	r3, #17
 8003798:	d121      	bne.n	80037de <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 800379a:	4b16      	ldr	r3, [pc, #88]	; (80037f4 <BSP_TS_Init+0xb8>)
 800379c:	4a13      	ldr	r2, [pc, #76]	; (80037ec <BSP_TS_Init+0xb0>)
 800379e:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 80037a0:	88fa      	ldrh	r2, [r7, #6]
 80037a2:	88bb      	ldrh	r3, [r7, #4]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d203      	bcs.n	80037b0 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 80037a8:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <BSP_TS_Init+0xbc>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	e002      	b.n	80037b6 <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <BSP_TS_Init+0xbc>)
 80037b2:	220c      	movs	r2, #12
 80037b4:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d112      	bne.n	80037e2 <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 80037bc:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <BSP_TS_Init+0xb8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <BSP_TS_Init+0xb4>)
 80037c4:	7812      	ldrb	r2, [r2, #0]
 80037c6:	b292      	uxth	r2, r2
 80037c8:	4610      	mov	r0, r2
 80037ca:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 80037cc:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <BSP_TS_Init+0xb8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	4a07      	ldr	r2, [pc, #28]	; (80037f0 <BSP_TS_Init+0xb4>)
 80037d4:	7812      	ldrb	r2, [r2, #0]
 80037d6:	b292      	uxth	r2, r2
 80037d8:	4610      	mov	r0, r2
 80037da:	4798      	blx	r3
    if(ts_status == TS_OK)
 80037dc:	e001      	b.n	80037e2 <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 80037de:	2303      	movs	r3, #3
 80037e0:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000008 	.word	0x20000008
 80037f0:	200002e1 	.word	0x200002e1
 80037f4:	200002dc 	.word	0x200002dc
 80037f8:	200002e0 	.word	0x200002e0

080037fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003800:	2003      	movs	r0, #3
 8003802:	f000 f91a 	bl	8003a3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003806:	2000      	movs	r0, #0
 8003808:	f7fe f94c 	bl	8001aa4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800380c:	f7fd fefc 	bl	8001608 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <HAL_IncTick+0x20>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_IncTick+0x24>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4413      	add	r3, r2
 8003828:	4a04      	ldr	r2, [pc, #16]	; (800383c <HAL_IncTick+0x24>)
 800382a:	6013      	str	r3, [r2, #0]
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000041 	.word	0x20000041
 800383c:	20000704 	.word	0x20000704

08003840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return uwTick;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <HAL_GetTick+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000704 	.word	0x20000704

08003858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003860:	f7ff ffee 	bl	8003840 <HAL_GetTick>
 8003864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d005      	beq.n	800387e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_Delay+0x40>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800387e:	bf00      	nop
 8003880:	f7ff ffde 	bl	8003840 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	429a      	cmp	r2, r3
 800388e:	d8f7      	bhi.n	8003880 <HAL_Delay+0x28>
  {
  }
}
 8003890:	bf00      	nop
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20000041 	.word	0x20000041

0800389c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <__NVIC_SetPriorityGrouping+0x40>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038b8:	4013      	ands	r3, r2
 80038ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038c4:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <__NVIC_SetPriorityGrouping+0x44>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ca:	4a04      	ldr	r2, [pc, #16]	; (80038dc <__NVIC_SetPriorityGrouping+0x40>)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	60d3      	str	r3, [r2, #12]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00
 80038e0:	05fa0000 	.word	0x05fa0000

080038e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <__NVIC_GetPriorityGrouping+0x18>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	0a1b      	lsrs	r3, r3, #8
 80038ee:	f003 0307 	and.w	r3, r3, #7
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	e000ed00 	.word	0xe000ed00

08003900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	2b00      	cmp	r3, #0
 8003910:	db0b      	blt.n	800392a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	f003 021f 	and.w	r2, r3, #31
 8003918:	4907      	ldr	r1, [pc, #28]	; (8003938 <__NVIC_EnableIRQ+0x38>)
 800391a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	2001      	movs	r0, #1
 8003922:	fa00 f202 	lsl.w	r2, r0, r2
 8003926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	e000e100 	.word	0xe000e100

0800393c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	2b00      	cmp	r3, #0
 800394c:	db10      	blt.n	8003970 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	f003 021f 	and.w	r2, r3, #31
 8003954:	4909      	ldr	r1, [pc, #36]	; (800397c <__NVIC_DisableIRQ+0x40>)
 8003956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	2001      	movs	r0, #1
 800395e:	fa00 f202 	lsl.w	r2, r0, r2
 8003962:	3320      	adds	r3, #32
 8003964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003968:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800396c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	e000e100 	.word	0xe000e100

08003980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	6039      	str	r1, [r7, #0]
 800398a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003990:	2b00      	cmp	r3, #0
 8003992:	db0a      	blt.n	80039aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	b2da      	uxtb	r2, r3
 8003998:	490c      	ldr	r1, [pc, #48]	; (80039cc <__NVIC_SetPriority+0x4c>)
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	0112      	lsls	r2, r2, #4
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	440b      	add	r3, r1
 80039a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039a8:	e00a      	b.n	80039c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4908      	ldr	r1, [pc, #32]	; (80039d0 <__NVIC_SetPriority+0x50>)
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	3b04      	subs	r3, #4
 80039b8:	0112      	lsls	r2, r2, #4
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	440b      	add	r3, r1
 80039be:	761a      	strb	r2, [r3, #24]
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	e000e100 	.word	0xe000e100
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f1c3 0307 	rsb	r3, r3, #7
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	bf28      	it	cs
 80039f2:	2304      	movcs	r3, #4
 80039f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	3304      	adds	r3, #4
 80039fa:	2b06      	cmp	r3, #6
 80039fc:	d902      	bls.n	8003a04 <NVIC_EncodePriority+0x30>
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3b03      	subs	r3, #3
 8003a02:	e000      	b.n	8003a06 <NVIC_EncodePriority+0x32>
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43da      	mvns	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	401a      	ands	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fa01 f303 	lsl.w	r3, r1, r3
 8003a26:	43d9      	mvns	r1, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	4313      	orrs	r3, r2
         );
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3724      	adds	r7, #36	; 0x24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff ff2a 	bl	800389c <__NVIC_SetPriorityGrouping>
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a62:	f7ff ff3f 	bl	80038e4 <__NVIC_GetPriorityGrouping>
 8003a66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	68b9      	ldr	r1, [r7, #8]
 8003a6c:	6978      	ldr	r0, [r7, #20]
 8003a6e:	f7ff ffb1 	bl	80039d4 <NVIC_EncodePriority>
 8003a72:	4602      	mov	r2, r0
 8003a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff ff80 	bl	8003980 <__NVIC_SetPriority>
}
 8003a80:	bf00      	nop
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff ff32 	bl	8003900 <__NVIC_EnableIRQ>
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff ff42 	bl	800393c <__NVIC_DisableIRQ>
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003acc:	f7ff feb8 	bl	8003840 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e099      	b.n	8003c10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003afc:	e00f      	b.n	8003b1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003afe:	f7ff fe9f 	bl	8003840 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b05      	cmp	r3, #5
 8003b0a:	d908      	bls.n	8003b1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2203      	movs	r2, #3
 8003b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e078      	b.n	8003c10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e8      	bne.n	8003afe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4b38      	ldr	r3, [pc, #224]	; (8003c18 <HAL_DMA_Init+0x158>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d107      	bne.n	8003b88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	4313      	orrs	r3, r2
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f023 0307 	bic.w	r3, r3, #7
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d117      	bne.n	8003be2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00e      	beq.n	8003be2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f8bd 	bl	8003d44 <DMA_CheckFifoParam>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2240      	movs	r2, #64	; 0x40
 8003bd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bde:	2301      	movs	r3, #1
 8003be0:	e016      	b.n	8003c10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f874 	bl	8003cd8 <DMA_CalcBaseAndBitshift>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf8:	223f      	movs	r2, #63	; 0x3f
 8003bfa:	409a      	lsls	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	e010803f 	.word	0xe010803f

08003c1c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e050      	b.n	8003cd0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d101      	bne.n	8003c3e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e048      	b.n	8003cd0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0201 	bic.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2200      	movs	r2, #0
 8003c64:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2221      	movs	r2, #33	; 0x21
 8003c7c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f82a 	bl	8003cd8 <DMA_CalcBaseAndBitshift>
 8003c84:	4603      	mov	r3, r0
 8003c86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8c:	223f      	movs	r2, #63	; 0x3f
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	3b10      	subs	r3, #16
 8003ce8:	4a13      	ldr	r2, [pc, #76]	; (8003d38 <DMA_CalcBaseAndBitshift+0x60>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cf2:	4a12      	ldr	r2, [pc, #72]	; (8003d3c <DMA_CalcBaseAndBitshift+0x64>)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d908      	bls.n	8003d18 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <DMA_CalcBaseAndBitshift+0x68>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	1d1a      	adds	r2, r3, #4
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	659a      	str	r2, [r3, #88]	; 0x58
 8003d16:	e006      	b.n	8003d26 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <DMA_CalcBaseAndBitshift+0x68>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	aaaaaaab 	.word	0xaaaaaaab
 8003d3c:	0800f91c 	.word	0x0800f91c
 8003d40:	fffffc00 	.word	0xfffffc00

08003d44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d11f      	bne.n	8003d9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d855      	bhi.n	8003e10 <DMA_CheckFifoParam+0xcc>
 8003d64:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <DMA_CheckFifoParam+0x28>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d8f 	.word	0x08003d8f
 8003d74:	08003d7d 	.word	0x08003d7d
 8003d78:	08003e11 	.word	0x08003e11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d045      	beq.n	8003e14 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d8c:	e042      	b.n	8003e14 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d96:	d13f      	bne.n	8003e18 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d9c:	e03c      	b.n	8003e18 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da6:	d121      	bne.n	8003dec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d836      	bhi.n	8003e1c <DMA_CheckFifoParam+0xd8>
 8003dae:	a201      	add	r2, pc, #4	; (adr r2, 8003db4 <DMA_CheckFifoParam+0x70>)
 8003db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db4:	08003dc5 	.word	0x08003dc5
 8003db8:	08003dcb 	.word	0x08003dcb
 8003dbc:	08003dc5 	.word	0x08003dc5
 8003dc0:	08003ddd 	.word	0x08003ddd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc8:	e02f      	b.n	8003e2a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d024      	beq.n	8003e20 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dda:	e021      	b.n	8003e20 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003de4:	d11e      	bne.n	8003e24 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dea:	e01b      	b.n	8003e24 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d902      	bls.n	8003df8 <DMA_CheckFifoParam+0xb4>
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d003      	beq.n	8003dfe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003df6:	e018      	b.n	8003e2a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003dfc:	e015      	b.n	8003e2a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00e      	beq.n	8003e28 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e0e:	e00b      	b.n	8003e28 <DMA_CheckFifoParam+0xe4>
      break;
 8003e10:	bf00      	nop
 8003e12:	e00a      	b.n	8003e2a <DMA_CheckFifoParam+0xe6>
      break;
 8003e14:	bf00      	nop
 8003e16:	e008      	b.n	8003e2a <DMA_CheckFifoParam+0xe6>
      break;
 8003e18:	bf00      	nop
 8003e1a:	e006      	b.n	8003e2a <DMA_CheckFifoParam+0xe6>
      break;
 8003e1c:	bf00      	nop
 8003e1e:	e004      	b.n	8003e2a <DMA_CheckFifoParam+0xe6>
      break;
 8003e20:	bf00      	nop
 8003e22:	e002      	b.n	8003e2a <DMA_CheckFifoParam+0xe6>
      break;   
 8003e24:	bf00      	nop
 8003e26:	e000      	b.n	8003e2a <DMA_CheckFifoParam+0xe6>
      break;
 8003e28:	bf00      	nop
    }
  } 
  
  return status; 
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e049      	b.n	8003ede <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fd fbf6 	bl	8001650 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e88:	f023 0107 	bic.w	r1, r3, #7
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e9e:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <HAL_DMA2D_Init+0xb0>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	68d1      	ldr	r1, [r2, #12]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	430b      	orrs	r3, r1
 8003eac:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	051a      	lsls	r2, r3, #20
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	055b      	lsls	r3, r3, #21
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	ffffc000 	.word	0xffffc000

08003eec <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_DMA2D_Start+0x1c>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e018      	b.n	8003f3a <HAL_DMA2D_Start+0x4e>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	68b9      	ldr	r1, [r7, #8]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 faa4 	bl	8004470 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b086      	sub	sp, #24
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d056      	beq.n	800400c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003f5e:	f7ff fc6f 	bl	8003840 <HAL_GetTick>
 8003f62:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003f64:	e04b      	b.n	8003ffe <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d023      	beq.n	8003fc0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	f043 0202 	orr.w	r2, r3, #2
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	f043 0201 	orr.w	r2, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2221      	movs	r2, #33	; 0x21
 8003faa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2204      	movs	r2, #4
 8003fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0a5      	b.n	800410c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc6:	d01a      	beq.n	8003ffe <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003fc8:	f7ff fc3a 	bl	8003840 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d302      	bcc.n	8003fde <HAL_DMA2D_PollForTransfer+0x9c>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10f      	bne.n	8003ffe <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	f043 0220 	orr.w	r2, r3, #32
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2203      	movs	r2, #3
 8003fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e086      	b.n	800410c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0ac      	beq.n	8003f66 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d061      	beq.n	80040f2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800402e:	f7ff fc07 	bl	8003840 <HAL_GetTick>
 8004032:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004034:	e056      	b.n	80040e4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004044:	2b00      	cmp	r3, #0
 8004046:	d02e      	beq.n	80040a6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004056:	f043 0204 	orr.w	r2, r3, #4
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406c:	f043 0202 	orr.w	r2, r3, #2
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d005      	beq.n	800408a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	f043 0201 	orr.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2229      	movs	r2, #41	; 0x29
 8004090:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2204      	movs	r2, #4
 8004096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e032      	b.n	800410c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d01a      	beq.n	80040e4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80040ae:	f7ff fbc7 	bl	8003840 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d302      	bcc.n	80040c4 <HAL_DMA2D_PollForTransfer+0x182>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10f      	bne.n	80040e4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c8:	f043 0220 	orr.w	r2, r3, #32
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2203      	movs	r2, #3
 80040d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e013      	b.n	800410c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0a1      	beq.n	8004036 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2212      	movs	r2, #18
 80040f8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d026      	beq.n	8004184 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d021      	beq.n	8004184 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800414e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004154:	f043 0201 	orr.w	r2, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2201      	movs	r2, #1
 8004162:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2204      	movs	r2, #4
 8004168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d026      	beq.n	80041dc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d021      	beq.n	80041dc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041a6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2220      	movs	r2, #32
 80041ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b4:	f043 0202 	orr.w	r2, r3, #2
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2204      	movs	r2, #4
 80041c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d026      	beq.n	8004234 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d021      	beq.n	8004234 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041fe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2208      	movs	r2, #8
 8004206:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	f043 0204 	orr.w	r2, r3, #4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2204      	movs	r2, #4
 8004218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	2b00      	cmp	r3, #0
 800423c:	d013      	beq.n	8004266 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00e      	beq.n	8004266 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004256:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2204      	movs	r2, #4
 800425e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f853 	bl	800430c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d024      	beq.n	80042ba <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01f      	beq.n	80042ba <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004288:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2202      	movs	r2, #2
 8004290:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferCpltCallback != NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d01f      	beq.n	8004304 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d01a      	beq.n	8004304 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042dc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2210      	movs	r2, #16
 80042e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f80e 	bl	8004320 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_DMA2D_ConfigLayer+0x20>
 8004350:	2302      	movs	r3, #2
 8004352:	e084      	b.n	800445e <HAL_DMA2D_ConfigLayer+0x12a>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	4613      	mov	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	3320      	adds	r3, #32
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	4413      	add	r3, r2
 8004374:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	041b      	lsls	r3, r3, #16
 8004380:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8004388:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004394:	4b35      	ldr	r3, [pc, #212]	; (800446c <HAL_DMA2D_ConfigLayer+0x138>)
 8004396:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b0a      	cmp	r3, #10
 800439e:	d003      	beq.n	80043a8 <HAL_DMA2D_ConfigLayer+0x74>
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b09      	cmp	r3, #9
 80043a6:	d107      	bne.n	80043b8 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	e005      	b.n	80043c4 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	061b      	lsls	r3, r3, #24
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d120      	bne.n	800440c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	43db      	mvns	r3, r3
 80043d4:	ea02 0103 	and.w	r1, r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	430a      	orrs	r2, r1
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	6812      	ldr	r2, [r2, #0]
 80043ea:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b0a      	cmp	r3, #10
 80043f2:	d003      	beq.n	80043fc <HAL_DMA2D_ConfigLayer+0xc8>
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b09      	cmp	r3, #9
 80043fa:	d127      	bne.n	800444c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004408:	629a      	str	r2, [r3, #40]	; 0x28
 800440a:	e01f      	b.n	800444c <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69da      	ldr	r2, [r3, #28]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	43db      	mvns	r3, r3
 8004416:	ea02 0103 	and.w	r1, r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	430a      	orrs	r2, r1
 8004422:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b0a      	cmp	r3, #10
 8004434:	d003      	beq.n	800443e <HAL_DMA2D_ConfigLayer+0x10a>
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b09      	cmp	r3, #9
 800443c:	d106      	bne.n	800444c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800444a:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	ff33000f 	.word	0xff33000f

08004470 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004470:	b480      	push	{r7}
 8004472:	b08b      	sub	sp, #44	; 0x2c
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004484:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	041a      	lsls	r2, r3, #16
 800448c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448e:	431a      	orrs	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044a8:	d174      	bne.n	8004594 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80044b0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044b8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80044c0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d108      	bne.n	80044e2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	4313      	orrs	r3, r2
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4313      	orrs	r3, r2
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
 80044e0:	e053      	b.n	800458a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d106      	bne.n	80044f8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
 80044f6:	e048      	b.n	800458a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d111      	bne.n	8004524 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	0cdb      	lsrs	r3, r3, #19
 8004504:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	0a9b      	lsrs	r3, r3, #10
 800450a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	08db      	lsrs	r3, r3, #3
 8004510:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	02db      	lsls	r3, r3, #11
 800451a:	4313      	orrs	r3, r2
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
 8004522:	e032      	b.n	800458a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b03      	cmp	r3, #3
 800452a:	d117      	bne.n	800455c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	0fdb      	lsrs	r3, r3, #31
 8004530:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	0cdb      	lsrs	r3, r3, #19
 8004536:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	0adb      	lsrs	r3, r3, #11
 800453c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	08db      	lsrs	r3, r3, #3
 8004542:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	029b      	lsls	r3, r3, #10
 800454c:	431a      	orrs	r2, r3
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	03db      	lsls	r3, r3, #15
 8004552:	4313      	orrs	r3, r2
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
 800455a:	e016      	b.n	800458a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	0f1b      	lsrs	r3, r3, #28
 8004560:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	0d1b      	lsrs	r3, r3, #20
 8004566:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	0b1b      	lsrs	r3, r3, #12
 800456c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	091b      	lsrs	r3, r3, #4
 8004572:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	011a      	lsls	r2, r3, #4
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	431a      	orrs	r2, r3
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	031b      	lsls	r3, r3, #12
 8004582:	4313      	orrs	r3, r2
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	4313      	orrs	r3, r2
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004590:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004592:	e003      	b.n	800459c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	60da      	str	r2, [r3, #12]
}
 800459c:	bf00      	nop
 800459e:	372c      	adds	r7, #44	; 0x2c
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	019a      	lsls	r2, r3, #6
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	431a      	orrs	r2, r3
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	021b      	lsls	r3, r3, #8
 80045c2:	431a      	orrs	r2, r3
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	041b      	lsls	r3, r3, #16
 80045c8:	431a      	orrs	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80045ce:	bf00      	nop
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b086      	sub	sp, #24
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
 80045e6:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80045e8:	f7ff f92a 	bl	8003840 <HAL_GetTick>
 80045ec:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80045ee:	e009      	b.n	8004604 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 80045f0:	f7ff f926 	bl	8003840 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045fe:	d901      	bls.n	8004604 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e015      	b.n	8004630 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0ee      	beq.n	80045f0 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	019a      	lsls	r2, r3, #6
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	431a      	orrs	r2, r3
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	ea42 0103 	orr.w	r1, r2, r3
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	041a      	lsls	r2, r3, #16
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b088      	sub	sp, #32
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e106      	b.n	800485a <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	7c5b      	ldrb	r3, [r3, #17]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d102      	bne.n	800465c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fd f820 	bl	800169c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2203      	movs	r2, #3
 8004660:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8004662:	2300      	movs	r3, #0
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004676:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004682:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800468a:	f7ff f8d9 	bl	8003840 <HAL_GetTick>
 800468e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004690:	e009      	b.n	80046a6 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004692:	f7ff f8d5 	bl	8003840 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046a0:	d901      	bls.n	80046a6 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e0d9      	b.n	800485a <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80046ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0ed      	beq.n	8004692 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	4b68      	ldr	r3, [pc, #416]	; (8004864 <HAL_DSI_Init+0x22c>)
 80046c4:	400b      	ands	r3, r1
 80046c6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	009a      	lsls	r2, r3, #2
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	02db      	lsls	r3, r3, #11
 80046de:	431a      	orrs	r2, r3
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	041b      	lsls	r3, r3, #16
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800471a:	f7ff f891 	bl	8003840 <HAL_GetTick>
 800471e:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004720:	e009      	b.n	8004736 <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004722:	f7ff f88d 	bl	8003840 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004730:	d901      	bls.n	8004736 <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e091      	b.n	800485a <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800473e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0ed      	beq.n	8004722 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0206 	orr.w	r2, r2, #6
 8004756:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0203 	bic.w	r2, r2, #3
 800476a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0201 	orr.w	r2, r2, #1
 8004784:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0203 	bic.w	r2, r2, #3
 8004798:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047c0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6899      	ldr	r1, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <HAL_DSI_Init+0x1aa>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	e000      	b.n	80047e4 <HAL_DSI_Init+0x1ac>
 80047e2:	2301      	movs	r3, #1
 80047e4:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	4a1f      	ldr	r2, [pc, #124]	; (8004868 <HAL_DSI_Init+0x230>)
 80047ea:	fb02 f203 	mul.w	r2, r2, r3
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	409a      	lsls	r2, r3
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800481a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	430a      	orrs	r2, r1
 800482e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2200      	movs	r2, #0
 8004842:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3720      	adds	r7, #32
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	fffc8603 	.word	0xfffc8603
 8004868:	003d0900 	.word	0x003d0900

0800486c <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e066      	b.n	800494c <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2203      	movs	r2, #3
 8004882:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0208 	bic.w	r2, r2, #8
 8004898:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80048ac:	2300      	movs	r3, #0
 80048ae:	613b      	str	r3, [r7, #16]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0201 	bic.w	r2, r2, #1
 80048be:	605a      	str	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0206 	bic.w	r2, r2, #6
 80048de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 800490a:	2300      	movs	r3, #0
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800491e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800492a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800492e:	60bb      	str	r3, [r7, #8]
 8004930:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fc fefe 	bl	8001734 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	7c1b      	ldrb	r3, [r3, #16]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_DSI_ConfigErrorMonitor+0x16>
 8004966:	2302      	movs	r3, #2
 8004968:	e0aa      	b.n	8004ac0 <HAL_DSI_ConfigErrorMonitor+0x16c>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2200      	movs	r2, #0
 8004976:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2200      	movs	r2, #0
 8004980:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049a4:	430b      	orrs	r3, r1
 80049a6:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d009      	beq.n	80049c8 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80049c4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 0202 	orr.w	r2, r2, #2
 8004a00:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	f003 0310 	and.w	r3, r3, #16
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 020c 	orr.w	r2, r2, #12
 8004a1e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d009      	beq.n	8004a40 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0210 	orr.w	r2, r2, #16
 8004a3c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0220 	orr.w	r2, r2, #32
 8004a5a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d009      	beq.n	8004a7c <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a78:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d009      	beq.n	8004a9a <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a96:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d009      	beq.n	8004ab8 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8004ab4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00f      	beq.n	8004b04 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d007      	beq.n	8004b04 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f8ad 	bl	8004c5e <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00f      	beq.n	8004b34 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f89f 	bl	8004c72 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 808c 	beq.w	8004c56 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004b46:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4013      	ands	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b5e:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	f043 0201 	orr.w	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	f043 0202 	orr.w	r2, r3, #2
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d005      	beq.n	8004bae <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f043 0204 	orr.w	r2, r3, #4
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	f043 0208 	orr.w	r2, r3, #8
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f043 0210 	orr.w	r2, r3, #16
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	f043 0220 	orr.w	r2, r3, #32
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f818 	bl	8004c86 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004c56:	bf00      	nop
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	7c1b      	ldrb	r3, [r3, #16]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_DSI_SetGenericVCID+0x16>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e016      	b.n	8004cde <HAL_DSI_SetGenericVCID+0x44>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 0203 	bic.w	r2, r2, #3
 8004cc4:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
	...

08004cec <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	7c1b      	ldrb	r3, [r3, #16]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_DSI_ConfigVideoMode+0x16>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e1ee      	b.n	80050e0 <HAL_DSI_ConfigVideoMode+0x3f4>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0201 	bic.w	r2, r2, #1
 8004d16:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0201 	bic.w	r2, r2, #1
 8004d28:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0203 	bic.w	r2, r2, #3
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b8b      	ldr	r3, [pc, #556]	; (8004f88 <HAL_DSI_ConfigVideoMode+0x29c>)
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4b84      	ldr	r3, [pc, #528]	; (8004f8c <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004d7c:	400b      	ands	r3, r1
 8004d7e:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	4b7b      	ldr	r3, [pc, #492]	; (8004f8c <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004d9e:	400b      	ands	r3, r1
 8004da0:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	699a      	ldr	r2, [r3, #24]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0203 	bic.w	r2, r2, #3
 8004dc2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68d9      	ldr	r1, [r3, #12]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695a      	ldr	r2, [r3, #20]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0207 	bic.w	r2, r2, #7
 8004de4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6959      	ldr	r1, [r3, #20]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	431a      	orrs	r2, r3
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 020f 	bic.w	r2, r2, #15
 8004e12:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6919      	ldr	r1, [r3, #16]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 020e 	bic.w	r2, r2, #14
 8004e36:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	005a      	lsls	r2, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d110      	bne.n	8004e7c <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e68:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6919      	ldr	r1, [r3, #16]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	4b42      	ldr	r3, [pc, #264]	; (8004f90 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004e88:	400b      	ands	r3, r1
 8004e8a:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	4b39      	ldr	r3, [pc, #228]	; (8004f90 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004eaa:	400b      	ands	r3, r1
 8004eac:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	4b32      	ldr	r3, [pc, #200]	; (8004f94 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8004ecc:	400b      	ands	r3, r1
 8004ece:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4b2a      	ldr	r3, [pc, #168]	; (8004f98 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004eee:	400b      	ands	r3, r1
 8004ef0:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4b22      	ldr	r3, [pc, #136]	; (8004f98 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004f10:	400b      	ands	r3, r1
 8004f12:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004f32:	400b      	ands	r3, r1
 8004f34:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <HAL_DSI_ConfigVideoMode+0x29c>)
 8004f54:	400b      	ands	r3, r1
 8004f56:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f78:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f84:	e00a      	b.n	8004f9c <HAL_DSI_ConfigVideoMode+0x2b0>
 8004f86:	bf00      	nop
 8004f88:	ffffc000 	.word	0xffffc000
 8004f8c:	ffffe000 	.word	0xffffe000
 8004f90:	fffff000 	.word	0xfffff000
 8004f94:	ffff8000 	.word	0xffff8000
 8004f98:	fffffc00 	.word	0xfffffc00
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004fb2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6999      	ldr	r1, [r3, #24]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fbe:	041a      	lsls	r2, r3, #16
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004fd6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6999      	ldr	r1, [r3, #24]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800501a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800503c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800505e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005080:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050a2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	7c1b      	ldrb	r3, [r3, #16]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80050fe:	2302      	movs	r3, #2
 8005100:	e0c5      	b.n	800528e <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0201 	bic.w	r2, r2, #1
 8005128:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0201 	orr.w	r2, r2, #1
 800513c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0203 	bic.w	r2, r2, #3
 800514e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68d9      	ldr	r1, [r3, #12]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0207 	bic.w	r2, r2, #7
 8005170:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6959      	ldr	r1, [r3, #20]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	431a      	orrs	r2, r3
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 020f 	bic.w	r2, r2, #15
 800519e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6919      	ldr	r1, [r3, #16]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 020e 	bic.w	r2, r2, #14
 80051c2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	005a      	lsls	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	4b2c      	ldr	r3, [pc, #176]	; (800529c <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 80051ea:	400b      	ands	r3, r1
 80051ec:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005210:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	431a      	orrs	r2, r3
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0202 	orr.w	r2, r2, #2
 8005282:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	ffff0000 	.word	0xffff0000

080052a0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	7c1b      	ldrb	r3, [r3, #16]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_DSI_ConfigCommand+0x16>
 80052b2:	2302      	movs	r3, #2
 80052b4:	e049      	b.n	800534a <HAL_DSI_ConfigCommand+0xaa>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	4b24      	ldr	r3, [pc, #144]	; (8005358 <HAL_DSI_ConfigCommand+0xb8>)
 80052c8:	400b      	ands	r3, r1
 80052ca:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80052da:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80052e0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80052e6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80052ec:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80052f2:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80052f8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80052fe:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8005304:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800530a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8005310:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8005316:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0202 	bic.w	r2, r2, #2
 800532e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	fef080ff 	.word	0xfef080ff

0800535c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	7c1b      	ldrb	r3, [r3, #16]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <HAL_DSI_ConfigFlowControl+0x16>
 800536e:	2302      	movs	r3, #2
 8005370:	e016      	b.n	80053a0 <HAL_DSI_ConfigFlowControl+0x44>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 021f 	bic.w	r2, r2, #31
 8005386:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	7c1b      	ldrb	r3, [r3, #16]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d101      	bne.n	80053c2 <HAL_DSI_ConfigPhyTimer+0x16>
 80053be:	2302      	movs	r3, #2
 80053c0:	e058      	b.n	8005474 <HAL_DSI_ConfigPhyTimer+0xc8>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	4293      	cmp	r3, r2
 80053d2:	bf38      	it	cc
 80053d4:	4613      	movcc	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80053e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	041a      	lsls	r2, r3, #16
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8005416:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	691a      	ldr	r2, [r3, #16]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	041b      	lsls	r3, r3, #16
 800542c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005450:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	021a      	lsls	r2, r3, #8
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	7c1b      	ldrb	r3, [r3, #16]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <HAL_DSI_ConfigHostTimeouts+0x16>
 8005492:	2302      	movs	r3, #2
 8005494:	e0b4      	b.n	8005600 <HAL_DSI_ConfigHostTimeouts+0x180>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80054aa:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6899      	ldr	r1, [r3, #8]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	021a      	lsls	r2, r3, #8
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	b292      	uxth	r2, r2
 80054cc:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	041a      	lsls	r2, r3, #16
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4b47      	ldr	r3, [pc, #284]	; (800560c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80054ee:	400b      	ands	r3, r1
 80054f0:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	4b3f      	ldr	r3, [pc, #252]	; (800560c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005510:	400b      	ands	r3, r1
 8005512:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4b36      	ldr	r3, [pc, #216]	; (800560c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005534:	400b      	ands	r3, r1
 8005536:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	691a      	ldr	r2, [r3, #16]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	4b2b      	ldr	r3, [pc, #172]	; (800560c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800555e:	400b      	ands	r3, r1
 8005560:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	695a      	ldr	r2, [r3, #20]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800558a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	4b16      	ldr	r3, [pc, #88]	; (800560c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80055b2:	400b      	ands	r3, r1
 80055b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	69da      	ldr	r2, [r3, #28]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	4b0c      	ldr	r3, [pc, #48]	; (800560c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80055dc:	400b      	ands	r3, r1
 80055de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	6a1a      	ldr	r2, [r3, #32]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	ffff0000 	.word	0xffff0000

08005610 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	7c1b      	ldrb	r3, [r3, #16]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_DSI_Start+0x14>
 8005620:	2302      	movs	r3, #2
 8005622:	e02b      	b.n	800567c <HAL_DSI_Start+0x6c>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f042 0201 	orr.w	r2, r2, #1
 800563c:	605a      	str	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800564c:	2300      	movs	r3, #0
 800564e:	60bb      	str	r3, [r7, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f042 0208 	orr.w	r2, r2, #8
 8005660:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800566c:	f003 0308 	and.w	r3, r3, #8
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af02      	add	r7, sp, #8
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	7c1b      	ldrb	r3, [r3, #16]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d101      	bne.n	80056a2 <HAL_DSI_ShortWrite+0x1a>
 800569e:	2302      	movs	r3, #2
 80056a0:	e010      	b.n	80056c4 <HAL_DSI_ShortWrite+0x3c>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2201      	movs	r2, #1
 80056a6:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f7fe ff91 	bl	80045da <DSI_ShortWrite>
 80056b8:	4603      	mov	r3, r0
 80056ba:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	741a      	strb	r2, [r3, #16]

  return status;
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08c      	sub	sp, #48	; 0x30
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80056da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056dc:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	7c1b      	ldrb	r3, [r3, #16]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_DSI_LongWrite+0x1e>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e084      	b.n	80057f4 <HAL_DSI_LongWrite+0x128>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80056f0:	f7fe f8a6 	bl	8003840 <HAL_GetTick>
 80056f4:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80056f6:	e00c      	b.n	8005712 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80056f8:	f7fe f8a2 	bl	8003840 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005706:	d904      	bls.n	8005712 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e070      	b.n	80057f4 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0eb      	beq.n	80056f8 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b03      	cmp	r3, #3
 8005728:	bf28      	it	cs
 800572a:	2303      	movcs	r3, #3
 800572c:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800572e:	2300      	movs	r3, #0
 8005730:	623b      	str	r3, [r7, #32]
 8005732:	e00f      	b.n	8005754 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	4413      	add	r3, r2
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	461a      	mov	r2, r3
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	3301      	adds	r3, #1
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	4313      	orrs	r3, r2
 800574c:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	3301      	adds	r3, #1
 8005752:	623b      	str	r3, [r7, #32]
 8005754:	6a3a      	ldr	r2, [r7, #32]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	429a      	cmp	r2, r3
 800575a:	d3eb      	bcc.n	8005734 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	4413      	add	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8005774:	e028      	b.n	80057c8 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	2b04      	cmp	r3, #4
 800577a:	bf28      	it	cs
 800577c:	2304      	movcs	r3, #4
 800577e:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8005784:	2300      	movs	r3, #0
 8005786:	623b      	str	r3, [r7, #32]
 8005788:	e00e      	b.n	80057a8 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	4413      	add	r3, r2
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	69fa      	ldr	r2, [r7, #28]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	3301      	adds	r3, #1
 80057a6:	623b      	str	r3, [r7, #32]
 80057a8:	6a3a      	ldr	r2, [r7, #32]
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d3ec      	bcc.n	800578a <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80057b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4413      	add	r3, r2
 80057c6:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1d3      	bne.n	8005776 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 80057d6:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	3301      	adds	r3, #1
 80057dc:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	4613      	mov	r3, r2
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	f7fe fede 	bl	80045a8 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3728      	adds	r7, #40	; 0x28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	7c1b      	ldrb	r3, [r3, #16]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d101      	bne.n	8005812 <HAL_DSI_SetLowPowerRXFilter+0x16>
 800580e:	2302      	movs	r3, #2
 8005810:	e01b      	b.n	800584a <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8005828:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	065a      	lsls	r2, r3, #25
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
	...

08005858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005858:	b480      	push	{r7}
 800585a:	b089      	sub	sp, #36	; 0x24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005866:	2300      	movs	r3, #0
 8005868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800586a:	2300      	movs	r3, #0
 800586c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800586e:	2300      	movs	r3, #0
 8005870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005872:	2300      	movs	r3, #0
 8005874:	61fb      	str	r3, [r7, #28]
 8005876:	e175      	b.n	8005b64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005878:	2201      	movs	r2, #1
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4013      	ands	r3, r2
 800588a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	429a      	cmp	r2, r3
 8005892:	f040 8164 	bne.w	8005b5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d003      	beq.n	80058a6 <HAL_GPIO_Init+0x4e>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	2b12      	cmp	r3, #18
 80058a4:	d123      	bne.n	80058ee <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	08da      	lsrs	r2, r3, #3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3208      	adds	r2, #8
 80058ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	220f      	movs	r2, #15
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	43db      	mvns	r3, r3
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	4013      	ands	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	fa02 f303 	lsl.w	r3, r2, r3
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	4313      	orrs	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	08da      	lsrs	r2, r3, #3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3208      	adds	r2, #8
 80058e8:	69b9      	ldr	r1, [r7, #24]
 80058ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	2203      	movs	r2, #3
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	43db      	mvns	r3, r3
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	4013      	ands	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f003 0203 	and.w	r2, r3, #3
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	4313      	orrs	r3, r2
 800591a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d00b      	beq.n	8005942 <HAL_GPIO_Init+0xea>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d007      	beq.n	8005942 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005936:	2b11      	cmp	r3, #17
 8005938:	d003      	beq.n	8005942 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b12      	cmp	r3, #18
 8005940:	d130      	bne.n	80059a4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	2203      	movs	r2, #3
 800594e:	fa02 f303 	lsl.w	r3, r2, r3
 8005952:	43db      	mvns	r3, r3
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	4013      	ands	r3, r2
 8005958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	4313      	orrs	r3, r2
 800596a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005978:	2201      	movs	r2, #1
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	fa02 f303 	lsl.w	r3, r2, r3
 8005980:	43db      	mvns	r3, r3
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	4013      	ands	r3, r2
 8005986:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	091b      	lsrs	r3, r3, #4
 800598e:	f003 0201 	and.w	r2, r3, #1
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	4313      	orrs	r3, r2
 800599c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	2203      	movs	r2, #3
 80059b0:	fa02 f303 	lsl.w	r3, r2, r3
 80059b4:	43db      	mvns	r3, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4013      	ands	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	fa02 f303 	lsl.w	r3, r2, r3
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 80be 	beq.w	8005b5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059e2:	4b65      	ldr	r3, [pc, #404]	; (8005b78 <HAL_GPIO_Init+0x320>)
 80059e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e6:	4a64      	ldr	r2, [pc, #400]	; (8005b78 <HAL_GPIO_Init+0x320>)
 80059e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059ec:	6453      	str	r3, [r2, #68]	; 0x44
 80059ee:	4b62      	ldr	r3, [pc, #392]	; (8005b78 <HAL_GPIO_Init+0x320>)
 80059f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80059fa:	4a60      	ldr	r2, [pc, #384]	; (8005b7c <HAL_GPIO_Init+0x324>)
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	089b      	lsrs	r3, r3, #2
 8005a00:	3302      	adds	r3, #2
 8005a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	220f      	movs	r2, #15
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43db      	mvns	r3, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a57      	ldr	r2, [pc, #348]	; (8005b80 <HAL_GPIO_Init+0x328>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d037      	beq.n	8005a96 <HAL_GPIO_Init+0x23e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a56      	ldr	r2, [pc, #344]	; (8005b84 <HAL_GPIO_Init+0x32c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d031      	beq.n	8005a92 <HAL_GPIO_Init+0x23a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a55      	ldr	r2, [pc, #340]	; (8005b88 <HAL_GPIO_Init+0x330>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d02b      	beq.n	8005a8e <HAL_GPIO_Init+0x236>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a54      	ldr	r2, [pc, #336]	; (8005b8c <HAL_GPIO_Init+0x334>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d025      	beq.n	8005a8a <HAL_GPIO_Init+0x232>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a53      	ldr	r2, [pc, #332]	; (8005b90 <HAL_GPIO_Init+0x338>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d01f      	beq.n	8005a86 <HAL_GPIO_Init+0x22e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a52      	ldr	r2, [pc, #328]	; (8005b94 <HAL_GPIO_Init+0x33c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d019      	beq.n	8005a82 <HAL_GPIO_Init+0x22a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a51      	ldr	r2, [pc, #324]	; (8005b98 <HAL_GPIO_Init+0x340>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <HAL_GPIO_Init+0x226>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a50      	ldr	r2, [pc, #320]	; (8005b9c <HAL_GPIO_Init+0x344>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00d      	beq.n	8005a7a <HAL_GPIO_Init+0x222>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a4f      	ldr	r2, [pc, #316]	; (8005ba0 <HAL_GPIO_Init+0x348>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d007      	beq.n	8005a76 <HAL_GPIO_Init+0x21e>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a4e      	ldr	r2, [pc, #312]	; (8005ba4 <HAL_GPIO_Init+0x34c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d101      	bne.n	8005a72 <HAL_GPIO_Init+0x21a>
 8005a6e:	2309      	movs	r3, #9
 8005a70:	e012      	b.n	8005a98 <HAL_GPIO_Init+0x240>
 8005a72:	230a      	movs	r3, #10
 8005a74:	e010      	b.n	8005a98 <HAL_GPIO_Init+0x240>
 8005a76:	2308      	movs	r3, #8
 8005a78:	e00e      	b.n	8005a98 <HAL_GPIO_Init+0x240>
 8005a7a:	2307      	movs	r3, #7
 8005a7c:	e00c      	b.n	8005a98 <HAL_GPIO_Init+0x240>
 8005a7e:	2306      	movs	r3, #6
 8005a80:	e00a      	b.n	8005a98 <HAL_GPIO_Init+0x240>
 8005a82:	2305      	movs	r3, #5
 8005a84:	e008      	b.n	8005a98 <HAL_GPIO_Init+0x240>
 8005a86:	2304      	movs	r3, #4
 8005a88:	e006      	b.n	8005a98 <HAL_GPIO_Init+0x240>
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e004      	b.n	8005a98 <HAL_GPIO_Init+0x240>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e002      	b.n	8005a98 <HAL_GPIO_Init+0x240>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <HAL_GPIO_Init+0x240>
 8005a96:	2300      	movs	r3, #0
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	f002 0203 	and.w	r2, r2, #3
 8005a9e:	0092      	lsls	r2, r2, #2
 8005aa0:	4093      	lsls	r3, r2
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005aa8:	4934      	ldr	r1, [pc, #208]	; (8005b7c <HAL_GPIO_Init+0x324>)
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	089b      	lsrs	r3, r3, #2
 8005aae:	3302      	adds	r3, #2
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ab6:	4b3c      	ldr	r3, [pc, #240]	; (8005ba8 <HAL_GPIO_Init+0x350>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	43db      	mvns	r3, r3
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ada:	4a33      	ldr	r2, [pc, #204]	; (8005ba8 <HAL_GPIO_Init+0x350>)
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ae0:	4b31      	ldr	r3, [pc, #196]	; (8005ba8 <HAL_GPIO_Init+0x350>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	4013      	ands	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b04:	4a28      	ldr	r2, [pc, #160]	; (8005ba8 <HAL_GPIO_Init+0x350>)
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b0a:	4b27      	ldr	r3, [pc, #156]	; (8005ba8 <HAL_GPIO_Init+0x350>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	43db      	mvns	r3, r3
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	4013      	ands	r3, r2
 8005b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ba8 <HAL_GPIO_Init+0x350>)
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b34:	4b1c      	ldr	r3, [pc, #112]	; (8005ba8 <HAL_GPIO_Init+0x350>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	43db      	mvns	r3, r3
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	4013      	ands	r3, r2
 8005b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b58:	4a13      	ldr	r2, [pc, #76]	; (8005ba8 <HAL_GPIO_Init+0x350>)
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	3301      	adds	r3, #1
 8005b62:	61fb      	str	r3, [r7, #28]
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	2b0f      	cmp	r3, #15
 8005b68:	f67f ae86 	bls.w	8005878 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005b6c:	bf00      	nop
 8005b6e:	3724      	adds	r7, #36	; 0x24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	40013800 	.word	0x40013800
 8005b80:	40020000 	.word	0x40020000
 8005b84:	40020400 	.word	0x40020400
 8005b88:	40020800 	.word	0x40020800
 8005b8c:	40020c00 	.word	0x40020c00
 8005b90:	40021000 	.word	0x40021000
 8005b94:	40021400 	.word	0x40021400
 8005b98:	40021800 	.word	0x40021800
 8005b9c:	40021c00 	.word	0x40021c00
 8005ba0:	40022000 	.word	0x40022000
 8005ba4:	40022400 	.word	0x40022400
 8005ba8:	40013c00 	.word	0x40013c00

08005bac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	617b      	str	r3, [r7, #20]
 8005bc6:	e0d9      	b.n	8005d7c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005bc8:	2201      	movs	r2, #1
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	f040 80c9 	bne.w	8005d76 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005be4:	4a6a      	ldr	r2, [pc, #424]	; (8005d90 <HAL_GPIO_DeInit+0x1e4>)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	089b      	lsrs	r3, r3, #2
 8005bea:	3302      	adds	r3, #2
 8005bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f003 0303 	and.w	r3, r3, #3
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	220f      	movs	r2, #15
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	4013      	ands	r3, r2
 8005c04:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a62      	ldr	r2, [pc, #392]	; (8005d94 <HAL_GPIO_DeInit+0x1e8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d037      	beq.n	8005c7e <HAL_GPIO_DeInit+0xd2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a61      	ldr	r2, [pc, #388]	; (8005d98 <HAL_GPIO_DeInit+0x1ec>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d031      	beq.n	8005c7a <HAL_GPIO_DeInit+0xce>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a60      	ldr	r2, [pc, #384]	; (8005d9c <HAL_GPIO_DeInit+0x1f0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d02b      	beq.n	8005c76 <HAL_GPIO_DeInit+0xca>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a5f      	ldr	r2, [pc, #380]	; (8005da0 <HAL_GPIO_DeInit+0x1f4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d025      	beq.n	8005c72 <HAL_GPIO_DeInit+0xc6>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a5e      	ldr	r2, [pc, #376]	; (8005da4 <HAL_GPIO_DeInit+0x1f8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d01f      	beq.n	8005c6e <HAL_GPIO_DeInit+0xc2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a5d      	ldr	r2, [pc, #372]	; (8005da8 <HAL_GPIO_DeInit+0x1fc>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d019      	beq.n	8005c6a <HAL_GPIO_DeInit+0xbe>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a5c      	ldr	r2, [pc, #368]	; (8005dac <HAL_GPIO_DeInit+0x200>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d013      	beq.n	8005c66 <HAL_GPIO_DeInit+0xba>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a5b      	ldr	r2, [pc, #364]	; (8005db0 <HAL_GPIO_DeInit+0x204>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00d      	beq.n	8005c62 <HAL_GPIO_DeInit+0xb6>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a5a      	ldr	r2, [pc, #360]	; (8005db4 <HAL_GPIO_DeInit+0x208>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d007      	beq.n	8005c5e <HAL_GPIO_DeInit+0xb2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a59      	ldr	r2, [pc, #356]	; (8005db8 <HAL_GPIO_DeInit+0x20c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d101      	bne.n	8005c5a <HAL_GPIO_DeInit+0xae>
 8005c56:	2309      	movs	r3, #9
 8005c58:	e012      	b.n	8005c80 <HAL_GPIO_DeInit+0xd4>
 8005c5a:	230a      	movs	r3, #10
 8005c5c:	e010      	b.n	8005c80 <HAL_GPIO_DeInit+0xd4>
 8005c5e:	2308      	movs	r3, #8
 8005c60:	e00e      	b.n	8005c80 <HAL_GPIO_DeInit+0xd4>
 8005c62:	2307      	movs	r3, #7
 8005c64:	e00c      	b.n	8005c80 <HAL_GPIO_DeInit+0xd4>
 8005c66:	2306      	movs	r3, #6
 8005c68:	e00a      	b.n	8005c80 <HAL_GPIO_DeInit+0xd4>
 8005c6a:	2305      	movs	r3, #5
 8005c6c:	e008      	b.n	8005c80 <HAL_GPIO_DeInit+0xd4>
 8005c6e:	2304      	movs	r3, #4
 8005c70:	e006      	b.n	8005c80 <HAL_GPIO_DeInit+0xd4>
 8005c72:	2303      	movs	r3, #3
 8005c74:	e004      	b.n	8005c80 <HAL_GPIO_DeInit+0xd4>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e002      	b.n	8005c80 <HAL_GPIO_DeInit+0xd4>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <HAL_GPIO_DeInit+0xd4>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	f002 0203 	and.w	r2, r2, #3
 8005c86:	0092      	lsls	r2, r2, #2
 8005c88:	4093      	lsls	r3, r2
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d132      	bne.n	8005cf6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	220f      	movs	r2, #15
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005ca0:	4a3b      	ldr	r2, [pc, #236]	; (8005d90 <HAL_GPIO_DeInit+0x1e4>)
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	089b      	lsrs	r3, r3, #2
 8005ca6:	3302      	adds	r3, #2
 8005ca8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	43da      	mvns	r2, r3
 8005cb0:	4837      	ldr	r0, [pc, #220]	; (8005d90 <HAL_GPIO_DeInit+0x1e4>)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	089b      	lsrs	r3, r3, #2
 8005cb6:	400a      	ands	r2, r1
 8005cb8:	3302      	adds	r3, #2
 8005cba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005cbe:	4b3f      	ldr	r3, [pc, #252]	; (8005dbc <HAL_GPIO_DeInit+0x210>)
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	493d      	ldr	r1, [pc, #244]	; (8005dbc <HAL_GPIO_DeInit+0x210>)
 8005cc8:	4013      	ands	r3, r2
 8005cca:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005ccc:	4b3b      	ldr	r3, [pc, #236]	; (8005dbc <HAL_GPIO_DeInit+0x210>)
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	43db      	mvns	r3, r3
 8005cd4:	4939      	ldr	r1, [pc, #228]	; (8005dbc <HAL_GPIO_DeInit+0x210>)
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005cda:	4b38      	ldr	r3, [pc, #224]	; (8005dbc <HAL_GPIO_DeInit+0x210>)
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	4936      	ldr	r1, [pc, #216]	; (8005dbc <HAL_GPIO_DeInit+0x210>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005ce8:	4b34      	ldr	r3, [pc, #208]	; (8005dbc <HAL_GPIO_DeInit+0x210>)
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	43db      	mvns	r3, r3
 8005cf0:	4932      	ldr	r1, [pc, #200]	; (8005dbc <HAL_GPIO_DeInit+0x210>)
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	2103      	movs	r1, #3
 8005d00:	fa01 f303 	lsl.w	r3, r1, r3
 8005d04:	43db      	mvns	r3, r3
 8005d06:	401a      	ands	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	08da      	lsrs	r2, r3, #3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3208      	adds	r2, #8
 8005d14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	220f      	movs	r2, #15
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	43db      	mvns	r3, r3
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	08d2      	lsrs	r2, r2, #3
 8005d2c:	4019      	ands	r1, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	3208      	adds	r2, #8
 8005d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	2103      	movs	r1, #3
 8005d40:	fa01 f303 	lsl.w	r3, r1, r3
 8005d44:	43db      	mvns	r3, r3
 8005d46:	401a      	ands	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	2101      	movs	r1, #1
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	fa01 f303 	lsl.w	r3, r1, r3
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	401a      	ands	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	2103      	movs	r1, #3
 8005d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	401a      	ands	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2b0f      	cmp	r3, #15
 8005d80:	f67f af22 	bls.w	8005bc8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005d84:	bf00      	nop
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40013800 	.word	0x40013800
 8005d94:	40020000 	.word	0x40020000
 8005d98:	40020400 	.word	0x40020400
 8005d9c:	40020800 	.word	0x40020800
 8005da0:	40020c00 	.word	0x40020c00
 8005da4:	40021000 	.word	0x40021000
 8005da8:	40021400 	.word	0x40021400
 8005dac:	40021800 	.word	0x40021800
 8005db0:	40021c00 	.word	0x40021c00
 8005db4:	40022000 	.word	0x40022000
 8005db8:	40022400 	.word	0x40022400
 8005dbc:	40013c00 	.word	0x40013c00

08005dc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	887b      	ldrh	r3, [r7, #2]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]
 8005ddc:	e001      	b.n	8005de2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005dde:	2300      	movs	r3, #0
 8005de0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	807b      	strh	r3, [r7, #2]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e00:	787b      	ldrb	r3, [r7, #1]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e06:	887a      	ldrh	r2, [r7, #2]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005e0c:	e003      	b.n	8005e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005e0e:	887b      	ldrh	r3, [r7, #2]
 8005e10:	041a      	lsls	r2, r3, #16
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	619a      	str	r2, [r3, #24]
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
	...

08005e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e07f      	b.n	8005f36 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f8a9 	bl	8005fa2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2224      	movs	r2, #36	; 0x24
 8005e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0201 	bic.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d107      	bne.n	8005e9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689a      	ldr	r2, [r3, #8]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e9a:	609a      	str	r2, [r3, #8]
 8005e9c:	e006      	b.n	8005eac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689a      	ldr	r2, [r3, #8]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005eaa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d104      	bne.n	8005ebe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ebc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6859      	ldr	r1, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	4b1d      	ldr	r3, [pc, #116]	; (8005f40 <HAL_I2C_Init+0x11c>)
 8005eca:	430b      	orrs	r3, r1
 8005ecc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005edc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691a      	ldr	r2, [r3, #16]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	ea42 0103 	orr.w	r1, r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	021a      	lsls	r2, r3, #8
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	69d9      	ldr	r1, [r3, #28]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a1a      	ldr	r2, [r3, #32]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0201 	orr.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	02008000 	.word	0x02008000

08005f44 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e021      	b.n	8005f9a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2224      	movs	r2, #36	; 0x24
 8005f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0201 	bic.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f821 	bl	8005fb6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
	...

08005fcc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	461a      	mov	r2, r3
 8005fda:	4603      	mov	r3, r0
 8005fdc:	817b      	strh	r3, [r7, #10]
 8005fde:	460b      	mov	r3, r1
 8005fe0:	813b      	strh	r3, [r7, #8]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b20      	cmp	r3, #32
 8005ff0:	f040 80f9 	bne.w	80061e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <HAL_I2C_Mem_Write+0x34>
 8005ffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d105      	bne.n	800600c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006006:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e0ed      	b.n	80061e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_I2C_Mem_Write+0x4e>
 8006016:	2302      	movs	r3, #2
 8006018:	e0e6      	b.n	80061e8 <HAL_I2C_Mem_Write+0x21c>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006022:	f7fd fc0d 	bl	8003840 <HAL_GetTick>
 8006026:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	2319      	movs	r3, #25
 800602e:	2201      	movs	r2, #1
 8006030:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 fad1 	bl	80065dc <I2C_WaitOnFlagUntilTimeout>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e0d1      	b.n	80061e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2221      	movs	r2, #33	; 0x21
 8006048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2240      	movs	r2, #64	; 0x40
 8006050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6a3a      	ldr	r2, [r7, #32]
 800605e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006064:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800606c:	88f8      	ldrh	r0, [r7, #6]
 800606e:	893a      	ldrh	r2, [r7, #8]
 8006070:	8979      	ldrh	r1, [r7, #10]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	9301      	str	r3, [sp, #4]
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	4603      	mov	r3, r0
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 f9e1 	bl	8006444 <I2C_RequestMemoryWrite>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e0a9      	b.n	80061e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006098:	b29b      	uxth	r3, r3
 800609a:	2bff      	cmp	r3, #255	; 0xff
 800609c:	d90e      	bls.n	80060bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	22ff      	movs	r2, #255	; 0xff
 80060a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	8979      	ldrh	r1, [r7, #10]
 80060ac:	2300      	movs	r3, #0
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fbb3 	bl	8006820 <I2C_TransferConfig>
 80060ba:	e00f      	b.n	80060dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	8979      	ldrh	r1, [r7, #10]
 80060ce:	2300      	movs	r3, #0
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f000 fba2 	bl	8006820 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 fabb 	bl	800665c <I2C_WaitOnTXISFlagUntilTimeout>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e07b      	b.n	80061e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	781a      	ldrb	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b01      	subs	r3, #1
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d034      	beq.n	8006194 <HAL_I2C_Mem_Write+0x1c8>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800612e:	2b00      	cmp	r3, #0
 8006130:	d130      	bne.n	8006194 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	2200      	movs	r2, #0
 800613a:	2180      	movs	r1, #128	; 0x80
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 fa4d 	bl	80065dc <I2C_WaitOnFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e04d      	b.n	80061e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006150:	b29b      	uxth	r3, r3
 8006152:	2bff      	cmp	r3, #255	; 0xff
 8006154:	d90e      	bls.n	8006174 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	22ff      	movs	r2, #255	; 0xff
 800615a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006160:	b2da      	uxtb	r2, r3
 8006162:	8979      	ldrh	r1, [r7, #10]
 8006164:	2300      	movs	r3, #0
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 fb57 	bl	8006820 <I2C_TransferConfig>
 8006172:	e00f      	b.n	8006194 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006178:	b29a      	uxth	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006182:	b2da      	uxtb	r2, r3
 8006184:	8979      	ldrh	r1, [r7, #10]
 8006186:	2300      	movs	r3, #0
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 fb46 	bl	8006820 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006198:	b29b      	uxth	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d19e      	bne.n	80060dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 fa9a 	bl	80066dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e01a      	b.n	80061e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2220      	movs	r2, #32
 80061b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6859      	ldr	r1, [r3, #4]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <HAL_I2C_Mem_Write+0x224>)
 80061c6:	400b      	ands	r3, r1
 80061c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	e000      	b.n	80061e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80061e6:	2302      	movs	r3, #2
  }
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	fe00e800 	.word	0xfe00e800

080061f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	4608      	mov	r0, r1
 80061fe:	4611      	mov	r1, r2
 8006200:	461a      	mov	r2, r3
 8006202:	4603      	mov	r3, r0
 8006204:	817b      	strh	r3, [r7, #10]
 8006206:	460b      	mov	r3, r1
 8006208:	813b      	strh	r3, [r7, #8]
 800620a:	4613      	mov	r3, r2
 800620c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b20      	cmp	r3, #32
 8006218:	f040 80fd 	bne.w	8006416 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <HAL_I2C_Mem_Read+0x34>
 8006222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006224:	2b00      	cmp	r3, #0
 8006226:	d105      	bne.n	8006234 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800622e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e0f1      	b.n	8006418 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800623a:	2b01      	cmp	r3, #1
 800623c:	d101      	bne.n	8006242 <HAL_I2C_Mem_Read+0x4e>
 800623e:	2302      	movs	r3, #2
 8006240:	e0ea      	b.n	8006418 <HAL_I2C_Mem_Read+0x224>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800624a:	f7fd faf9 	bl	8003840 <HAL_GetTick>
 800624e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	2319      	movs	r3, #25
 8006256:	2201      	movs	r2, #1
 8006258:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 f9bd 	bl	80065dc <I2C_WaitOnFlagUntilTimeout>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e0d5      	b.n	8006418 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2222      	movs	r2, #34	; 0x22
 8006270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2240      	movs	r2, #64	; 0x40
 8006278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a3a      	ldr	r2, [r7, #32]
 8006286:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800628c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006294:	88f8      	ldrh	r0, [r7, #6]
 8006296:	893a      	ldrh	r2, [r7, #8]
 8006298:	8979      	ldrh	r1, [r7, #10]
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	9301      	str	r3, [sp, #4]
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	4603      	mov	r3, r0
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f921 	bl	80064ec <I2C_RequestMemoryRead>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e0ad      	b.n	8006418 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2bff      	cmp	r3, #255	; 0xff
 80062c4:	d90e      	bls.n	80062e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	22ff      	movs	r2, #255	; 0xff
 80062ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	8979      	ldrh	r1, [r7, #10]
 80062d4:	4b52      	ldr	r3, [pc, #328]	; (8006420 <HAL_I2C_Mem_Read+0x22c>)
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 fa9f 	bl	8006820 <I2C_TransferConfig>
 80062e2:	e00f      	b.n	8006304 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	8979      	ldrh	r1, [r7, #10]
 80062f6:	4b4a      	ldr	r3, [pc, #296]	; (8006420 <HAL_I2C_Mem_Read+0x22c>)
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 fa8e 	bl	8006820 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630a:	2200      	movs	r2, #0
 800630c:	2104      	movs	r1, #4
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 f964 	bl	80065dc <I2C_WaitOnFlagUntilTimeout>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e07c      	b.n	8006418 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006346:	b29b      	uxth	r3, r3
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d034      	beq.n	80063c4 <HAL_I2C_Mem_Read+0x1d0>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800635e:	2b00      	cmp	r3, #0
 8006360:	d130      	bne.n	80063c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006368:	2200      	movs	r2, #0
 800636a:	2180      	movs	r1, #128	; 0x80
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 f935 	bl	80065dc <I2C_WaitOnFlagUntilTimeout>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e04d      	b.n	8006418 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006380:	b29b      	uxth	r3, r3
 8006382:	2bff      	cmp	r3, #255	; 0xff
 8006384:	d90e      	bls.n	80063a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	22ff      	movs	r2, #255	; 0xff
 800638a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006390:	b2da      	uxtb	r2, r3
 8006392:	8979      	ldrh	r1, [r7, #10]
 8006394:	2300      	movs	r3, #0
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 fa3f 	bl	8006820 <I2C_TransferConfig>
 80063a2:	e00f      	b.n	80063c4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	8979      	ldrh	r1, [r7, #10]
 80063b6:	2300      	movs	r3, #0
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 fa2e 	bl	8006820 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d19a      	bne.n	8006304 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 f982 	bl	80066dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e01a      	b.n	8006418 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2220      	movs	r2, #32
 80063e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6859      	ldr	r1, [r3, #4]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <HAL_I2C_Mem_Read+0x230>)
 80063f6:	400b      	ands	r3, r1
 80063f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	e000      	b.n	8006418 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006416:	2302      	movs	r3, #2
  }
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	80002400 	.word	0x80002400
 8006424:	fe00e800 	.word	0xfe00e800

08006428 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006436:	b2db      	uxtb	r3, r3
}
 8006438:	4618      	mov	r0, r3
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	4608      	mov	r0, r1
 800644e:	4611      	mov	r1, r2
 8006450:	461a      	mov	r2, r3
 8006452:	4603      	mov	r3, r0
 8006454:	817b      	strh	r3, [r7, #10]
 8006456:	460b      	mov	r3, r1
 8006458:	813b      	strh	r3, [r7, #8]
 800645a:	4613      	mov	r3, r2
 800645c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	b2da      	uxtb	r2, r3
 8006462:	8979      	ldrh	r1, [r7, #10]
 8006464:	4b20      	ldr	r3, [pc, #128]	; (80064e8 <I2C_RequestMemoryWrite+0xa4>)
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 f9d7 	bl	8006820 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006472:	69fa      	ldr	r2, [r7, #28]
 8006474:	69b9      	ldr	r1, [r7, #24]
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 f8f0 	bl	800665c <I2C_WaitOnTXISFlagUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e02c      	b.n	80064e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d105      	bne.n	8006498 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800648c:	893b      	ldrh	r3, [r7, #8]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	629a      	str	r2, [r3, #40]	; 0x28
 8006496:	e015      	b.n	80064c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006498:	893b      	ldrh	r3, [r7, #8]
 800649a:	0a1b      	lsrs	r3, r3, #8
 800649c:	b29b      	uxth	r3, r3
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064a6:	69fa      	ldr	r2, [r7, #28]
 80064a8:	69b9      	ldr	r1, [r7, #24]
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 f8d6 	bl	800665c <I2C_WaitOnTXISFlagUntilTimeout>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e012      	b.n	80064e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064ba:	893b      	ldrh	r3, [r7, #8]
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	2200      	movs	r2, #0
 80064cc:	2180      	movs	r1, #128	; 0x80
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f884 	bl	80065dc <I2C_WaitOnFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e000      	b.n	80064e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	80002000 	.word	0x80002000

080064ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af02      	add	r7, sp, #8
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	4608      	mov	r0, r1
 80064f6:	4611      	mov	r1, r2
 80064f8:	461a      	mov	r2, r3
 80064fa:	4603      	mov	r3, r0
 80064fc:	817b      	strh	r3, [r7, #10]
 80064fe:	460b      	mov	r3, r1
 8006500:	813b      	strh	r3, [r7, #8]
 8006502:	4613      	mov	r3, r2
 8006504:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006506:	88fb      	ldrh	r3, [r7, #6]
 8006508:	b2da      	uxtb	r2, r3
 800650a:	8979      	ldrh	r1, [r7, #10]
 800650c:	4b20      	ldr	r3, [pc, #128]	; (8006590 <I2C_RequestMemoryRead+0xa4>)
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	2300      	movs	r3, #0
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 f984 	bl	8006820 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006518:	69fa      	ldr	r2, [r7, #28]
 800651a:	69b9      	ldr	r1, [r7, #24]
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 f89d 	bl	800665c <I2C_WaitOnTXISFlagUntilTimeout>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e02c      	b.n	8006586 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800652c:	88fb      	ldrh	r3, [r7, #6]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d105      	bne.n	800653e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006532:	893b      	ldrh	r3, [r7, #8]
 8006534:	b2da      	uxtb	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	629a      	str	r2, [r3, #40]	; 0x28
 800653c:	e015      	b.n	800656a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800653e:	893b      	ldrh	r3, [r7, #8]
 8006540:	0a1b      	lsrs	r3, r3, #8
 8006542:	b29b      	uxth	r3, r3
 8006544:	b2da      	uxtb	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	69b9      	ldr	r1, [r7, #24]
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 f883 	bl	800665c <I2C_WaitOnTXISFlagUntilTimeout>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e012      	b.n	8006586 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006560:	893b      	ldrh	r3, [r7, #8]
 8006562:	b2da      	uxtb	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	2200      	movs	r2, #0
 8006572:	2140      	movs	r1, #64	; 0x40
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 f831 	bl	80065dc <I2C_WaitOnFlagUntilTimeout>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e000      	b.n	8006586 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	80002000 	.word	0x80002000

08006594 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d103      	bne.n	80065b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2200      	movs	r2, #0
 80065b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d007      	beq.n	80065d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0201 	orr.w	r2, r2, #1
 80065ce:	619a      	str	r2, [r3, #24]
  }
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	4613      	mov	r3, r2
 80065ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065ec:	e022      	b.n	8006634 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f4:	d01e      	beq.n	8006634 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f6:	f7fd f923 	bl	8003840 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d302      	bcc.n	800660c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d113      	bne.n	8006634 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006610:	f043 0220 	orr.w	r2, r3, #32
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2220      	movs	r2, #32
 800661c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e00f      	b.n	8006654 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699a      	ldr	r2, [r3, #24]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	4013      	ands	r3, r2
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	429a      	cmp	r2, r3
 8006642:	bf0c      	ite	eq
 8006644:	2301      	moveq	r3, #1
 8006646:	2300      	movne	r3, #0
 8006648:	b2db      	uxtb	r3, r3
 800664a:	461a      	mov	r2, r3
 800664c:	79fb      	ldrb	r3, [r7, #7]
 800664e:	429a      	cmp	r2, r3
 8006650:	d0cd      	beq.n	80065ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006668:	e02c      	b.n	80066c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	68b9      	ldr	r1, [r7, #8]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 f870 	bl	8006754 <I2C_IsAcknowledgeFailed>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e02a      	b.n	80066d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006684:	d01e      	beq.n	80066c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006686:	f7fd f8db 	bl	8003840 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	429a      	cmp	r2, r3
 8006694:	d302      	bcc.n	800669c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d113      	bne.n	80066c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a0:	f043 0220 	orr.w	r2, r3, #32
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e007      	b.n	80066d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d1cb      	bne.n	800666a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066e8:	e028      	b.n	800673c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	68b9      	ldr	r1, [r7, #8]
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 f830 	bl	8006754 <I2C_IsAcknowledgeFailed>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e026      	b.n	800674c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066fe:	f7fd f89f 	bl	8003840 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	429a      	cmp	r2, r3
 800670c:	d302      	bcc.n	8006714 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d113      	bne.n	800673c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006718:	f043 0220 	orr.w	r2, r3, #32
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e007      	b.n	800674c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b20      	cmp	r3, #32
 8006748:	d1cf      	bne.n	80066ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f003 0310 	and.w	r3, r3, #16
 800676a:	2b10      	cmp	r3, #16
 800676c:	d151      	bne.n	8006812 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800676e:	e022      	b.n	80067b6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006776:	d01e      	beq.n	80067b6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006778:	f7fd f862 	bl	8003840 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	429a      	cmp	r2, r3
 8006786:	d302      	bcc.n	800678e <I2C_IsAcknowledgeFailed+0x3a>
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d113      	bne.n	80067b6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006792:	f043 0220 	orr.w	r2, r3, #32
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2220      	movs	r2, #32
 800679e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e02e      	b.n	8006814 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	f003 0320 	and.w	r3, r3, #32
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	d1d5      	bne.n	8006770 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2210      	movs	r2, #16
 80067ca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2220      	movs	r2, #32
 80067d2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f7ff fedd 	bl	8006594 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6859      	ldr	r1, [r3, #4]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	4b0d      	ldr	r3, [pc, #52]	; (800681c <I2C_IsAcknowledgeFailed+0xc8>)
 80067e6:	400b      	ands	r3, r1
 80067e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ee:	f043 0204 	orr.w	r2, r3, #4
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e000      	b.n	8006814 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	fe00e800 	.word	0xfe00e800

08006820 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	607b      	str	r3, [r7, #4]
 800682a:	460b      	mov	r3, r1
 800682c:	817b      	strh	r3, [r7, #10]
 800682e:	4613      	mov	r3, r2
 8006830:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	0d5b      	lsrs	r3, r3, #21
 800683c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006840:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <I2C_TransferConfig+0x58>)
 8006842:	430b      	orrs	r3, r1
 8006844:	43db      	mvns	r3, r3
 8006846:	ea02 0103 	and.w	r1, r2, r3
 800684a:	897b      	ldrh	r3, [r7, #10]
 800684c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006850:	7a7b      	ldrb	r3, [r7, #9]
 8006852:	041b      	lsls	r3, r3, #16
 8006854:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	431a      	orrs	r2, r3
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	431a      	orrs	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800686a:	bf00      	nop
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	03ff63ff 	.word	0x03ff63ff

0800687c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e0bf      	b.n	8006a0e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fa ff66 	bl	8001774 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80068be:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6999      	ldr	r1, [r3, #24]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80068d4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6899      	ldr	r1, [r3, #8]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	4b4a      	ldr	r3, [pc, #296]	; (8006a18 <HAL_LTDC_Init+0x19c>)
 80068f0:	400b      	ands	r3, r1
 80068f2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	041b      	lsls	r3, r3, #16
 80068fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6899      	ldr	r1, [r3, #8]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	699a      	ldr	r2, [r3, #24]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	431a      	orrs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68d9      	ldr	r1, [r3, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	4b3e      	ldr	r3, [pc, #248]	; (8006a18 <HAL_LTDC_Init+0x19c>)
 800691e:	400b      	ands	r3, r1
 8006920:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	041b      	lsls	r3, r3, #16
 8006928:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68d9      	ldr	r1, [r3, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a1a      	ldr	r2, [r3, #32]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	431a      	orrs	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6919      	ldr	r1, [r3, #16]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	4b33      	ldr	r3, [pc, #204]	; (8006a18 <HAL_LTDC_Init+0x19c>)
 800694c:	400b      	ands	r3, r1
 800694e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	041b      	lsls	r3, r3, #16
 8006956:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6919      	ldr	r1, [r3, #16]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	431a      	orrs	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6959      	ldr	r1, [r3, #20]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	4b27      	ldr	r3, [pc, #156]	; (8006a18 <HAL_LTDC_Init+0x19c>)
 800697a:	400b      	ands	r3, r1
 800697c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006982:	041b      	lsls	r3, r3, #16
 8006984:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6959      	ldr	r1, [r3, #20]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	431a      	orrs	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069a2:	021b      	lsls	r3, r3, #8
 80069a4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80069ac:	041b      	lsls	r3, r3, #16
 80069ae:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80069be:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0206 	orr.w	r2, r2, #6
 80069ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0201 	orr.w	r2, r2, #1
 80069fa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	f000f800 	.word	0xf000f800

08006a1c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a32:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d023      	beq.n	8006a86 <HAL_LTDC_IRQHandler+0x6a>
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f003 0304 	and.w	r3, r3, #4
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d01e      	beq.n	8006a86 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0204 	bic.w	r2, r2, #4
 8006a56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2204      	movs	r2, #4
 8006a5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a66:	f043 0201 	orr.w	r2, r3, #1
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2204      	movs	r2, #4
 8006a74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f86f 	bl	8006b64 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d023      	beq.n	8006ad8 <HAL_LTDC_IRQHandler+0xbc>
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d01e      	beq.n	8006ad8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0202 	bic.w	r2, r2, #2
 8006aa8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ab8:	f043 0202 	orr.w	r2, r3, #2
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2204      	movs	r2, #4
 8006ac6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f846 	bl	8006b64 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d01b      	beq.n	8006b1a <HAL_LTDC_IRQHandler+0xfe>
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d016      	beq.n	8006b1a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0201 	bic.w	r2, r2, #1
 8006afa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2201      	movs	r2, #1
 8006b02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f82f 	bl	8006b78 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f003 0308 	and.w	r3, r3, #8
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d01b      	beq.n	8006b5c <HAL_LTDC_IRQHandler+0x140>
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f003 0308 	and.w	r3, r3, #8
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d016      	beq.n	8006b5c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 0208 	bic.w	r2, r2, #8
 8006b3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2208      	movs	r2, #8
 8006b44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f818 	bl	8006b8c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006b5c:	bf00      	nop
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006ba0:	b5b0      	push	{r4, r5, r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d101      	bne.n	8006bba <HAL_LTDC_ConfigLayer+0x1a>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	e02c      	b.n	8006c14 <HAL_LTDC_ConfigLayer+0x74>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2134      	movs	r1, #52	; 0x34
 8006bd0:	fb01 f303 	mul.w	r3, r1, r3
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	4614      	mov	r4, r2
 8006bde:	461d      	mov	r5, r3
 8006be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bec:	682b      	ldr	r3, [r5, #0]
 8006bee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 f811 	bl	8006c1c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bdb0      	pop	{r4, r5, r7, pc}

08006c1c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b089      	sub	sp, #36	; 0x24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	0c1b      	lsrs	r3, r3, #16
 8006c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c38:	4413      	add	r3, r2
 8006c3a:	041b      	lsls	r3, r3, #16
 8006c3c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	01db      	lsls	r3, r3, #7
 8006c48:	4413      	add	r3, r2
 8006c4a:	3384      	adds	r3, #132	; 0x84
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	6812      	ldr	r2, [r2, #0]
 8006c52:	4611      	mov	r1, r2
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	01d2      	lsls	r2, r2, #7
 8006c58:	440a      	add	r2, r1
 8006c5a:	3284      	adds	r2, #132	; 0x84
 8006c5c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c60:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	0c1b      	lsrs	r3, r3, #16
 8006c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c72:	4413      	add	r3, r2
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	01db      	lsls	r3, r3, #7
 8006c80:	440b      	add	r3, r1
 8006c82:	3384      	adds	r3, #132	; 0x84
 8006c84:	4619      	mov	r1, r3
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	68da      	ldr	r2, [r3, #12]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c9a:	4413      	add	r3, r2
 8006c9c:	041b      	lsls	r3, r3, #16
 8006c9e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	01db      	lsls	r3, r3, #7
 8006caa:	4413      	add	r3, r2
 8006cac:	3384      	adds	r3, #132	; 0x84
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	6812      	ldr	r2, [r2, #0]
 8006cb4:	4611      	mov	r1, r2
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	01d2      	lsls	r2, r2, #7
 8006cba:	440a      	add	r2, r1
 8006cbc:	3284      	adds	r2, #132	; 0x84
 8006cbe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006cc2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	689a      	ldr	r2, [r3, #8]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cd2:	4413      	add	r3, r2
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	01db      	lsls	r3, r3, #7
 8006ce0:	440b      	add	r3, r1
 8006ce2:	3384      	adds	r3, #132	; 0x84
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	01db      	lsls	r3, r3, #7
 8006cf6:	4413      	add	r3, r2
 8006cf8:	3384      	adds	r3, #132	; 0x84
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	6812      	ldr	r2, [r2, #0]
 8006d00:	4611      	mov	r1, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	01d2      	lsls	r2, r2, #7
 8006d06:	440a      	add	r2, r1
 8006d08:	3284      	adds	r2, #132	; 0x84
 8006d0a:	f023 0307 	bic.w	r3, r3, #7
 8006d0e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	461a      	mov	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	01db      	lsls	r3, r3, #7
 8006d1a:	4413      	add	r3, r2
 8006d1c:	3384      	adds	r3, #132	; 0x84
 8006d1e:	461a      	mov	r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d2c:	021b      	lsls	r3, r3, #8
 8006d2e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d36:	041b      	lsls	r3, r3, #16
 8006d38:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	061b      	lsls	r3, r3, #24
 8006d40:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	01db      	lsls	r3, r3, #7
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3384      	adds	r3, #132	; 0x84
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	01db      	lsls	r3, r3, #7
 8006d5c:	4413      	add	r3, r2
 8006d5e:	3384      	adds	r3, #132	; 0x84
 8006d60:	461a      	mov	r2, r3
 8006d62:	2300      	movs	r3, #0
 8006d64:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	431a      	orrs	r2, r3
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	431a      	orrs	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	01db      	lsls	r3, r3, #7
 8006d80:	440b      	add	r3, r1
 8006d82:	3384      	adds	r3, #132	; 0x84
 8006d84:	4619      	mov	r1, r3
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	461a      	mov	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	01db      	lsls	r3, r3, #7
 8006d96:	4413      	add	r3, r2
 8006d98:	3384      	adds	r3, #132	; 0x84
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	6812      	ldr	r2, [r2, #0]
 8006da0:	4611      	mov	r1, r2
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	01d2      	lsls	r2, r2, #7
 8006da6:	440a      	add	r2, r1
 8006da8:	3284      	adds	r2, #132	; 0x84
 8006daa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006dae:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	461a      	mov	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	01db      	lsls	r3, r3, #7
 8006dba:	4413      	add	r3, r2
 8006dbc:	3384      	adds	r3, #132	; 0x84
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	01db      	lsls	r3, r3, #7
 8006dd0:	4413      	add	r3, r2
 8006dd2:	3384      	adds	r3, #132	; 0x84
 8006dd4:	69da      	ldr	r2, [r3, #28]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	01db      	lsls	r3, r3, #7
 8006de0:	440b      	add	r3, r1
 8006de2:	3384      	adds	r3, #132	; 0x84
 8006de4:	4619      	mov	r1, r3
 8006de6:	4b58      	ldr	r3, [pc, #352]	; (8006f48 <LTDC_SetConfig+0x32c>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	69da      	ldr	r2, [r3, #28]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	68f9      	ldr	r1, [r7, #12]
 8006df6:	6809      	ldr	r1, [r1, #0]
 8006df8:	4608      	mov	r0, r1
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	01c9      	lsls	r1, r1, #7
 8006dfe:	4401      	add	r1, r0
 8006e00:	3184      	adds	r1, #132	; 0x84
 8006e02:	4313      	orrs	r3, r2
 8006e04:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	01db      	lsls	r3, r3, #7
 8006e10:	4413      	add	r3, r2
 8006e12:	3384      	adds	r3, #132	; 0x84
 8006e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	01db      	lsls	r3, r3, #7
 8006e20:	4413      	add	r3, r2
 8006e22:	3384      	adds	r3, #132	; 0x84
 8006e24:	461a      	mov	r2, r3
 8006e26:	2300      	movs	r3, #0
 8006e28:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	01db      	lsls	r3, r3, #7
 8006e34:	4413      	add	r3, r2
 8006e36:	3384      	adds	r3, #132	; 0x84
 8006e38:	461a      	mov	r2, r3
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d102      	bne.n	8006e4e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006e48:	2304      	movs	r3, #4
 8006e4a:	61fb      	str	r3, [r7, #28]
 8006e4c:	e01b      	b.n	8006e86 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d102      	bne.n	8006e5c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006e56:	2303      	movs	r3, #3
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	e014      	b.n	8006e86 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d00b      	beq.n	8006e7c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d007      	beq.n	8006e7c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d003      	beq.n	8006e7c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e78:	2b07      	cmp	r3, #7
 8006e7a:	d102      	bne.n	8006e82 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	61fb      	str	r3, [r7, #28]
 8006e80:	e001      	b.n	8006e86 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006e82:	2301      	movs	r3, #1
 8006e84:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	01db      	lsls	r3, r3, #7
 8006e90:	4413      	add	r3, r2
 8006e92:	3384      	adds	r3, #132	; 0x84
 8006e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	6812      	ldr	r2, [r2, #0]
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	01d2      	lsls	r2, r2, #7
 8006ea0:	440a      	add	r2, r1
 8006ea2:	3284      	adds	r2, #132	; 0x84
 8006ea4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006ea8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eae:	69fa      	ldr	r2, [r7, #28]
 8006eb0:	fb02 f303 	mul.w	r3, r2, r3
 8006eb4:	041a      	lsls	r2, r3, #16
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	6859      	ldr	r1, [r3, #4]
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	1acb      	subs	r3, r1, r3
 8006ec0:	69f9      	ldr	r1, [r7, #28]
 8006ec2:	fb01 f303 	mul.w	r3, r1, r3
 8006ec6:	3303      	adds	r3, #3
 8006ec8:	68f9      	ldr	r1, [r7, #12]
 8006eca:	6809      	ldr	r1, [r1, #0]
 8006ecc:	4608      	mov	r0, r1
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	01c9      	lsls	r1, r1, #7
 8006ed2:	4401      	add	r1, r0
 8006ed4:	3184      	adds	r1, #132	; 0x84
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	01db      	lsls	r3, r3, #7
 8006ee4:	4413      	add	r3, r2
 8006ee6:	3384      	adds	r3, #132	; 0x84
 8006ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4619      	mov	r1, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	01db      	lsls	r3, r3, #7
 8006ef4:	440b      	add	r3, r1
 8006ef6:	3384      	adds	r3, #132	; 0x84
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4b14      	ldr	r3, [pc, #80]	; (8006f4c <LTDC_SetConfig+0x330>)
 8006efc:	4013      	ands	r3, r2
 8006efe:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	01db      	lsls	r3, r3, #7
 8006f0a:	4413      	add	r3, r2
 8006f0c:	3384      	adds	r3, #132	; 0x84
 8006f0e:	461a      	mov	r2, r3
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	01db      	lsls	r3, r3, #7
 8006f20:	4413      	add	r3, r2
 8006f22:	3384      	adds	r3, #132	; 0x84
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	6812      	ldr	r2, [r2, #0]
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	01d2      	lsls	r2, r2, #7
 8006f30:	440a      	add	r2, r1
 8006f32:	3284      	adds	r2, #132	; 0x84
 8006f34:	f043 0301 	orr.w	r3, r3, #1
 8006f38:	6013      	str	r3, [r2, #0]
}
 8006f3a:	bf00      	nop
 8006f3c:	3724      	adds	r7, #36	; 0x24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	fffff8f8 	.word	0xfffff8f8
 8006f4c:	fffff800 	.word	0xfffff800

08006f50 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8006f62:	2200      	movs	r2, #0
 8006f64:	e001      	b.n	8006f6a <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8006f66:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d102      	bne.n	8006f7c <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8006f76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006f7a:	e000      	b.n	8006f7e <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d102      	bne.n	8006f90 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8006f8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f8e:	e000      	b.n	8006f92 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8006f90:	2200      	movs	r2, #0
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9a:	1e5a      	subs	r2, r3, #1
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa8:	4413      	add	r3, r2
 8006faa:	1e5a      	subs	r2, r3, #1
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb8:	441a      	add	r2, r3
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	4413      	add	r3, r2
 8006fc0:	1e5a      	subs	r2, r3, #1
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	441a      	add	r2, r3
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd4:	441a      	add	r2, r3
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fda:	4413      	add	r3, r2
 8006fdc:	1e5a      	subs	r2, r3, #1
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ff4:	4b05      	ldr	r3, [pc, #20]	; (800700c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a04      	ldr	r2, [pc, #16]	; (800700c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ffe:	6013      	str	r3, [r2, #0]
}
 8007000:	bf00      	nop
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40007000 	.word	0x40007000

08007010 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800701a:	4b23      	ldr	r3, [pc, #140]	; (80070a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	4a22      	ldr	r2, [pc, #136]	; (80070a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007024:	6413      	str	r3, [r2, #64]	; 0x40
 8007026:	4b20      	ldr	r3, [pc, #128]	; (80070a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800702e:	603b      	str	r3, [r7, #0]
 8007030:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007032:	4b1e      	ldr	r3, [pc, #120]	; (80070ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a1d      	ldr	r2, [pc, #116]	; (80070ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8007038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800703c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800703e:	f7fc fbff 	bl	8003840 <HAL_GetTick>
 8007042:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007044:	e009      	b.n	800705a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007046:	f7fc fbfb 	bl	8003840 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007054:	d901      	bls.n	800705a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e022      	b.n	80070a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800705a:	4b14      	ldr	r3, [pc, #80]	; (80070ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007066:	d1ee      	bne.n	8007046 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007068:	4b10      	ldr	r3, [pc, #64]	; (80070ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a0f      	ldr	r2, [pc, #60]	; (80070ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800706e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007072:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007074:	f7fc fbe4 	bl	8003840 <HAL_GetTick>
 8007078:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800707a:	e009      	b.n	8007090 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800707c:	f7fc fbe0 	bl	8003840 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800708a:	d901      	bls.n	8007090 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e007      	b.n	80070a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007090:	4b06      	ldr	r3, [pc, #24]	; (80070ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800709c:	d1ee      	bne.n	800707c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	40023800 	.word	0x40023800
 80070ac:	40007000 	.word	0x40007000

080070b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80070b8:	2300      	movs	r3, #0
 80070ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e25e      	b.n	8007584 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f000 8087 	beq.w	80071e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80070d4:	4b96      	ldr	r3, [pc, #600]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f003 030c 	and.w	r3, r3, #12
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d00c      	beq.n	80070fa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070e0:	4b93      	ldr	r3, [pc, #588]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f003 030c 	and.w	r3, r3, #12
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d112      	bne.n	8007112 <HAL_RCC_OscConfig+0x62>
 80070ec:	4b90      	ldr	r3, [pc, #576]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070f8:	d10b      	bne.n	8007112 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070fa:	4b8d      	ldr	r3, [pc, #564]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d06c      	beq.n	80071e0 <HAL_RCC_OscConfig+0x130>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d168      	bne.n	80071e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e238      	b.n	8007584 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800711a:	d106      	bne.n	800712a <HAL_RCC_OscConfig+0x7a>
 800711c:	4b84      	ldr	r3, [pc, #528]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a83      	ldr	r2, [pc, #524]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 8007122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	e02e      	b.n	8007188 <HAL_RCC_OscConfig+0xd8>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10c      	bne.n	800714c <HAL_RCC_OscConfig+0x9c>
 8007132:	4b7f      	ldr	r3, [pc, #508]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a7e      	ldr	r2, [pc, #504]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 8007138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800713c:	6013      	str	r3, [r2, #0]
 800713e:	4b7c      	ldr	r3, [pc, #496]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a7b      	ldr	r2, [pc, #492]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 8007144:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007148:	6013      	str	r3, [r2, #0]
 800714a:	e01d      	b.n	8007188 <HAL_RCC_OscConfig+0xd8>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007154:	d10c      	bne.n	8007170 <HAL_RCC_OscConfig+0xc0>
 8007156:	4b76      	ldr	r3, [pc, #472]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a75      	ldr	r2, [pc, #468]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 800715c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	4b73      	ldr	r3, [pc, #460]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a72      	ldr	r2, [pc, #456]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 8007168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	e00b      	b.n	8007188 <HAL_RCC_OscConfig+0xd8>
 8007170:	4b6f      	ldr	r3, [pc, #444]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a6e      	ldr	r2, [pc, #440]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 8007176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800717a:	6013      	str	r3, [r2, #0]
 800717c:	4b6c      	ldr	r3, [pc, #432]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a6b      	ldr	r2, [pc, #428]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 8007182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d013      	beq.n	80071b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007190:	f7fc fb56 	bl	8003840 <HAL_GetTick>
 8007194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007196:	e008      	b.n	80071aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007198:	f7fc fb52 	bl	8003840 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b64      	cmp	r3, #100	; 0x64
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e1ec      	b.n	8007584 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071aa:	4b61      	ldr	r3, [pc, #388]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0f0      	beq.n	8007198 <HAL_RCC_OscConfig+0xe8>
 80071b6:	e014      	b.n	80071e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b8:	f7fc fb42 	bl	8003840 <HAL_GetTick>
 80071bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071c0:	f7fc fb3e 	bl	8003840 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b64      	cmp	r3, #100	; 0x64
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e1d8      	b.n	8007584 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071d2:	4b57      	ldr	r3, [pc, #348]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1f0      	bne.n	80071c0 <HAL_RCC_OscConfig+0x110>
 80071de:	e000      	b.n	80071e2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d069      	beq.n	80072c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071ee:	4b50      	ldr	r3, [pc, #320]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f003 030c 	and.w	r3, r3, #12
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00b      	beq.n	8007212 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071fa:	4b4d      	ldr	r3, [pc, #308]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 030c 	and.w	r3, r3, #12
 8007202:	2b08      	cmp	r3, #8
 8007204:	d11c      	bne.n	8007240 <HAL_RCC_OscConfig+0x190>
 8007206:	4b4a      	ldr	r3, [pc, #296]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d116      	bne.n	8007240 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007212:	4b47      	ldr	r3, [pc, #284]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b00      	cmp	r3, #0
 800721c:	d005      	beq.n	800722a <HAL_RCC_OscConfig+0x17a>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d001      	beq.n	800722a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e1ac      	b.n	8007584 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800722a:	4b41      	ldr	r3, [pc, #260]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	493d      	ldr	r1, [pc, #244]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 800723a:	4313      	orrs	r3, r2
 800723c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800723e:	e040      	b.n	80072c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d023      	beq.n	8007290 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007248:	4b39      	ldr	r3, [pc, #228]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a38      	ldr	r2, [pc, #224]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 800724e:	f043 0301 	orr.w	r3, r3, #1
 8007252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007254:	f7fc faf4 	bl	8003840 <HAL_GetTick>
 8007258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800725a:	e008      	b.n	800726e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800725c:	f7fc faf0 	bl	8003840 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e18a      	b.n	8007584 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800726e:	4b30      	ldr	r3, [pc, #192]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0f0      	beq.n	800725c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800727a:	4b2d      	ldr	r3, [pc, #180]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	4929      	ldr	r1, [pc, #164]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 800728a:	4313      	orrs	r3, r2
 800728c:	600b      	str	r3, [r1, #0]
 800728e:	e018      	b.n	80072c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007290:	4b27      	ldr	r3, [pc, #156]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a26      	ldr	r2, [pc, #152]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 8007296:	f023 0301 	bic.w	r3, r3, #1
 800729a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800729c:	f7fc fad0 	bl	8003840 <HAL_GetTick>
 80072a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072a2:	e008      	b.n	80072b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072a4:	f7fc facc 	bl	8003840 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e166      	b.n	8007584 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072b6:	4b1e      	ldr	r3, [pc, #120]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1f0      	bne.n	80072a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0308 	and.w	r3, r3, #8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d038      	beq.n	8007340 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d019      	beq.n	800730a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072d6:	4b16      	ldr	r3, [pc, #88]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 80072d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072da:	4a15      	ldr	r2, [pc, #84]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 80072dc:	f043 0301 	orr.w	r3, r3, #1
 80072e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072e2:	f7fc faad 	bl	8003840 <HAL_GetTick>
 80072e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072e8:	e008      	b.n	80072fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072ea:	f7fc faa9 	bl	8003840 <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d901      	bls.n	80072fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e143      	b.n	8007584 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072fc:	4b0c      	ldr	r3, [pc, #48]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 80072fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0f0      	beq.n	80072ea <HAL_RCC_OscConfig+0x23a>
 8007308:	e01a      	b.n	8007340 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800730a:	4b09      	ldr	r3, [pc, #36]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 800730c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800730e:	4a08      	ldr	r2, [pc, #32]	; (8007330 <HAL_RCC_OscConfig+0x280>)
 8007310:	f023 0301 	bic.w	r3, r3, #1
 8007314:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007316:	f7fc fa93 	bl	8003840 <HAL_GetTick>
 800731a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800731c:	e00a      	b.n	8007334 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800731e:	f7fc fa8f 	bl	8003840 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	2b02      	cmp	r3, #2
 800732a:	d903      	bls.n	8007334 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e129      	b.n	8007584 <HAL_RCC_OscConfig+0x4d4>
 8007330:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007334:	4b95      	ldr	r3, [pc, #596]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 8007336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1ee      	bne.n	800731e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0304 	and.w	r3, r3, #4
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 80a4 	beq.w	8007496 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800734e:	4b8f      	ldr	r3, [pc, #572]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10d      	bne.n	8007376 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800735a:	4b8c      	ldr	r3, [pc, #560]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 800735c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735e:	4a8b      	ldr	r2, [pc, #556]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 8007360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007364:	6413      	str	r3, [r2, #64]	; 0x40
 8007366:	4b89      	ldr	r3, [pc, #548]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007372:	2301      	movs	r3, #1
 8007374:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007376:	4b86      	ldr	r3, [pc, #536]	; (8007590 <HAL_RCC_OscConfig+0x4e0>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800737e:	2b00      	cmp	r3, #0
 8007380:	d118      	bne.n	80073b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007382:	4b83      	ldr	r3, [pc, #524]	; (8007590 <HAL_RCC_OscConfig+0x4e0>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a82      	ldr	r2, [pc, #520]	; (8007590 <HAL_RCC_OscConfig+0x4e0>)
 8007388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800738c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800738e:	f7fc fa57 	bl	8003840 <HAL_GetTick>
 8007392:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007394:	e008      	b.n	80073a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007396:	f7fc fa53 	bl	8003840 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b64      	cmp	r3, #100	; 0x64
 80073a2:	d901      	bls.n	80073a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e0ed      	b.n	8007584 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073a8:	4b79      	ldr	r3, [pc, #484]	; (8007590 <HAL_RCC_OscConfig+0x4e0>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d0f0      	beq.n	8007396 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d106      	bne.n	80073ca <HAL_RCC_OscConfig+0x31a>
 80073bc:	4b73      	ldr	r3, [pc, #460]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 80073be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c0:	4a72      	ldr	r2, [pc, #456]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 80073c2:	f043 0301 	orr.w	r3, r3, #1
 80073c6:	6713      	str	r3, [r2, #112]	; 0x70
 80073c8:	e02d      	b.n	8007426 <HAL_RCC_OscConfig+0x376>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10c      	bne.n	80073ec <HAL_RCC_OscConfig+0x33c>
 80073d2:	4b6e      	ldr	r3, [pc, #440]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 80073d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d6:	4a6d      	ldr	r2, [pc, #436]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 80073d8:	f023 0301 	bic.w	r3, r3, #1
 80073dc:	6713      	str	r3, [r2, #112]	; 0x70
 80073de:	4b6b      	ldr	r3, [pc, #428]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 80073e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e2:	4a6a      	ldr	r2, [pc, #424]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 80073e4:	f023 0304 	bic.w	r3, r3, #4
 80073e8:	6713      	str	r3, [r2, #112]	; 0x70
 80073ea:	e01c      	b.n	8007426 <HAL_RCC_OscConfig+0x376>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	2b05      	cmp	r3, #5
 80073f2:	d10c      	bne.n	800740e <HAL_RCC_OscConfig+0x35e>
 80073f4:	4b65      	ldr	r3, [pc, #404]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 80073f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f8:	4a64      	ldr	r2, [pc, #400]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 80073fa:	f043 0304 	orr.w	r3, r3, #4
 80073fe:	6713      	str	r3, [r2, #112]	; 0x70
 8007400:	4b62      	ldr	r3, [pc, #392]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 8007402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007404:	4a61      	ldr	r2, [pc, #388]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 8007406:	f043 0301 	orr.w	r3, r3, #1
 800740a:	6713      	str	r3, [r2, #112]	; 0x70
 800740c:	e00b      	b.n	8007426 <HAL_RCC_OscConfig+0x376>
 800740e:	4b5f      	ldr	r3, [pc, #380]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 8007410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007412:	4a5e      	ldr	r2, [pc, #376]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 8007414:	f023 0301 	bic.w	r3, r3, #1
 8007418:	6713      	str	r3, [r2, #112]	; 0x70
 800741a:	4b5c      	ldr	r3, [pc, #368]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 800741c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741e:	4a5b      	ldr	r2, [pc, #364]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 8007420:	f023 0304 	bic.w	r3, r3, #4
 8007424:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d015      	beq.n	800745a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800742e:	f7fc fa07 	bl	8003840 <HAL_GetTick>
 8007432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007434:	e00a      	b.n	800744c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007436:	f7fc fa03 	bl	8003840 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	f241 3288 	movw	r2, #5000	; 0x1388
 8007444:	4293      	cmp	r3, r2
 8007446:	d901      	bls.n	800744c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e09b      	b.n	8007584 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800744c:	4b4f      	ldr	r3, [pc, #316]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 800744e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0ee      	beq.n	8007436 <HAL_RCC_OscConfig+0x386>
 8007458:	e014      	b.n	8007484 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800745a:	f7fc f9f1 	bl	8003840 <HAL_GetTick>
 800745e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007460:	e00a      	b.n	8007478 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007462:	f7fc f9ed 	bl	8003840 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007470:	4293      	cmp	r3, r2
 8007472:	d901      	bls.n	8007478 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e085      	b.n	8007584 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007478:	4b44      	ldr	r3, [pc, #272]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 800747a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747c:	f003 0302 	and.w	r3, r3, #2
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1ee      	bne.n	8007462 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007484:	7dfb      	ldrb	r3, [r7, #23]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d105      	bne.n	8007496 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800748a:	4b40      	ldr	r3, [pc, #256]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	4a3f      	ldr	r2, [pc, #252]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 8007490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007494:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d071      	beq.n	8007582 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800749e:	4b3b      	ldr	r3, [pc, #236]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f003 030c 	and.w	r3, r3, #12
 80074a6:	2b08      	cmp	r3, #8
 80074a8:	d069      	beq.n	800757e <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d14b      	bne.n	800754a <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074b2:	4b36      	ldr	r3, [pc, #216]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a35      	ldr	r2, [pc, #212]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 80074b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074be:	f7fc f9bf 	bl	8003840 <HAL_GetTick>
 80074c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074c4:	e008      	b.n	80074d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074c6:	f7fc f9bb 	bl	8003840 <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d901      	bls.n	80074d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e055      	b.n	8007584 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074d8:	4b2c      	ldr	r3, [pc, #176]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1f0      	bne.n	80074c6 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	69da      	ldr	r2, [r3, #28]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	431a      	orrs	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	019b      	lsls	r3, r3, #6
 80074f4:	431a      	orrs	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fa:	085b      	lsrs	r3, r3, #1
 80074fc:	3b01      	subs	r3, #1
 80074fe:	041b      	lsls	r3, r3, #16
 8007500:	431a      	orrs	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007506:	061b      	lsls	r3, r3, #24
 8007508:	431a      	orrs	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750e:	071b      	lsls	r3, r3, #28
 8007510:	491e      	ldr	r1, [pc, #120]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 8007512:	4313      	orrs	r3, r2
 8007514:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007516:	4b1d      	ldr	r3, [pc, #116]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a1c      	ldr	r2, [pc, #112]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 800751c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007522:	f7fc f98d 	bl	8003840 <HAL_GetTick>
 8007526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007528:	e008      	b.n	800753c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800752a:	f7fc f989 	bl	8003840 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d901      	bls.n	800753c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e023      	b.n	8007584 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800753c:	4b13      	ldr	r3, [pc, #76]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0f0      	beq.n	800752a <HAL_RCC_OscConfig+0x47a>
 8007548:	e01b      	b.n	8007582 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800754a:	4b10      	ldr	r3, [pc, #64]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a0f      	ldr	r2, [pc, #60]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 8007550:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007556:	f7fc f973 	bl	8003840 <HAL_GetTick>
 800755a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800755c:	e008      	b.n	8007570 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800755e:	f7fc f96f 	bl	8003840 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	2b02      	cmp	r3, #2
 800756a:	d901      	bls.n	8007570 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e009      	b.n	8007584 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007570:	4b06      	ldr	r3, [pc, #24]	; (800758c <HAL_RCC_OscConfig+0x4dc>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1f0      	bne.n	800755e <HAL_RCC_OscConfig+0x4ae>
 800757c:	e001      	b.n	8007582 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e000      	b.n	8007584 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	40023800 	.word	0x40023800
 8007590:	40007000 	.word	0x40007000

08007594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e0ce      	b.n	800774a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075ac:	4b69      	ldr	r3, [pc, #420]	; (8007754 <HAL_RCC_ClockConfig+0x1c0>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 030f 	and.w	r3, r3, #15
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d910      	bls.n	80075dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ba:	4b66      	ldr	r3, [pc, #408]	; (8007754 <HAL_RCC_ClockConfig+0x1c0>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f023 020f 	bic.w	r2, r3, #15
 80075c2:	4964      	ldr	r1, [pc, #400]	; (8007754 <HAL_RCC_ClockConfig+0x1c0>)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ca:	4b62      	ldr	r3, [pc, #392]	; (8007754 <HAL_RCC_ClockConfig+0x1c0>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 030f 	and.w	r3, r3, #15
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d001      	beq.n	80075dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e0b6      	b.n	800774a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d020      	beq.n	800762a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075f4:	4b58      	ldr	r3, [pc, #352]	; (8007758 <HAL_RCC_ClockConfig+0x1c4>)
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	4a57      	ldr	r2, [pc, #348]	; (8007758 <HAL_RCC_ClockConfig+0x1c4>)
 80075fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0308 	and.w	r3, r3, #8
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800760c:	4b52      	ldr	r3, [pc, #328]	; (8007758 <HAL_RCC_ClockConfig+0x1c4>)
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	4a51      	ldr	r2, [pc, #324]	; (8007758 <HAL_RCC_ClockConfig+0x1c4>)
 8007612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007616:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007618:	4b4f      	ldr	r3, [pc, #316]	; (8007758 <HAL_RCC_ClockConfig+0x1c4>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	494c      	ldr	r1, [pc, #304]	; (8007758 <HAL_RCC_ClockConfig+0x1c4>)
 8007626:	4313      	orrs	r3, r2
 8007628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d040      	beq.n	80076b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d107      	bne.n	800764e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800763e:	4b46      	ldr	r3, [pc, #280]	; (8007758 <HAL_RCC_ClockConfig+0x1c4>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d115      	bne.n	8007676 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e07d      	b.n	800774a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	2b02      	cmp	r3, #2
 8007654:	d107      	bne.n	8007666 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007656:	4b40      	ldr	r3, [pc, #256]	; (8007758 <HAL_RCC_ClockConfig+0x1c4>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d109      	bne.n	8007676 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e071      	b.n	800774a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007666:	4b3c      	ldr	r3, [pc, #240]	; (8007758 <HAL_RCC_ClockConfig+0x1c4>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e069      	b.n	800774a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007676:	4b38      	ldr	r3, [pc, #224]	; (8007758 <HAL_RCC_ClockConfig+0x1c4>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f023 0203 	bic.w	r2, r3, #3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	4935      	ldr	r1, [pc, #212]	; (8007758 <HAL_RCC_ClockConfig+0x1c4>)
 8007684:	4313      	orrs	r3, r2
 8007686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007688:	f7fc f8da 	bl	8003840 <HAL_GetTick>
 800768c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800768e:	e00a      	b.n	80076a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007690:	f7fc f8d6 	bl	8003840 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	f241 3288 	movw	r2, #5000	; 0x1388
 800769e:	4293      	cmp	r3, r2
 80076a0:	d901      	bls.n	80076a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e051      	b.n	800774a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076a6:	4b2c      	ldr	r3, [pc, #176]	; (8007758 <HAL_RCC_ClockConfig+0x1c4>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f003 020c 	and.w	r2, r3, #12
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d1eb      	bne.n	8007690 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076b8:	4b26      	ldr	r3, [pc, #152]	; (8007754 <HAL_RCC_ClockConfig+0x1c0>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 030f 	and.w	r3, r3, #15
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d210      	bcs.n	80076e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076c6:	4b23      	ldr	r3, [pc, #140]	; (8007754 <HAL_RCC_ClockConfig+0x1c0>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f023 020f 	bic.w	r2, r3, #15
 80076ce:	4921      	ldr	r1, [pc, #132]	; (8007754 <HAL_RCC_ClockConfig+0x1c0>)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d6:	4b1f      	ldr	r3, [pc, #124]	; (8007754 <HAL_RCC_ClockConfig+0x1c0>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d001      	beq.n	80076e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e030      	b.n	800774a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d008      	beq.n	8007706 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076f4:	4b18      	ldr	r3, [pc, #96]	; (8007758 <HAL_RCC_ClockConfig+0x1c4>)
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	4915      	ldr	r1, [pc, #84]	; (8007758 <HAL_RCC_ClockConfig+0x1c4>)
 8007702:	4313      	orrs	r3, r2
 8007704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0308 	and.w	r3, r3, #8
 800770e:	2b00      	cmp	r3, #0
 8007710:	d009      	beq.n	8007726 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007712:	4b11      	ldr	r3, [pc, #68]	; (8007758 <HAL_RCC_ClockConfig+0x1c4>)
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	00db      	lsls	r3, r3, #3
 8007720:	490d      	ldr	r1, [pc, #52]	; (8007758 <HAL_RCC_ClockConfig+0x1c4>)
 8007722:	4313      	orrs	r3, r2
 8007724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007726:	f000 f81d 	bl	8007764 <HAL_RCC_GetSysClockFreq>
 800772a:	4601      	mov	r1, r0
 800772c:	4b0a      	ldr	r3, [pc, #40]	; (8007758 <HAL_RCC_ClockConfig+0x1c4>)
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	091b      	lsrs	r3, r3, #4
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	4a09      	ldr	r2, [pc, #36]	; (800775c <HAL_RCC_ClockConfig+0x1c8>)
 8007738:	5cd3      	ldrb	r3, [r2, r3]
 800773a:	fa21 f303 	lsr.w	r3, r1, r3
 800773e:	4a08      	ldr	r2, [pc, #32]	; (8007760 <HAL_RCC_ClockConfig+0x1cc>)
 8007740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007742:	2000      	movs	r0, #0
 8007744:	f7fa f9ae 	bl	8001aa4 <HAL_InitTick>

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	40023c00 	.word	0x40023c00
 8007758:	40023800 	.word	0x40023800
 800775c:	0800dc38 	.word	0x0800dc38
 8007760:	20000004 	.word	0x20000004

08007764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	607b      	str	r3, [r7, #4]
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]
 8007772:	2300      	movs	r3, #0
 8007774:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800777a:	4b50      	ldr	r3, [pc, #320]	; (80078bc <HAL_RCC_GetSysClockFreq+0x158>)
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f003 030c 	and.w	r3, r3, #12
 8007782:	2b04      	cmp	r3, #4
 8007784:	d007      	beq.n	8007796 <HAL_RCC_GetSysClockFreq+0x32>
 8007786:	2b08      	cmp	r3, #8
 8007788:	d008      	beq.n	800779c <HAL_RCC_GetSysClockFreq+0x38>
 800778a:	2b00      	cmp	r3, #0
 800778c:	f040 808d 	bne.w	80078aa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007790:	4b4b      	ldr	r3, [pc, #300]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007792:	60bb      	str	r3, [r7, #8]
       break;
 8007794:	e08c      	b.n	80078b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007796:	4b4b      	ldr	r3, [pc, #300]	; (80078c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007798:	60bb      	str	r3, [r7, #8]
      break;
 800779a:	e089      	b.n	80078b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800779c:	4b47      	ldr	r3, [pc, #284]	; (80078bc <HAL_RCC_GetSysClockFreq+0x158>)
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077a4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80077a6:	4b45      	ldr	r3, [pc, #276]	; (80078bc <HAL_RCC_GetSysClockFreq+0x158>)
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d023      	beq.n	80077fa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077b2:	4b42      	ldr	r3, [pc, #264]	; (80078bc <HAL_RCC_GetSysClockFreq+0x158>)
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	099b      	lsrs	r3, r3, #6
 80077b8:	f04f 0400 	mov.w	r4, #0
 80077bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80077c0:	f04f 0200 	mov.w	r2, #0
 80077c4:	ea03 0501 	and.w	r5, r3, r1
 80077c8:	ea04 0602 	and.w	r6, r4, r2
 80077cc:	4a3d      	ldr	r2, [pc, #244]	; (80078c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80077ce:	fb02 f106 	mul.w	r1, r2, r6
 80077d2:	2200      	movs	r2, #0
 80077d4:	fb02 f205 	mul.w	r2, r2, r5
 80077d8:	440a      	add	r2, r1
 80077da:	493a      	ldr	r1, [pc, #232]	; (80078c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80077dc:	fba5 0101 	umull	r0, r1, r5, r1
 80077e0:	1853      	adds	r3, r2, r1
 80077e2:	4619      	mov	r1, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f04f 0400 	mov.w	r4, #0
 80077ea:	461a      	mov	r2, r3
 80077ec:	4623      	mov	r3, r4
 80077ee:	f7f8 fd7f 	bl	80002f0 <__aeabi_uldivmod>
 80077f2:	4603      	mov	r3, r0
 80077f4:	460c      	mov	r4, r1
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	e049      	b.n	800788e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077fa:	4b30      	ldr	r3, [pc, #192]	; (80078bc <HAL_RCC_GetSysClockFreq+0x158>)
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	099b      	lsrs	r3, r3, #6
 8007800:	f04f 0400 	mov.w	r4, #0
 8007804:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007808:	f04f 0200 	mov.w	r2, #0
 800780c:	ea03 0501 	and.w	r5, r3, r1
 8007810:	ea04 0602 	and.w	r6, r4, r2
 8007814:	4629      	mov	r1, r5
 8007816:	4632      	mov	r2, r6
 8007818:	f04f 0300 	mov.w	r3, #0
 800781c:	f04f 0400 	mov.w	r4, #0
 8007820:	0154      	lsls	r4, r2, #5
 8007822:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007826:	014b      	lsls	r3, r1, #5
 8007828:	4619      	mov	r1, r3
 800782a:	4622      	mov	r2, r4
 800782c:	1b49      	subs	r1, r1, r5
 800782e:	eb62 0206 	sbc.w	r2, r2, r6
 8007832:	f04f 0300 	mov.w	r3, #0
 8007836:	f04f 0400 	mov.w	r4, #0
 800783a:	0194      	lsls	r4, r2, #6
 800783c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007840:	018b      	lsls	r3, r1, #6
 8007842:	1a5b      	subs	r3, r3, r1
 8007844:	eb64 0402 	sbc.w	r4, r4, r2
 8007848:	f04f 0100 	mov.w	r1, #0
 800784c:	f04f 0200 	mov.w	r2, #0
 8007850:	00e2      	lsls	r2, r4, #3
 8007852:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007856:	00d9      	lsls	r1, r3, #3
 8007858:	460b      	mov	r3, r1
 800785a:	4614      	mov	r4, r2
 800785c:	195b      	adds	r3, r3, r5
 800785e:	eb44 0406 	adc.w	r4, r4, r6
 8007862:	f04f 0100 	mov.w	r1, #0
 8007866:	f04f 0200 	mov.w	r2, #0
 800786a:	02a2      	lsls	r2, r4, #10
 800786c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007870:	0299      	lsls	r1, r3, #10
 8007872:	460b      	mov	r3, r1
 8007874:	4614      	mov	r4, r2
 8007876:	4618      	mov	r0, r3
 8007878:	4621      	mov	r1, r4
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f04f 0400 	mov.w	r4, #0
 8007880:	461a      	mov	r2, r3
 8007882:	4623      	mov	r3, r4
 8007884:	f7f8 fd34 	bl	80002f0 <__aeabi_uldivmod>
 8007888:	4603      	mov	r3, r0
 800788a:	460c      	mov	r4, r1
 800788c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800788e:	4b0b      	ldr	r3, [pc, #44]	; (80078bc <HAL_RCC_GetSysClockFreq+0x158>)
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	0c1b      	lsrs	r3, r3, #16
 8007894:	f003 0303 	and.w	r3, r3, #3
 8007898:	3301      	adds	r3, #1
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a6:	60bb      	str	r3, [r7, #8]
      break;
 80078a8:	e002      	b.n	80078b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078aa:	4b05      	ldr	r3, [pc, #20]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80078ac:	60bb      	str	r3, [r7, #8]
      break;
 80078ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078b0:	68bb      	ldr	r3, [r7, #8]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078ba:	bf00      	nop
 80078bc:	40023800 	.word	0x40023800
 80078c0:	00f42400 	.word	0x00f42400
 80078c4:	017d7840 	.word	0x017d7840

080078c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078c8:	b480      	push	{r7}
 80078ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078cc:	4b03      	ldr	r3, [pc, #12]	; (80078dc <HAL_RCC_GetHCLKFreq+0x14>)
 80078ce:	681b      	ldr	r3, [r3, #0]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	20000004 	.word	0x20000004

080078e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80078e4:	f7ff fff0 	bl	80078c8 <HAL_RCC_GetHCLKFreq>
 80078e8:	4601      	mov	r1, r0
 80078ea:	4b05      	ldr	r3, [pc, #20]	; (8007900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	0a9b      	lsrs	r3, r3, #10
 80078f0:	f003 0307 	and.w	r3, r3, #7
 80078f4:	4a03      	ldr	r2, [pc, #12]	; (8007904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078f6:	5cd3      	ldrb	r3, [r2, r3]
 80078f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	40023800 	.word	0x40023800
 8007904:	0800dc48 	.word	0x0800dc48

08007908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800790c:	f7ff ffdc 	bl	80078c8 <HAL_RCC_GetHCLKFreq>
 8007910:	4601      	mov	r1, r0
 8007912:	4b05      	ldr	r3, [pc, #20]	; (8007928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	0b5b      	lsrs	r3, r3, #13
 8007918:	f003 0307 	and.w	r3, r3, #7
 800791c:	4a03      	ldr	r2, [pc, #12]	; (800792c <HAL_RCC_GetPCLK2Freq+0x24>)
 800791e:	5cd3      	ldrb	r3, [r2, r3]
 8007920:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007924:	4618      	mov	r0, r3
 8007926:	bd80      	pop	{r7, pc}
 8007928:	40023800 	.word	0x40023800
 800792c:	0800dc48 	.word	0x0800dc48

08007930 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	220f      	movs	r2, #15
 800793e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007940:	4b12      	ldr	r3, [pc, #72]	; (800798c <HAL_RCC_GetClockConfig+0x5c>)
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f003 0203 	and.w	r2, r3, #3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800794c:	4b0f      	ldr	r3, [pc, #60]	; (800798c <HAL_RCC_GetClockConfig+0x5c>)
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007958:	4b0c      	ldr	r3, [pc, #48]	; (800798c <HAL_RCC_GetClockConfig+0x5c>)
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007964:	4b09      	ldr	r3, [pc, #36]	; (800798c <HAL_RCC_GetClockConfig+0x5c>)
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	08db      	lsrs	r3, r3, #3
 800796a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007972:	4b07      	ldr	r3, [pc, #28]	; (8007990 <HAL_RCC_GetClockConfig+0x60>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 020f 	and.w	r2, r3, #15
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	601a      	str	r2, [r3, #0]
}
 800797e:	bf00      	nop
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	40023800 	.word	0x40023800
 8007990:	40023c00 	.word	0x40023c00

08007994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800799c:	2300      	movs	r3, #0
 800799e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80079a0:	2300      	movs	r3, #0
 80079a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80079a8:	2300      	movs	r3, #0
 80079aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80079ac:	2300      	movs	r3, #0
 80079ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d012      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80079bc:	4b69      	ldr	r3, [pc, #420]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	4a68      	ldr	r2, [pc, #416]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80079c6:	6093      	str	r3, [r2, #8]
 80079c8:	4b66      	ldr	r3, [pc, #408]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d0:	4964      	ldr	r1, [pc, #400]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80079de:	2301      	movs	r3, #1
 80079e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d017      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079ee:	4b5d      	ldr	r3, [pc, #372]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079fc:	4959      	ldr	r1, [pc, #356]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a0c:	d101      	bne.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d017      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a2a:	4b4e      	ldr	r3, [pc, #312]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a38:	494a      	ldr	r1, [pc, #296]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a48:	d101      	bne.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007a56:	2301      	movs	r3, #1
 8007a58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007a66:	2301      	movs	r3, #1
 8007a68:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f000 808b 	beq.w	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a78:	4b3a      	ldr	r3, [pc, #232]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7c:	4a39      	ldr	r2, [pc, #228]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a82:	6413      	str	r3, [r2, #64]	; 0x40
 8007a84:	4b37      	ldr	r3, [pc, #220]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a8c:	60bb      	str	r3, [r7, #8]
 8007a8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a90:	4b35      	ldr	r3, [pc, #212]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a34      	ldr	r2, [pc, #208]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a9c:	f7fb fed0 	bl	8003840 <HAL_GetTick>
 8007aa0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007aa2:	e008      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aa4:	f7fb fecc 	bl	8003840 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b64      	cmp	r3, #100	; 0x64
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e38d      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007ab6:	4b2c      	ldr	r3, [pc, #176]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0f0      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ac2:	4b28      	ldr	r3, [pc, #160]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d035      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d02e      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ae0:	4b20      	ldr	r3, [pc, #128]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ae8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007aea:	4b1e      	ldr	r3, [pc, #120]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aee:	4a1d      	ldr	r2, [pc, #116]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007af4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007af6:	4b1b      	ldr	r3, [pc, #108]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afa:	4a1a      	ldr	r2, [pc, #104]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007b02:	4a18      	ldr	r2, [pc, #96]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b08:	4b16      	ldr	r3, [pc, #88]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d114      	bne.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b14:	f7fb fe94 	bl	8003840 <HAL_GetTick>
 8007b18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b1a:	e00a      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b1c:	f7fb fe90 	bl	8003840 <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e34f      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b32:	4b0c      	ldr	r3, [pc, #48]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0ee      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b4a:	d111      	bne.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007b4c:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b58:	4b04      	ldr	r3, [pc, #16]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007b5a:	400b      	ands	r3, r1
 8007b5c:	4901      	ldr	r1, [pc, #4]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	608b      	str	r3, [r1, #8]
 8007b62:	e00b      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007b64:	40023800 	.word	0x40023800
 8007b68:	40007000 	.word	0x40007000
 8007b6c:	0ffffcff 	.word	0x0ffffcff
 8007b70:	4bb3      	ldr	r3, [pc, #716]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	4ab2      	ldr	r2, [pc, #712]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007b7a:	6093      	str	r3, [r2, #8]
 8007b7c:	4bb0      	ldr	r3, [pc, #704]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b88:	49ad      	ldr	r1, [pc, #692]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0310 	and.w	r3, r3, #16
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d010      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b9a:	4ba9      	ldr	r3, [pc, #676]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ba0:	4aa7      	ldr	r2, [pc, #668]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ba6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007baa:	4ba5      	ldr	r3, [pc, #660]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb4:	49a2      	ldr	r1, [pc, #648]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00a      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bc8:	4b9d      	ldr	r3, [pc, #628]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bd6:	499a      	ldr	r1, [pc, #616]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00a      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007bea:	4b95      	ldr	r3, [pc, #596]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bf8:	4991      	ldr	r1, [pc, #580]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00a      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c0c:	4b8c      	ldr	r3, [pc, #560]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c1a:	4989      	ldr	r1, [pc, #548]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c2e:	4b84      	ldr	r3, [pc, #528]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c3c:	4980      	ldr	r1, [pc, #512]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00a      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c50:	4b7b      	ldr	r3, [pc, #492]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c56:	f023 0203 	bic.w	r2, r3, #3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c5e:	4978      	ldr	r1, [pc, #480]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c60:	4313      	orrs	r3, r2
 8007c62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00a      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c72:	4b73      	ldr	r3, [pc, #460]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c78:	f023 020c 	bic.w	r2, r3, #12
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c80:	496f      	ldr	r1, [pc, #444]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00a      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c94:	4b6a      	ldr	r3, [pc, #424]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ca2:	4967      	ldr	r1, [pc, #412]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007cb6:	4b62      	ldr	r3, [pc, #392]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cbc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc4:	495e      	ldr	r1, [pc, #376]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00a      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007cd8:	4b59      	ldr	r3, [pc, #356]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce6:	4956      	ldr	r1, [pc, #344]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00a      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007cfa:	4b51      	ldr	r3, [pc, #324]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d08:	494d      	ldr	r1, [pc, #308]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00a      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007d1c:	4b48      	ldr	r3, [pc, #288]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d2a:	4945      	ldr	r1, [pc, #276]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00a      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007d3e:	4b40      	ldr	r3, [pc, #256]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d4c:	493c      	ldr	r1, [pc, #240]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00a      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d60:	4b37      	ldr	r3, [pc, #220]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d6e:	4934      	ldr	r1, [pc, #208]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d70:	4313      	orrs	r3, r2
 8007d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d011      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007d82:	4b2f      	ldr	r3, [pc, #188]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d90:	492b      	ldr	r1, [pc, #172]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007da0:	d101      	bne.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007da2:	2301      	movs	r3, #1
 8007da4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0308 	and.w	r3, r3, #8
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007db2:	2301      	movs	r3, #1
 8007db4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007dc2:	4b1f      	ldr	r3, [pc, #124]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dd0:	491b      	ldr	r1, [pc, #108]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00b      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007de4:	4b16      	ldr	r3, [pc, #88]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007df4:	4912      	ldr	r1, [pc, #72]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00b      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007e08:	4b0d      	ldr	r3, [pc, #52]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e0e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e18:	4909      	ldr	r1, [pc, #36]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00f      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e2c:	4b04      	ldr	r3, [pc, #16]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e3c:	e002      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007e3e:	bf00      	nop
 8007e40:	40023800 	.word	0x40023800
 8007e44:	4985      	ldr	r1, [pc, #532]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00b      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007e58:	4b80      	ldr	r3, [pc, #512]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e68:	497c      	ldr	r1, [pc, #496]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d005      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e7e:	f040 80d6 	bne.w	800802e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e82:	4b76      	ldr	r3, [pc, #472]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a75      	ldr	r2, [pc, #468]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e8e:	f7fb fcd7 	bl	8003840 <HAL_GetTick>
 8007e92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e94:	e008      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e96:	f7fb fcd3 	bl	8003840 <HAL_GetTick>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	2b64      	cmp	r3, #100	; 0x64
 8007ea2:	d901      	bls.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e194      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ea8:	4b6c      	ldr	r3, [pc, #432]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1f0      	bne.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d021      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d11d      	bne.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007ec8:	4b64      	ldr	r3, [pc, #400]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ece:	0c1b      	lsrs	r3, r3, #16
 8007ed0:	f003 0303 	and.w	r3, r3, #3
 8007ed4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007ed6:	4b61      	ldr	r3, [pc, #388]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007edc:	0e1b      	lsrs	r3, r3, #24
 8007ede:	f003 030f 	and.w	r3, r3, #15
 8007ee2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	019a      	lsls	r2, r3, #6
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	041b      	lsls	r3, r3, #16
 8007eee:	431a      	orrs	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	061b      	lsls	r3, r3, #24
 8007ef4:	431a      	orrs	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	071b      	lsls	r3, r3, #28
 8007efc:	4957      	ldr	r1, [pc, #348]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007efe:	4313      	orrs	r3, r2
 8007f00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d004      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f18:	d00a      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d02e      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f2e:	d129      	bne.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007f30:	4b4a      	ldr	r3, [pc, #296]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f36:	0c1b      	lsrs	r3, r3, #16
 8007f38:	f003 0303 	and.w	r3, r3, #3
 8007f3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f3e:	4b47      	ldr	r3, [pc, #284]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f44:	0f1b      	lsrs	r3, r3, #28
 8007f46:	f003 0307 	and.w	r3, r3, #7
 8007f4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	019a      	lsls	r2, r3, #6
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	041b      	lsls	r3, r3, #16
 8007f56:	431a      	orrs	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	061b      	lsls	r3, r3, #24
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	071b      	lsls	r3, r3, #28
 8007f64:	493d      	ldr	r1, [pc, #244]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007f6c:	4b3b      	ldr	r3, [pc, #236]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f72:	f023 021f 	bic.w	r2, r3, #31
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	4937      	ldr	r1, [pc, #220]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d01d      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f90:	4b32      	ldr	r3, [pc, #200]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f96:	0e1b      	lsrs	r3, r3, #24
 8007f98:	f003 030f 	and.w	r3, r3, #15
 8007f9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f9e:	4b2f      	ldr	r3, [pc, #188]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fa4:	0f1b      	lsrs	r3, r3, #28
 8007fa6:	f003 0307 	and.w	r3, r3, #7
 8007faa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	019a      	lsls	r2, r3, #6
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	041b      	lsls	r3, r3, #16
 8007fb8:	431a      	orrs	r2, r3
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	061b      	lsls	r3, r3, #24
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	071b      	lsls	r3, r3, #28
 8007fc4:	4925      	ldr	r1, [pc, #148]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d011      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	019a      	lsls	r2, r3, #6
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	041b      	lsls	r3, r3, #16
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	061b      	lsls	r3, r3, #24
 8007fec:	431a      	orrs	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	071b      	lsls	r3, r3, #28
 8007ff4:	4919      	ldr	r1, [pc, #100]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ffc:	4b17      	ldr	r3, [pc, #92]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a16      	ldr	r2, [pc, #88]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008002:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008006:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008008:	f7fb fc1a 	bl	8003840 <HAL_GetTick>
 800800c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800800e:	e008      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008010:	f7fb fc16 	bl	8003840 <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	2b64      	cmp	r3, #100	; 0x64
 800801c:	d901      	bls.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e0d7      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008022:	4b0e      	ldr	r3, [pc, #56]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d0f0      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	2b01      	cmp	r3, #1
 8008032:	f040 80cd 	bne.w	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008036:	4b09      	ldr	r3, [pc, #36]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a08      	ldr	r2, [pc, #32]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800803c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008042:	f7fb fbfd 	bl	8003840 <HAL_GetTick>
 8008046:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008048:	e00a      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800804a:	f7fb fbf9 	bl	8003840 <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	2b64      	cmp	r3, #100	; 0x64
 8008056:	d903      	bls.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e0ba      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800805c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008060:	4b5e      	ldr	r3, [pc, #376]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800806c:	d0ed      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800807e:	2b00      	cmp	r3, #0
 8008080:	d009      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800808a:	2b00      	cmp	r3, #0
 800808c:	d02e      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	2b00      	cmp	r3, #0
 8008094:	d12a      	bne.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008096:	4b51      	ldr	r3, [pc, #324]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809c:	0c1b      	lsrs	r3, r3, #16
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80080a4:	4b4d      	ldr	r3, [pc, #308]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80080a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080aa:	0f1b      	lsrs	r3, r3, #28
 80080ac:	f003 0307 	and.w	r3, r3, #7
 80080b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	019a      	lsls	r2, r3, #6
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	041b      	lsls	r3, r3, #16
 80080bc:	431a      	orrs	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	061b      	lsls	r3, r3, #24
 80080c4:	431a      	orrs	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	071b      	lsls	r3, r3, #28
 80080ca:	4944      	ldr	r1, [pc, #272]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80080d2:	4b42      	ldr	r3, [pc, #264]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80080d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e0:	3b01      	subs	r3, #1
 80080e2:	021b      	lsls	r3, r3, #8
 80080e4:	493d      	ldr	r1, [pc, #244]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d022      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008100:	d11d      	bne.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008102:	4b36      	ldr	r3, [pc, #216]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008108:	0e1b      	lsrs	r3, r3, #24
 800810a:	f003 030f 	and.w	r3, r3, #15
 800810e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008110:	4b32      	ldr	r3, [pc, #200]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008116:	0f1b      	lsrs	r3, r3, #28
 8008118:	f003 0307 	and.w	r3, r3, #7
 800811c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	019a      	lsls	r2, r3, #6
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a1b      	ldr	r3, [r3, #32]
 8008128:	041b      	lsls	r3, r3, #16
 800812a:	431a      	orrs	r2, r3
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	061b      	lsls	r3, r3, #24
 8008130:	431a      	orrs	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	071b      	lsls	r3, r3, #28
 8008136:	4929      	ldr	r1, [pc, #164]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008138:	4313      	orrs	r3, r2
 800813a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0308 	and.w	r3, r3, #8
 8008146:	2b00      	cmp	r3, #0
 8008148:	d028      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800814a:	4b24      	ldr	r3, [pc, #144]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800814c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008150:	0e1b      	lsrs	r3, r3, #24
 8008152:	f003 030f 	and.w	r3, r3, #15
 8008156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008158:	4b20      	ldr	r3, [pc, #128]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800815a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800815e:	0c1b      	lsrs	r3, r3, #16
 8008160:	f003 0303 	and.w	r3, r3, #3
 8008164:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	019a      	lsls	r2, r3, #6
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	041b      	lsls	r3, r3, #16
 8008170:	431a      	orrs	r2, r3
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	061b      	lsls	r3, r3, #24
 8008176:	431a      	orrs	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	69db      	ldr	r3, [r3, #28]
 800817c:	071b      	lsls	r3, r3, #28
 800817e:	4917      	ldr	r1, [pc, #92]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008180:	4313      	orrs	r3, r2
 8008182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008186:	4b15      	ldr	r3, [pc, #84]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800818c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008194:	4911      	ldr	r1, [pc, #68]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008196:	4313      	orrs	r3, r2
 8008198:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800819c:	4b0f      	ldr	r3, [pc, #60]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a0e      	ldr	r2, [pc, #56]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80081a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081a8:	f7fb fb4a 	bl	8003840 <HAL_GetTick>
 80081ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80081ae:	e008      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80081b0:	f7fb fb46 	bl	8003840 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b64      	cmp	r3, #100	; 0x64
 80081bc:	d901      	bls.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e007      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80081c2:	4b06      	ldr	r3, [pc, #24]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081ce:	d1ef      	bne.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3720      	adds	r7, #32
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	40023800 	.word	0x40023800

080081e0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e01d      	b.n	800822e <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d105      	bne.n	800820a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7f9 fadb 	bl	80017c0 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2203      	movs	r2, #3
 800820e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f80f 	bl	8008236 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008236:	b5b0      	push	{r4, r5, r7, lr}
 8008238:	b08e      	sub	sp, #56	; 0x38
 800823a:	af04      	add	r7, sp, #16
 800823c:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800823e:	2300      	movs	r3, #0
 8008240:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008242:	2300      	movs	r3, #0
 8008244:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008246:	2300      	movs	r3, #0
 8008248:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800824a:	2300      	movs	r3, #0
 800824c:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800824e:	2300      	movs	r3, #0
 8008250:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008252:	2300      	movs	r3, #0
 8008254:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008256:	2376      	movs	r3, #118	; 0x76
 8008258:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681d      	ldr	r5, [r3, #0]
 800825e:	466c      	mov	r4, sp
 8008260:	f107 0318 	add.w	r3, r7, #24
 8008264:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008268:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800826c:	f107 030c 	add.w	r3, r7, #12
 8008270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008272:	4628      	mov	r0, r5
 8008274:	f001 fffc 	bl	800a270 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685a      	ldr	r2, [r3, #4]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008286:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4618      	mov	r0, r3
 800828e:	f002 f839 	bl	800a304 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082a0:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 80082a2:	2002      	movs	r0, #2
 80082a4:	f7fb fad8 	bl	8003858 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fe67 	bl	8008f7c <SD_PowerON>
 80082ae:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00b      	beq.n	80082ce <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	431a      	orrs	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e013      	b.n	80082f6 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fd8b 	bl	8008dea <SD_InitCard>
 80082d4:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80082d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00b      	beq.n	80082f4 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	431a      	orrs	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e000      	b.n	80082f6 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3728      	adds	r7, #40	; 0x28
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bdb0      	pop	{r4, r5, r7, pc}

080082fe <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80082fe:	b590      	push	{r4, r7, lr}
 8008300:	b08f      	sub	sp, #60	; 0x3c
 8008302:	af00      	add	r7, sp, #0
 8008304:	60f8      	str	r0, [r7, #12]
 8008306:	60b9      	str	r1, [r7, #8]
 8008308:	607a      	str	r2, [r7, #4]
 800830a:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800830c:	2300      	movs	r3, #0
 800830e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8008310:	f7fb fa96 	bl	8003840 <HAL_GetTick>
 8008314:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 8008316:	2300      	movs	r3, #0
 8008318:	633b      	str	r3, [r7, #48]	; 0x30
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d107      	bne.n	8008334 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008328:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e176      	b.n	8008622 <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b01      	cmp	r3, #1
 800833e:	f040 8169 	bne.w	8008614 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	441a      	add	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008352:	429a      	cmp	r2, r3
 8008354:	d907      	bls.n	8008366 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e15d      	b.n	8008622 <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2203      	movs	r2, #3
 800836a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2200      	movs	r2, #0
 8008374:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800837a:	2b01      	cmp	r3, #1
 800837c:	d002      	beq.n	8008384 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	025b      	lsls	r3, r3, #9
 8008382:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f44f 7100 	mov.w	r1, #512	; 0x200
 800838c:	4618      	mov	r0, r3
 800838e:	f002 f84d 	bl	800a42c <SDMMC_CmdBlockLength>
 8008392:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8008394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008396:	2b00      	cmp	r3, #0
 8008398:	d010      	beq.n	80083bc <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80083a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083aa:	431a      	orrs	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e132      	b.n	8008622 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80083bc:	f04f 33ff 	mov.w	r3, #4294967295
 80083c0:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	025b      	lsls	r3, r3, #9
 80083c6:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80083c8:	2390      	movs	r3, #144	; 0x90
 80083ca:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80083cc:	2302      	movs	r3, #2
 80083ce:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80083d4:	2301      	movs	r3, #1
 80083d6:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f107 0210 	add.w	r2, r7, #16
 80083e0:	4611      	mov	r1, r2
 80083e2:	4618      	mov	r0, r3
 80083e4:	f001 fff6 	bl	800a3d4 <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d90a      	bls.n	8008404 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2202      	movs	r2, #2
 80083f2:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6879      	ldr	r1, [r7, #4]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f002 f85e 	bl	800a4bc <SDMMC_CmdReadMultiBlock>
 8008400:	6378      	str	r0, [r7, #52]	; 0x34
 8008402:	e009      	b.n	8008418 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2201      	movs	r2, #1
 8008408:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6879      	ldr	r1, [r7, #4]
 8008410:	4618      	mov	r0, r3
 8008412:	f002 f82f 	bl	800a474 <SDMMC_CmdReadSingleBlock>
 8008416:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841a:	2b00      	cmp	r3, #0
 800841c:	d04a      	beq.n	80084b4 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008426:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800842c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842e:	431a      	orrs	r2, r3
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e0f0      	b.n	8008622 <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d016      	beq.n	800847c <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800844e:	2300      	movs	r3, #0
 8008450:	633b      	str	r3, [r7, #48]	; 0x30
 8008452:	e00d      	b.n	8008470 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6819      	ldr	r1, [r3, #0]
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800845e:	18d4      	adds	r4, r2, r3
 8008460:	4608      	mov	r0, r1
 8008462:	f001 ff31 	bl	800a2c8 <SDMMC_ReadFIFO>
 8008466:	4603      	mov	r3, r0
 8008468:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 800846a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846c:	3301      	adds	r3, #1
 800846e:	633b      	str	r3, [r7, #48]	; 0x30
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	2b07      	cmp	r3, #7
 8008474:	d9ee      	bls.n	8008454 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8008476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008478:	3320      	adds	r3, #32
 800847a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 800847c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800847e:	2b00      	cmp	r3, #0
 8008480:	d007      	beq.n	8008492 <HAL_SD_ReadBlocks+0x194>
 8008482:	f7fb f9dd 	bl	8003840 <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800848e:	429a      	cmp	r2, r3
 8008490:	d810      	bhi.n	80084b4 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800849a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e0b6      	b.n	8008622 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ba:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0be      	beq.n	8008440 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d020      	beq.n	8008512 <HAL_SD_ReadBlocks+0x214>
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d91d      	bls.n	8008512 <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084da:	2b03      	cmp	r3, #3
 80084dc:	d019      	beq.n	8008512 <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f002 f856 	bl	800a594 <SDMMC_CmdStopTransfer>
 80084e8:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 80084ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d010      	beq.n	8008512 <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80084f8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008500:	431a      	orrs	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2201      	movs	r2, #1
 800850a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e087      	b.n	8008622 <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008518:	f003 0308 	and.w	r3, r3, #8
 800851c:	2b00      	cmp	r3, #0
 800851e:	d010      	beq.n	8008542 <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008528:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	f043 0208 	orr.w	r2, r3, #8
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e06f      	b.n	8008622 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008548:	f003 0302 	and.w	r3, r3, #2
 800854c:	2b00      	cmp	r3, #0
 800854e:	d010      	beq.n	8008572 <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008558:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855e:	f043 0202 	orr.w	r2, r3, #2
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e057      	b.n	8008622 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008578:	f003 0320 	and.w	r3, r3, #32
 800857c:	2b00      	cmp	r3, #0
 800857e:	d037      	beq.n	80085f0 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008588:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858e:	f043 0220 	orr.w	r2, r3, #32
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e03f      	b.n	8008622 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f001 fe8e 	bl	800a2c8 <SDMMC_ReadFIFO>
 80085ac:	4602      	mov	r2, r0
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b0:	601a      	str	r2, [r3, #0]
      tempbuff++;
 80085b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b4:	3304      	adds	r3, #4
 80085b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80085b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d007      	beq.n	80085ce <HAL_SD_ReadBlocks+0x2d0>
 80085be:	f7fb f93f 	bl	8003840 <HAL_GetTick>
 80085c2:	4602      	mov	r2, r0
 80085c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d810      	bhi.n	80085f0 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80085d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e018      	b.n	8008622 <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1d1      	bne.n	80085a2 <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008606:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	e006      	b.n	8008622 <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008618:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
  }
}
 8008622:	4618      	mov	r0, r3
 8008624:	373c      	adds	r7, #60	; 0x3c
 8008626:	46bd      	mov	sp, r7
 8008628:	bd90      	pop	{r4, r7, pc}

0800862a <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b08e      	sub	sp, #56	; 0x38
 800862e:	af00      	add	r7, sp, #0
 8008630:	60f8      	str	r0, [r7, #12]
 8008632:	60b9      	str	r1, [r7, #8]
 8008634:	607a      	str	r2, [r7, #4]
 8008636:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008638:	2300      	movs	r3, #0
 800863a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 800863c:	f7fb f900 	bl	8003840 <HAL_GetTick>
 8008640:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d107      	bne.n	8008660 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008654:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e147      	b.n	80088f0 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b01      	cmp	r3, #1
 800866a:	f040 813a 	bne.w	80088e2 <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	441a      	add	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800867e:	429a      	cmp	r2, r3
 8008680:	d907      	bls.n	8008692 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008686:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e12e      	b.n	80088f0 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2203      	movs	r2, #3
 8008696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2200      	movs	r2, #0
 80086a0:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d002      	beq.n	80086b0 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	025b      	lsls	r3, r3, #9
 80086ae:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80086b8:	4618      	mov	r0, r3
 80086ba:	f001 feb7 	bl	800a42c <SDMMC_CmdBlockLength>
 80086be:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80086c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d010      	beq.n	80086e8 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80086ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d6:	431a      	orrs	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e103      	b.n	80088f0 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d90a      	bls.n	8008704 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2220      	movs	r2, #32
 80086f2:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f001 ff26 	bl	800a54c <SDMMC_CmdWriteMultiBlock>
 8008700:	6378      	str	r0, [r7, #52]	; 0x34
 8008702:	e009      	b.n	8008718 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2210      	movs	r2, #16
 8008708:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	4618      	mov	r0, r3
 8008712:	f001 fef7 	bl	800a504 <SDMMC_CmdWriteSingleBlock>
 8008716:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871a:	2b00      	cmp	r3, #0
 800871c:	d010      	beq.n	8008740 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008726:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800872c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800872e:	431a      	orrs	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e0d7      	b.n	80088f0 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008740:	f04f 33ff 	mov.w	r3, #4294967295
 8008744:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	025b      	lsls	r3, r3, #9
 800874a:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800874c:	2390      	movs	r3, #144	; 0x90
 800874e:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008750:	2300      	movs	r3, #0
 8008752:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008754:	2300      	movs	r3, #0
 8008756:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8008758:	2301      	movs	r3, #1
 800875a:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f107 0210 	add.w	r2, r7, #16
 8008764:	4611      	mov	r1, r2
 8008766:	4618      	mov	r0, r3
 8008768:	f001 fe34 	bl	800a3d4 <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800876c:	e037      	b.n	80087de <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d014      	beq.n	80087a6 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800877c:	2300      	movs	r3, #0
 800877e:	633b      	str	r3, [r7, #48]	; 0x30
 8008780:	e00b      	b.n	800879a <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6818      	ldr	r0, [r3, #0]
 8008786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800878c:	4413      	add	r3, r2
 800878e:	4619      	mov	r1, r3
 8008790:	f001 fda7 	bl	800a2e2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008796:	3301      	adds	r3, #1
 8008798:	633b      	str	r3, [r7, #48]	; 0x30
 800879a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879c:	2b07      	cmp	r3, #7
 800879e:	d9f0      	bls.n	8008782 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 80087a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a2:	3320      	adds	r3, #32
 80087a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80087a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d007      	beq.n	80087bc <HAL_SD_WriteBlocks+0x192>
 80087ac:	f7fb f848 	bl	8003840 <HAL_GetTick>
 80087b0:	4602      	mov	r2, r0
 80087b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d810      	bhi.n	80087de <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80087c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087cc:	431a      	orrs	r2, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e088      	b.n	80088f0 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e4:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d0c0      	beq.n	800876e <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d020      	beq.n	800883c <HAL_SD_WriteBlocks+0x212>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d91d      	bls.n	800883c <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008804:	2b03      	cmp	r3, #3
 8008806:	d019      	beq.n	800883c <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4618      	mov	r0, r3
 800880e:	f001 fec1 	bl	800a594 <SDMMC_CmdStopTransfer>
 8008812:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8008814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008816:	2b00      	cmp	r3, #0
 8008818:	d010      	beq.n	800883c <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008822:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882a:	431a      	orrs	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e059      	b.n	80088f0 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008842:	f003 0308 	and.w	r3, r3, #8
 8008846:	2b00      	cmp	r3, #0
 8008848:	d010      	beq.n	800886c <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008852:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008858:	f043 0208 	orr.w	r2, r3, #8
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e041      	b.n	80088f0 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b00      	cmp	r3, #0
 8008878:	d010      	beq.n	800889c <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008882:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008888:	f043 0202 	orr.w	r2, r3, #2
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e029      	b.n	80088f0 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a2:	f003 0310 	and.w	r3, r3, #16
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d010      	beq.n	80088cc <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80088b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b8:	f043 0210 	orr.w	r2, r3, #16
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e011      	b.n	80088f0 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80088d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2201      	movs	r2, #1
 80088da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	e006      	b.n	80088f0 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
  }
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3738      	adds	r7, #56	; 0x38
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8008902:	2300      	movs	r3, #0
 8008904:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800890a:	0e1b      	lsrs	r3, r3, #24
 800890c:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	099b      	lsrs	r3, r3, #6
 8008912:	b2db      	uxtb	r3, r3
 8008914:	f003 0303 	and.w	r3, r3, #3
 8008918:	b2da      	uxtb	r2, r3
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	089b      	lsrs	r3, r3, #2
 8008922:	b2db      	uxtb	r3, r3
 8008924:	f003 030f 	and.w	r3, r3, #15
 8008928:	b2da      	uxtb	r2, r3
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	f003 0303 	and.w	r3, r3, #3
 8008936:	b2da      	uxtb	r2, r3
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008940:	0c1b      	lsrs	r3, r3, #16
 8008942:	b2db      	uxtb	r3, r3
 8008944:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	b2da      	uxtb	r2, r3
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008952:	0a1b      	lsrs	r3, r3, #8
 8008954:	b2db      	uxtb	r3, r3
 8008956:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	b2da      	uxtb	r2, r3
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008964:	b2db      	uxtb	r3, r3
 8008966:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	b2da      	uxtb	r2, r3
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008974:	0e1b      	lsrs	r3, r3, #24
 8008976:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	b29b      	uxth	r3, r3
 800897c:	011b      	lsls	r3, r3, #4
 800897e:	b29a      	uxth	r2, r3
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008988:	0c1b      	lsrs	r3, r3, #16
 800898a:	b2db      	uxtb	r3, r3
 800898c:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	88db      	ldrh	r3, [r3, #6]
 8008992:	b29a      	uxth	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	091b      	lsrs	r3, r3, #4
 8008998:	b29b      	uxth	r3, r3
 800899a:	f003 030f 	and.w	r3, r3, #15
 800899e:	b29b      	uxth	r3, r3
 80089a0:	4313      	orrs	r3, r2
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	f003 030f 	and.w	r3, r3, #15
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089ba:	0a1b      	lsrs	r3, r3, #8
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	09db      	lsrs	r3, r3, #7
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	099b      	lsrs	r3, r3, #6
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	b2da      	uxtb	r2, r3
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	095b      	lsrs	r3, r3, #5
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	b2da      	uxtb	r2, r3
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	091b      	lsrs	r3, r3, #4
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	b2da      	uxtb	r2, r3
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	2200      	movs	r2, #0
 8008a04:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f040 8086 	bne.w	8008b1c <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	029b      	lsls	r3, r3, #10
 8008a14:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	691a      	ldr	r2, [r3, #16]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a36:	0e1b      	lsrs	r3, r3, #24
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	691a      	ldr	r2, [r3, #16]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	099b      	lsrs	r3, r3, #6
 8008a44:	f003 0303 	and.w	r3, r3, #3
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	08db      	lsrs	r3, r3, #3
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	f003 0307 	and.w	r3, r3, #7
 8008a58:	b2da      	uxtb	r2, r3
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	f003 0307 	and.w	r3, r3, #7
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a70:	0c1b      	lsrs	r3, r3, #16
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	095b      	lsrs	r3, r3, #5
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	f003 0307 	and.w	r3, r3, #7
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	089b      	lsrs	r3, r3, #2
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	f003 0307 	and.w	r3, r3, #7
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	005b      	lsls	r3, r3, #1
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	f003 0306 	and.w	r3, r3, #6
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aac:	0a1b      	lsrs	r3, r3, #8
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	7e1b      	ldrb	r3, [r3, #24]
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	09db      	lsrs	r3, r3, #7
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	1c5a      	adds	r2, r3, #1
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	7e1b      	ldrb	r3, [r3, #24]
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	3302      	adds	r3, #2
 8008ade:	2201      	movs	r2, #1
 8008ae0:	409a      	lsls	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae6:	fb02 f203 	mul.w	r2, r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	7a1b      	ldrb	r3, [r3, #8]
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	461a      	mov	r2, r3
 8008af6:	2301      	movs	r3, #1
 8008af8:	4093      	lsls	r3, r2
 8008afa:	461a      	mov	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008b08:	0a52      	lsrs	r2, r2, #9
 8008b0a:	fb02 f203 	mul.w	r2, r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b18:	661a      	str	r2, [r3, #96]	; 0x60
 8008b1a:	e04d      	b.n	8008bb8 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d138      	bne.n	8008b96 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	041b      	lsls	r3, r3, #16
 8008b30:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b3c:	0e1b      	lsrs	r3, r3, #24
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	691a      	ldr	r2, [r3, #16]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	021b      	lsls	r3, r3, #8
 8008b4a:	431a      	orrs	r2, r3
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b54:	0c1b      	lsrs	r3, r3, #16
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	691a      	ldr	r2, [r3, #16]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	431a      	orrs	r2, r3
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b6a:	0a1b      	lsrs	r3, r3, #8
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	3301      	adds	r3, #1
 8008b76:	029a      	lsls	r2, r3, #10
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	655a      	str	r2, [r3, #84]	; 0x54
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b8a:	659a      	str	r2, [r3, #88]	; 0x58
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	661a      	str	r2, [r3, #96]	; 0x60
 8008b94:	e010      	b.n	8008bb8 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008b9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e0c1      	b.n	8008d3c <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	099b      	lsrs	r3, r3, #6
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	f003 0301 	and.w	r3, r3, #1
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	005b      	lsls	r3, r3, #1
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	7e9b      	ldrb	r3, [r3, #26]
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	09db      	lsrs	r3, r3, #7
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c04:	b2da      	uxtb	r2, r3
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c0e:	0e1b      	lsrs	r3, r3, #24
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	09db      	lsrs	r3, r3, #7
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	095b      	lsrs	r3, r3, #5
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	f003 0303 	and.w	r3, r3, #3
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	089b      	lsrs	r3, r3, #2
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	f003 0307 	and.w	r3, r3, #7
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	f003 030c 	and.w	r3, r3, #12
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5a:	0c1b      	lsrs	r3, r3, #16
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	7fdb      	ldrb	r3, [r3, #31]
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	099b      	lsrs	r3, r3, #6
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	f003 0303 	and.w	r3, r3, #3
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	4313      	orrs	r3, r2
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	095b      	lsrs	r3, r3, #5
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	f003 0301 	and.w	r3, r3, #1
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca8:	0a1b      	lsrs	r3, r3, #8
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	09db      	lsrs	r3, r3, #7
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	099b      	lsrs	r3, r3, #6
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	095b      	lsrs	r3, r3, #5
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	f003 0301 	and.w	r3, r3, #1
 8008cdc:	b2da      	uxtb	r2, r3
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	091b      	lsrs	r3, r3, #4
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	089b      	lsrs	r3, r3, #2
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	f003 0303 	and.w	r3, r3, #3
 8008d00:	b2da      	uxtb	r2, r3
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	f003 0303 	and.w	r3, r3, #3
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	085b      	lsrs	r3, r3, #1
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	2201      	movs	r2, #1
 8008d36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8008da8:	2304      	movs	r3, #4
 8008daa:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008dac:	2300      	movs	r3, #0
 8008dae:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8008db4:	f107 030c 	add.w	r3, r7, #12
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f986 	bl	80090cc <SD_SendStatus>
 8008dc0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d005      	beq.n	8008dd4 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	431a      	orrs	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	0a5b      	lsrs	r3, r3, #9
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	f003 030f 	and.w	r3, r3, #15
 8008dde:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8008de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008dea:	b5b0      	push	{r4, r5, r7, lr}
 8008dec:	b094      	sub	sp, #80	; 0x50
 8008dee:	af04      	add	r7, sp, #16
 8008df0:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008df2:	2300      	movs	r3, #0
 8008df4:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8008df6:	2301      	movs	r3, #1
 8008df8:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f001 fa8e 	bl	800a320 <SDMMC_GetPowerState>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d102      	bne.n	8008e10 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008e0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008e0e:	e0b1      	b.n	8008f74 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e14:	2b03      	cmp	r3, #3
 8008e16:	d02f      	beq.n	8008e78 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f001 fc8d 	bl	800a73c <SDMMC_CmdSendCID>
 8008e22:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <SD_InitCard+0x44>
    {
      return errorstate;
 8008e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e2c:	e0a2      	b.n	8008f74 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2100      	movs	r1, #0
 8008e34:	4618      	mov	r0, r3
 8008e36:	f001 fab8 	bl	800a3aa <SDMMC_GetResponse>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2104      	movs	r1, #4
 8008e46:	4618      	mov	r0, r3
 8008e48:	f001 faaf 	bl	800a3aa <SDMMC_GetResponse>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2108      	movs	r1, #8
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f001 faa6 	bl	800a3aa <SDMMC_GetResponse>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	210c      	movs	r1, #12
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f001 fa9d 	bl	800a3aa <SDMMC_GetResponse>
 8008e70:	4602      	mov	r2, r0
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d00d      	beq.n	8008e9c <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f107 020e 	add.w	r2, r7, #14
 8008e88:	4611      	mov	r1, r2
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f001 fc97 	bl	800a7be <SDMMC_CmdSetRelAdd>
 8008e90:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <SD_InitCard+0xb2>
    {
      return errorstate;
 8008e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e9a:	e06b      	b.n	8008f74 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea0:	2b03      	cmp	r3, #3
 8008ea2:	d036      	beq.n	8008f12 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008ea4:	89fb      	ldrh	r3, [r7, #14]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb4:	041b      	lsls	r3, r3, #16
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	4610      	mov	r0, r2
 8008eba:	f001 fc5f 	bl	800a77c <SDMMC_CmdSendCSD>
 8008ebe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <SD_InitCard+0xe0>
    {
      return errorstate;
 8008ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec8:	e054      	b.n	8008f74 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2100      	movs	r1, #0
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f001 fa6a 	bl	800a3aa <SDMMC_GetResponse>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2104      	movs	r1, #4
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f001 fa61 	bl	800a3aa <SDMMC_GetResponse>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2108      	movs	r1, #8
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f001 fa58 	bl	800a3aa <SDMMC_GetResponse>
 8008efa:	4602      	mov	r2, r0
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	210c      	movs	r1, #12
 8008f06:	4618      	mov	r0, r3
 8008f08:	f001 fa4f 	bl	800a3aa <SDMMC_GetResponse>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2104      	movs	r1, #4
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f001 fa46 	bl	800a3aa <SDMMC_GetResponse>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	0d1a      	lsrs	r2, r3, #20
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8008f26:	f107 0310 	add.w	r3, r7, #16
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7ff fce3 	bl	80088f8 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6819      	ldr	r1, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f3a:	041b      	lsls	r3, r3, #16
 8008f3c:	f04f 0400 	mov.w	r4, #0
 8008f40:	461a      	mov	r2, r3
 8008f42:	4623      	mov	r3, r4
 8008f44:	4608      	mov	r0, r1
 8008f46:	f001 fb49 	bl	800a5dc <SDMMC_CmdSelDesel>
 8008f4a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <SD_InitCard+0x16c>
  {
    return errorstate;
 8008f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f54:	e00e      	b.n	8008f74 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681d      	ldr	r5, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	466c      	mov	r4, sp
 8008f5e:	f103 0210 	add.w	r2, r3, #16
 8008f62:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f68:	3304      	adds	r3, #4
 8008f6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	f001 f97f 	bl	800a270 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3740      	adds	r7, #64	; 0x40
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bdb0      	pop	{r4, r5, r7, pc}

08008f7c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8008f84:	2300      	movs	r3, #0
 8008f86:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	617b      	str	r3, [r7, #20]
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008f90:	2300      	movs	r3, #0
 8008f92:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f001 fb44 	bl	800a626 <SDMMC_CmdGoIdleState>
 8008f9e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <SD_PowerON+0x2e>
  {
    return errorstate;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	e08c      	b.n	80090c4 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f001 fb59 	bl	800a666 <SDMMC_CmdOperCond>
 8008fb4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d03d      	beq.n	8009038 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8008fc2:	e032      	b.n	800902a <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	1c5a      	adds	r2, r3, #1
 8008fc8:	60ba      	str	r2, [r7, #8]
 8008fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d102      	bne.n	8008fd8 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008fd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fd6:	e075      	b.n	80090c4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2100      	movs	r1, #0
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f001 fb62 	bl	800a6a8 <SDMMC_CmdAppCommand>
 8008fe4:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d002      	beq.n	8008ff2 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ff0:	e068      	b.n	80090c4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f001 fb79 	bl	800a6f0 <SDMMC_CmdAppOperCommand>
 8008ffe:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009006:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800900a:	e05b      	b.n	80090c4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2100      	movs	r1, #0
 8009012:	4618      	mov	r0, r3
 8009014:	f001 f9c9 	bl	800a3aa <SDMMC_GetResponse>
 8009018:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	0fdb      	lsrs	r3, r3, #31
 800901e:	2b01      	cmp	r3, #1
 8009020:	bf0c      	ite	eq
 8009022:	2301      	moveq	r3, #1
 8009024:	2300      	movne	r3, #0
 8009026:	b2db      	uxtb	r3, r3
 8009028:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d0c9      	beq.n	8008fc4 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	645a      	str	r2, [r3, #68]	; 0x44
 8009036:	e044      	b.n	80090c2 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800903e:	e031      	b.n	80090a4 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	1c5a      	adds	r2, r3, #1
 8009044:	60ba      	str	r2, [r7, #8]
 8009046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800904a:	4293      	cmp	r3, r2
 800904c:	d102      	bne.n	8009054 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800904e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009052:	e037      	b.n	80090c4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2100      	movs	r1, #0
 800905a:	4618      	mov	r0, r3
 800905c:	f001 fb24 	bl	800a6a8 <SDMMC_CmdAppCommand>
 8009060:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <SD_PowerON+0xf0>
      {
        return errorstate;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	e02b      	b.n	80090c4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009074:	4618      	mov	r0, r3
 8009076:	f001 fb3b 	bl	800a6f0 <SDMMC_CmdAppOperCommand>
 800907a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <SD_PowerON+0x10a>
      {
        return errorstate;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	e01e      	b.n	80090c4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2100      	movs	r1, #0
 800908c:	4618      	mov	r0, r3
 800908e:	f001 f98c 	bl	800a3aa <SDMMC_GetResponse>
 8009092:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	0fdb      	lsrs	r3, r3, #31
 8009098:	2b01      	cmp	r3, #1
 800909a:	bf0c      	ite	eq
 800909c:	2301      	moveq	r3, #1
 800909e:	2300      	movne	r3, #0
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d0ca      	beq.n	8009040 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d003      	beq.n	80090bc <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	645a      	str	r2, [r3, #68]	; 0x44
 80090ba:	e002      	b.n	80090c2 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3718      	adds	r7, #24
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80090d6:	2300      	movs	r3, #0
 80090d8:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d102      	bne.n	80090e6 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 80090e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090e4:	e018      	b.n	8009118 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ee:	041b      	lsls	r3, r3, #16
 80090f0:	4619      	mov	r1, r3
 80090f2:	4610      	mov	r0, r2
 80090f4:	f001 fb86 	bl	800a804 <SDMMC_CmdSendStatus>
 80090f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d001      	beq.n	8009104 <SD_SendStatus+0x38>
  {
    return errorstate;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	e009      	b.n	8009118 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2100      	movs	r1, #0
 800910a:	4618      	mov	r0, r3
 800910c:	f001 f94d 	bl	800a3aa <SDMMC_GetResponse>
 8009110:	4602      	mov	r2, r0
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d101      	bne.n	8009134 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e025      	b.n	8009180 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800913a:	b2db      	uxtb	r3, r3
 800913c:	2b00      	cmp	r3, #0
 800913e:	d106      	bne.n	800914e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7f8 fca1 	bl	8001a90 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2202      	movs	r2, #2
 8009152:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	3304      	adds	r3, #4
 800915e:	4619      	mov	r1, r3
 8009160:	4610      	mov	r0, r2
 8009162:	f000 ff5f 	bl	800a024 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6818      	ldr	r0, [r3, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	461a      	mov	r2, r3
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	f000 ffc9 	bl	800a108 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b02      	cmp	r3, #2
 800919e:	d101      	bne.n	80091a4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80091a0:	2302      	movs	r3, #2
 80091a2:	e018      	b.n	80091d6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2202      	movs	r2, #2
 80091a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	68b9      	ldr	r1, [r7, #8]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f001 f827 	bl	800a208 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d104      	bne.n	80091cc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2205      	movs	r2, #5
 80091c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80091ca:	e003      	b.n	80091d4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b082      	sub	sp, #8
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d101      	bne.n	80091f8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80091f4:	2302      	movs	r3, #2
 80091f6:	e00e      	b.n	8009216 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2202      	movs	r2, #2
 80091fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6839      	ldr	r1, [r7, #0]
 8009206:	4618      	mov	r0, r3
 8009208:	f001 f81f 	bl	800a24a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b082      	sub	sp, #8
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e01d      	b.n	800926c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009236:	b2db      	uxtb	r3, r3
 8009238:	2b00      	cmp	r3, #0
 800923a:	d106      	bne.n	800924a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f815 	bl	8009274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2202      	movs	r2, #2
 800924e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	3304      	adds	r3, #4
 800925a:	4619      	mov	r1, r3
 800925c:	4610      	mov	r0, r2
 800925e:	f000 f985 	bl	800956c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68da      	ldr	r2, [r3, #12]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f042 0201 	orr.w	r2, r2, #1
 800929e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	689a      	ldr	r2, [r3, #8]
 80092a6:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <HAL_TIM_Base_Start_IT+0x50>)
 80092a8:	4013      	ands	r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2b06      	cmp	r3, #6
 80092b0:	d00b      	beq.n	80092ca <HAL_TIM_Base_Start_IT+0x42>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092b8:	d007      	beq.n	80092ca <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f042 0201 	orr.w	r2, r2, #1
 80092c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3714      	adds	r7, #20
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	00010007 	.word	0x00010007

080092dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	f003 0302 	and.w	r3, r3, #2
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d122      	bne.n	8009338 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	f003 0302 	and.w	r3, r3, #2
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d11b      	bne.n	8009338 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f06f 0202 	mvn.w	r2, #2
 8009308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	f003 0303 	and.w	r3, r3, #3
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f905 	bl	800952e <HAL_TIM_IC_CaptureCallback>
 8009324:	e005      	b.n	8009332 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f8f7 	bl	800951a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f908 	bl	8009542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	f003 0304 	and.w	r3, r3, #4
 8009342:	2b04      	cmp	r3, #4
 8009344:	d122      	bne.n	800938c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b04      	cmp	r3, #4
 8009352:	d11b      	bne.n	800938c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f06f 0204 	mvn.w	r2, #4
 800935c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2202      	movs	r2, #2
 8009362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f8db 	bl	800952e <HAL_TIM_IC_CaptureCallback>
 8009378:	e005      	b.n	8009386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f8cd 	bl	800951a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f8de 	bl	8009542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	f003 0308 	and.w	r3, r3, #8
 8009396:	2b08      	cmp	r3, #8
 8009398:	d122      	bne.n	80093e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	f003 0308 	and.w	r3, r3, #8
 80093a4:	2b08      	cmp	r3, #8
 80093a6:	d11b      	bne.n	80093e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f06f 0208 	mvn.w	r2, #8
 80093b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2204      	movs	r2, #4
 80093b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	f003 0303 	and.w	r3, r3, #3
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d003      	beq.n	80093ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f8b1 	bl	800952e <HAL_TIM_IC_CaptureCallback>
 80093cc:	e005      	b.n	80093da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f8a3 	bl	800951a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f8b4 	bl	8009542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f003 0310 	and.w	r3, r3, #16
 80093ea:	2b10      	cmp	r3, #16
 80093ec:	d122      	bne.n	8009434 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f003 0310 	and.w	r3, r3, #16
 80093f8:	2b10      	cmp	r3, #16
 80093fa:	d11b      	bne.n	8009434 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f06f 0210 	mvn.w	r2, #16
 8009404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2208      	movs	r2, #8
 800940a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	69db      	ldr	r3, [r3, #28]
 8009412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009416:	2b00      	cmp	r3, #0
 8009418:	d003      	beq.n	8009422 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f887 	bl	800952e <HAL_TIM_IC_CaptureCallback>
 8009420:	e005      	b.n	800942e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f879 	bl	800951a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f88a 	bl	8009542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b01      	cmp	r3, #1
 8009440:	d10e      	bne.n	8009460 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	f003 0301 	and.w	r3, r3, #1
 800944c:	2b01      	cmp	r3, #1
 800944e:	d107      	bne.n	8009460 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f06f 0201 	mvn.w	r2, #1
 8009458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7f8 f8ba 	bl	80015d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800946a:	2b80      	cmp	r3, #128	; 0x80
 800946c:	d10e      	bne.n	800948c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009478:	2b80      	cmp	r3, #128	; 0x80
 800947a:	d107      	bne.n	800948c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f91a 	bl	80096c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800949a:	d10e      	bne.n	80094ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a6:	2b80      	cmp	r3, #128	; 0x80
 80094a8:	d107      	bne.n	80094ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80094b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f90d 	bl	80096d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c4:	2b40      	cmp	r3, #64	; 0x40
 80094c6:	d10e      	bne.n	80094e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d2:	2b40      	cmp	r3, #64	; 0x40
 80094d4:	d107      	bne.n	80094e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f838 	bl	8009556 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	f003 0320 	and.w	r3, r3, #32
 80094f0:	2b20      	cmp	r3, #32
 80094f2:	d10e      	bne.n	8009512 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	f003 0320 	and.w	r3, r3, #32
 80094fe:	2b20      	cmp	r3, #32
 8009500:	d107      	bne.n	8009512 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f06f 0220 	mvn.w	r2, #32
 800950a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f8cd 	bl	80096ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009512:	bf00      	nop
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800951a:	b480      	push	{r7}
 800951c:	b083      	sub	sp, #12
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009522:	bf00      	nop
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr

0800952e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800952e:	b480      	push	{r7}
 8009530:	b083      	sub	sp, #12
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009536:	bf00      	nop
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009542:	b480      	push	{r7}
 8009544:	b083      	sub	sp, #12
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800954a:	bf00      	nop
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800955e:	bf00      	nop
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
	...

0800956c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a40      	ldr	r2, [pc, #256]	; (8009680 <TIM_Base_SetConfig+0x114>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d013      	beq.n	80095ac <TIM_Base_SetConfig+0x40>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800958a:	d00f      	beq.n	80095ac <TIM_Base_SetConfig+0x40>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a3d      	ldr	r2, [pc, #244]	; (8009684 <TIM_Base_SetConfig+0x118>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d00b      	beq.n	80095ac <TIM_Base_SetConfig+0x40>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a3c      	ldr	r2, [pc, #240]	; (8009688 <TIM_Base_SetConfig+0x11c>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d007      	beq.n	80095ac <TIM_Base_SetConfig+0x40>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a3b      	ldr	r2, [pc, #236]	; (800968c <TIM_Base_SetConfig+0x120>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d003      	beq.n	80095ac <TIM_Base_SetConfig+0x40>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a3a      	ldr	r2, [pc, #232]	; (8009690 <TIM_Base_SetConfig+0x124>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d108      	bne.n	80095be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a2f      	ldr	r2, [pc, #188]	; (8009680 <TIM_Base_SetConfig+0x114>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d02b      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095cc:	d027      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a2c      	ldr	r2, [pc, #176]	; (8009684 <TIM_Base_SetConfig+0x118>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d023      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a2b      	ldr	r2, [pc, #172]	; (8009688 <TIM_Base_SetConfig+0x11c>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d01f      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a2a      	ldr	r2, [pc, #168]	; (800968c <TIM_Base_SetConfig+0x120>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d01b      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a29      	ldr	r2, [pc, #164]	; (8009690 <TIM_Base_SetConfig+0x124>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d017      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a28      	ldr	r2, [pc, #160]	; (8009694 <TIM_Base_SetConfig+0x128>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d013      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a27      	ldr	r2, [pc, #156]	; (8009698 <TIM_Base_SetConfig+0x12c>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d00f      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a26      	ldr	r2, [pc, #152]	; (800969c <TIM_Base_SetConfig+0x130>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d00b      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a25      	ldr	r2, [pc, #148]	; (80096a0 <TIM_Base_SetConfig+0x134>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d007      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a24      	ldr	r2, [pc, #144]	; (80096a4 <TIM_Base_SetConfig+0x138>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d003      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a23      	ldr	r2, [pc, #140]	; (80096a8 <TIM_Base_SetConfig+0x13c>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d108      	bne.n	8009630 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	4313      	orrs	r3, r2
 800962e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	4313      	orrs	r3, r2
 800963c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	689a      	ldr	r2, [r3, #8]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a0a      	ldr	r2, [pc, #40]	; (8009680 <TIM_Base_SetConfig+0x114>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d003      	beq.n	8009664 <TIM_Base_SetConfig+0xf8>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a0c      	ldr	r2, [pc, #48]	; (8009690 <TIM_Base_SetConfig+0x124>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d103      	bne.n	800966c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	691a      	ldr	r2, [r3, #16]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	615a      	str	r2, [r3, #20]
}
 8009672:	bf00      	nop
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	40010000 	.word	0x40010000
 8009684:	40000400 	.word	0x40000400
 8009688:	40000800 	.word	0x40000800
 800968c:	40000c00 	.word	0x40000c00
 8009690:	40010400 	.word	0x40010400
 8009694:	40014000 	.word	0x40014000
 8009698:	40014400 	.word	0x40014400
 800969c:	40014800 	.word	0x40014800
 80096a0:	40001800 	.word	0x40001800
 80096a4:	40001c00 	.word	0x40001c00
 80096a8:	40002000 	.word	0x40002000

080096ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e040      	b.n	800977c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d106      	bne.n	8009710 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7f8 f8d8 	bl	80018c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2224      	movs	r2, #36	; 0x24
 8009714:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f022 0201 	bic.w	r2, r2, #1
 8009724:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f8be 	bl	80098a8 <UART_SetConfig>
 800972c:	4603      	mov	r3, r0
 800972e:	2b01      	cmp	r3, #1
 8009730:	d101      	bne.n	8009736 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e022      	b.n	800977c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fb56 	bl	8009df0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	685a      	ldr	r2, [r3, #4]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	689a      	ldr	r2, [r3, #8]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009762:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0201 	orr.w	r2, r2, #1
 8009772:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fbdd 	bl	8009f34 <UART_CheckIdleState>
 800977a:	4603      	mov	r3, r0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b08a      	sub	sp, #40	; 0x28
 8009788:	af02      	add	r7, sp, #8
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	603b      	str	r3, [r7, #0]
 8009790:	4613      	mov	r3, r2
 8009792:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009798:	2b20      	cmp	r3, #32
 800979a:	d17f      	bne.n	800989c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d002      	beq.n	80097a8 <HAL_UART_Transmit+0x24>
 80097a2:	88fb      	ldrh	r3, [r7, #6]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d101      	bne.n	80097ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e078      	b.n	800989e <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d101      	bne.n	80097ba <HAL_UART_Transmit+0x36>
 80097b6:	2302      	movs	r3, #2
 80097b8:	e071      	b.n	800989e <HAL_UART_Transmit+0x11a>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2221      	movs	r2, #33	; 0x21
 80097cc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80097ce:	f7fa f837 	bl	8003840 <HAL_GetTick>
 80097d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	88fa      	ldrh	r2, [r7, #6]
 80097d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	88fa      	ldrh	r2, [r7, #6]
 80097e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ec:	d108      	bne.n	8009800 <HAL_UART_Transmit+0x7c>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d104      	bne.n	8009800 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80097f6:	2300      	movs	r3, #0
 80097f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	61bb      	str	r3, [r7, #24]
 80097fe:	e003      	b.n	8009808 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009804:	2300      	movs	r3, #0
 8009806:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009808:	e02c      	b.n	8009864 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	2200      	movs	r2, #0
 8009812:	2180      	movs	r1, #128	; 0x80
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f000 fbbc 	bl	8009f92 <UART_WaitOnFlagUntilTimeout>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e03c      	b.n	800989e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10b      	bne.n	8009842 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	461a      	mov	r2, r3
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009838:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	3302      	adds	r3, #2
 800983e:	61bb      	str	r3, [r7, #24]
 8009840:	e007      	b.n	8009852 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	781a      	ldrb	r2, [r3, #0]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	3301      	adds	r3, #1
 8009850:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009858:	b29b      	uxth	r3, r3
 800985a:	3b01      	subs	r3, #1
 800985c:	b29a      	uxth	r2, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800986a:	b29b      	uxth	r3, r3
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1cc      	bne.n	800980a <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	2200      	movs	r2, #0
 8009878:	2140      	movs	r1, #64	; 0x40
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f000 fb89 	bl	8009f92 <UART_WaitOnFlagUntilTimeout>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8009886:	2303      	movs	r3, #3
 8009888:	e009      	b.n	800989e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2220      	movs	r2, #32
 800988e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	e000      	b.n	800989e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800989c:	2302      	movs	r3, #2
  }
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3720      	adds	r7, #32
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
	...

080098a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b088      	sub	sp, #32
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80098b0:	2300      	movs	r3, #0
 80098b2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	689a      	ldr	r2, [r3, #8]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	431a      	orrs	r2, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	431a      	orrs	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	69db      	ldr	r3, [r3, #28]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	4bb1      	ldr	r3, [pc, #708]	; (8009b9c <UART_SetConfig+0x2f4>)
 80098d8:	4013      	ands	r3, r2
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	6812      	ldr	r2, [r2, #0]
 80098de:	6939      	ldr	r1, [r7, #16]
 80098e0:	430b      	orrs	r3, r1
 80098e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	68da      	ldr	r2, [r3, #12]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	430a      	orrs	r2, r1
 80098f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	699b      	ldr	r3, [r3, #24]
 80098fe:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a1b      	ldr	r3, [r3, #32]
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	4313      	orrs	r3, r2
 8009908:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	430a      	orrs	r2, r1
 800991c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a9f      	ldr	r2, [pc, #636]	; (8009ba0 <UART_SetConfig+0x2f8>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d121      	bne.n	800996c <UART_SetConfig+0xc4>
 8009928:	4b9e      	ldr	r3, [pc, #632]	; (8009ba4 <UART_SetConfig+0x2fc>)
 800992a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800992e:	f003 0303 	and.w	r3, r3, #3
 8009932:	2b03      	cmp	r3, #3
 8009934:	d816      	bhi.n	8009964 <UART_SetConfig+0xbc>
 8009936:	a201      	add	r2, pc, #4	; (adr r2, 800993c <UART_SetConfig+0x94>)
 8009938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993c:	0800994d 	.word	0x0800994d
 8009940:	08009959 	.word	0x08009959
 8009944:	08009953 	.word	0x08009953
 8009948:	0800995f 	.word	0x0800995f
 800994c:	2301      	movs	r3, #1
 800994e:	77fb      	strb	r3, [r7, #31]
 8009950:	e151      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009952:	2302      	movs	r3, #2
 8009954:	77fb      	strb	r3, [r7, #31]
 8009956:	e14e      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009958:	2304      	movs	r3, #4
 800995a:	77fb      	strb	r3, [r7, #31]
 800995c:	e14b      	b.n	8009bf6 <UART_SetConfig+0x34e>
 800995e:	2308      	movs	r3, #8
 8009960:	77fb      	strb	r3, [r7, #31]
 8009962:	e148      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009964:	2310      	movs	r3, #16
 8009966:	77fb      	strb	r3, [r7, #31]
 8009968:	bf00      	nop
 800996a:	e144      	b.n	8009bf6 <UART_SetConfig+0x34e>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a8d      	ldr	r2, [pc, #564]	; (8009ba8 <UART_SetConfig+0x300>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d134      	bne.n	80099e0 <UART_SetConfig+0x138>
 8009976:	4b8b      	ldr	r3, [pc, #556]	; (8009ba4 <UART_SetConfig+0x2fc>)
 8009978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800997c:	f003 030c 	and.w	r3, r3, #12
 8009980:	2b0c      	cmp	r3, #12
 8009982:	d829      	bhi.n	80099d8 <UART_SetConfig+0x130>
 8009984:	a201      	add	r2, pc, #4	; (adr r2, 800998c <UART_SetConfig+0xe4>)
 8009986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998a:	bf00      	nop
 800998c:	080099c1 	.word	0x080099c1
 8009990:	080099d9 	.word	0x080099d9
 8009994:	080099d9 	.word	0x080099d9
 8009998:	080099d9 	.word	0x080099d9
 800999c:	080099cd 	.word	0x080099cd
 80099a0:	080099d9 	.word	0x080099d9
 80099a4:	080099d9 	.word	0x080099d9
 80099a8:	080099d9 	.word	0x080099d9
 80099ac:	080099c7 	.word	0x080099c7
 80099b0:	080099d9 	.word	0x080099d9
 80099b4:	080099d9 	.word	0x080099d9
 80099b8:	080099d9 	.word	0x080099d9
 80099bc:	080099d3 	.word	0x080099d3
 80099c0:	2300      	movs	r3, #0
 80099c2:	77fb      	strb	r3, [r7, #31]
 80099c4:	e117      	b.n	8009bf6 <UART_SetConfig+0x34e>
 80099c6:	2302      	movs	r3, #2
 80099c8:	77fb      	strb	r3, [r7, #31]
 80099ca:	e114      	b.n	8009bf6 <UART_SetConfig+0x34e>
 80099cc:	2304      	movs	r3, #4
 80099ce:	77fb      	strb	r3, [r7, #31]
 80099d0:	e111      	b.n	8009bf6 <UART_SetConfig+0x34e>
 80099d2:	2308      	movs	r3, #8
 80099d4:	77fb      	strb	r3, [r7, #31]
 80099d6:	e10e      	b.n	8009bf6 <UART_SetConfig+0x34e>
 80099d8:	2310      	movs	r3, #16
 80099da:	77fb      	strb	r3, [r7, #31]
 80099dc:	bf00      	nop
 80099de:	e10a      	b.n	8009bf6 <UART_SetConfig+0x34e>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a71      	ldr	r2, [pc, #452]	; (8009bac <UART_SetConfig+0x304>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d120      	bne.n	8009a2c <UART_SetConfig+0x184>
 80099ea:	4b6e      	ldr	r3, [pc, #440]	; (8009ba4 <UART_SetConfig+0x2fc>)
 80099ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80099f4:	2b10      	cmp	r3, #16
 80099f6:	d00f      	beq.n	8009a18 <UART_SetConfig+0x170>
 80099f8:	2b10      	cmp	r3, #16
 80099fa:	d802      	bhi.n	8009a02 <UART_SetConfig+0x15a>
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d005      	beq.n	8009a0c <UART_SetConfig+0x164>
 8009a00:	e010      	b.n	8009a24 <UART_SetConfig+0x17c>
 8009a02:	2b20      	cmp	r3, #32
 8009a04:	d005      	beq.n	8009a12 <UART_SetConfig+0x16a>
 8009a06:	2b30      	cmp	r3, #48	; 0x30
 8009a08:	d009      	beq.n	8009a1e <UART_SetConfig+0x176>
 8009a0a:	e00b      	b.n	8009a24 <UART_SetConfig+0x17c>
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	77fb      	strb	r3, [r7, #31]
 8009a10:	e0f1      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009a12:	2302      	movs	r3, #2
 8009a14:	77fb      	strb	r3, [r7, #31]
 8009a16:	e0ee      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009a18:	2304      	movs	r3, #4
 8009a1a:	77fb      	strb	r3, [r7, #31]
 8009a1c:	e0eb      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009a1e:	2308      	movs	r3, #8
 8009a20:	77fb      	strb	r3, [r7, #31]
 8009a22:	e0e8      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009a24:	2310      	movs	r3, #16
 8009a26:	77fb      	strb	r3, [r7, #31]
 8009a28:	bf00      	nop
 8009a2a:	e0e4      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a5f      	ldr	r2, [pc, #380]	; (8009bb0 <UART_SetConfig+0x308>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d120      	bne.n	8009a78 <UART_SetConfig+0x1d0>
 8009a36:	4b5b      	ldr	r3, [pc, #364]	; (8009ba4 <UART_SetConfig+0x2fc>)
 8009a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009a40:	2b40      	cmp	r3, #64	; 0x40
 8009a42:	d00f      	beq.n	8009a64 <UART_SetConfig+0x1bc>
 8009a44:	2b40      	cmp	r3, #64	; 0x40
 8009a46:	d802      	bhi.n	8009a4e <UART_SetConfig+0x1a6>
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d005      	beq.n	8009a58 <UART_SetConfig+0x1b0>
 8009a4c:	e010      	b.n	8009a70 <UART_SetConfig+0x1c8>
 8009a4e:	2b80      	cmp	r3, #128	; 0x80
 8009a50:	d005      	beq.n	8009a5e <UART_SetConfig+0x1b6>
 8009a52:	2bc0      	cmp	r3, #192	; 0xc0
 8009a54:	d009      	beq.n	8009a6a <UART_SetConfig+0x1c2>
 8009a56:	e00b      	b.n	8009a70 <UART_SetConfig+0x1c8>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	77fb      	strb	r3, [r7, #31]
 8009a5c:	e0cb      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009a5e:	2302      	movs	r3, #2
 8009a60:	77fb      	strb	r3, [r7, #31]
 8009a62:	e0c8      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009a64:	2304      	movs	r3, #4
 8009a66:	77fb      	strb	r3, [r7, #31]
 8009a68:	e0c5      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009a6a:	2308      	movs	r3, #8
 8009a6c:	77fb      	strb	r3, [r7, #31]
 8009a6e:	e0c2      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009a70:	2310      	movs	r3, #16
 8009a72:	77fb      	strb	r3, [r7, #31]
 8009a74:	bf00      	nop
 8009a76:	e0be      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a4d      	ldr	r2, [pc, #308]	; (8009bb4 <UART_SetConfig+0x30c>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d124      	bne.n	8009acc <UART_SetConfig+0x224>
 8009a82:	4b48      	ldr	r3, [pc, #288]	; (8009ba4 <UART_SetConfig+0x2fc>)
 8009a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a90:	d012      	beq.n	8009ab8 <UART_SetConfig+0x210>
 8009a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a96:	d802      	bhi.n	8009a9e <UART_SetConfig+0x1f6>
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d007      	beq.n	8009aac <UART_SetConfig+0x204>
 8009a9c:	e012      	b.n	8009ac4 <UART_SetConfig+0x21c>
 8009a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009aa2:	d006      	beq.n	8009ab2 <UART_SetConfig+0x20a>
 8009aa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009aa8:	d009      	beq.n	8009abe <UART_SetConfig+0x216>
 8009aaa:	e00b      	b.n	8009ac4 <UART_SetConfig+0x21c>
 8009aac:	2300      	movs	r3, #0
 8009aae:	77fb      	strb	r3, [r7, #31]
 8009ab0:	e0a1      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	77fb      	strb	r3, [r7, #31]
 8009ab6:	e09e      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009ab8:	2304      	movs	r3, #4
 8009aba:	77fb      	strb	r3, [r7, #31]
 8009abc:	e09b      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009abe:	2308      	movs	r3, #8
 8009ac0:	77fb      	strb	r3, [r7, #31]
 8009ac2:	e098      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009ac4:	2310      	movs	r3, #16
 8009ac6:	77fb      	strb	r3, [r7, #31]
 8009ac8:	bf00      	nop
 8009aca:	e094      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a39      	ldr	r2, [pc, #228]	; (8009bb8 <UART_SetConfig+0x310>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d124      	bne.n	8009b20 <UART_SetConfig+0x278>
 8009ad6:	4b33      	ldr	r3, [pc, #204]	; (8009ba4 <UART_SetConfig+0x2fc>)
 8009ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009adc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ae4:	d012      	beq.n	8009b0c <UART_SetConfig+0x264>
 8009ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009aea:	d802      	bhi.n	8009af2 <UART_SetConfig+0x24a>
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d007      	beq.n	8009b00 <UART_SetConfig+0x258>
 8009af0:	e012      	b.n	8009b18 <UART_SetConfig+0x270>
 8009af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009af6:	d006      	beq.n	8009b06 <UART_SetConfig+0x25e>
 8009af8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009afc:	d009      	beq.n	8009b12 <UART_SetConfig+0x26a>
 8009afe:	e00b      	b.n	8009b18 <UART_SetConfig+0x270>
 8009b00:	2301      	movs	r3, #1
 8009b02:	77fb      	strb	r3, [r7, #31]
 8009b04:	e077      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009b06:	2302      	movs	r3, #2
 8009b08:	77fb      	strb	r3, [r7, #31]
 8009b0a:	e074      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009b0c:	2304      	movs	r3, #4
 8009b0e:	77fb      	strb	r3, [r7, #31]
 8009b10:	e071      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009b12:	2308      	movs	r3, #8
 8009b14:	77fb      	strb	r3, [r7, #31]
 8009b16:	e06e      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009b18:	2310      	movs	r3, #16
 8009b1a:	77fb      	strb	r3, [r7, #31]
 8009b1c:	bf00      	nop
 8009b1e:	e06a      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a25      	ldr	r2, [pc, #148]	; (8009bbc <UART_SetConfig+0x314>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d124      	bne.n	8009b74 <UART_SetConfig+0x2cc>
 8009b2a:	4b1e      	ldr	r3, [pc, #120]	; (8009ba4 <UART_SetConfig+0x2fc>)
 8009b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b30:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b38:	d012      	beq.n	8009b60 <UART_SetConfig+0x2b8>
 8009b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b3e:	d802      	bhi.n	8009b46 <UART_SetConfig+0x29e>
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d007      	beq.n	8009b54 <UART_SetConfig+0x2ac>
 8009b44:	e012      	b.n	8009b6c <UART_SetConfig+0x2c4>
 8009b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b4a:	d006      	beq.n	8009b5a <UART_SetConfig+0x2b2>
 8009b4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b50:	d009      	beq.n	8009b66 <UART_SetConfig+0x2be>
 8009b52:	e00b      	b.n	8009b6c <UART_SetConfig+0x2c4>
 8009b54:	2300      	movs	r3, #0
 8009b56:	77fb      	strb	r3, [r7, #31]
 8009b58:	e04d      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	77fb      	strb	r3, [r7, #31]
 8009b5e:	e04a      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009b60:	2304      	movs	r3, #4
 8009b62:	77fb      	strb	r3, [r7, #31]
 8009b64:	e047      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009b66:	2308      	movs	r3, #8
 8009b68:	77fb      	strb	r3, [r7, #31]
 8009b6a:	e044      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009b6c:	2310      	movs	r3, #16
 8009b6e:	77fb      	strb	r3, [r7, #31]
 8009b70:	bf00      	nop
 8009b72:	e040      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a11      	ldr	r2, [pc, #68]	; (8009bc0 <UART_SetConfig+0x318>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d139      	bne.n	8009bf2 <UART_SetConfig+0x34a>
 8009b7e:	4b09      	ldr	r3, [pc, #36]	; (8009ba4 <UART_SetConfig+0x2fc>)
 8009b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b8c:	d027      	beq.n	8009bde <UART_SetConfig+0x336>
 8009b8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b92:	d817      	bhi.n	8009bc4 <UART_SetConfig+0x31c>
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d01c      	beq.n	8009bd2 <UART_SetConfig+0x32a>
 8009b98:	e027      	b.n	8009bea <UART_SetConfig+0x342>
 8009b9a:	bf00      	nop
 8009b9c:	efff69f3 	.word	0xefff69f3
 8009ba0:	40011000 	.word	0x40011000
 8009ba4:	40023800 	.word	0x40023800
 8009ba8:	40004400 	.word	0x40004400
 8009bac:	40004800 	.word	0x40004800
 8009bb0:	40004c00 	.word	0x40004c00
 8009bb4:	40005000 	.word	0x40005000
 8009bb8:	40011400 	.word	0x40011400
 8009bbc:	40007800 	.word	0x40007800
 8009bc0:	40007c00 	.word	0x40007c00
 8009bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bc8:	d006      	beq.n	8009bd8 <UART_SetConfig+0x330>
 8009bca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009bce:	d009      	beq.n	8009be4 <UART_SetConfig+0x33c>
 8009bd0:	e00b      	b.n	8009bea <UART_SetConfig+0x342>
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	77fb      	strb	r3, [r7, #31]
 8009bd6:	e00e      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009bd8:	2302      	movs	r3, #2
 8009bda:	77fb      	strb	r3, [r7, #31]
 8009bdc:	e00b      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009bde:	2304      	movs	r3, #4
 8009be0:	77fb      	strb	r3, [r7, #31]
 8009be2:	e008      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009be4:	2308      	movs	r3, #8
 8009be6:	77fb      	strb	r3, [r7, #31]
 8009be8:	e005      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009bea:	2310      	movs	r3, #16
 8009bec:	77fb      	strb	r3, [r7, #31]
 8009bee:	bf00      	nop
 8009bf0:	e001      	b.n	8009bf6 <UART_SetConfig+0x34e>
 8009bf2:	2310      	movs	r3, #16
 8009bf4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	69db      	ldr	r3, [r3, #28]
 8009bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bfe:	d17c      	bne.n	8009cfa <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8009c00:	7ffb      	ldrb	r3, [r7, #31]
 8009c02:	2b08      	cmp	r3, #8
 8009c04:	d859      	bhi.n	8009cba <UART_SetConfig+0x412>
 8009c06:	a201      	add	r2, pc, #4	; (adr r2, 8009c0c <UART_SetConfig+0x364>)
 8009c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0c:	08009c31 	.word	0x08009c31
 8009c10:	08009c4f 	.word	0x08009c4f
 8009c14:	08009c6d 	.word	0x08009c6d
 8009c18:	08009cbb 	.word	0x08009cbb
 8009c1c:	08009c85 	.word	0x08009c85
 8009c20:	08009cbb 	.word	0x08009cbb
 8009c24:	08009cbb 	.word	0x08009cbb
 8009c28:	08009cbb 	.word	0x08009cbb
 8009c2c:	08009ca3 	.word	0x08009ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009c30:	f7fd fe56 	bl	80078e0 <HAL_RCC_GetPCLK1Freq>
 8009c34:	4603      	mov	r3, r0
 8009c36:	005a      	lsls	r2, r3, #1
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	085b      	lsrs	r3, r3, #1
 8009c3e:	441a      	add	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	61bb      	str	r3, [r7, #24]
        break;
 8009c4c:	e038      	b.n	8009cc0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009c4e:	f7fd fe5b 	bl	8007908 <HAL_RCC_GetPCLK2Freq>
 8009c52:	4603      	mov	r3, r0
 8009c54:	005a      	lsls	r2, r3, #1
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	085b      	lsrs	r3, r3, #1
 8009c5c:	441a      	add	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	61bb      	str	r3, [r7, #24]
        break;
 8009c6a:	e029      	b.n	8009cc0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	085a      	lsrs	r2, r3, #1
 8009c72:	4b5d      	ldr	r3, [pc, #372]	; (8009de8 <UART_SetConfig+0x540>)
 8009c74:	4413      	add	r3, r2
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	6852      	ldr	r2, [r2, #4]
 8009c7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	61bb      	str	r3, [r7, #24]
        break;
 8009c82:	e01d      	b.n	8009cc0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009c84:	f7fd fd6e 	bl	8007764 <HAL_RCC_GetSysClockFreq>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	005a      	lsls	r2, r3, #1
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	085b      	lsrs	r3, r3, #1
 8009c92:	441a      	add	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	61bb      	str	r3, [r7, #24]
        break;
 8009ca0:	e00e      	b.n	8009cc0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	085b      	lsrs	r3, r3, #1
 8009ca8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	61bb      	str	r3, [r7, #24]
        break;
 8009cb8:	e002      	b.n	8009cc0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	75fb      	strb	r3, [r7, #23]
        break;
 8009cbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	2b0f      	cmp	r3, #15
 8009cc4:	d916      	bls.n	8009cf4 <UART_SetConfig+0x44c>
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ccc:	d212      	bcs.n	8009cf4 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	f023 030f 	bic.w	r3, r3, #15
 8009cd6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	085b      	lsrs	r3, r3, #1
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	f003 0307 	and.w	r3, r3, #7
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	89fb      	ldrh	r3, [r7, #14]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	89fa      	ldrh	r2, [r7, #14]
 8009cf0:	60da      	str	r2, [r3, #12]
 8009cf2:	e06e      	b.n	8009dd2 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	75fb      	strb	r3, [r7, #23]
 8009cf8:	e06b      	b.n	8009dd2 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8009cfa:	7ffb      	ldrb	r3, [r7, #31]
 8009cfc:	2b08      	cmp	r3, #8
 8009cfe:	d857      	bhi.n	8009db0 <UART_SetConfig+0x508>
 8009d00:	a201      	add	r2, pc, #4	; (adr r2, 8009d08 <UART_SetConfig+0x460>)
 8009d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d06:	bf00      	nop
 8009d08:	08009d2d 	.word	0x08009d2d
 8009d0c:	08009d49 	.word	0x08009d49
 8009d10:	08009d65 	.word	0x08009d65
 8009d14:	08009db1 	.word	0x08009db1
 8009d18:	08009d7d 	.word	0x08009d7d
 8009d1c:	08009db1 	.word	0x08009db1
 8009d20:	08009db1 	.word	0x08009db1
 8009d24:	08009db1 	.word	0x08009db1
 8009d28:	08009d99 	.word	0x08009d99
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009d2c:	f7fd fdd8 	bl	80078e0 <HAL_RCC_GetPCLK1Freq>
 8009d30:	4602      	mov	r2, r0
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	085b      	lsrs	r3, r3, #1
 8009d38:	441a      	add	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	61bb      	str	r3, [r7, #24]
        break;
 8009d46:	e036      	b.n	8009db6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009d48:	f7fd fdde 	bl	8007908 <HAL_RCC_GetPCLK2Freq>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	085b      	lsrs	r3, r3, #1
 8009d54:	441a      	add	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	61bb      	str	r3, [r7, #24]
        break;
 8009d62:	e028      	b.n	8009db6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	085a      	lsrs	r2, r3, #1
 8009d6a:	4b20      	ldr	r3, [pc, #128]	; (8009dec <UART_SetConfig+0x544>)
 8009d6c:	4413      	add	r3, r2
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	6852      	ldr	r2, [r2, #4]
 8009d72:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	61bb      	str	r3, [r7, #24]
        break;
 8009d7a:	e01c      	b.n	8009db6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009d7c:	f7fd fcf2 	bl	8007764 <HAL_RCC_GetSysClockFreq>
 8009d80:	4602      	mov	r2, r0
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	085b      	lsrs	r3, r3, #1
 8009d88:	441a      	add	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	61bb      	str	r3, [r7, #24]
        break;
 8009d96:	e00e      	b.n	8009db6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	085b      	lsrs	r3, r3, #1
 8009d9e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	61bb      	str	r3, [r7, #24]
        break;
 8009dae:	e002      	b.n	8009db6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	75fb      	strb	r3, [r7, #23]
        break;
 8009db4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	2b0f      	cmp	r3, #15
 8009dba:	d908      	bls.n	8009dce <UART_SetConfig+0x526>
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dc2:	d204      	bcs.n	8009dce <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	69ba      	ldr	r2, [r7, #24]
 8009dca:	60da      	str	r2, [r3, #12]
 8009dcc:	e001      	b.n	8009dd2 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3720      	adds	r7, #32
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	01e84800 	.word	0x01e84800
 8009dec:	00f42400 	.word	0x00f42400

08009df0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00a      	beq.n	8009e1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	430a      	orrs	r2, r1
 8009e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1e:	f003 0302 	and.w	r3, r3, #2
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00a      	beq.n	8009e3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	430a      	orrs	r2, r1
 8009e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e40:	f003 0304 	and.w	r3, r3, #4
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00a      	beq.n	8009e5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	430a      	orrs	r2, r1
 8009e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e62:	f003 0308 	and.w	r3, r3, #8
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00a      	beq.n	8009e80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	430a      	orrs	r2, r1
 8009e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e84:	f003 0310 	and.w	r3, r3, #16
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00a      	beq.n	8009ea2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea6:	f003 0320 	and.w	r3, r3, #32
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	430a      	orrs	r2, r1
 8009ec2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d01a      	beq.n	8009f06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	430a      	orrs	r2, r1
 8009ee4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009eee:	d10a      	bne.n	8009f06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	430a      	orrs	r2, r1
 8009f04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00a      	beq.n	8009f28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	430a      	orrs	r2, r1
 8009f26:	605a      	str	r2, [r3, #4]
  }
}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af02      	add	r7, sp, #8
 8009f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009f42:	f7f9 fc7d 	bl	8003840 <HAL_GetTick>
 8009f46:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 0308 	and.w	r3, r3, #8
 8009f52:	2b08      	cmp	r3, #8
 8009f54:	d10e      	bne.n	8009f74 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f5a:	9300      	str	r3, [sp, #0]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f814 	bl	8009f92 <UART_WaitOnFlagUntilTimeout>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f70:	2303      	movs	r3, #3
 8009f72:	e00a      	b.n	8009f8a <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2220      	movs	r2, #32
 8009f78:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2220      	movs	r2, #32
 8009f7e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b084      	sub	sp, #16
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	60f8      	str	r0, [r7, #12]
 8009f9a:	60b9      	str	r1, [r7, #8]
 8009f9c:	603b      	str	r3, [r7, #0]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fa2:	e02a      	b.n	8009ffa <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009faa:	d026      	beq.n	8009ffa <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fac:	f7f9 fc48 	bl	8003840 <HAL_GetTick>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	1ad3      	subs	r3, r2, r3
 8009fb6:	69ba      	ldr	r2, [r7, #24]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d302      	bcc.n	8009fc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d11b      	bne.n	8009ffa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009fd0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	689a      	ldr	r2, [r3, #8]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f022 0201 	bic.w	r2, r2, #1
 8009fe0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2220      	movs	r2, #32
 8009fe6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2220      	movs	r2, #32
 8009fec:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009ff6:	2303      	movs	r3, #3
 8009ff8:	e00f      	b.n	800a01a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	69da      	ldr	r2, [r3, #28]
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	4013      	ands	r3, r2
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	429a      	cmp	r2, r3
 800a008:	bf0c      	ite	eq
 800a00a:	2301      	moveq	r3, #1
 800a00c:	2300      	movne	r3, #0
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	461a      	mov	r2, r3
 800a012:	79fb      	ldrb	r3, [r7, #7]
 800a014:	429a      	cmp	r2, r3
 800a016:	d0c5      	beq.n	8009fa4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
	...

0800a024 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a02e:	2300      	movs	r3, #0
 800a030:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a032:	2300      	movs	r3, #0
 800a034:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d027      	beq.n	800a08e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	4b2f      	ldr	r3, [pc, #188]	; (800a104 <FMC_SDRAM_Init+0xe0>)
 800a048:	4013      	ands	r3, r2
 800a04a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a054:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a05a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a060:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a066:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a06c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a072:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a078:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a07e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	4313      	orrs	r3, r2
 800a084:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	601a      	str	r2, [r3, #0]
 800a08c:	e032      	b.n	800a0f4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a09a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a0a4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a0aa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	4b12      	ldr	r3, [pc, #72]	; (800a104 <FMC_SDRAM_Init+0xe0>)
 800a0bc:	4013      	ands	r3, r2
 800a0be:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a0c8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a0ce:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a0d4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a0da:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a0e0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	ffff8000 	.word	0xffff8000

0800a108 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a108:	b480      	push	{r7}
 800a10a:	b087      	sub	sp, #28
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a114:	2300      	movs	r3, #0
 800a116:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d02e      	beq.n	800a180 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a12e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a13e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	3b01      	subs	r3, #1
 800a146:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a148:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	3b01      	subs	r3, #1
 800a150:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a152:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	3b01      	subs	r3, #1
 800a15a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a15c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	695b      	ldr	r3, [r3, #20]
 800a162:	3b01      	subs	r3, #1
 800a164:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a166:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	699b      	ldr	r3, [r3, #24]
 800a16c:	3b01      	subs	r3, #1
 800a16e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a170:	4313      	orrs	r3, r2
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	4313      	orrs	r3, r2
 800a176:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	697a      	ldr	r2, [r7, #20]
 800a17c:	609a      	str	r2, [r3, #8]
 800a17e:	e039      	b.n	800a1f4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	4b1e      	ldr	r3, [pc, #120]	; (800a204 <FMC_SDRAM_Timing_Init+0xfc>)
 800a18a:	4013      	ands	r3, r2
 800a18c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	3b01      	subs	r3, #1
 800a194:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	695b      	ldr	r3, [r3, #20]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a1b2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a1c2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a1cc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a1d6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	371c      	adds	r7, #28
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	ff0f0fff 	.word	0xff0f0fff

0800a208 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a208:	b480      	push	{r7}
 800a20a:	b087      	sub	sp, #28
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800a214:	2300      	movs	r3, #0
 800a216:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a220:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	3b01      	subs	r3, #1
 800a228:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a22a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a232:	4313      	orrs	r3, r2
 800a234:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	371c      	adds	r7, #28
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a24a:	b480      	push	{r7}
 800a24c:	b083      	sub	sp, #12
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
 800a252:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	695a      	ldr	r2, [r3, #20]
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	005b      	lsls	r3, r3, #1
 800a25c:	431a      	orrs	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a270:	b084      	sub	sp, #16
 800a272:	b480      	push	{r7}
 800a274:	b085      	sub	sp, #20
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
 800a27a:	f107 001c 	add.w	r0, r7, #28
 800a27e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a282:	2300      	movs	r3, #0
 800a284:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a286:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a288:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a28a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a28e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a290:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a292:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a296:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a29a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	685a      	ldr	r2, [r3, #4]
 800a2a6:	4b07      	ldr	r3, [pc, #28]	; (800a2c4 <SDMMC_Init+0x54>)
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	431a      	orrs	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	b004      	add	sp, #16
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	ffff8100 	.word	0xffff8100

0800a2c8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800a2e2:	b480      	push	{r7}
 800a2e4:	b083      	sub	sp, #12
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2203      	movs	r2, #3
 800a310:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 0303 	and.w	r3, r3, #3
}
 800a330:	4618      	mov	r0, r3
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a346:	2300      	movs	r3, #0
 800a348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a35a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a360:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a366:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	68da      	ldr	r2, [r3, #12]
 800a372:	4b06      	ldr	r3, [pc, #24]	; (800a38c <SDMMC_SendCommand+0x50>)
 800a374:	4013      	ands	r3, r2
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	431a      	orrs	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3714      	adds	r7, #20
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr
 800a38c:	fffff000 	.word	0xfffff000

0800a390 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	691b      	ldr	r3, [r3, #16]
 800a39c:	b2db      	uxtb	r3, r3
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b085      	sub	sp, #20
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	3314      	adds	r3, #20
 800a3bc:	461a      	mov	r2, r3
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
}  
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	685a      	ldr	r2, [r3, #4]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a3fa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a400:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a406:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a412:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	431a      	orrs	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a41e:	2300      	movs	r3, #0

}
 800a420:	4618      	mov	r0, r3
 800a422:	3714      	adds	r7, #20
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b088      	sub	sp, #32
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a436:	2300      	movs	r3, #0
 800a438:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a43e:	2310      	movs	r3, #16
 800a440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a442:	2340      	movs	r3, #64	; 0x40
 800a444:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a446:	2300      	movs	r3, #0
 800a448:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a44a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a44e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a450:	f107 0308 	add.w	r3, r7, #8
 800a454:	4619      	mov	r1, r3
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7ff ff70 	bl	800a33c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a45c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a460:	2110      	movs	r1, #16
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fa1c 	bl	800a8a0 <SDMMC_GetCmdResp1>
 800a468:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a46a:	69fb      	ldr	r3, [r7, #28]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3720      	adds	r7, #32
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b088      	sub	sp, #32
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a47e:	2300      	movs	r3, #0
 800a480:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a486:	2311      	movs	r3, #17
 800a488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a48a:	2340      	movs	r3, #64	; 0x40
 800a48c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a48e:	2300      	movs	r3, #0
 800a490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a496:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a498:	f107 0308 	add.w	r3, r7, #8
 800a49c:	4619      	mov	r1, r3
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f7ff ff4c 	bl	800a33c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a4a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4a8:	2111      	movs	r1, #17
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 f9f8 	bl	800a8a0 <SDMMC_GetCmdResp1>
 800a4b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4b2:	69fb      	ldr	r3, [r7, #28]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3720      	adds	r7, #32
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b088      	sub	sp, #32
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a4ce:	2312      	movs	r3, #18
 800a4d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4d2:	2340      	movs	r3, #64	; 0x40
 800a4d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4de:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4e0:	f107 0308 	add.w	r3, r7, #8
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7ff ff28 	bl	800a33c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a4ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4f0:	2112      	movs	r1, #18
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f9d4 	bl	800a8a0 <SDMMC_GetCmdResp1>
 800a4f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4fa:	69fb      	ldr	r3, [r7, #28]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3720      	adds	r7, #32
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b088      	sub	sp, #32
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a50e:	2300      	movs	r3, #0
 800a510:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a516:	2318      	movs	r3, #24
 800a518:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a51a:	2340      	movs	r3, #64	; 0x40
 800a51c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a51e:	2300      	movs	r3, #0
 800a520:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a526:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a528:	f107 0308 	add.w	r3, r7, #8
 800a52c:	4619      	mov	r1, r3
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7ff ff04 	bl	800a33c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a534:	f241 3288 	movw	r2, #5000	; 0x1388
 800a538:	2118      	movs	r1, #24
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f9b0 	bl	800a8a0 <SDMMC_GetCmdResp1>
 800a540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a542:	69fb      	ldr	r3, [r7, #28]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3720      	adds	r7, #32
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b088      	sub	sp, #32
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a556:	2300      	movs	r3, #0
 800a558:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a55e:	2319      	movs	r3, #25
 800a560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a562:	2340      	movs	r3, #64	; 0x40
 800a564:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a566:	2300      	movs	r3, #0
 800a568:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a56a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a56e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a570:	f107 0308 	add.w	r3, r7, #8
 800a574:	4619      	mov	r1, r3
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7ff fee0 	bl	800a33c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a57c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a580:	2119      	movs	r1, #25
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 f98c 	bl	800a8a0 <SDMMC_GetCmdResp1>
 800a588:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a58a:	69fb      	ldr	r3, [r7, #28]
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3720      	adds	r7, #32
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b088      	sub	sp, #32
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a59c:	2300      	movs	r3, #0
 800a59e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a5a4:	230c      	movs	r3, #12
 800a5a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5a8:	2340      	movs	r3, #64	; 0x40
 800a5aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5b4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5b6:	f107 0308 	add.w	r3, r7, #8
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7ff febd 	bl	800a33c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 800a5c2:	4a05      	ldr	r2, [pc, #20]	; (800a5d8 <SDMMC_CmdStopTransfer+0x44>)
 800a5c4:	210c      	movs	r1, #12
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 f96a 	bl	800a8a0 <SDMMC_GetCmdResp1>
 800a5cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5ce:	69fb      	ldr	r3, [r7, #28]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3720      	adds	r7, #32
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	05f5e100 	.word	0x05f5e100

0800a5dc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b08a      	sub	sp, #40	; 0x28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a5f0:	2307      	movs	r3, #7
 800a5f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5f4:	2340      	movs	r3, #64	; 0x40
 800a5f6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a600:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a602:	f107 0310 	add.w	r3, r7, #16
 800a606:	4619      	mov	r1, r3
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	f7ff fe97 	bl	800a33c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a60e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a612:	2107      	movs	r1, #7
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f000 f943 	bl	800a8a0 <SDMMC_GetCmdResp1>
 800a61a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3728      	adds	r7, #40	; 0x28
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b088      	sub	sp, #32
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a62e:	2300      	movs	r3, #0
 800a630:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800a632:	2300      	movs	r3, #0
 800a634:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a636:	2300      	movs	r3, #0
 800a638:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a63a:	2300      	movs	r3, #0
 800a63c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a63e:	2300      	movs	r3, #0
 800a640:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a646:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a648:	f107 0308 	add.w	r3, r7, #8
 800a64c:	4619      	mov	r1, r3
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f7ff fe74 	bl	800a33c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 f8f9 	bl	800a84c <SDMMC_GetCmdError>
 800a65a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a65c:	69fb      	ldr	r3, [r7, #28]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3720      	adds	r7, #32
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b088      	sub	sp, #32
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a66e:	2300      	movs	r3, #0
 800a670:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a672:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a676:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a678:	2308      	movs	r3, #8
 800a67a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a67c:	2340      	movs	r3, #64	; 0x40
 800a67e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a680:	2300      	movs	r3, #0
 800a682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a688:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a68a:	f107 0308 	add.w	r3, r7, #8
 800a68e:	4619      	mov	r1, r3
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f7ff fe53 	bl	800a33c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 faca 	bl	800ac30 <SDMMC_GetCmdResp7>
 800a69c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a69e:	69fb      	ldr	r3, [r7, #28]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3720      	adds	r7, #32
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b088      	sub	sp, #32
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a6ba:	2337      	movs	r3, #55	; 0x37
 800a6bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6be:	2340      	movs	r3, #64	; 0x40
 800a6c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6ca:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6cc:	f107 0308 	add.w	r3, r7, #8
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff fe32 	bl	800a33c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a6d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6dc:	2137      	movs	r1, #55	; 0x37
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f8de 	bl	800a8a0 <SDMMC_GetCmdResp1>
 800a6e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6e6:	69fb      	ldr	r3, [r7, #28]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3720      	adds	r7, #32
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b088      	sub	sp, #32
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800a6fe:	683a      	ldr	r2, [r7, #0]
 800a700:	4b0d      	ldr	r3, [pc, #52]	; (800a738 <SDMMC_CmdAppOperCommand+0x48>)
 800a702:	4313      	orrs	r3, r2
 800a704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a706:	2329      	movs	r3, #41	; 0x29
 800a708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a70a:	2340      	movs	r3, #64	; 0x40
 800a70c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a70e:	2300      	movs	r3, #0
 800a710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a716:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a718:	f107 0308 	add.w	r3, r7, #8
 800a71c:	4619      	mov	r1, r3
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7ff fe0c 	bl	800a33c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f9e1 	bl	800aaec <SDMMC_GetCmdResp3>
 800a72a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a72c:	69fb      	ldr	r3, [r7, #28]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3720      	adds	r7, #32
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	80100000 	.word	0x80100000

0800a73c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b088      	sub	sp, #32
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a744:	2300      	movs	r3, #0
 800a746:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a74c:	2302      	movs	r3, #2
 800a74e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a750:	23c0      	movs	r3, #192	; 0xc0
 800a752:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a754:	2300      	movs	r3, #0
 800a756:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a75c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a75e:	f107 0308 	add.w	r3, r7, #8
 800a762:	4619      	mov	r1, r3
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7ff fde9 	bl	800a33c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 f97e 	bl	800aa6c <SDMMC_GetCmdResp2>
 800a770:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a772:	69fb      	ldr	r3, [r7, #28]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3720      	adds	r7, #32
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b088      	sub	sp, #32
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a786:	2300      	movs	r3, #0
 800a788:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a78e:	2309      	movs	r3, #9
 800a790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a792:	23c0      	movs	r3, #192	; 0xc0
 800a794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a796:	2300      	movs	r3, #0
 800a798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a79a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a79e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7a0:	f107 0308 	add.w	r3, r7, #8
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f7ff fdc8 	bl	800a33c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f95d 	bl	800aa6c <SDMMC_GetCmdResp2>
 800a7b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7b4:	69fb      	ldr	r3, [r7, #28]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3720      	adds	r7, #32
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b088      	sub	sp, #32
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7d4:	2340      	movs	r3, #64	; 0x40
 800a7d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7e0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7e2:	f107 0308 	add.w	r3, r7, #8
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7ff fda7 	bl	800a33c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	2103      	movs	r1, #3
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 f9ae 	bl	800ab54 <SDMMC_GetCmdResp6>
 800a7f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7fa:	69fb      	ldr	r3, [r7, #28]
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3720      	adds	r7, #32
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b088      	sub	sp, #32
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a80e:	2300      	movs	r3, #0
 800a810:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a816:	230d      	movs	r3, #13
 800a818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a81a:	2340      	movs	r3, #64	; 0x40
 800a81c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a81e:	2300      	movs	r3, #0
 800a820:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a826:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a828:	f107 0308 	add.w	r3, r7, #8
 800a82c:	4619      	mov	r1, r3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f7ff fd84 	bl	800a33c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a834:	f241 3288 	movw	r2, #5000	; 0x1388
 800a838:	210d      	movs	r1, #13
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f830 	bl	800a8a0 <SDMMC_GetCmdResp1>
 800a840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a842:	69fb      	ldr	r3, [r7, #28]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3720      	adds	r7, #32
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a84c:	b490      	push	{r4, r7}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a854:	4b10      	ldr	r3, [pc, #64]	; (800a898 <SDMMC_GetCmdError+0x4c>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a10      	ldr	r2, [pc, #64]	; (800a89c <SDMMC_GetCmdError+0x50>)
 800a85a:	fba2 2303 	umull	r2, r3, r2, r3
 800a85e:	0a5b      	lsrs	r3, r3, #9
 800a860:	f241 3288 	movw	r2, #5000	; 0x1388
 800a864:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a868:	4623      	mov	r3, r4
 800a86a:	1e5c      	subs	r4, r3, #1
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d102      	bne.n	800a876 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a870:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a874:	e00a      	b.n	800a88c <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a87a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d0f2      	beq.n	800a868 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a888:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bc90      	pop	{r4, r7}
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	20000004 	.word	0x20000004
 800a89c:	10624dd3 	.word	0x10624dd3

0800a8a0 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a8a0:	b590      	push	{r4, r7, lr}
 800a8a2:	b087      	sub	sp, #28
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800a8ae:	4b6c      	ldr	r3, [pc, #432]	; (800aa60 <SDMMC_GetCmdResp1+0x1c0>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a6c      	ldr	r2, [pc, #432]	; (800aa64 <SDMMC_GetCmdResp1+0x1c4>)
 800a8b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a8b8:	0a5b      	lsrs	r3, r3, #9
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a8c0:	4623      	mov	r3, r4
 800a8c2:	1e5c      	subs	r4, r3, #1
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d102      	bne.n	800a8ce <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a8c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a8cc:	e0c3      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d0f2      	beq.n	800a8c0 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8de:	f003 0304 	and.w	r3, r3, #4
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d004      	beq.n	800a8f0 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2204      	movs	r2, #4
 800a8ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a8ec:	2304      	movs	r3, #4
 800a8ee:	e0b2      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8f4:	f003 0301 	and.w	r3, r3, #1
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d004      	beq.n	800a906 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2201      	movs	r2, #1
 800a900:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a902:	2301      	movs	r3, #1
 800a904:	e0a7      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	f7ff fd42 	bl	800a390 <SDMMC_GetCommandResponse>
 800a90c:	4603      	mov	r3, r0
 800a90e:	461a      	mov	r2, r3
 800a910:	7afb      	ldrb	r3, [r7, #11]
 800a912:	4293      	cmp	r3, r2
 800a914:	d001      	beq.n	800a91a <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a916:	2301      	movs	r3, #1
 800a918:	e09d      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a920:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a922:	2100      	movs	r1, #0
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f7ff fd40 	bl	800a3aa <SDMMC_GetResponse>
 800a92a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a92c:	697a      	ldr	r2, [r7, #20]
 800a92e:	4b4e      	ldr	r3, [pc, #312]	; (800aa68 <SDMMC_GetCmdResp1+0x1c8>)
 800a930:	4013      	ands	r3, r2
 800a932:	2b00      	cmp	r3, #0
 800a934:	d101      	bne.n	800a93a <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800a936:	2300      	movs	r3, #0
 800a938:	e08d      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	da02      	bge.n	800a946 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a940:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a944:	e087      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d001      	beq.n	800a954 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a950:	2340      	movs	r3, #64	; 0x40
 800a952:	e080      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d001      	beq.n	800a962 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a95e:	2380      	movs	r3, #128	; 0x80
 800a960:	e079      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d002      	beq.n	800a972 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a96c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a970:	e071      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d002      	beq.n	800a982 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a97c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a980:	e069      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a98c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a990:	e061      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d002      	beq.n	800a9a2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a99c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9a0:	e059      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a9ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9b0:	e051      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a9bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a9c0:	e049      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d002      	beq.n	800a9d2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a9cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a9d0:	e041      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d002      	beq.n	800a9e2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800a9dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9e0:	e039      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d002      	beq.n	800a9f2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a9ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a9f0:	e031      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d002      	beq.n	800aa02 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a9fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aa00:	e029      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d002      	beq.n	800aa12 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800aa0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aa10:	e021      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d002      	beq.n	800aa22 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800aa1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aa20:	e019      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d002      	beq.n	800aa32 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aa2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aa30:	e011      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d002      	beq.n	800aa42 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800aa3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aa40:	e009      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	f003 0308 	and.w	r3, r3, #8
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d002      	beq.n	800aa52 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800aa4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aa50:	e001      	b.n	800aa56 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aa52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	371c      	adds	r7, #28
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd90      	pop	{r4, r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	20000004 	.word	0x20000004
 800aa64:	10624dd3 	.word	0x10624dd3
 800aa68:	fdffe008 	.word	0xfdffe008

0800aa6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800aa6c:	b490      	push	{r4, r7}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800aa74:	4b1b      	ldr	r3, [pc, #108]	; (800aae4 <SDMMC_GetCmdResp2+0x78>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a1b      	ldr	r2, [pc, #108]	; (800aae8 <SDMMC_GetCmdResp2+0x7c>)
 800aa7a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa7e:	0a5b      	lsrs	r3, r3, #9
 800aa80:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa84:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800aa88:	4623      	mov	r3, r4
 800aa8a:	1e5c      	subs	r4, r3, #1
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d102      	bne.n	800aa96 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa94:	e020      	b.n	800aad8 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d0f2      	beq.n	800aa88 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa6:	f003 0304 	and.w	r3, r3, #4
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d004      	beq.n	800aab8 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2204      	movs	r2, #4
 800aab2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aab4:	2304      	movs	r3, #4
 800aab6:	e00f      	b.n	800aad8 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aabc:	f003 0301 	and.w	r3, r3, #1
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d004      	beq.n	800aace <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aaca:	2301      	movs	r3, #1
 800aacc:	e004      	b.n	800aad8 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800aad4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bc90      	pop	{r4, r7}
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	20000004 	.word	0x20000004
 800aae8:	10624dd3 	.word	0x10624dd3

0800aaec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800aaec:	b490      	push	{r4, r7}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800aaf4:	4b15      	ldr	r3, [pc, #84]	; (800ab4c <SDMMC_GetCmdResp3+0x60>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a15      	ldr	r2, [pc, #84]	; (800ab50 <SDMMC_GetCmdResp3+0x64>)
 800aafa:	fba2 2303 	umull	r2, r3, r2, r3
 800aafe:	0a5b      	lsrs	r3, r3, #9
 800ab00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab04:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800ab08:	4623      	mov	r3, r4
 800ab0a:	1e5c      	subs	r4, r3, #1
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d102      	bne.n	800ab16 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab14:	e015      	b.n	800ab42 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d0f2      	beq.n	800ab08 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab26:	f003 0304 	and.w	r3, r3, #4
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d004      	beq.n	800ab38 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2204      	movs	r2, #4
 800ab32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab34:	2304      	movs	r3, #4
 800ab36:	e004      	b.n	800ab42 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ab3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bc90      	pop	{r4, r7}
 800ab4a:	4770      	bx	lr
 800ab4c:	20000004 	.word	0x20000004
 800ab50:	10624dd3 	.word	0x10624dd3

0800ab54 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ab54:	b590      	push	{r4, r7, lr}
 800ab56:	b087      	sub	sp, #28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	607a      	str	r2, [r7, #4]
 800ab60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800ab62:	4b31      	ldr	r3, [pc, #196]	; (800ac28 <SDMMC_GetCmdResp6+0xd4>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a31      	ldr	r2, [pc, #196]	; (800ac2c <SDMMC_GetCmdResp6+0xd8>)
 800ab68:	fba2 2303 	umull	r2, r3, r2, r3
 800ab6c:	0a5b      	lsrs	r3, r3, #9
 800ab6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab72:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800ab76:	4623      	mov	r3, r4
 800ab78:	1e5c      	subs	r4, r3, #1
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d102      	bne.n	800ab84 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab82:	e04c      	b.n	800ac1e <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab88:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d0f2      	beq.n	800ab76 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab94:	f003 0304 	and.w	r3, r3, #4
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d004      	beq.n	800aba6 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2204      	movs	r2, #4
 800aba0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aba2:	2304      	movs	r3, #4
 800aba4:	e03b      	b.n	800ac1e <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abaa:	f003 0301 	and.w	r3, r3, #1
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d004      	beq.n	800abbc <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2201      	movs	r2, #1
 800abb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800abb8:	2301      	movs	r3, #1
 800abba:	e030      	b.n	800ac1e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800abbc:	68f8      	ldr	r0, [r7, #12]
 800abbe:	f7ff fbe7 	bl	800a390 <SDMMC_GetCommandResponse>
 800abc2:	4603      	mov	r3, r0
 800abc4:	461a      	mov	r2, r3
 800abc6:	7afb      	ldrb	r3, [r7, #11]
 800abc8:	4293      	cmp	r3, r2
 800abca:	d001      	beq.n	800abd0 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800abcc:	2301      	movs	r3, #1
 800abce:	e026      	b.n	800ac1e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800abd6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800abd8:	2100      	movs	r1, #0
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f7ff fbe5 	bl	800a3aa <SDMMC_GetResponse>
 800abe0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d106      	bne.n	800abfa <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	0c1b      	lsrs	r3, r3, #16
 800abf0:	b29a      	uxth	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800abf6:	2300      	movs	r3, #0
 800abf8:	e011      	b.n	800ac1e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d002      	beq.n	800ac0a <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ac04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac08:	e009      	b.n	800ac1e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d002      	beq.n	800ac1a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ac14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac18:	e001      	b.n	800ac1e <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ac1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	371c      	adds	r7, #28
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd90      	pop	{r4, r7, pc}
 800ac26:	bf00      	nop
 800ac28:	20000004 	.word	0x20000004
 800ac2c:	10624dd3 	.word	0x10624dd3

0800ac30 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ac30:	b490      	push	{r4, r7}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800ac38:	4b18      	ldr	r3, [pc, #96]	; (800ac9c <SDMMC_GetCmdResp7+0x6c>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a18      	ldr	r2, [pc, #96]	; (800aca0 <SDMMC_GetCmdResp7+0x70>)
 800ac3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac42:	0a5b      	lsrs	r3, r3, #9
 800ac44:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac48:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800ac4c:	4623      	mov	r3, r4
 800ac4e:	1e5c      	subs	r4, r3, #1
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d102      	bne.n	800ac5a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac58:	e01a      	b.n	800ac90 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d0f2      	beq.n	800ac4c <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac6a:	f003 0304 	and.w	r3, r3, #4
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d004      	beq.n	800ac7c <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2240      	movs	r2, #64	; 0x40
 800ac76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac78:	2304      	movs	r3, #4
 800ac7a:	e009      	b.n	800ac90 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d002      	beq.n	800ac8e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2240      	movs	r2, #64	; 0x40
 800ac8c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ac8e:	2300      	movs	r3, #0
  
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bc90      	pop	{r4, r7}
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	20000004 	.word	0x20000004
 800aca0:	10624dd3 	.word	0x10624dd3

0800aca4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aca8:	4904      	ldr	r1, [pc, #16]	; (800acbc <MX_FATFS_Init+0x18>)
 800acaa:	4805      	ldr	r0, [pc, #20]	; (800acc0 <MX_FATFS_Init+0x1c>)
 800acac:	f001 fe84 	bl	800c9b8 <FATFS_LinkDriver>
 800acb0:	4603      	mov	r3, r0
 800acb2:	461a      	mov	r2, r3
 800acb4:	4b03      	ldr	r3, [pc, #12]	; (800acc4 <MX_FATFS_Init+0x20>)
 800acb6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800acb8:	bf00      	nop
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	2000070c 	.word	0x2000070c
 800acc0:	0800f924 	.word	0x0800f924
 800acc4:	20000708 	.word	0x20000708

0800acc8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800acce:	2300      	movs	r3, #0
 800acd0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800acd2:	f000 f86b 	bl	800adac <BSP_SD_IsDetected>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d001      	beq.n	800ace0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800acdc:	2302      	movs	r3, #2
 800acde:	e005      	b.n	800acec <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800ace0:	4804      	ldr	r0, [pc, #16]	; (800acf4 <BSP_SD_Init+0x2c>)
 800ace2:	f7fd fa7d 	bl	80081e0 <HAL_SD_Init>
 800ace6:	4603      	mov	r3, r0
 800ace8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800acea:	79fb      	ldrb	r3, [r7, #7]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	2000033c 	.word	0x2000033c

0800acf8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b088      	sub	sp, #32
 800acfc:	af02      	add	r7, sp, #8
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
 800ad04:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	68f9      	ldr	r1, [r7, #12]
 800ad14:	4806      	ldr	r0, [pc, #24]	; (800ad30 <BSP_SD_ReadBlocks+0x38>)
 800ad16:	f7fd faf2 	bl	80082fe <HAL_SD_ReadBlocks>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d001      	beq.n	800ad24 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800ad24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3718      	adds	r7, #24
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	2000033c 	.word	0x2000033c

0800ad34 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b088      	sub	sp, #32
 800ad38:	af02      	add	r7, sp, #8
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
 800ad40:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ad42:	2300      	movs	r3, #0
 800ad44:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	68f9      	ldr	r1, [r7, #12]
 800ad50:	4806      	ldr	r0, [pc, #24]	; (800ad6c <BSP_SD_WriteBlocks+0x38>)
 800ad52:	f7fd fc6a 	bl	800862a <HAL_SD_WriteBlocks>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d001      	beq.n	800ad60 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800ad60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3718      	adds	r7, #24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	2000033c 	.word	0x2000033c

0800ad70 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ad74:	4805      	ldr	r0, [pc, #20]	; (800ad8c <BSP_SD_GetCardState+0x1c>)
 800ad76:	f7fe f813 	bl	8008da0 <HAL_SD_GetCardState>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b04      	cmp	r3, #4
 800ad7e:	bf14      	ite	ne
 800ad80:	2301      	movne	r3, #1
 800ad82:	2300      	moveq	r3, #0
 800ad84:	b2db      	uxtb	r3, r3
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	2000033c 	.word	0x2000033c

0800ad90 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800ad98:	6879      	ldr	r1, [r7, #4]
 800ad9a:	4803      	ldr	r0, [pc, #12]	; (800ada8 <BSP_SD_GetCardInfo+0x18>)
 800ad9c:	f7fd ffd4 	bl	8008d48 <HAL_SD_GetCardInfo>
}
 800ada0:	bf00      	nop
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	2000033c 	.word	0x2000033c

0800adac <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800adb2:	2301      	movs	r3, #1
 800adb4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800adb6:	f000 f80b 	bl	800add0 <BSP_PlatformIsDetected>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d101      	bne.n	800adc4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800adc0:	2300      	movs	r3, #0
 800adc2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800adc4:	79fb      	ldrb	r3, [r7, #7]
 800adc6:	b2db      	uxtb	r3, r3
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800add6:	2301      	movs	r3, #1
 800add8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800adda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800adde:	4806      	ldr	r0, [pc, #24]	; (800adf8 <BSP_PlatformIsDetected+0x28>)
 800ade0:	f7fa ffee 	bl	8005dc0 <HAL_GPIO_ReadPin>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d001      	beq.n	800adee <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800adea:	2300      	movs	r3, #0
 800adec:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800adee:	79fb      	ldrb	r3, [r7, #7]
}  
 800adf0:	4618      	mov	r0, r3
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	40022000 	.word	0x40022000

0800adfc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	4603      	mov	r3, r0
 800ae04:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ae06:	4b0b      	ldr	r3, [pc, #44]	; (800ae34 <SD_CheckStatus+0x38>)
 800ae08:	2201      	movs	r2, #1
 800ae0a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ae0c:	f7ff ffb0 	bl	800ad70 <BSP_SD_GetCardState>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d107      	bne.n	800ae26 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ae16:	4b07      	ldr	r3, [pc, #28]	; (800ae34 <SD_CheckStatus+0x38>)
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	f023 0301 	bic.w	r3, r3, #1
 800ae20:	b2da      	uxtb	r2, r3
 800ae22:	4b04      	ldr	r3, [pc, #16]	; (800ae34 <SD_CheckStatus+0x38>)
 800ae24:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ae26:	4b03      	ldr	r3, [pc, #12]	; (800ae34 <SD_CheckStatus+0x38>)
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	b2db      	uxtb	r3, r3
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	20000042 	.word	0x20000042

0800ae38 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	4603      	mov	r3, r0
 800ae40:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800ae42:	4b0b      	ldr	r3, [pc, #44]	; (800ae70 <SD_initialize+0x38>)
 800ae44:	2201      	movs	r2, #1
 800ae46:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ae48:	f7ff ff3e 	bl	800acc8 <BSP_SD_Init>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d107      	bne.n	800ae62 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ae52:	79fb      	ldrb	r3, [r7, #7]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7ff ffd1 	bl	800adfc <SD_CheckStatus>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	4b04      	ldr	r3, [pc, #16]	; (800ae70 <SD_initialize+0x38>)
 800ae60:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800ae62:	4b03      	ldr	r3, [pc, #12]	; (800ae70 <SD_initialize+0x38>)
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	b2db      	uxtb	r3, r3
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	20000042 	.word	0x20000042

0800ae74 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ae7e:	79fb      	ldrb	r3, [r7, #7]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7ff ffbb 	bl	800adfc <SD_CheckStatus>
 800ae86:	4603      	mov	r3, r0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60b9      	str	r1, [r7, #8]
 800ae98:	607a      	str	r2, [r7, #4]
 800ae9a:	603b      	str	r3, [r7, #0]
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800aea4:	f04f 33ff 	mov.w	r3, #4294967295
 800aea8:	683a      	ldr	r2, [r7, #0]
 800aeaa:	6879      	ldr	r1, [r7, #4]
 800aeac:	68b8      	ldr	r0, [r7, #8]
 800aeae:	f7ff ff23 	bl	800acf8 <BSP_SD_ReadBlocks>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d107      	bne.n	800aec8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800aeb8:	bf00      	nop
 800aeba:	f7ff ff59 	bl	800ad70 <BSP_SD_GetCardState>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d1fa      	bne.n	800aeba <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800aec4:	2300      	movs	r3, #0
 800aec6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800aec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3718      	adds	r7, #24
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b086      	sub	sp, #24
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
 800aedc:	603b      	str	r3, [r7, #0]
 800aede:	4603      	mov	r3, r0
 800aee0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800aee6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeea:	683a      	ldr	r2, [r7, #0]
 800aeec:	6879      	ldr	r1, [r7, #4]
 800aeee:	68b8      	ldr	r0, [r7, #8]
 800aef0:	f7ff ff20 	bl	800ad34 <BSP_SD_WriteBlocks>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d107      	bne.n	800af0a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800aefa:	bf00      	nop
 800aefc:	f7ff ff38 	bl	800ad70 <BSP_SD_GetCardState>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1fa      	bne.n	800aefc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800af06:	2300      	movs	r3, #0
 800af08:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800af0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3718      	adds	r7, #24
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b08c      	sub	sp, #48	; 0x30
 800af18:	af00      	add	r7, sp, #0
 800af1a:	4603      	mov	r3, r0
 800af1c:	603a      	str	r2, [r7, #0]
 800af1e:	71fb      	strb	r3, [r7, #7]
 800af20:	460b      	mov	r3, r1
 800af22:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800af2a:	4b25      	ldr	r3, [pc, #148]	; (800afc0 <SD_ioctl+0xac>)
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	f003 0301 	and.w	r3, r3, #1
 800af34:	2b00      	cmp	r3, #0
 800af36:	d001      	beq.n	800af3c <SD_ioctl+0x28>
 800af38:	2303      	movs	r3, #3
 800af3a:	e03c      	b.n	800afb6 <SD_ioctl+0xa2>

  switch (cmd)
 800af3c:	79bb      	ldrb	r3, [r7, #6]
 800af3e:	2b03      	cmp	r3, #3
 800af40:	d834      	bhi.n	800afac <SD_ioctl+0x98>
 800af42:	a201      	add	r2, pc, #4	; (adr r2, 800af48 <SD_ioctl+0x34>)
 800af44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af48:	0800af59 	.word	0x0800af59
 800af4c:	0800af61 	.word	0x0800af61
 800af50:	0800af79 	.word	0x0800af79
 800af54:	0800af93 	.word	0x0800af93
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800af58:	2300      	movs	r3, #0
 800af5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af5e:	e028      	b.n	800afb2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800af60:	f107 030c 	add.w	r3, r7, #12
 800af64:	4618      	mov	r0, r3
 800af66:	f7ff ff13 	bl	800ad90 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800af6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800af70:	2300      	movs	r3, #0
 800af72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af76:	e01c      	b.n	800afb2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800af78:	f107 030c 	add.w	r3, r7, #12
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7ff ff07 	bl	800ad90 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800af82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af84:	b29a      	uxth	r2, r3
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af90:	e00f      	b.n	800afb2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800af92:	f107 030c 	add.w	r3, r7, #12
 800af96:	4618      	mov	r0, r3
 800af98:	f7ff fefa 	bl	800ad90 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	0a5a      	lsrs	r2, r3, #9
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800afaa:	e002      	b.n	800afb2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800afac:	2304      	movs	r3, #4
 800afae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800afb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3730      	adds	r7, #48	; 0x30
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	20000042 	.word	0x20000042

0800afc4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	4603      	mov	r3, r0
 800afcc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800afce:	79fb      	ldrb	r3, [r7, #7]
 800afd0:	4a08      	ldr	r2, [pc, #32]	; (800aff4 <disk_status+0x30>)
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	79fa      	ldrb	r2, [r7, #7]
 800afdc:	4905      	ldr	r1, [pc, #20]	; (800aff4 <disk_status+0x30>)
 800afde:	440a      	add	r2, r1
 800afe0:	7a12      	ldrb	r2, [r2, #8]
 800afe2:	4610      	mov	r0, r2
 800afe4:	4798      	blx	r3
 800afe6:	4603      	mov	r3, r0
 800afe8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800afea:	7bfb      	ldrb	r3, [r7, #15]
}
 800afec:	4618      	mov	r0, r3
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	2000030c 	.word	0x2000030c

0800aff8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	4603      	mov	r3, r0
 800b000:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b002:	2300      	movs	r3, #0
 800b004:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b006:	79fb      	ldrb	r3, [r7, #7]
 800b008:	4a0d      	ldr	r2, [pc, #52]	; (800b040 <disk_initialize+0x48>)
 800b00a:	5cd3      	ldrb	r3, [r2, r3]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d111      	bne.n	800b034 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b010:	79fb      	ldrb	r3, [r7, #7]
 800b012:	4a0b      	ldr	r2, [pc, #44]	; (800b040 <disk_initialize+0x48>)
 800b014:	2101      	movs	r1, #1
 800b016:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b018:	79fb      	ldrb	r3, [r7, #7]
 800b01a:	4a09      	ldr	r2, [pc, #36]	; (800b040 <disk_initialize+0x48>)
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4413      	add	r3, r2
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	79fa      	ldrb	r2, [r7, #7]
 800b026:	4906      	ldr	r1, [pc, #24]	; (800b040 <disk_initialize+0x48>)
 800b028:	440a      	add	r2, r1
 800b02a:	7a12      	ldrb	r2, [r2, #8]
 800b02c:	4610      	mov	r0, r2
 800b02e:	4798      	blx	r3
 800b030:	4603      	mov	r3, r0
 800b032:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b034:	7bfb      	ldrb	r3, [r7, #15]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	2000030c 	.word	0x2000030c

0800b044 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b044:	b590      	push	{r4, r7, lr}
 800b046:	b087      	sub	sp, #28
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60b9      	str	r1, [r7, #8]
 800b04c:	607a      	str	r2, [r7, #4]
 800b04e:	603b      	str	r3, [r7, #0]
 800b050:	4603      	mov	r3, r0
 800b052:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b054:	7bfb      	ldrb	r3, [r7, #15]
 800b056:	4a0a      	ldr	r2, [pc, #40]	; (800b080 <disk_read+0x3c>)
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	4413      	add	r3, r2
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	689c      	ldr	r4, [r3, #8]
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	4a07      	ldr	r2, [pc, #28]	; (800b080 <disk_read+0x3c>)
 800b064:	4413      	add	r3, r2
 800b066:	7a18      	ldrb	r0, [r3, #8]
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	68b9      	ldr	r1, [r7, #8]
 800b06e:	47a0      	blx	r4
 800b070:	4603      	mov	r3, r0
 800b072:	75fb      	strb	r3, [r7, #23]
  return res;
 800b074:	7dfb      	ldrb	r3, [r7, #23]
}
 800b076:	4618      	mov	r0, r3
 800b078:	371c      	adds	r7, #28
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd90      	pop	{r4, r7, pc}
 800b07e:	bf00      	nop
 800b080:	2000030c 	.word	0x2000030c

0800b084 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b084:	b590      	push	{r4, r7, lr}
 800b086:	b087      	sub	sp, #28
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60b9      	str	r1, [r7, #8]
 800b08c:	607a      	str	r2, [r7, #4]
 800b08e:	603b      	str	r3, [r7, #0]
 800b090:	4603      	mov	r3, r0
 800b092:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b094:	7bfb      	ldrb	r3, [r7, #15]
 800b096:	4a0a      	ldr	r2, [pc, #40]	; (800b0c0 <disk_write+0x3c>)
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4413      	add	r3, r2
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	68dc      	ldr	r4, [r3, #12]
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
 800b0a2:	4a07      	ldr	r2, [pc, #28]	; (800b0c0 <disk_write+0x3c>)
 800b0a4:	4413      	add	r3, r2
 800b0a6:	7a18      	ldrb	r0, [r3, #8]
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	68b9      	ldr	r1, [r7, #8]
 800b0ae:	47a0      	blx	r4
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b0b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	371c      	adds	r7, #28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd90      	pop	{r4, r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	2000030c 	.word	0x2000030c

0800b0c4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b0d4:	89fb      	ldrh	r3, [r7, #14]
 800b0d6:	021b      	lsls	r3, r3, #8
 800b0d8:	b21a      	sxth	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	b21b      	sxth	r3, r3
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	b21b      	sxth	r3, r3
 800b0e4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b0e6:	89fb      	ldrh	r3, [r7, #14]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3714      	adds	r7, #20
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	3303      	adds	r3, #3
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	021b      	lsls	r3, r3, #8
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	3202      	adds	r2, #2
 800b10c:	7812      	ldrb	r2, [r2, #0]
 800b10e:	4313      	orrs	r3, r2
 800b110:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	021b      	lsls	r3, r3, #8
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	3201      	adds	r2, #1
 800b11a:	7812      	ldrb	r2, [r2, #0]
 800b11c:	4313      	orrs	r3, r2
 800b11e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	021b      	lsls	r3, r3, #8
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	7812      	ldrb	r2, [r2, #0]
 800b128:	4313      	orrs	r3, r2
 800b12a:	60fb      	str	r3, [r7, #12]
	return rv;
 800b12c:	68fb      	ldr	r3, [r7, #12]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3714      	adds	r7, #20
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr

0800b13a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b13a:	b480      	push	{r7}
 800b13c:	b083      	sub	sp, #12
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
 800b142:	460b      	mov	r3, r1
 800b144:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	1c5a      	adds	r2, r3, #1
 800b14a:	607a      	str	r2, [r7, #4]
 800b14c:	887a      	ldrh	r2, [r7, #2]
 800b14e:	b2d2      	uxtb	r2, r2
 800b150:	701a      	strb	r2, [r3, #0]
 800b152:	887b      	ldrh	r3, [r7, #2]
 800b154:	0a1b      	lsrs	r3, r3, #8
 800b156:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	1c5a      	adds	r2, r3, #1
 800b15c:	607a      	str	r2, [r7, #4]
 800b15e:	887a      	ldrh	r2, [r7, #2]
 800b160:	b2d2      	uxtb	r2, r2
 800b162:	701a      	strb	r2, [r3, #0]
}
 800b164:	bf00      	nop
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	1c5a      	adds	r2, r3, #1
 800b17e:	607a      	str	r2, [r7, #4]
 800b180:	683a      	ldr	r2, [r7, #0]
 800b182:	b2d2      	uxtb	r2, r2
 800b184:	701a      	strb	r2, [r3, #0]
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	0a1b      	lsrs	r3, r3, #8
 800b18a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	1c5a      	adds	r2, r3, #1
 800b190:	607a      	str	r2, [r7, #4]
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	b2d2      	uxtb	r2, r2
 800b196:	701a      	strb	r2, [r3, #0]
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	0a1b      	lsrs	r3, r3, #8
 800b19c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	1c5a      	adds	r2, r3, #1
 800b1a2:	607a      	str	r2, [r7, #4]
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	b2d2      	uxtb	r2, r2
 800b1a8:	701a      	strb	r2, [r3, #0]
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	0a1b      	lsrs	r3, r3, #8
 800b1ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	1c5a      	adds	r2, r3, #1
 800b1b4:	607a      	str	r2, [r7, #4]
 800b1b6:	683a      	ldr	r2, [r7, #0]
 800b1b8:	b2d2      	uxtb	r2, r2
 800b1ba:	701a      	strb	r2, [r3, #0]
}
 800b1bc:	bf00      	nop
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b1c8:	b480      	push	{r7}
 800b1ca:	b087      	sub	sp, #28
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	1c5a      	adds	r2, r3, #1
 800b1dc:	617a      	str	r2, [r7, #20]
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	b2d2      	uxtb	r2, r2
 800b1e2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	607b      	str	r3, [r7, #4]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d1f3      	bne.n	800b1d8 <mem_set+0x10>
}
 800b1f0:	bf00      	nop
 800b1f2:	371c      	adds	r7, #28
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b1fc:	b480      	push	{r7}
 800b1fe:	b089      	sub	sp, #36	; 0x24
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	61fb      	str	r3, [r7, #28]
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b210:	2300      	movs	r3, #0
 800b212:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	1c5a      	adds	r2, r3, #1
 800b218:	61fa      	str	r2, [r7, #28]
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	4619      	mov	r1, r3
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	1c5a      	adds	r2, r3, #1
 800b222:	61ba      	str	r2, [r7, #24]
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	1acb      	subs	r3, r1, r3
 800b228:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	3b01      	subs	r3, #1
 800b22e:	607b      	str	r3, [r7, #4]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d002      	beq.n	800b23c <mem_cmp+0x40>
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d0eb      	beq.n	800b214 <mem_cmp+0x18>

	return r;
 800b23c:	697b      	ldr	r3, [r7, #20]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3724      	adds	r7, #36	; 0x24
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr

0800b24a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b24a:	b480      	push	{r7}
 800b24c:	b083      	sub	sp, #12
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
 800b252:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b254:	e002      	b.n	800b25c <chk_chr+0x12>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	3301      	adds	r3, #1
 800b25a:	607b      	str	r3, [r7, #4]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d005      	beq.n	800b270 <chk_chr+0x26>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	461a      	mov	r2, r3
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d1f2      	bne.n	800b256 <chk_chr+0xc>
	return *str;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	781b      	ldrb	r3, [r3, #0]
}
 800b274:	4618      	mov	r0, r3
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b280:	b480      	push	{r7}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b28a:	2300      	movs	r3, #0
 800b28c:	60fb      	str	r3, [r7, #12]
 800b28e:	e01f      	b.n	800b2d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b290:	4a41      	ldr	r2, [pc, #260]	; (800b398 <inc_lock+0x118>)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	011b      	lsls	r3, r3, #4
 800b296:	4413      	add	r3, r2
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d113      	bne.n	800b2ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b2a2:	4a3d      	ldr	r2, [pc, #244]	; (800b398 <inc_lock+0x118>)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	011b      	lsls	r3, r3, #4
 800b2a8:	4413      	add	r3, r2
 800b2aa:	3304      	adds	r3, #4
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d109      	bne.n	800b2ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b2b6:	4a38      	ldr	r2, [pc, #224]	; (800b398 <inc_lock+0x118>)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	011b      	lsls	r3, r3, #4
 800b2bc:	4413      	add	r3, r2
 800b2be:	3308      	adds	r3, #8
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d006      	beq.n	800b2d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	60fb      	str	r3, [r7, #12]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d9dc      	bls.n	800b290 <inc_lock+0x10>
 800b2d6:	e000      	b.n	800b2da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b2d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d132      	bne.n	800b346 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	60fb      	str	r3, [r7, #12]
 800b2e4:	e002      	b.n	800b2ec <inc_lock+0x6c>
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	60fb      	str	r3, [r7, #12]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d806      	bhi.n	800b300 <inc_lock+0x80>
 800b2f2:	4a29      	ldr	r2, [pc, #164]	; (800b398 <inc_lock+0x118>)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	011b      	lsls	r3, r3, #4
 800b2f8:	4413      	add	r3, r2
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1f2      	bne.n	800b2e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2b02      	cmp	r3, #2
 800b304:	d101      	bne.n	800b30a <inc_lock+0x8a>
 800b306:	2300      	movs	r3, #0
 800b308:	e040      	b.n	800b38c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	4922      	ldr	r1, [pc, #136]	; (800b398 <inc_lock+0x118>)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	011b      	lsls	r3, r3, #4
 800b314:	440b      	add	r3, r1
 800b316:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	689a      	ldr	r2, [r3, #8]
 800b31c:	491e      	ldr	r1, [pc, #120]	; (800b398 <inc_lock+0x118>)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	011b      	lsls	r3, r3, #4
 800b322:	440b      	add	r3, r1
 800b324:	3304      	adds	r3, #4
 800b326:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	695a      	ldr	r2, [r3, #20]
 800b32c:	491a      	ldr	r1, [pc, #104]	; (800b398 <inc_lock+0x118>)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	011b      	lsls	r3, r3, #4
 800b332:	440b      	add	r3, r1
 800b334:	3308      	adds	r3, #8
 800b336:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b338:	4a17      	ldr	r2, [pc, #92]	; (800b398 <inc_lock+0x118>)
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	011b      	lsls	r3, r3, #4
 800b33e:	4413      	add	r3, r2
 800b340:	330c      	adds	r3, #12
 800b342:	2200      	movs	r2, #0
 800b344:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d009      	beq.n	800b360 <inc_lock+0xe0>
 800b34c:	4a12      	ldr	r2, [pc, #72]	; (800b398 <inc_lock+0x118>)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	011b      	lsls	r3, r3, #4
 800b352:	4413      	add	r3, r2
 800b354:	330c      	adds	r3, #12
 800b356:	881b      	ldrh	r3, [r3, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d001      	beq.n	800b360 <inc_lock+0xe0>
 800b35c:	2300      	movs	r3, #0
 800b35e:	e015      	b.n	800b38c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d108      	bne.n	800b378 <inc_lock+0xf8>
 800b366:	4a0c      	ldr	r2, [pc, #48]	; (800b398 <inc_lock+0x118>)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	011b      	lsls	r3, r3, #4
 800b36c:	4413      	add	r3, r2
 800b36e:	330c      	adds	r3, #12
 800b370:	881b      	ldrh	r3, [r3, #0]
 800b372:	3301      	adds	r3, #1
 800b374:	b29a      	uxth	r2, r3
 800b376:	e001      	b.n	800b37c <inc_lock+0xfc>
 800b378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b37c:	4906      	ldr	r1, [pc, #24]	; (800b398 <inc_lock+0x118>)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	011b      	lsls	r3, r3, #4
 800b382:	440b      	add	r3, r1
 800b384:	330c      	adds	r3, #12
 800b386:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	3301      	adds	r3, #1
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3714      	adds	r7, #20
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr
 800b398:	200002ec 	.word	0x200002ec

0800b39c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	607b      	str	r3, [r7, #4]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d825      	bhi.n	800b3fc <dec_lock+0x60>
		n = Files[i].ctr;
 800b3b0:	4a17      	ldr	r2, [pc, #92]	; (800b410 <dec_lock+0x74>)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	011b      	lsls	r3, r3, #4
 800b3b6:	4413      	add	r3, r2
 800b3b8:	330c      	adds	r3, #12
 800b3ba:	881b      	ldrh	r3, [r3, #0]
 800b3bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b3be:	89fb      	ldrh	r3, [r7, #14]
 800b3c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3c4:	d101      	bne.n	800b3ca <dec_lock+0x2e>
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b3ca:	89fb      	ldrh	r3, [r7, #14]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d002      	beq.n	800b3d6 <dec_lock+0x3a>
 800b3d0:	89fb      	ldrh	r3, [r7, #14]
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b3d6:	4a0e      	ldr	r2, [pc, #56]	; (800b410 <dec_lock+0x74>)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	011b      	lsls	r3, r3, #4
 800b3dc:	4413      	add	r3, r2
 800b3de:	330c      	adds	r3, #12
 800b3e0:	89fa      	ldrh	r2, [r7, #14]
 800b3e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b3e4:	89fb      	ldrh	r3, [r7, #14]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d105      	bne.n	800b3f6 <dec_lock+0x5a>
 800b3ea:	4a09      	ldr	r2, [pc, #36]	; (800b410 <dec_lock+0x74>)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	011b      	lsls	r3, r3, #4
 800b3f0:	4413      	add	r3, r2
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	737b      	strb	r3, [r7, #13]
 800b3fa:	e001      	b.n	800b400 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b3fc:	2302      	movs	r3, #2
 800b3fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b400:	7b7b      	ldrb	r3, [r7, #13]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3714      	adds	r7, #20
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	200002ec 	.word	0x200002ec

0800b414 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b41c:	2300      	movs	r3, #0
 800b41e:	60fb      	str	r3, [r7, #12]
 800b420:	e010      	b.n	800b444 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b422:	4a0d      	ldr	r2, [pc, #52]	; (800b458 <clear_lock+0x44>)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	011b      	lsls	r3, r3, #4
 800b428:	4413      	add	r3, r2
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d105      	bne.n	800b43e <clear_lock+0x2a>
 800b432:	4a09      	ldr	r2, [pc, #36]	; (800b458 <clear_lock+0x44>)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	011b      	lsls	r3, r3, #4
 800b438:	4413      	add	r3, r2
 800b43a:	2200      	movs	r2, #0
 800b43c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	3301      	adds	r3, #1
 800b442:	60fb      	str	r3, [r7, #12]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2b01      	cmp	r3, #1
 800b448:	d9eb      	bls.n	800b422 <clear_lock+0xe>
	}
}
 800b44a:	bf00      	nop
 800b44c:	3714      	adds	r7, #20
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop
 800b458:	200002ec 	.word	0x200002ec

0800b45c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b086      	sub	sp, #24
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b464:	2300      	movs	r3, #0
 800b466:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	78db      	ldrb	r3, [r3, #3]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d034      	beq.n	800b4da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b474:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	7858      	ldrb	r0, [r3, #1]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b480:	2301      	movs	r3, #1
 800b482:	697a      	ldr	r2, [r7, #20]
 800b484:	f7ff fdfe 	bl	800b084 <disk_write>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d002      	beq.n	800b494 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b48e:	2301      	movs	r3, #1
 800b490:	73fb      	strb	r3, [r7, #15]
 800b492:	e022      	b.n	800b4da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a1b      	ldr	r3, [r3, #32]
 800b49e:	697a      	ldr	r2, [r7, #20]
 800b4a0:	1ad2      	subs	r2, r2, r3
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	699b      	ldr	r3, [r3, #24]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d217      	bcs.n	800b4da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	789b      	ldrb	r3, [r3, #2]
 800b4ae:	613b      	str	r3, [r7, #16]
 800b4b0:	e010      	b.n	800b4d4 <sync_window+0x78>
					wsect += fs->fsize;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	699b      	ldr	r3, [r3, #24]
 800b4b6:	697a      	ldr	r2, [r7, #20]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	7858      	ldrb	r0, [r3, #1]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	697a      	ldr	r2, [r7, #20]
 800b4ca:	f7ff fddb 	bl	800b084 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	3b01      	subs	r3, #1
 800b4d2:	613b      	str	r3, [r7, #16]
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d8eb      	bhi.n	800b4b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3718      	adds	r7, #24
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d01b      	beq.n	800b534 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f7ff ffad 	bl	800b45c <sync_window>
 800b502:	4603      	mov	r3, r0
 800b504:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b506:	7bfb      	ldrb	r3, [r7, #15]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d113      	bne.n	800b534 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	7858      	ldrb	r0, [r3, #1]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b516:	2301      	movs	r3, #1
 800b518:	683a      	ldr	r2, [r7, #0]
 800b51a:	f7ff fd93 	bl	800b044 <disk_read>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d004      	beq.n	800b52e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b524:	f04f 33ff 	mov.w	r3, #4294967295
 800b528:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b534:	7bfb      	ldrb	r3, [r7, #15]
}
 800b536:	4618      	mov	r0, r3
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b53e:	b480      	push	{r7}
 800b540:	b083      	sub	sp, #12
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
 800b546:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	3b02      	subs	r3, #2
 800b54c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	695b      	ldr	r3, [r3, #20]
 800b552:	3b02      	subs	r3, #2
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	429a      	cmp	r2, r3
 800b558:	d301      	bcc.n	800b55e <clust2sect+0x20>
 800b55a:	2300      	movs	r3, #0
 800b55c:	e008      	b.n	800b570 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	895b      	ldrh	r3, [r3, #10]
 800b562:	461a      	mov	r2, r3
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	fb03 f202 	mul.w	r2, r3, r2
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b56e:	4413      	add	r3, r2
}
 800b570:	4618      	mov	r0, r3
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr

0800b57c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b086      	sub	sp, #24
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d904      	bls.n	800b59c <get_fat+0x20>
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	695b      	ldr	r3, [r3, #20]
 800b596:	683a      	ldr	r2, [r7, #0]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d302      	bcc.n	800b5a2 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b59c:	2301      	movs	r3, #1
 800b59e:	617b      	str	r3, [r7, #20]
 800b5a0:	e08c      	b.n	800b6bc <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b5a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	d045      	beq.n	800b63c <get_fat+0xc0>
 800b5b0:	2b03      	cmp	r3, #3
 800b5b2:	d05d      	beq.n	800b670 <get_fat+0xf4>
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d177      	bne.n	800b6a8 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	60fb      	str	r3, [r7, #12]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	085b      	lsrs	r3, r3, #1
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	6a1a      	ldr	r2, [r3, #32]
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	0a5b      	lsrs	r3, r3, #9
 800b5ce:	4413      	add	r3, r2
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	6938      	ldr	r0, [r7, #16]
 800b5d4:	f7ff ff86 	bl	800b4e4 <move_window>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d167      	bne.n	800b6ae <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	1c5a      	adds	r2, r3, #1
 800b5e2:	60fa      	str	r2, [r7, #12]
 800b5e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5e8:	693a      	ldr	r2, [r7, #16]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	6a1a      	ldr	r2, [r3, #32]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	0a5b      	lsrs	r3, r3, #9
 800b5fa:	4413      	add	r3, r2
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	6938      	ldr	r0, [r7, #16]
 800b600:	f7ff ff70 	bl	800b4e4 <move_window>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d153      	bne.n	800b6b2 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b610:	693a      	ldr	r2, [r7, #16]
 800b612:	4413      	add	r3, r2
 800b614:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b618:	021b      	lsls	r3, r3, #8
 800b61a:	461a      	mov	r2, r3
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	4313      	orrs	r3, r2
 800b620:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	f003 0301 	and.w	r3, r3, #1
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d002      	beq.n	800b632 <get_fat+0xb6>
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	091b      	lsrs	r3, r3, #4
 800b630:	e002      	b.n	800b638 <get_fat+0xbc>
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b638:	617b      	str	r3, [r7, #20]
			break;
 800b63a:	e03f      	b.n	800b6bc <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	6a1a      	ldr	r2, [r3, #32]
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	0a1b      	lsrs	r3, r3, #8
 800b644:	4413      	add	r3, r2
 800b646:	4619      	mov	r1, r3
 800b648:	6938      	ldr	r0, [r7, #16]
 800b64a:	f7ff ff4b 	bl	800b4e4 <move_window>
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d130      	bne.n	800b6b6 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	005b      	lsls	r3, r3, #1
 800b65e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b662:	4413      	add	r3, r2
 800b664:	4618      	mov	r0, r3
 800b666:	f7ff fd2d 	bl	800b0c4 <ld_word>
 800b66a:	4603      	mov	r3, r0
 800b66c:	617b      	str	r3, [r7, #20]
			break;
 800b66e:	e025      	b.n	800b6bc <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	6a1a      	ldr	r2, [r3, #32]
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	09db      	lsrs	r3, r3, #7
 800b678:	4413      	add	r3, r2
 800b67a:	4619      	mov	r1, r3
 800b67c:	6938      	ldr	r0, [r7, #16]
 800b67e:	f7ff ff31 	bl	800b4e4 <move_window>
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d118      	bne.n	800b6ba <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b696:	4413      	add	r3, r2
 800b698:	4618      	mov	r0, r3
 800b69a:	f7ff fd2b 	bl	800b0f4 <ld_dword>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b6a4:	617b      	str	r3, [r7, #20]
			break;
 800b6a6:	e009      	b.n	800b6bc <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	617b      	str	r3, [r7, #20]
 800b6ac:	e006      	b.n	800b6bc <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6ae:	bf00      	nop
 800b6b0:	e004      	b.n	800b6bc <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6b2:	bf00      	nop
 800b6b4:	e002      	b.n	800b6bc <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b6b6:	bf00      	nop
 800b6b8:	e000      	b.n	800b6bc <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b6ba:	bf00      	nop
		}
	}

	return val;
 800b6bc:	697b      	ldr	r3, [r7, #20]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3718      	adds	r7, #24
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b6c6:	b590      	push	{r4, r7, lr}
 800b6c8:	b089      	sub	sp, #36	; 0x24
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	60f8      	str	r0, [r7, #12]
 800b6ce:	60b9      	str	r1, [r7, #8]
 800b6d0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	f240 80d6 	bls.w	800b88a <put_fat+0x1c4>
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	695b      	ldr	r3, [r3, #20]
 800b6e2:	68ba      	ldr	r2, [r7, #8]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	f080 80d0 	bcs.w	800b88a <put_fat+0x1c4>
		switch (fs->fs_type) {
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	2b02      	cmp	r3, #2
 800b6f0:	d073      	beq.n	800b7da <put_fat+0x114>
 800b6f2:	2b03      	cmp	r3, #3
 800b6f4:	f000 8091 	beq.w	800b81a <put_fat+0x154>
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	f040 80c6 	bne.w	800b88a <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	61bb      	str	r3, [r7, #24]
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	085b      	lsrs	r3, r3, #1
 800b706:	69ba      	ldr	r2, [r7, #24]
 800b708:	4413      	add	r3, r2
 800b70a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	6a1a      	ldr	r2, [r3, #32]
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	0a5b      	lsrs	r3, r3, #9
 800b714:	4413      	add	r3, r2
 800b716:	4619      	mov	r1, r3
 800b718:	68f8      	ldr	r0, [r7, #12]
 800b71a:	f7ff fee3 	bl	800b4e4 <move_window>
 800b71e:	4603      	mov	r3, r0
 800b720:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b722:	7ffb      	ldrb	r3, [r7, #31]
 800b724:	2b00      	cmp	r3, #0
 800b726:	f040 80a9 	bne.w	800b87c <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b730:	69bb      	ldr	r3, [r7, #24]
 800b732:	1c59      	adds	r1, r3, #1
 800b734:	61b9      	str	r1, [r7, #24]
 800b736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b73a:	4413      	add	r3, r2
 800b73c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	f003 0301 	and.w	r3, r3, #1
 800b744:	2b00      	cmp	r3, #0
 800b746:	d00d      	beq.n	800b764 <put_fat+0x9e>
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	b25b      	sxtb	r3, r3
 800b74e:	f003 030f 	and.w	r3, r3, #15
 800b752:	b25a      	sxtb	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	b2db      	uxtb	r3, r3
 800b758:	011b      	lsls	r3, r3, #4
 800b75a:	b25b      	sxtb	r3, r3
 800b75c:	4313      	orrs	r3, r2
 800b75e:	b25b      	sxtb	r3, r3
 800b760:	b2db      	uxtb	r3, r3
 800b762:	e001      	b.n	800b768 <put_fat+0xa2>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	b2db      	uxtb	r3, r3
 800b768:	697a      	ldr	r2, [r7, #20]
 800b76a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2201      	movs	r2, #1
 800b770:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	6a1a      	ldr	r2, [r3, #32]
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	0a5b      	lsrs	r3, r3, #9
 800b77a:	4413      	add	r3, r2
 800b77c:	4619      	mov	r1, r3
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f7ff feb0 	bl	800b4e4 <move_window>
 800b784:	4603      	mov	r3, r0
 800b786:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b788:	7ffb      	ldrb	r3, [r7, #31]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d178      	bne.n	800b880 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b79a:	4413      	add	r3, r2
 800b79c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	f003 0301 	and.w	r3, r3, #1
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d003      	beq.n	800b7b0 <put_fat+0xea>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	091b      	lsrs	r3, r3, #4
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	e00e      	b.n	800b7ce <put_fat+0x108>
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	b25b      	sxtb	r3, r3
 800b7b6:	f023 030f 	bic.w	r3, r3, #15
 800b7ba:	b25a      	sxtb	r2, r3
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	0a1b      	lsrs	r3, r3, #8
 800b7c0:	b25b      	sxtb	r3, r3
 800b7c2:	f003 030f 	and.w	r3, r3, #15
 800b7c6:	b25b      	sxtb	r3, r3
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	b25b      	sxtb	r3, r3
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	697a      	ldr	r2, [r7, #20]
 800b7d0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	70da      	strb	r2, [r3, #3]
			break;
 800b7d8:	e057      	b.n	800b88a <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	6a1a      	ldr	r2, [r3, #32]
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	0a1b      	lsrs	r3, r3, #8
 800b7e2:	4413      	add	r3, r2
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f7ff fe7c 	bl	800b4e4 <move_window>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b7f0:	7ffb      	ldrb	r3, [r7, #31]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d146      	bne.n	800b884 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	005b      	lsls	r3, r3, #1
 800b800:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b804:	4413      	add	r3, r2
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	b292      	uxth	r2, r2
 800b80a:	4611      	mov	r1, r2
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7ff fc94 	bl	800b13a <st_word>
			fs->wflag = 1;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2201      	movs	r2, #1
 800b816:	70da      	strb	r2, [r3, #3]
			break;
 800b818:	e037      	b.n	800b88a <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6a1a      	ldr	r2, [r3, #32]
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	09db      	lsrs	r3, r3, #7
 800b822:	4413      	add	r3, r2
 800b824:	4619      	mov	r1, r3
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f7ff fe5c 	bl	800b4e4 <move_window>
 800b82c:	4603      	mov	r3, r0
 800b82e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b830:	7ffb      	ldrb	r3, [r7, #31]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d128      	bne.n	800b888 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b84a:	4413      	add	r3, r2
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7ff fc51 	bl	800b0f4 <ld_dword>
 800b852:	4603      	mov	r3, r0
 800b854:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b858:	4323      	orrs	r3, r4
 800b85a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b86a:	4413      	add	r3, r2
 800b86c:	6879      	ldr	r1, [r7, #4]
 800b86e:	4618      	mov	r0, r3
 800b870:	f7ff fc7e 	bl	800b170 <st_dword>
			fs->wflag = 1;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2201      	movs	r2, #1
 800b878:	70da      	strb	r2, [r3, #3]
			break;
 800b87a:	e006      	b.n	800b88a <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b87c:	bf00      	nop
 800b87e:	e004      	b.n	800b88a <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b880:	bf00      	nop
 800b882:	e002      	b.n	800b88a <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b884:	bf00      	nop
 800b886:	e000      	b.n	800b88a <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b888:	bf00      	nop
		}
	}
	return res;
 800b88a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3724      	adds	r7, #36	; 0x24
 800b890:	46bd      	mov	sp, r7
 800b892:	bd90      	pop	{r4, r7, pc}

0800b894 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b088      	sub	sp, #32
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d10d      	bne.n	800b8c6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d004      	beq.n	800b8c0 <create_chain+0x2c>
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	695b      	ldr	r3, [r3, #20]
 800b8ba:	69ba      	ldr	r2, [r7, #24]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d31b      	bcc.n	800b8f8 <create_chain+0x64>
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	61bb      	str	r3, [r7, #24]
 800b8c4:	e018      	b.n	800b8f8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f7ff fe57 	bl	800b57c <get_fat>
 800b8ce:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d801      	bhi.n	800b8da <create_chain+0x46>
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e070      	b.n	800b9bc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e0:	d101      	bne.n	800b8e6 <create_chain+0x52>
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	e06a      	b.n	800b9bc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	695b      	ldr	r3, [r3, #20]
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d201      	bcs.n	800b8f4 <create_chain+0x60>
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	e063      	b.n	800b9bc <create_chain+0x128>
		scl = clst;
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	3301      	adds	r3, #1
 800b900:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	695b      	ldr	r3, [r3, #20]
 800b906:	69fa      	ldr	r2, [r7, #28]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d307      	bcc.n	800b91c <create_chain+0x88>
				ncl = 2;
 800b90c:	2302      	movs	r3, #2
 800b90e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b910:	69fa      	ldr	r2, [r7, #28]
 800b912:	69bb      	ldr	r3, [r7, #24]
 800b914:	429a      	cmp	r2, r3
 800b916:	d901      	bls.n	800b91c <create_chain+0x88>
 800b918:	2300      	movs	r3, #0
 800b91a:	e04f      	b.n	800b9bc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b91c:	69f9      	ldr	r1, [r7, #28]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f7ff fe2c 	bl	800b57c <get_fat>
 800b924:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00e      	beq.n	800b94a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d003      	beq.n	800b93a <create_chain+0xa6>
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b938:	d101      	bne.n	800b93e <create_chain+0xaa>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	e03e      	b.n	800b9bc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b93e:	69fa      	ldr	r2, [r7, #28]
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	429a      	cmp	r2, r3
 800b944:	d1da      	bne.n	800b8fc <create_chain+0x68>
 800b946:	2300      	movs	r3, #0
 800b948:	e038      	b.n	800b9bc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b94a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b94c:	f04f 32ff 	mov.w	r2, #4294967295
 800b950:	69f9      	ldr	r1, [r7, #28]
 800b952:	6938      	ldr	r0, [r7, #16]
 800b954:	f7ff feb7 	bl	800b6c6 <put_fat>
 800b958:	4603      	mov	r3, r0
 800b95a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b95c:	7dfb      	ldrb	r3, [r7, #23]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d109      	bne.n	800b976 <create_chain+0xe2>
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d006      	beq.n	800b976 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b968:	69fa      	ldr	r2, [r7, #28]
 800b96a:	6839      	ldr	r1, [r7, #0]
 800b96c:	6938      	ldr	r0, [r7, #16]
 800b96e:	f7ff feaa 	bl	800b6c6 <put_fat>
 800b972:	4603      	mov	r3, r0
 800b974:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b976:	7dfb      	ldrb	r3, [r7, #23]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d116      	bne.n	800b9aa <create_chain+0x116>
		fs->last_clst = ncl;
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	69fa      	ldr	r2, [r7, #28]
 800b980:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	691a      	ldr	r2, [r3, #16]
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	695b      	ldr	r3, [r3, #20]
 800b98a:	3b02      	subs	r3, #2
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d804      	bhi.n	800b99a <create_chain+0x106>
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	691b      	ldr	r3, [r3, #16]
 800b994:	1e5a      	subs	r2, r3, #1
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	791b      	ldrb	r3, [r3, #4]
 800b99e:	f043 0301 	orr.w	r3, r3, #1
 800b9a2:	b2da      	uxtb	r2, r3
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	711a      	strb	r2, [r3, #4]
 800b9a8:	e007      	b.n	800b9ba <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b9aa:	7dfb      	ldrb	r3, [r7, #23]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d102      	bne.n	800b9b6 <create_chain+0x122>
 800b9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9b4:	e000      	b.n	800b9b8 <create_chain+0x124>
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b9ba:	69fb      	ldr	r3, [r7, #28]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3720      	adds	r7, #32
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9da:	d204      	bcs.n	800b9e6 <dir_sdi+0x22>
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	f003 031f 	and.w	r3, r3, #31
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d001      	beq.n	800b9ea <dir_sdi+0x26>
		return FR_INT_ERR;
 800b9e6:	2302      	movs	r3, #2
 800b9e8:	e063      	b.n	800bab2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	683a      	ldr	r2, [r7, #0]
 800b9ee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d106      	bne.n	800ba0a <dir_sdi+0x46>
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	2b02      	cmp	r3, #2
 800ba02:	d902      	bls.n	800ba0a <dir_sdi+0x46>
		clst = fs->dirbase;
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba08:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10c      	bne.n	800ba2a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	095b      	lsrs	r3, r3, #5
 800ba14:	693a      	ldr	r2, [r7, #16]
 800ba16:	8912      	ldrh	r2, [r2, #8]
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d301      	bcc.n	800ba20 <dir_sdi+0x5c>
 800ba1c:	2302      	movs	r3, #2
 800ba1e:	e048      	b.n	800bab2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	61da      	str	r2, [r3, #28]
 800ba28:	e029      	b.n	800ba7e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	895b      	ldrh	r3, [r3, #10]
 800ba2e:	025b      	lsls	r3, r3, #9
 800ba30:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ba32:	e019      	b.n	800ba68 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6979      	ldr	r1, [r7, #20]
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7ff fd9f 	bl	800b57c <get_fat>
 800ba3e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba46:	d101      	bne.n	800ba4c <dir_sdi+0x88>
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e032      	b.n	800bab2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d904      	bls.n	800ba5c <dir_sdi+0x98>
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	697a      	ldr	r2, [r7, #20]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d301      	bcc.n	800ba60 <dir_sdi+0x9c>
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	e028      	b.n	800bab2 <dir_sdi+0xee>
			ofs -= csz;
 800ba60:	683a      	ldr	r2, [r7, #0]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	1ad3      	subs	r3, r2, r3
 800ba66:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ba68:	683a      	ldr	r2, [r7, #0]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d2e1      	bcs.n	800ba34 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ba70:	6979      	ldr	r1, [r7, #20]
 800ba72:	6938      	ldr	r0, [r7, #16]
 800ba74:	f7ff fd63 	bl	800b53e <clust2sect>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	697a      	ldr	r2, [r7, #20]
 800ba82:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	69db      	ldr	r3, [r3, #28]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d101      	bne.n	800ba90 <dir_sdi+0xcc>
 800ba8c:	2302      	movs	r3, #2
 800ba8e:	e010      	b.n	800bab2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	69da      	ldr	r2, [r3, #28]
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	0a5b      	lsrs	r3, r3, #9
 800ba98:	441a      	add	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baaa:	441a      	add	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3718      	adds	r7, #24
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b086      	sub	sp, #24
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	695b      	ldr	r3, [r3, #20]
 800bace:	3320      	adds	r3, #32
 800bad0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	69db      	ldr	r3, [r3, #28]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d003      	beq.n	800bae2 <dir_next+0x28>
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bae0:	d301      	bcc.n	800bae6 <dir_next+0x2c>
 800bae2:	2304      	movs	r3, #4
 800bae4:	e0aa      	b.n	800bc3c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baec:	2b00      	cmp	r3, #0
 800baee:	f040 8098 	bne.w	800bc22 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	69db      	ldr	r3, [r3, #28]
 800baf6:	1c5a      	adds	r2, r3, #1
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d10b      	bne.n	800bb1c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	095b      	lsrs	r3, r3, #5
 800bb08:	68fa      	ldr	r2, [r7, #12]
 800bb0a:	8912      	ldrh	r2, [r2, #8]
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	f0c0 8088 	bcc.w	800bc22 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	61da      	str	r2, [r3, #28]
 800bb18:	2304      	movs	r3, #4
 800bb1a:	e08f      	b.n	800bc3c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	0a5b      	lsrs	r3, r3, #9
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	8952      	ldrh	r2, [r2, #10]
 800bb24:	3a01      	subs	r2, #1
 800bb26:	4013      	ands	r3, r2
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d17a      	bne.n	800bc22 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	699b      	ldr	r3, [r3, #24]
 800bb32:	4619      	mov	r1, r3
 800bb34:	4610      	mov	r0, r2
 800bb36:	f7ff fd21 	bl	800b57c <get_fat>
 800bb3a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d801      	bhi.n	800bb46 <dir_next+0x8c>
 800bb42:	2302      	movs	r3, #2
 800bb44:	e07a      	b.n	800bc3c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb4c:	d101      	bne.n	800bb52 <dir_next+0x98>
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e074      	b.n	800bc3c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	695b      	ldr	r3, [r3, #20]
 800bb56:	697a      	ldr	r2, [r7, #20]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d358      	bcc.n	800bc0e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d104      	bne.n	800bb6c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	61da      	str	r2, [r3, #28]
 800bb68:	2304      	movs	r3, #4
 800bb6a:	e067      	b.n	800bc3c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	699b      	ldr	r3, [r3, #24]
 800bb72:	4619      	mov	r1, r3
 800bb74:	4610      	mov	r0, r2
 800bb76:	f7ff fe8d 	bl	800b894 <create_chain>
 800bb7a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d101      	bne.n	800bb86 <dir_next+0xcc>
 800bb82:	2307      	movs	r3, #7
 800bb84:	e05a      	b.n	800bc3c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d101      	bne.n	800bb90 <dir_next+0xd6>
 800bb8c:	2302      	movs	r3, #2
 800bb8e:	e055      	b.n	800bc3c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb96:	d101      	bne.n	800bb9c <dir_next+0xe2>
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e04f      	b.n	800bc3c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f7ff fc5d 	bl	800b45c <sync_window>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d001      	beq.n	800bbac <dir_next+0xf2>
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e047      	b.n	800bc3c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	3330      	adds	r3, #48	; 0x30
 800bbb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7ff fb06 	bl	800b1c8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	613b      	str	r3, [r7, #16]
 800bbc0:	6979      	ldr	r1, [r7, #20]
 800bbc2:	68f8      	ldr	r0, [r7, #12]
 800bbc4:	f7ff fcbb 	bl	800b53e <clust2sect>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	62da      	str	r2, [r3, #44]	; 0x2c
 800bbce:	e012      	b.n	800bbf6 <dir_next+0x13c>
						fs->wflag = 1;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bbd6:	68f8      	ldr	r0, [r7, #12]
 800bbd8:	f7ff fc40 	bl	800b45c <sync_window>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d001      	beq.n	800bbe6 <dir_next+0x12c>
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e02a      	b.n	800bc3c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	613b      	str	r3, [r7, #16]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf0:	1c5a      	adds	r2, r3, #1
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	62da      	str	r2, [r3, #44]	; 0x2c
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	895b      	ldrh	r3, [r3, #10]
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d3e6      	bcc.n	800bbd0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	1ad2      	subs	r2, r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	697a      	ldr	r2, [r7, #20]
 800bc12:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bc14:	6979      	ldr	r1, [r7, #20]
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f7ff fc91 	bl	800b53e <clust2sect>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	68ba      	ldr	r2, [r7, #8]
 800bc26:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc34:	441a      	add	r2, r3
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3718      	adds	r7, #24
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	331a      	adds	r3, #26
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7ff fa36 	bl	800b0c4 <ld_word>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	2b03      	cmp	r3, #3
 800bc62:	d109      	bne.n	800bc78 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	3314      	adds	r3, #20
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7ff fa2b 	bl	800b0c4 <ld_word>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	041b      	lsls	r3, r3, #16
 800bc72:	68fa      	ldr	r2, [r7, #12]
 800bc74:	4313      	orrs	r3, r2
 800bc76:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bc78:	68fb      	ldr	r3, [r7, #12]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b086      	sub	sp, #24
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800bc8c:	2304      	movs	r3, #4
 800bc8e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800bc96:	e03c      	b.n	800bd12 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	69db      	ldr	r3, [r3, #28]
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	6938      	ldr	r0, [r7, #16]
 800bca0:	f7ff fc20 	bl	800b4e4 <move_window>
 800bca4:	4603      	mov	r3, r0
 800bca6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bca8:	7dfb      	ldrb	r3, [r7, #23]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d136      	bne.n	800bd1c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6a1b      	ldr	r3, [r3, #32]
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800bcb6:	7bfb      	ldrb	r3, [r7, #15]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d102      	bne.n	800bcc2 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800bcbc:	2304      	movs	r3, #4
 800bcbe:	75fb      	strb	r3, [r7, #23]
 800bcc0:	e031      	b.n	800bd26 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6a1b      	ldr	r3, [r3, #32]
 800bcc6:	330b      	adds	r3, #11
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcce:	73bb      	strb	r3, [r7, #14]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	7bba      	ldrb	r2, [r7, #14]
 800bcd4:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800bcd6:	7bfb      	ldrb	r3, [r7, #15]
 800bcd8:	2be5      	cmp	r3, #229	; 0xe5
 800bcda:	d011      	beq.n	800bd00 <dir_read+0x7e>
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
 800bcde:	2b2e      	cmp	r3, #46	; 0x2e
 800bce0:	d00e      	beq.n	800bd00 <dir_read+0x7e>
 800bce2:	7bbb      	ldrb	r3, [r7, #14]
 800bce4:	2b0f      	cmp	r3, #15
 800bce6:	d00b      	beq.n	800bd00 <dir_read+0x7e>
 800bce8:	7bbb      	ldrb	r3, [r7, #14]
 800bcea:	f023 0320 	bic.w	r3, r3, #32
 800bcee:	2b08      	cmp	r3, #8
 800bcf0:	bf0c      	ite	eq
 800bcf2:	2301      	moveq	r3, #1
 800bcf4:	2300      	movne	r3, #0
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d00f      	beq.n	800bd20 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800bd00:	2100      	movs	r1, #0
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7ff fed9 	bl	800baba <dir_next>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bd0c:	7dfb      	ldrb	r3, [r7, #23]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d108      	bne.n	800bd24 <dir_read+0xa2>
	while (dp->sect) {
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	69db      	ldr	r3, [r3, #28]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1be      	bne.n	800bc98 <dir_read+0x16>
 800bd1a:	e004      	b.n	800bd26 <dir_read+0xa4>
		if (res != FR_OK) break;
 800bd1c:	bf00      	nop
 800bd1e:	e002      	b.n	800bd26 <dir_read+0xa4>
				break;
 800bd20:	bf00      	nop
 800bd22:	e000      	b.n	800bd26 <dir_read+0xa4>
		if (res != FR_OK) break;
 800bd24:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800bd26:	7dfb      	ldrb	r3, [r7, #23]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <dir_read+0xb0>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	61da      	str	r2, [r3, #28]
	return res;
 800bd32:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3718      	adds	r7, #24
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b086      	sub	sp, #24
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f7ff fe39 	bl	800b9c4 <dir_sdi>
 800bd52:	4603      	mov	r3, r0
 800bd54:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bd56:	7dfb      	ldrb	r3, [r7, #23]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d001      	beq.n	800bd60 <dir_find+0x24>
 800bd5c:	7dfb      	ldrb	r3, [r7, #23]
 800bd5e:	e03e      	b.n	800bdde <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	69db      	ldr	r3, [r3, #28]
 800bd64:	4619      	mov	r1, r3
 800bd66:	6938      	ldr	r0, [r7, #16]
 800bd68:	f7ff fbbc 	bl	800b4e4 <move_window>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bd70:	7dfb      	ldrb	r3, [r7, #23]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d12f      	bne.n	800bdd6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a1b      	ldr	r3, [r3, #32]
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d102      	bne.n	800bd8a <dir_find+0x4e>
 800bd84:	2304      	movs	r3, #4
 800bd86:	75fb      	strb	r3, [r7, #23]
 800bd88:	e028      	b.n	800bddc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6a1b      	ldr	r3, [r3, #32]
 800bd8e:	330b      	adds	r3, #11
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd96:	b2da      	uxtb	r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6a1b      	ldr	r3, [r3, #32]
 800bda0:	330b      	adds	r3, #11
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	f003 0308 	and.w	r3, r3, #8
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d10a      	bne.n	800bdc2 <dir_find+0x86>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a18      	ldr	r0, [r3, #32]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	3324      	adds	r3, #36	; 0x24
 800bdb4:	220b      	movs	r2, #11
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	f7ff fa20 	bl	800b1fc <mem_cmp>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00b      	beq.n	800bdda <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bdc2:	2100      	movs	r1, #0
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f7ff fe78 	bl	800baba <dir_next>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bdce:	7dfb      	ldrb	r3, [r7, #23]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d0c5      	beq.n	800bd60 <dir_find+0x24>
 800bdd4:	e002      	b.n	800bddc <dir_find+0xa0>
		if (res != FR_OK) break;
 800bdd6:	bf00      	nop
 800bdd8:	e000      	b.n	800bddc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bdda:	bf00      	nop

	return res;
 800bddc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3718      	adds	r7, #24
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b086      	sub	sp, #24
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
 800bdee:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	69db      	ldr	r3, [r3, #28]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d04e      	beq.n	800be9c <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800bdfe:	2300      	movs	r3, #0
 800be00:	613b      	str	r3, [r7, #16]
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800be06:	e021      	b.n	800be4c <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a1a      	ldr	r2, [r3, #32]
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	1c59      	adds	r1, r3, #1
 800be10:	6179      	str	r1, [r7, #20]
 800be12:	4413      	add	r3, r2
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800be18:	7bfb      	ldrb	r3, [r7, #15]
 800be1a:	2b20      	cmp	r3, #32
 800be1c:	d100      	bne.n	800be20 <get_fileinfo+0x3a>
 800be1e:	e015      	b.n	800be4c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800be20:	7bfb      	ldrb	r3, [r7, #15]
 800be22:	2b05      	cmp	r3, #5
 800be24:	d101      	bne.n	800be2a <get_fileinfo+0x44>
 800be26:	23e5      	movs	r3, #229	; 0xe5
 800be28:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	2b09      	cmp	r3, #9
 800be2e:	d106      	bne.n	800be3e <get_fileinfo+0x58>
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	1c5a      	adds	r2, r3, #1
 800be34:	613a      	str	r2, [r7, #16]
 800be36:	683a      	ldr	r2, [r7, #0]
 800be38:	4413      	add	r3, r2
 800be3a:	222e      	movs	r2, #46	; 0x2e
 800be3c:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	1c5a      	adds	r2, r3, #1
 800be42:	613a      	str	r2, [r7, #16]
 800be44:	683a      	ldr	r2, [r7, #0]
 800be46:	4413      	add	r3, r2
 800be48:	7bfa      	ldrb	r2, [r7, #15]
 800be4a:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	2b0a      	cmp	r3, #10
 800be50:	d9da      	bls.n	800be08 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800be52:	683a      	ldr	r2, [r7, #0]
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	4413      	add	r3, r2
 800be58:	3309      	adds	r3, #9
 800be5a:	2200      	movs	r2, #0
 800be5c:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6a1b      	ldr	r3, [r3, #32]
 800be62:	7ada      	ldrb	r2, [r3, #11]
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a1b      	ldr	r3, [r3, #32]
 800be6c:	331c      	adds	r3, #28
 800be6e:	4618      	mov	r0, r3
 800be70:	f7ff f940 	bl	800b0f4 <ld_dword>
 800be74:	4602      	mov	r2, r0
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a1b      	ldr	r3, [r3, #32]
 800be7e:	3316      	adds	r3, #22
 800be80:	4618      	mov	r0, r3
 800be82:	f7ff f937 	bl	800b0f4 <ld_dword>
 800be86:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	80da      	strh	r2, [r3, #6]
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	0c1b      	lsrs	r3, r3, #16
 800be94:	b29a      	uxth	r2, r3
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	809a      	strh	r2, [r3, #4]
 800be9a:	e000      	b.n	800be9e <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800be9c:	bf00      	nop
}
 800be9e:	3718      	adds	r7, #24
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b088      	sub	sp, #32
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	60fb      	str	r3, [r7, #12]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	3324      	adds	r3, #36	; 0x24
 800beb8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800beba:	220b      	movs	r2, #11
 800bebc:	2120      	movs	r1, #32
 800bebe:	68b8      	ldr	r0, [r7, #8]
 800bec0:	f7ff f982 	bl	800b1c8 <mem_set>
	si = i = 0; ni = 8;
 800bec4:	2300      	movs	r3, #0
 800bec6:	613b      	str	r3, [r7, #16]
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	617b      	str	r3, [r7, #20]
 800becc:	2308      	movs	r3, #8
 800bece:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	1c5a      	adds	r2, r3, #1
 800bed4:	617a      	str	r2, [r7, #20]
 800bed6:	68fa      	ldr	r2, [r7, #12]
 800bed8:	4413      	add	r3, r2
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bede:	7ffb      	ldrb	r3, [r7, #31]
 800bee0:	2b20      	cmp	r3, #32
 800bee2:	d94e      	bls.n	800bf82 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bee4:	7ffb      	ldrb	r3, [r7, #31]
 800bee6:	2b2f      	cmp	r3, #47	; 0x2f
 800bee8:	d006      	beq.n	800bef8 <create_name+0x54>
 800beea:	7ffb      	ldrb	r3, [r7, #31]
 800beec:	2b5c      	cmp	r3, #92	; 0x5c
 800beee:	d110      	bne.n	800bf12 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bef0:	e002      	b.n	800bef8 <create_name+0x54>
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	3301      	adds	r3, #1
 800bef6:	617b      	str	r3, [r7, #20]
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	4413      	add	r3, r2
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	2b2f      	cmp	r3, #47	; 0x2f
 800bf02:	d0f6      	beq.n	800bef2 <create_name+0x4e>
 800bf04:	68fa      	ldr	r2, [r7, #12]
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	4413      	add	r3, r2
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	2b5c      	cmp	r3, #92	; 0x5c
 800bf0e:	d0f0      	beq.n	800bef2 <create_name+0x4e>
			break;
 800bf10:	e038      	b.n	800bf84 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bf12:	7ffb      	ldrb	r3, [r7, #31]
 800bf14:	2b2e      	cmp	r3, #46	; 0x2e
 800bf16:	d003      	beq.n	800bf20 <create_name+0x7c>
 800bf18:	693a      	ldr	r2, [r7, #16]
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d30c      	bcc.n	800bf3a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	2b0b      	cmp	r3, #11
 800bf24:	d002      	beq.n	800bf2c <create_name+0x88>
 800bf26:	7ffb      	ldrb	r3, [r7, #31]
 800bf28:	2b2e      	cmp	r3, #46	; 0x2e
 800bf2a:	d001      	beq.n	800bf30 <create_name+0x8c>
 800bf2c:	2306      	movs	r3, #6
 800bf2e:	e044      	b.n	800bfba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bf30:	2308      	movs	r3, #8
 800bf32:	613b      	str	r3, [r7, #16]
 800bf34:	230b      	movs	r3, #11
 800bf36:	61bb      	str	r3, [r7, #24]
			continue;
 800bf38:	e022      	b.n	800bf80 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bf3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	da04      	bge.n	800bf4c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bf42:	7ffb      	ldrb	r3, [r7, #31]
 800bf44:	3b80      	subs	r3, #128	; 0x80
 800bf46:	4a1f      	ldr	r2, [pc, #124]	; (800bfc4 <create_name+0x120>)
 800bf48:	5cd3      	ldrb	r3, [r2, r3]
 800bf4a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bf4c:	7ffb      	ldrb	r3, [r7, #31]
 800bf4e:	4619      	mov	r1, r3
 800bf50:	481d      	ldr	r0, [pc, #116]	; (800bfc8 <create_name+0x124>)
 800bf52:	f7ff f97a 	bl	800b24a <chk_chr>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d001      	beq.n	800bf60 <create_name+0xbc>
 800bf5c:	2306      	movs	r3, #6
 800bf5e:	e02c      	b.n	800bfba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bf60:	7ffb      	ldrb	r3, [r7, #31]
 800bf62:	2b60      	cmp	r3, #96	; 0x60
 800bf64:	d905      	bls.n	800bf72 <create_name+0xce>
 800bf66:	7ffb      	ldrb	r3, [r7, #31]
 800bf68:	2b7a      	cmp	r3, #122	; 0x7a
 800bf6a:	d802      	bhi.n	800bf72 <create_name+0xce>
 800bf6c:	7ffb      	ldrb	r3, [r7, #31]
 800bf6e:	3b20      	subs	r3, #32
 800bf70:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	1c5a      	adds	r2, r3, #1
 800bf76:	613a      	str	r2, [r7, #16]
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	7ffa      	ldrb	r2, [r7, #31]
 800bf7e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bf80:	e7a6      	b.n	800bed0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bf82:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	441a      	add	r2, r3
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d101      	bne.n	800bf98 <create_name+0xf4>
 800bf94:	2306      	movs	r3, #6
 800bf96:	e010      	b.n	800bfba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	2be5      	cmp	r3, #229	; 0xe5
 800bf9e:	d102      	bne.n	800bfa6 <create_name+0x102>
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	2205      	movs	r2, #5
 800bfa4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bfa6:	7ffb      	ldrb	r3, [r7, #31]
 800bfa8:	2b20      	cmp	r3, #32
 800bfaa:	d801      	bhi.n	800bfb0 <create_name+0x10c>
 800bfac:	2204      	movs	r2, #4
 800bfae:	e000      	b.n	800bfb2 <create_name+0x10e>
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	330b      	adds	r3, #11
 800bfb6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bfb8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3720      	adds	r7, #32
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	0800f938 	.word	0x0800f938
 800bfc8:	0800dbf4 	.word	0x0800dbf4

0800bfcc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b086      	sub	sp, #24
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bfe0:	e002      	b.n	800bfe8 <follow_path+0x1c>
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	603b      	str	r3, [r7, #0]
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	2b2f      	cmp	r3, #47	; 0x2f
 800bfee:	d0f8      	beq.n	800bfe2 <follow_path+0x16>
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	2b5c      	cmp	r3, #92	; 0x5c
 800bff6:	d0f4      	beq.n	800bfe2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	2200      	movs	r2, #0
 800bffc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	2b1f      	cmp	r3, #31
 800c004:	d80a      	bhi.n	800c01c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2280      	movs	r2, #128	; 0x80
 800c00a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c00e:	2100      	movs	r1, #0
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f7ff fcd7 	bl	800b9c4 <dir_sdi>
 800c016:	4603      	mov	r3, r0
 800c018:	75fb      	strb	r3, [r7, #23]
 800c01a:	e043      	b.n	800c0a4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c01c:	463b      	mov	r3, r7
 800c01e:	4619      	mov	r1, r3
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f7ff ff3f 	bl	800bea4 <create_name>
 800c026:	4603      	mov	r3, r0
 800c028:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c02a:	7dfb      	ldrb	r3, [r7, #23]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d134      	bne.n	800c09a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f7ff fe83 	bl	800bd3c <dir_find>
 800c036:	4603      	mov	r3, r0
 800c038:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c040:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c042:	7dfb      	ldrb	r3, [r7, #23]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00a      	beq.n	800c05e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c048:	7dfb      	ldrb	r3, [r7, #23]
 800c04a:	2b04      	cmp	r3, #4
 800c04c:	d127      	bne.n	800c09e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c04e:	7afb      	ldrb	r3, [r7, #11]
 800c050:	f003 0304 	and.w	r3, r3, #4
 800c054:	2b00      	cmp	r3, #0
 800c056:	d122      	bne.n	800c09e <follow_path+0xd2>
 800c058:	2305      	movs	r3, #5
 800c05a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c05c:	e01f      	b.n	800c09e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c05e:	7afb      	ldrb	r3, [r7, #11]
 800c060:	f003 0304 	and.w	r3, r3, #4
 800c064:	2b00      	cmp	r3, #0
 800c066:	d11c      	bne.n	800c0a2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	799b      	ldrb	r3, [r3, #6]
 800c06c:	f003 0310 	and.w	r3, r3, #16
 800c070:	2b00      	cmp	r3, #0
 800c072:	d102      	bne.n	800c07a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c074:	2305      	movs	r3, #5
 800c076:	75fb      	strb	r3, [r7, #23]
 800c078:	e014      	b.n	800c0a4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	695b      	ldr	r3, [r3, #20]
 800c084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c088:	4413      	add	r3, r2
 800c08a:	4619      	mov	r1, r3
 800c08c:	68f8      	ldr	r0, [r7, #12]
 800c08e:	f7ff fdd9 	bl	800bc44 <ld_clust>
 800c092:	4602      	mov	r2, r0
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c098:	e7c0      	b.n	800c01c <follow_path+0x50>
			if (res != FR_OK) break;
 800c09a:	bf00      	nop
 800c09c:	e002      	b.n	800c0a4 <follow_path+0xd8>
				break;
 800c09e:	bf00      	nop
 800c0a0:	e000      	b.n	800c0a4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c0a2:	bf00      	nop
			}
		}
	}

	return res;
 800c0a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3718      	adds	r7, #24
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b087      	sub	sp, #28
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d031      	beq.n	800c128 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	617b      	str	r3, [r7, #20]
 800c0ca:	e002      	b.n	800c0d2 <get_ldnumber+0x24>
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	617b      	str	r3, [r7, #20]
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	2b20      	cmp	r3, #32
 800c0d8:	d903      	bls.n	800c0e2 <get_ldnumber+0x34>
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	2b3a      	cmp	r3, #58	; 0x3a
 800c0e0:	d1f4      	bne.n	800c0cc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	2b3a      	cmp	r3, #58	; 0x3a
 800c0e8:	d11c      	bne.n	800c124 <get_ldnumber+0x76>
			tp = *path;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	1c5a      	adds	r2, r3, #1
 800c0f4:	60fa      	str	r2, [r7, #12]
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	3b30      	subs	r3, #48	; 0x30
 800c0fa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	2b09      	cmp	r3, #9
 800c100:	d80e      	bhi.n	800c120 <get_ldnumber+0x72>
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	429a      	cmp	r2, r3
 800c108:	d10a      	bne.n	800c120 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d107      	bne.n	800c120 <get_ldnumber+0x72>
					vol = (int)i;
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	3301      	adds	r3, #1
 800c118:	617b      	str	r3, [r7, #20]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	697a      	ldr	r2, [r7, #20]
 800c11e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	e002      	b.n	800c12a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c124:	2300      	movs	r3, #0
 800c126:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c128:	693b      	ldr	r3, [r7, #16]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	371c      	adds	r7, #28
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr
	...

0800c138 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2200      	movs	r2, #0
 800c146:	70da      	strb	r2, [r3, #3]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f04f 32ff 	mov.w	r2, #4294967295
 800c14e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c150:	6839      	ldr	r1, [r7, #0]
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f7ff f9c6 	bl	800b4e4 <move_window>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d001      	beq.n	800c162 <check_fs+0x2a>
 800c15e:	2304      	movs	r3, #4
 800c160:	e038      	b.n	800c1d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	3330      	adds	r3, #48	; 0x30
 800c166:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7fe ffaa 	bl	800b0c4 <ld_word>
 800c170:	4603      	mov	r3, r0
 800c172:	461a      	mov	r2, r3
 800c174:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c178:	429a      	cmp	r2, r3
 800c17a:	d001      	beq.n	800c180 <check_fs+0x48>
 800c17c:	2303      	movs	r3, #3
 800c17e:	e029      	b.n	800c1d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c186:	2be9      	cmp	r3, #233	; 0xe9
 800c188:	d009      	beq.n	800c19e <check_fs+0x66>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c190:	2beb      	cmp	r3, #235	; 0xeb
 800c192:	d11e      	bne.n	800c1d2 <check_fs+0x9a>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c19a:	2b90      	cmp	r3, #144	; 0x90
 800c19c:	d119      	bne.n	800c1d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	3330      	adds	r3, #48	; 0x30
 800c1a2:	3336      	adds	r3, #54	; 0x36
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7fe ffa5 	bl	800b0f4 <ld_dword>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c1b0:	4a0a      	ldr	r2, [pc, #40]	; (800c1dc <check_fs+0xa4>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d101      	bne.n	800c1ba <check_fs+0x82>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	e00c      	b.n	800c1d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	3330      	adds	r3, #48	; 0x30
 800c1be:	3352      	adds	r3, #82	; 0x52
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7fe ff97 	bl	800b0f4 <ld_dword>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	4b05      	ldr	r3, [pc, #20]	; (800c1e0 <check_fs+0xa8>)
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d101      	bne.n	800c1d2 <check_fs+0x9a>
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	e000      	b.n	800c1d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c1d2:	2302      	movs	r3, #2
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3708      	adds	r7, #8
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}
 800c1dc:	00544146 	.word	0x00544146
 800c1e0:	33544146 	.word	0x33544146

0800c1e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b096      	sub	sp, #88	; 0x58
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	f7ff ff58 	bl	800c0ae <get_ldnumber>
 800c1fe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c202:	2b00      	cmp	r3, #0
 800c204:	da01      	bge.n	800c20a <find_volume+0x26>
 800c206:	230b      	movs	r3, #11
 800c208:	e22e      	b.n	800c668 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c20a:	4aa8      	ldr	r2, [pc, #672]	; (800c4ac <find_volume+0x2c8>)
 800c20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c20e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c212:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c216:	2b00      	cmp	r3, #0
 800c218:	d101      	bne.n	800c21e <find_volume+0x3a>
 800c21a:	230c      	movs	r3, #12
 800c21c:	e224      	b.n	800c668 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c222:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c224:	79fb      	ldrb	r3, [r7, #7]
 800c226:	f023 0301 	bic.w	r3, r3, #1
 800c22a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d01a      	beq.n	800c26a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c236:	785b      	ldrb	r3, [r3, #1]
 800c238:	4618      	mov	r0, r3
 800c23a:	f7fe fec3 	bl	800afc4 <disk_status>
 800c23e:	4603      	mov	r3, r0
 800c240:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c244:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c248:	f003 0301 	and.w	r3, r3, #1
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d10c      	bne.n	800c26a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c250:	79fb      	ldrb	r3, [r7, #7]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d007      	beq.n	800c266 <find_volume+0x82>
 800c256:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c25a:	f003 0304 	and.w	r3, r3, #4
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d001      	beq.n	800c266 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c262:	230a      	movs	r3, #10
 800c264:	e200      	b.n	800c668 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800c266:	2300      	movs	r3, #0
 800c268:	e1fe      	b.n	800c668 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26c:	2200      	movs	r2, #0
 800c26e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c272:	b2da      	uxtb	r2, r3
 800c274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c276:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27a:	785b      	ldrb	r3, [r3, #1]
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7fe febb 	bl	800aff8 <disk_initialize>
 800c282:	4603      	mov	r3, r0
 800c284:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c288:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c28c:	f003 0301 	and.w	r3, r3, #1
 800c290:	2b00      	cmp	r3, #0
 800c292:	d001      	beq.n	800c298 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c294:	2303      	movs	r3, #3
 800c296:	e1e7      	b.n	800c668 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c298:	79fb      	ldrb	r3, [r7, #7]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d007      	beq.n	800c2ae <find_volume+0xca>
 800c29e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2a2:	f003 0304 	and.w	r3, r3, #4
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d001      	beq.n	800c2ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c2aa:	230a      	movs	r3, #10
 800c2ac:	e1dc      	b.n	800c668 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c2b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c2b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c2b6:	f7ff ff3f 	bl	800c138 <check_fs>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c2c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2c4:	2b02      	cmp	r3, #2
 800c2c6:	d14b      	bne.n	800c360 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	643b      	str	r3, [r7, #64]	; 0x40
 800c2cc:	e01f      	b.n	800c30e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2d6:	011b      	lsls	r3, r3, #4
 800c2d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c2dc:	4413      	add	r3, r2
 800c2de:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d006      	beq.n	800c2f8 <find_volume+0x114>
 800c2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ec:	3308      	adds	r3, #8
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fe ff00 	bl	800b0f4 <ld_dword>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	e000      	b.n	800c2fa <find_volume+0x116>
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c302:	440b      	add	r3, r1
 800c304:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c30a:	3301      	adds	r3, #1
 800c30c:	643b      	str	r3, [r7, #64]	; 0x40
 800c30e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c310:	2b03      	cmp	r3, #3
 800c312:	d9dc      	bls.n	800c2ce <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c314:	2300      	movs	r3, #0
 800c316:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d002      	beq.n	800c324 <find_volume+0x140>
 800c31e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c320:	3b01      	subs	r3, #1
 800c322:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c32c:	4413      	add	r3, r2
 800c32e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c332:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c336:	2b00      	cmp	r3, #0
 800c338:	d005      	beq.n	800c346 <find_volume+0x162>
 800c33a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c33c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c33e:	f7ff fefb 	bl	800c138 <check_fs>
 800c342:	4603      	mov	r3, r0
 800c344:	e000      	b.n	800c348 <find_volume+0x164>
 800c346:	2303      	movs	r3, #3
 800c348:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c34c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c350:	2b01      	cmp	r3, #1
 800c352:	d905      	bls.n	800c360 <find_volume+0x17c>
 800c354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c356:	3301      	adds	r3, #1
 800c358:	643b      	str	r3, [r7, #64]	; 0x40
 800c35a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c35c:	2b03      	cmp	r3, #3
 800c35e:	d9e1      	bls.n	800c324 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c360:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c364:	2b04      	cmp	r3, #4
 800c366:	d101      	bne.n	800c36c <find_volume+0x188>
 800c368:	2301      	movs	r3, #1
 800c36a:	e17d      	b.n	800c668 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c36c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c370:	2b01      	cmp	r3, #1
 800c372:	d901      	bls.n	800c378 <find_volume+0x194>
 800c374:	230d      	movs	r3, #13
 800c376:	e177      	b.n	800c668 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37a:	3330      	adds	r3, #48	; 0x30
 800c37c:	330b      	adds	r3, #11
 800c37e:	4618      	mov	r0, r3
 800c380:	f7fe fea0 	bl	800b0c4 <ld_word>
 800c384:	4603      	mov	r3, r0
 800c386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c38a:	d001      	beq.n	800c390 <find_volume+0x1ac>
 800c38c:	230d      	movs	r3, #13
 800c38e:	e16b      	b.n	800c668 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c392:	3330      	adds	r3, #48	; 0x30
 800c394:	3316      	adds	r3, #22
 800c396:	4618      	mov	r0, r3
 800c398:	f7fe fe94 	bl	800b0c4 <ld_word>
 800c39c:	4603      	mov	r3, r0
 800c39e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c3a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d106      	bne.n	800c3b4 <find_volume+0x1d0>
 800c3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a8:	3330      	adds	r3, #48	; 0x30
 800c3aa:	3324      	adds	r3, #36	; 0x24
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f7fe fea1 	bl	800b0f4 <ld_dword>
 800c3b2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c3b8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3bc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c6:	789b      	ldrb	r3, [r3, #2]
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d005      	beq.n	800c3d8 <find_volume+0x1f4>
 800c3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ce:	789b      	ldrb	r3, [r3, #2]
 800c3d0:	2b02      	cmp	r3, #2
 800c3d2:	d001      	beq.n	800c3d8 <find_volume+0x1f4>
 800c3d4:	230d      	movs	r3, #13
 800c3d6:	e147      	b.n	800c668 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3da:	789b      	ldrb	r3, [r3, #2]
 800c3dc:	461a      	mov	r2, r3
 800c3de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3e0:	fb02 f303 	mul.w	r3, r2, r3
 800c3e4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3ec:	b29a      	uxth	r2, r3
 800c3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f4:	895b      	ldrh	r3, [r3, #10]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d008      	beq.n	800c40c <find_volume+0x228>
 800c3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fc:	895b      	ldrh	r3, [r3, #10]
 800c3fe:	461a      	mov	r2, r3
 800c400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c402:	895b      	ldrh	r3, [r3, #10]
 800c404:	3b01      	subs	r3, #1
 800c406:	4013      	ands	r3, r2
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d001      	beq.n	800c410 <find_volume+0x22c>
 800c40c:	230d      	movs	r3, #13
 800c40e:	e12b      	b.n	800c668 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c412:	3330      	adds	r3, #48	; 0x30
 800c414:	3311      	adds	r3, #17
 800c416:	4618      	mov	r0, r3
 800c418:	f7fe fe54 	bl	800b0c4 <ld_word>
 800c41c:	4603      	mov	r3, r0
 800c41e:	461a      	mov	r2, r3
 800c420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c422:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c426:	891b      	ldrh	r3, [r3, #8]
 800c428:	f003 030f 	and.w	r3, r3, #15
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d001      	beq.n	800c436 <find_volume+0x252>
 800c432:	230d      	movs	r3, #13
 800c434:	e118      	b.n	800c668 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c438:	3330      	adds	r3, #48	; 0x30
 800c43a:	3313      	adds	r3, #19
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7fe fe41 	bl	800b0c4 <ld_word>
 800c442:	4603      	mov	r3, r0
 800c444:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d106      	bne.n	800c45a <find_volume+0x276>
 800c44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44e:	3330      	adds	r3, #48	; 0x30
 800c450:	3320      	adds	r3, #32
 800c452:	4618      	mov	r0, r3
 800c454:	f7fe fe4e 	bl	800b0f4 <ld_dword>
 800c458:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45c:	3330      	adds	r3, #48	; 0x30
 800c45e:	330e      	adds	r3, #14
 800c460:	4618      	mov	r0, r3
 800c462:	f7fe fe2f 	bl	800b0c4 <ld_word>
 800c466:	4603      	mov	r3, r0
 800c468:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c46a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d101      	bne.n	800c474 <find_volume+0x290>
 800c470:	230d      	movs	r3, #13
 800c472:	e0f9      	b.n	800c668 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c474:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c478:	4413      	add	r3, r2
 800c47a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c47c:	8912      	ldrh	r2, [r2, #8]
 800c47e:	0912      	lsrs	r2, r2, #4
 800c480:	b292      	uxth	r2, r2
 800c482:	4413      	add	r3, r2
 800c484:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c486:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d201      	bcs.n	800c492 <find_volume+0x2ae>
 800c48e:	230d      	movs	r3, #13
 800c490:	e0ea      	b.n	800c668 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c492:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c496:	1ad3      	subs	r3, r2, r3
 800c498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c49a:	8952      	ldrh	r2, [r2, #10]
 800c49c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d103      	bne.n	800c4b0 <find_volume+0x2cc>
 800c4a8:	230d      	movs	r3, #13
 800c4aa:	e0dd      	b.n	800c668 <find_volume+0x484>
 800c4ac:	200002e4 	.word	0x200002e4
		fmt = FS_FAT32;
 800c4b0:	2303      	movs	r3, #3
 800c4b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d802      	bhi.n	800c4c6 <find_volume+0x2e2>
 800c4c0:	2302      	movs	r3, #2
 800c4c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d802      	bhi.n	800c4d6 <find_volume+0x2f2>
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d8:	1c9a      	adds	r2, r3, #2
 800c4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4dc:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c4e2:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c4e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c4e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4e8:	441a      	add	r2, r3
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ec:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c4ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f2:	441a      	add	r2, r3
 800c4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800c4f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c4fc:	2b03      	cmp	r3, #3
 800c4fe:	d11e      	bne.n	800c53e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c502:	3330      	adds	r3, #48	; 0x30
 800c504:	332a      	adds	r3, #42	; 0x2a
 800c506:	4618      	mov	r0, r3
 800c508:	f7fe fddc 	bl	800b0c4 <ld_word>
 800c50c:	4603      	mov	r3, r0
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d001      	beq.n	800c516 <find_volume+0x332>
 800c512:	230d      	movs	r3, #13
 800c514:	e0a8      	b.n	800c668 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c518:	891b      	ldrh	r3, [r3, #8]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d001      	beq.n	800c522 <find_volume+0x33e>
 800c51e:	230d      	movs	r3, #13
 800c520:	e0a2      	b.n	800c668 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c524:	3330      	adds	r3, #48	; 0x30
 800c526:	332c      	adds	r3, #44	; 0x2c
 800c528:	4618      	mov	r0, r3
 800c52a:	f7fe fde3 	bl	800b0f4 <ld_dword>
 800c52e:	4602      	mov	r2, r0
 800c530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c532:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c536:	695b      	ldr	r3, [r3, #20]
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	647b      	str	r3, [r7, #68]	; 0x44
 800c53c:	e01f      	b.n	800c57e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c540:	891b      	ldrh	r3, [r3, #8]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d101      	bne.n	800c54a <find_volume+0x366>
 800c546:	230d      	movs	r3, #13
 800c548:	e08e      	b.n	800c668 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54c:	6a1a      	ldr	r2, [r3, #32]
 800c54e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c550:	441a      	add	r2, r3
 800c552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c554:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c556:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c55a:	2b02      	cmp	r3, #2
 800c55c:	d103      	bne.n	800c566 <find_volume+0x382>
 800c55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c560:	695b      	ldr	r3, [r3, #20]
 800c562:	005b      	lsls	r3, r3, #1
 800c564:	e00a      	b.n	800c57c <find_volume+0x398>
 800c566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c568:	695a      	ldr	r2, [r3, #20]
 800c56a:	4613      	mov	r3, r2
 800c56c:	005b      	lsls	r3, r3, #1
 800c56e:	4413      	add	r3, r2
 800c570:	085a      	lsrs	r2, r3, #1
 800c572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c574:	695b      	ldr	r3, [r3, #20]
 800c576:	f003 0301 	and.w	r3, r3, #1
 800c57a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c57c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c580:	699a      	ldr	r2, [r3, #24]
 800c582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c584:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c588:	0a5b      	lsrs	r3, r3, #9
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d201      	bcs.n	800c592 <find_volume+0x3ae>
 800c58e:	230d      	movs	r3, #13
 800c590:	e06a      	b.n	800c668 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c594:	f04f 32ff 	mov.w	r2, #4294967295
 800c598:	611a      	str	r2, [r3, #16]
 800c59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59c:	691a      	ldr	r2, [r3, #16]
 800c59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a4:	2280      	movs	r2, #128	; 0x80
 800c5a6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c5a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5ac:	2b03      	cmp	r3, #3
 800c5ae:	d149      	bne.n	800c644 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b2:	3330      	adds	r3, #48	; 0x30
 800c5b4:	3330      	adds	r3, #48	; 0x30
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fe fd84 	bl	800b0c4 <ld_word>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d140      	bne.n	800c644 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c5c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5ca:	f7fe ff8b 	bl	800b4e4 <move_window>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d137      	bne.n	800c644 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800c5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5dc:	3330      	adds	r3, #48	; 0x30
 800c5de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fe fd6e 	bl	800b0c4 <ld_word>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d127      	bne.n	800c644 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f6:	3330      	adds	r3, #48	; 0x30
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7fe fd7b 	bl	800b0f4 <ld_dword>
 800c5fe:	4602      	mov	r2, r0
 800c600:	4b1b      	ldr	r3, [pc, #108]	; (800c670 <find_volume+0x48c>)
 800c602:	429a      	cmp	r2, r3
 800c604:	d11e      	bne.n	800c644 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c608:	3330      	adds	r3, #48	; 0x30
 800c60a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fe fd70 	bl	800b0f4 <ld_dword>
 800c614:	4602      	mov	r2, r0
 800c616:	4b17      	ldr	r3, [pc, #92]	; (800c674 <find_volume+0x490>)
 800c618:	429a      	cmp	r2, r3
 800c61a:	d113      	bne.n	800c644 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61e:	3330      	adds	r3, #48	; 0x30
 800c620:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c624:	4618      	mov	r0, r3
 800c626:	f7fe fd65 	bl	800b0f4 <ld_dword>
 800c62a:	4602      	mov	r2, r0
 800c62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c632:	3330      	adds	r3, #48	; 0x30
 800c634:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c638:	4618      	mov	r0, r3
 800c63a:	f7fe fd5b 	bl	800b0f4 <ld_dword>
 800c63e:	4602      	mov	r2, r0
 800c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c642:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c646:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c64a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c64c:	4b0a      	ldr	r3, [pc, #40]	; (800c678 <find_volume+0x494>)
 800c64e:	881b      	ldrh	r3, [r3, #0]
 800c650:	3301      	adds	r3, #1
 800c652:	b29a      	uxth	r2, r3
 800c654:	4b08      	ldr	r3, [pc, #32]	; (800c678 <find_volume+0x494>)
 800c656:	801a      	strh	r2, [r3, #0]
 800c658:	4b07      	ldr	r3, [pc, #28]	; (800c678 <find_volume+0x494>)
 800c65a:	881a      	ldrh	r2, [r3, #0]
 800c65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c660:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c662:	f7fe fed7 	bl	800b414 <clear_lock>
#endif
	return FR_OK;
 800c666:	2300      	movs	r3, #0
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3758      	adds	r7, #88	; 0x58
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	41615252 	.word	0x41615252
 800c674:	61417272 	.word	0x61417272
 800c678:	200002e8 	.word	0x200002e8

0800c67c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c686:	2309      	movs	r3, #9
 800c688:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d01c      	beq.n	800c6ca <validate+0x4e>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d018      	beq.n	800c6ca <validate+0x4e>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d013      	beq.n	800c6ca <validate+0x4e>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	889a      	ldrh	r2, [r3, #4]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	88db      	ldrh	r3, [r3, #6]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d10c      	bne.n	800c6ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	785b      	ldrb	r3, [r3, #1]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7fe fc84 	bl	800afc4 <disk_status>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	f003 0301 	and.w	r3, r3, #1
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d101      	bne.n	800c6ca <validate+0x4e>
			res = FR_OK;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c6ca:	7bfb      	ldrb	r3, [r7, #15]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d102      	bne.n	800c6d6 <validate+0x5a>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	e000      	b.n	800c6d8 <validate+0x5c>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	683a      	ldr	r2, [r7, #0]
 800c6da:	6013      	str	r3, [r2, #0]
	return res;
 800c6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
	...

0800c6e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b088      	sub	sp, #32
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c6fa:	f107 0310 	add.w	r3, r7, #16
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7ff fcd5 	bl	800c0ae <get_ldnumber>
 800c704:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c706:	69fb      	ldr	r3, [r7, #28]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	da01      	bge.n	800c710 <f_mount+0x28>
 800c70c:	230b      	movs	r3, #11
 800c70e:	e02b      	b.n	800c768 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c710:	4a17      	ldr	r2, [pc, #92]	; (800c770 <f_mount+0x88>)
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c718:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d005      	beq.n	800c72c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c720:	69b8      	ldr	r0, [r7, #24]
 800c722:	f7fe fe77 	bl	800b414 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	2200      	movs	r2, #0
 800c72a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d002      	beq.n	800c738 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2200      	movs	r2, #0
 800c736:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	490d      	ldr	r1, [pc, #52]	; (800c770 <f_mount+0x88>)
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d002      	beq.n	800c74e <f_mount+0x66>
 800c748:	79fb      	ldrb	r3, [r7, #7]
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	d001      	beq.n	800c752 <f_mount+0x6a>
 800c74e:	2300      	movs	r3, #0
 800c750:	e00a      	b.n	800c768 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c752:	f107 010c 	add.w	r1, r7, #12
 800c756:	f107 0308 	add.w	r3, r7, #8
 800c75a:	2200      	movs	r2, #0
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7ff fd41 	bl	800c1e4 <find_volume>
 800c762:	4603      	mov	r3, r0
 800c764:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c766:	7dfb      	ldrb	r3, [r7, #23]
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3720      	adds	r7, #32
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	200002e4 	.word	0x200002e4

0800c774 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b086      	sub	sp, #24
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d101      	bne.n	800c788 <f_opendir+0x14>
 800c784:	2309      	movs	r3, #9
 800c786:	e064      	b.n	800c852 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c78c:	f107 010c 	add.w	r1, r7, #12
 800c790:	463b      	mov	r3, r7
 800c792:	2200      	movs	r2, #0
 800c794:	4618      	mov	r0, r3
 800c796:	f7ff fd25 	bl	800c1e4 <find_volume>
 800c79a:	4603      	mov	r3, r0
 800c79c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c79e:	7dfb      	ldrb	r3, [r7, #23]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d14f      	bne.n	800c844 <f_opendir+0xd0>
		obj->fs = fs;
 800c7a4:	68fa      	ldr	r2, [r7, #12]
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f7ff fc0c 	bl	800bfcc <follow_path>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c7b8:	7dfb      	ldrb	r3, [r7, #23]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d13d      	bne.n	800c83a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c7c4:	b25b      	sxtb	r3, r3
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	db12      	blt.n	800c7f0 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	799b      	ldrb	r3, [r3, #6]
 800c7ce:	f003 0310 	and.w	r3, r3, #16
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d00a      	beq.n	800c7ec <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c7d6:	68fa      	ldr	r2, [r7, #12]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6a1b      	ldr	r3, [r3, #32]
 800c7dc:	4619      	mov	r1, r3
 800c7de:	4610      	mov	r0, r2
 800c7e0:	f7ff fa30 	bl	800bc44 <ld_clust>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	609a      	str	r2, [r3, #8]
 800c7ea:	e001      	b.n	800c7f0 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c7ec:	2305      	movs	r3, #5
 800c7ee:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c7f0:	7dfb      	ldrb	r3, [r7, #23]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d121      	bne.n	800c83a <f_opendir+0xc6>
				obj->id = fs->id;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	88da      	ldrh	r2, [r3, #6]
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c7fe:	2100      	movs	r1, #0
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f7ff f8df 	bl	800b9c4 <dir_sdi>
 800c806:	4603      	mov	r3, r0
 800c808:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c80a:	7dfb      	ldrb	r3, [r7, #23]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d114      	bne.n	800c83a <f_opendir+0xc6>
					if (obj->sclust) {
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d00d      	beq.n	800c834 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c818:	2100      	movs	r1, #0
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f7fe fd30 	bl	800b280 <inc_lock>
 800c820:	4602      	mov	r2, r0
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	691b      	ldr	r3, [r3, #16]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d105      	bne.n	800c83a <f_opendir+0xc6>
 800c82e:	2312      	movs	r3, #18
 800c830:	75fb      	strb	r3, [r7, #23]
 800c832:	e002      	b.n	800c83a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	2200      	movs	r2, #0
 800c838:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c83a:	7dfb      	ldrb	r3, [r7, #23]
 800c83c:	2b04      	cmp	r3, #4
 800c83e:	d101      	bne.n	800c844 <f_opendir+0xd0>
 800c840:	2305      	movs	r3, #5
 800c842:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c844:	7dfb      	ldrb	r3, [r7, #23]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d002      	beq.n	800c850 <f_opendir+0xdc>
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	2200      	movs	r2, #0
 800c84e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c850:	7dfb      	ldrb	r3, [r7, #23]
}
 800c852:	4618      	mov	r0, r3
 800c854:	3718      	adds	r7, #24
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b084      	sub	sp, #16
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f107 0208 	add.w	r2, r7, #8
 800c868:	4611      	mov	r1, r2
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7ff ff06 	bl	800c67c <validate>
 800c870:	4603      	mov	r3, r0
 800c872:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c874:	7bfb      	ldrb	r3, [r7, #15]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d110      	bne.n	800c89c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	691b      	ldr	r3, [r3, #16]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d006      	beq.n	800c890 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	691b      	ldr	r3, [r3, #16]
 800c886:	4618      	mov	r0, r3
 800c888:	f7fe fd88 	bl	800b39c <dec_lock>
 800c88c:	4603      	mov	r3, r0
 800c88e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800c890:	7bfb      	ldrb	r3, [r7, #15]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d102      	bne.n	800c89c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800c89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b084      	sub	sp, #16
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
 800c8ae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f107 0208 	add.w	r2, r7, #8
 800c8b6:	4611      	mov	r1, r2
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7ff fedf 	bl	800c67c <validate>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c8c2:	7bfb      	ldrb	r3, [r7, #15]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d126      	bne.n	800c916 <f_readdir+0x70>
		if (!fno) {
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d106      	bne.n	800c8dc <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800c8ce:	2100      	movs	r1, #0
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f7ff f877 	bl	800b9c4 <dir_sdi>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	73fb      	strb	r3, [r7, #15]
 800c8da:	e01c      	b.n	800c916 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800c8dc:	2100      	movs	r1, #0
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f7ff f9cf 	bl	800bc82 <dir_read>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800c8e8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ea:	2b04      	cmp	r3, #4
 800c8ec:	d101      	bne.n	800c8f2 <f_readdir+0x4c>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800c8f2:	7bfb      	ldrb	r3, [r7, #15]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d10e      	bne.n	800c916 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800c8f8:	6839      	ldr	r1, [r7, #0]
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f7ff fa73 	bl	800bde6 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800c900:	2100      	movs	r1, #0
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f7ff f8d9 	bl	800baba <dir_next>
 800c908:	4603      	mov	r3, r0
 800c90a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800c90c:	7bfb      	ldrb	r3, [r7, #15]
 800c90e:	2b04      	cmp	r3, #4
 800c910:	d101      	bne.n	800c916 <f_readdir+0x70>
 800c912:	2300      	movs	r3, #0
 800c914:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800c916:	7bfb      	ldrb	r3, [r7, #15]
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3710      	adds	r7, #16
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c920:	b480      	push	{r7}
 800c922:	b087      	sub	sp, #28
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	4613      	mov	r3, r2
 800c92c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c92e:	2301      	movs	r3, #1
 800c930:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c932:	2300      	movs	r3, #0
 800c934:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c936:	4b1f      	ldr	r3, [pc, #124]	; (800c9b4 <FATFS_LinkDriverEx+0x94>)
 800c938:	7a5b      	ldrb	r3, [r3, #9]
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d131      	bne.n	800c9a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c940:	4b1c      	ldr	r3, [pc, #112]	; (800c9b4 <FATFS_LinkDriverEx+0x94>)
 800c942:	7a5b      	ldrb	r3, [r3, #9]
 800c944:	b2db      	uxtb	r3, r3
 800c946:	461a      	mov	r2, r3
 800c948:	4b1a      	ldr	r3, [pc, #104]	; (800c9b4 <FATFS_LinkDriverEx+0x94>)
 800c94a:	2100      	movs	r1, #0
 800c94c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c94e:	4b19      	ldr	r3, [pc, #100]	; (800c9b4 <FATFS_LinkDriverEx+0x94>)
 800c950:	7a5b      	ldrb	r3, [r3, #9]
 800c952:	b2db      	uxtb	r3, r3
 800c954:	4a17      	ldr	r2, [pc, #92]	; (800c9b4 <FATFS_LinkDriverEx+0x94>)
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	4413      	add	r3, r2
 800c95a:	68fa      	ldr	r2, [r7, #12]
 800c95c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c95e:	4b15      	ldr	r3, [pc, #84]	; (800c9b4 <FATFS_LinkDriverEx+0x94>)
 800c960:	7a5b      	ldrb	r3, [r3, #9]
 800c962:	b2db      	uxtb	r3, r3
 800c964:	461a      	mov	r2, r3
 800c966:	4b13      	ldr	r3, [pc, #76]	; (800c9b4 <FATFS_LinkDriverEx+0x94>)
 800c968:	4413      	add	r3, r2
 800c96a:	79fa      	ldrb	r2, [r7, #7]
 800c96c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c96e:	4b11      	ldr	r3, [pc, #68]	; (800c9b4 <FATFS_LinkDriverEx+0x94>)
 800c970:	7a5b      	ldrb	r3, [r3, #9]
 800c972:	b2db      	uxtb	r3, r3
 800c974:	1c5a      	adds	r2, r3, #1
 800c976:	b2d1      	uxtb	r1, r2
 800c978:	4a0e      	ldr	r2, [pc, #56]	; (800c9b4 <FATFS_LinkDriverEx+0x94>)
 800c97a:	7251      	strb	r1, [r2, #9]
 800c97c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c97e:	7dbb      	ldrb	r3, [r7, #22]
 800c980:	3330      	adds	r3, #48	; 0x30
 800c982:	b2da      	uxtb	r2, r3
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	3301      	adds	r3, #1
 800c98c:	223a      	movs	r2, #58	; 0x3a
 800c98e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	3302      	adds	r3, #2
 800c994:	222f      	movs	r2, #47	; 0x2f
 800c996:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	3303      	adds	r3, #3
 800c99c:	2200      	movs	r2, #0
 800c99e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c9a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	371c      	adds	r7, #28
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	2000030c 	.word	0x2000030c

0800c9b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	6839      	ldr	r1, [r7, #0]
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f7ff ffaa 	bl	800c920 <FATFS_LinkDriverEx>
 800c9cc:	4603      	mov	r3, r0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
	...

0800c9d8 <__errno>:
 800c9d8:	4b01      	ldr	r3, [pc, #4]	; (800c9e0 <__errno+0x8>)
 800c9da:	6818      	ldr	r0, [r3, #0]
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop
 800c9e0:	20000044 	.word	0x20000044

0800c9e4 <__libc_init_array>:
 800c9e4:	b570      	push	{r4, r5, r6, lr}
 800c9e6:	4e0d      	ldr	r6, [pc, #52]	; (800ca1c <__libc_init_array+0x38>)
 800c9e8:	4c0d      	ldr	r4, [pc, #52]	; (800ca20 <__libc_init_array+0x3c>)
 800c9ea:	1ba4      	subs	r4, r4, r6
 800c9ec:	10a4      	asrs	r4, r4, #2
 800c9ee:	2500      	movs	r5, #0
 800c9f0:	42a5      	cmp	r5, r4
 800c9f2:	d109      	bne.n	800ca08 <__libc_init_array+0x24>
 800c9f4:	4e0b      	ldr	r6, [pc, #44]	; (800ca24 <__libc_init_array+0x40>)
 800c9f6:	4c0c      	ldr	r4, [pc, #48]	; (800ca28 <__libc_init_array+0x44>)
 800c9f8:	f001 f8c8 	bl	800db8c <_init>
 800c9fc:	1ba4      	subs	r4, r4, r6
 800c9fe:	10a4      	asrs	r4, r4, #2
 800ca00:	2500      	movs	r5, #0
 800ca02:	42a5      	cmp	r5, r4
 800ca04:	d105      	bne.n	800ca12 <__libc_init_array+0x2e>
 800ca06:	bd70      	pop	{r4, r5, r6, pc}
 800ca08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ca0c:	4798      	blx	r3
 800ca0e:	3501      	adds	r5, #1
 800ca10:	e7ee      	b.n	800c9f0 <__libc_init_array+0xc>
 800ca12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ca16:	4798      	blx	r3
 800ca18:	3501      	adds	r5, #1
 800ca1a:	e7f2      	b.n	800ca02 <__libc_init_array+0x1e>
 800ca1c:	0800fa58 	.word	0x0800fa58
 800ca20:	0800fa58 	.word	0x0800fa58
 800ca24:	0800fa58 	.word	0x0800fa58
 800ca28:	0800fa5c 	.word	0x0800fa5c

0800ca2c <memset>:
 800ca2c:	4402      	add	r2, r0
 800ca2e:	4603      	mov	r3, r0
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d100      	bne.n	800ca36 <memset+0xa>
 800ca34:	4770      	bx	lr
 800ca36:	f803 1b01 	strb.w	r1, [r3], #1
 800ca3a:	e7f9      	b.n	800ca30 <memset+0x4>

0800ca3c <iprintf>:
 800ca3c:	b40f      	push	{r0, r1, r2, r3}
 800ca3e:	4b0a      	ldr	r3, [pc, #40]	; (800ca68 <iprintf+0x2c>)
 800ca40:	b513      	push	{r0, r1, r4, lr}
 800ca42:	681c      	ldr	r4, [r3, #0]
 800ca44:	b124      	cbz	r4, 800ca50 <iprintf+0x14>
 800ca46:	69a3      	ldr	r3, [r4, #24]
 800ca48:	b913      	cbnz	r3, 800ca50 <iprintf+0x14>
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f000 f86e 	bl	800cb2c <__sinit>
 800ca50:	ab05      	add	r3, sp, #20
 800ca52:	9a04      	ldr	r2, [sp, #16]
 800ca54:	68a1      	ldr	r1, [r4, #8]
 800ca56:	9301      	str	r3, [sp, #4]
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f000 fac7 	bl	800cfec <_vfiprintf_r>
 800ca5e:	b002      	add	sp, #8
 800ca60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca64:	b004      	add	sp, #16
 800ca66:	4770      	bx	lr
 800ca68:	20000044 	.word	0x20000044

0800ca6c <siprintf>:
 800ca6c:	b40e      	push	{r1, r2, r3}
 800ca6e:	b500      	push	{lr}
 800ca70:	b09c      	sub	sp, #112	; 0x70
 800ca72:	ab1d      	add	r3, sp, #116	; 0x74
 800ca74:	9002      	str	r0, [sp, #8]
 800ca76:	9006      	str	r0, [sp, #24]
 800ca78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca7c:	4809      	ldr	r0, [pc, #36]	; (800caa4 <siprintf+0x38>)
 800ca7e:	9107      	str	r1, [sp, #28]
 800ca80:	9104      	str	r1, [sp, #16]
 800ca82:	4909      	ldr	r1, [pc, #36]	; (800caa8 <siprintf+0x3c>)
 800ca84:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca88:	9105      	str	r1, [sp, #20]
 800ca8a:	6800      	ldr	r0, [r0, #0]
 800ca8c:	9301      	str	r3, [sp, #4]
 800ca8e:	a902      	add	r1, sp, #8
 800ca90:	f000 f98a 	bl	800cda8 <_svfiprintf_r>
 800ca94:	9b02      	ldr	r3, [sp, #8]
 800ca96:	2200      	movs	r2, #0
 800ca98:	701a      	strb	r2, [r3, #0]
 800ca9a:	b01c      	add	sp, #112	; 0x70
 800ca9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800caa0:	b003      	add	sp, #12
 800caa2:	4770      	bx	lr
 800caa4:	20000044 	.word	0x20000044
 800caa8:	ffff0208 	.word	0xffff0208

0800caac <std>:
 800caac:	2300      	movs	r3, #0
 800caae:	b510      	push	{r4, lr}
 800cab0:	4604      	mov	r4, r0
 800cab2:	e9c0 3300 	strd	r3, r3, [r0]
 800cab6:	6083      	str	r3, [r0, #8]
 800cab8:	8181      	strh	r1, [r0, #12]
 800caba:	6643      	str	r3, [r0, #100]	; 0x64
 800cabc:	81c2      	strh	r2, [r0, #14]
 800cabe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cac2:	6183      	str	r3, [r0, #24]
 800cac4:	4619      	mov	r1, r3
 800cac6:	2208      	movs	r2, #8
 800cac8:	305c      	adds	r0, #92	; 0x5c
 800caca:	f7ff ffaf 	bl	800ca2c <memset>
 800cace:	4b05      	ldr	r3, [pc, #20]	; (800cae4 <std+0x38>)
 800cad0:	6263      	str	r3, [r4, #36]	; 0x24
 800cad2:	4b05      	ldr	r3, [pc, #20]	; (800cae8 <std+0x3c>)
 800cad4:	62a3      	str	r3, [r4, #40]	; 0x28
 800cad6:	4b05      	ldr	r3, [pc, #20]	; (800caec <std+0x40>)
 800cad8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cada:	4b05      	ldr	r3, [pc, #20]	; (800caf0 <std+0x44>)
 800cadc:	6224      	str	r4, [r4, #32]
 800cade:	6323      	str	r3, [r4, #48]	; 0x30
 800cae0:	bd10      	pop	{r4, pc}
 800cae2:	bf00      	nop
 800cae4:	0800d549 	.word	0x0800d549
 800cae8:	0800d56b 	.word	0x0800d56b
 800caec:	0800d5a3 	.word	0x0800d5a3
 800caf0:	0800d5c7 	.word	0x0800d5c7

0800caf4 <_cleanup_r>:
 800caf4:	4901      	ldr	r1, [pc, #4]	; (800cafc <_cleanup_r+0x8>)
 800caf6:	f000 b885 	b.w	800cc04 <_fwalk_reent>
 800cafa:	bf00      	nop
 800cafc:	0800d8a1 	.word	0x0800d8a1

0800cb00 <__sfmoreglue>:
 800cb00:	b570      	push	{r4, r5, r6, lr}
 800cb02:	1e4a      	subs	r2, r1, #1
 800cb04:	2568      	movs	r5, #104	; 0x68
 800cb06:	4355      	muls	r5, r2
 800cb08:	460e      	mov	r6, r1
 800cb0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb0e:	f000 f897 	bl	800cc40 <_malloc_r>
 800cb12:	4604      	mov	r4, r0
 800cb14:	b140      	cbz	r0, 800cb28 <__sfmoreglue+0x28>
 800cb16:	2100      	movs	r1, #0
 800cb18:	e9c0 1600 	strd	r1, r6, [r0]
 800cb1c:	300c      	adds	r0, #12
 800cb1e:	60a0      	str	r0, [r4, #8]
 800cb20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb24:	f7ff ff82 	bl	800ca2c <memset>
 800cb28:	4620      	mov	r0, r4
 800cb2a:	bd70      	pop	{r4, r5, r6, pc}

0800cb2c <__sinit>:
 800cb2c:	6983      	ldr	r3, [r0, #24]
 800cb2e:	b510      	push	{r4, lr}
 800cb30:	4604      	mov	r4, r0
 800cb32:	bb33      	cbnz	r3, 800cb82 <__sinit+0x56>
 800cb34:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cb38:	6503      	str	r3, [r0, #80]	; 0x50
 800cb3a:	4b12      	ldr	r3, [pc, #72]	; (800cb84 <__sinit+0x58>)
 800cb3c:	4a12      	ldr	r2, [pc, #72]	; (800cb88 <__sinit+0x5c>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	6282      	str	r2, [r0, #40]	; 0x28
 800cb42:	4298      	cmp	r0, r3
 800cb44:	bf04      	itt	eq
 800cb46:	2301      	moveq	r3, #1
 800cb48:	6183      	streq	r3, [r0, #24]
 800cb4a:	f000 f81f 	bl	800cb8c <__sfp>
 800cb4e:	6060      	str	r0, [r4, #4]
 800cb50:	4620      	mov	r0, r4
 800cb52:	f000 f81b 	bl	800cb8c <__sfp>
 800cb56:	60a0      	str	r0, [r4, #8]
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f000 f817 	bl	800cb8c <__sfp>
 800cb5e:	2200      	movs	r2, #0
 800cb60:	60e0      	str	r0, [r4, #12]
 800cb62:	2104      	movs	r1, #4
 800cb64:	6860      	ldr	r0, [r4, #4]
 800cb66:	f7ff ffa1 	bl	800caac <std>
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	2109      	movs	r1, #9
 800cb6e:	68a0      	ldr	r0, [r4, #8]
 800cb70:	f7ff ff9c 	bl	800caac <std>
 800cb74:	2202      	movs	r2, #2
 800cb76:	2112      	movs	r1, #18
 800cb78:	68e0      	ldr	r0, [r4, #12]
 800cb7a:	f7ff ff97 	bl	800caac <std>
 800cb7e:	2301      	movs	r3, #1
 800cb80:	61a3      	str	r3, [r4, #24]
 800cb82:	bd10      	pop	{r4, pc}
 800cb84:	0800f9b8 	.word	0x0800f9b8
 800cb88:	0800caf5 	.word	0x0800caf5

0800cb8c <__sfp>:
 800cb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb8e:	4b1b      	ldr	r3, [pc, #108]	; (800cbfc <__sfp+0x70>)
 800cb90:	681e      	ldr	r6, [r3, #0]
 800cb92:	69b3      	ldr	r3, [r6, #24]
 800cb94:	4607      	mov	r7, r0
 800cb96:	b913      	cbnz	r3, 800cb9e <__sfp+0x12>
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f7ff ffc7 	bl	800cb2c <__sinit>
 800cb9e:	3648      	adds	r6, #72	; 0x48
 800cba0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cba4:	3b01      	subs	r3, #1
 800cba6:	d503      	bpl.n	800cbb0 <__sfp+0x24>
 800cba8:	6833      	ldr	r3, [r6, #0]
 800cbaa:	b133      	cbz	r3, 800cbba <__sfp+0x2e>
 800cbac:	6836      	ldr	r6, [r6, #0]
 800cbae:	e7f7      	b.n	800cba0 <__sfp+0x14>
 800cbb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cbb4:	b16d      	cbz	r5, 800cbd2 <__sfp+0x46>
 800cbb6:	3468      	adds	r4, #104	; 0x68
 800cbb8:	e7f4      	b.n	800cba4 <__sfp+0x18>
 800cbba:	2104      	movs	r1, #4
 800cbbc:	4638      	mov	r0, r7
 800cbbe:	f7ff ff9f 	bl	800cb00 <__sfmoreglue>
 800cbc2:	6030      	str	r0, [r6, #0]
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d1f1      	bne.n	800cbac <__sfp+0x20>
 800cbc8:	230c      	movs	r3, #12
 800cbca:	603b      	str	r3, [r7, #0]
 800cbcc:	4604      	mov	r4, r0
 800cbce:	4620      	mov	r0, r4
 800cbd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbd2:	4b0b      	ldr	r3, [pc, #44]	; (800cc00 <__sfp+0x74>)
 800cbd4:	6665      	str	r5, [r4, #100]	; 0x64
 800cbd6:	e9c4 5500 	strd	r5, r5, [r4]
 800cbda:	60a5      	str	r5, [r4, #8]
 800cbdc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cbe0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cbe4:	2208      	movs	r2, #8
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cbec:	f7ff ff1e 	bl	800ca2c <memset>
 800cbf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cbf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cbf8:	e7e9      	b.n	800cbce <__sfp+0x42>
 800cbfa:	bf00      	nop
 800cbfc:	0800f9b8 	.word	0x0800f9b8
 800cc00:	ffff0001 	.word	0xffff0001

0800cc04 <_fwalk_reent>:
 800cc04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc08:	4680      	mov	r8, r0
 800cc0a:	4689      	mov	r9, r1
 800cc0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc10:	2600      	movs	r6, #0
 800cc12:	b914      	cbnz	r4, 800cc1a <_fwalk_reent+0x16>
 800cc14:	4630      	mov	r0, r6
 800cc16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc1a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cc1e:	3f01      	subs	r7, #1
 800cc20:	d501      	bpl.n	800cc26 <_fwalk_reent+0x22>
 800cc22:	6824      	ldr	r4, [r4, #0]
 800cc24:	e7f5      	b.n	800cc12 <_fwalk_reent+0xe>
 800cc26:	89ab      	ldrh	r3, [r5, #12]
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d907      	bls.n	800cc3c <_fwalk_reent+0x38>
 800cc2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc30:	3301      	adds	r3, #1
 800cc32:	d003      	beq.n	800cc3c <_fwalk_reent+0x38>
 800cc34:	4629      	mov	r1, r5
 800cc36:	4640      	mov	r0, r8
 800cc38:	47c8      	blx	r9
 800cc3a:	4306      	orrs	r6, r0
 800cc3c:	3568      	adds	r5, #104	; 0x68
 800cc3e:	e7ee      	b.n	800cc1e <_fwalk_reent+0x1a>

0800cc40 <_malloc_r>:
 800cc40:	b570      	push	{r4, r5, r6, lr}
 800cc42:	1ccd      	adds	r5, r1, #3
 800cc44:	f025 0503 	bic.w	r5, r5, #3
 800cc48:	3508      	adds	r5, #8
 800cc4a:	2d0c      	cmp	r5, #12
 800cc4c:	bf38      	it	cc
 800cc4e:	250c      	movcc	r5, #12
 800cc50:	2d00      	cmp	r5, #0
 800cc52:	4606      	mov	r6, r0
 800cc54:	db01      	blt.n	800cc5a <_malloc_r+0x1a>
 800cc56:	42a9      	cmp	r1, r5
 800cc58:	d903      	bls.n	800cc62 <_malloc_r+0x22>
 800cc5a:	230c      	movs	r3, #12
 800cc5c:	6033      	str	r3, [r6, #0]
 800cc5e:	2000      	movs	r0, #0
 800cc60:	bd70      	pop	{r4, r5, r6, pc}
 800cc62:	f000 fee1 	bl	800da28 <__malloc_lock>
 800cc66:	4a21      	ldr	r2, [pc, #132]	; (800ccec <_malloc_r+0xac>)
 800cc68:	6814      	ldr	r4, [r2, #0]
 800cc6a:	4621      	mov	r1, r4
 800cc6c:	b991      	cbnz	r1, 800cc94 <_malloc_r+0x54>
 800cc6e:	4c20      	ldr	r4, [pc, #128]	; (800ccf0 <_malloc_r+0xb0>)
 800cc70:	6823      	ldr	r3, [r4, #0]
 800cc72:	b91b      	cbnz	r3, 800cc7c <_malloc_r+0x3c>
 800cc74:	4630      	mov	r0, r6
 800cc76:	f000 fc57 	bl	800d528 <_sbrk_r>
 800cc7a:	6020      	str	r0, [r4, #0]
 800cc7c:	4629      	mov	r1, r5
 800cc7e:	4630      	mov	r0, r6
 800cc80:	f000 fc52 	bl	800d528 <_sbrk_r>
 800cc84:	1c43      	adds	r3, r0, #1
 800cc86:	d124      	bne.n	800ccd2 <_malloc_r+0x92>
 800cc88:	230c      	movs	r3, #12
 800cc8a:	6033      	str	r3, [r6, #0]
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	f000 fecc 	bl	800da2a <__malloc_unlock>
 800cc92:	e7e4      	b.n	800cc5e <_malloc_r+0x1e>
 800cc94:	680b      	ldr	r3, [r1, #0]
 800cc96:	1b5b      	subs	r3, r3, r5
 800cc98:	d418      	bmi.n	800cccc <_malloc_r+0x8c>
 800cc9a:	2b0b      	cmp	r3, #11
 800cc9c:	d90f      	bls.n	800ccbe <_malloc_r+0x7e>
 800cc9e:	600b      	str	r3, [r1, #0]
 800cca0:	50cd      	str	r5, [r1, r3]
 800cca2:	18cc      	adds	r4, r1, r3
 800cca4:	4630      	mov	r0, r6
 800cca6:	f000 fec0 	bl	800da2a <__malloc_unlock>
 800ccaa:	f104 000b 	add.w	r0, r4, #11
 800ccae:	1d23      	adds	r3, r4, #4
 800ccb0:	f020 0007 	bic.w	r0, r0, #7
 800ccb4:	1ac3      	subs	r3, r0, r3
 800ccb6:	d0d3      	beq.n	800cc60 <_malloc_r+0x20>
 800ccb8:	425a      	negs	r2, r3
 800ccba:	50e2      	str	r2, [r4, r3]
 800ccbc:	e7d0      	b.n	800cc60 <_malloc_r+0x20>
 800ccbe:	428c      	cmp	r4, r1
 800ccc0:	684b      	ldr	r3, [r1, #4]
 800ccc2:	bf16      	itet	ne
 800ccc4:	6063      	strne	r3, [r4, #4]
 800ccc6:	6013      	streq	r3, [r2, #0]
 800ccc8:	460c      	movne	r4, r1
 800ccca:	e7eb      	b.n	800cca4 <_malloc_r+0x64>
 800cccc:	460c      	mov	r4, r1
 800ccce:	6849      	ldr	r1, [r1, #4]
 800ccd0:	e7cc      	b.n	800cc6c <_malloc_r+0x2c>
 800ccd2:	1cc4      	adds	r4, r0, #3
 800ccd4:	f024 0403 	bic.w	r4, r4, #3
 800ccd8:	42a0      	cmp	r0, r4
 800ccda:	d005      	beq.n	800cce8 <_malloc_r+0xa8>
 800ccdc:	1a21      	subs	r1, r4, r0
 800ccde:	4630      	mov	r0, r6
 800cce0:	f000 fc22 	bl	800d528 <_sbrk_r>
 800cce4:	3001      	adds	r0, #1
 800cce6:	d0cf      	beq.n	800cc88 <_malloc_r+0x48>
 800cce8:	6025      	str	r5, [r4, #0]
 800ccea:	e7db      	b.n	800cca4 <_malloc_r+0x64>
 800ccec:	20000318 	.word	0x20000318
 800ccf0:	2000031c 	.word	0x2000031c

0800ccf4 <__ssputs_r>:
 800ccf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccf8:	688e      	ldr	r6, [r1, #8]
 800ccfa:	429e      	cmp	r6, r3
 800ccfc:	4682      	mov	sl, r0
 800ccfe:	460c      	mov	r4, r1
 800cd00:	4690      	mov	r8, r2
 800cd02:	4699      	mov	r9, r3
 800cd04:	d837      	bhi.n	800cd76 <__ssputs_r+0x82>
 800cd06:	898a      	ldrh	r2, [r1, #12]
 800cd08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd0c:	d031      	beq.n	800cd72 <__ssputs_r+0x7e>
 800cd0e:	6825      	ldr	r5, [r4, #0]
 800cd10:	6909      	ldr	r1, [r1, #16]
 800cd12:	1a6f      	subs	r7, r5, r1
 800cd14:	6965      	ldr	r5, [r4, #20]
 800cd16:	2302      	movs	r3, #2
 800cd18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd1c:	fb95 f5f3 	sdiv	r5, r5, r3
 800cd20:	f109 0301 	add.w	r3, r9, #1
 800cd24:	443b      	add	r3, r7
 800cd26:	429d      	cmp	r5, r3
 800cd28:	bf38      	it	cc
 800cd2a:	461d      	movcc	r5, r3
 800cd2c:	0553      	lsls	r3, r2, #21
 800cd2e:	d530      	bpl.n	800cd92 <__ssputs_r+0x9e>
 800cd30:	4629      	mov	r1, r5
 800cd32:	f7ff ff85 	bl	800cc40 <_malloc_r>
 800cd36:	4606      	mov	r6, r0
 800cd38:	b950      	cbnz	r0, 800cd50 <__ssputs_r+0x5c>
 800cd3a:	230c      	movs	r3, #12
 800cd3c:	f8ca 3000 	str.w	r3, [sl]
 800cd40:	89a3      	ldrh	r3, [r4, #12]
 800cd42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd46:	81a3      	strh	r3, [r4, #12]
 800cd48:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd50:	463a      	mov	r2, r7
 800cd52:	6921      	ldr	r1, [r4, #16]
 800cd54:	f000 fe44 	bl	800d9e0 <memcpy>
 800cd58:	89a3      	ldrh	r3, [r4, #12]
 800cd5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd62:	81a3      	strh	r3, [r4, #12]
 800cd64:	6126      	str	r6, [r4, #16]
 800cd66:	6165      	str	r5, [r4, #20]
 800cd68:	443e      	add	r6, r7
 800cd6a:	1bed      	subs	r5, r5, r7
 800cd6c:	6026      	str	r6, [r4, #0]
 800cd6e:	60a5      	str	r5, [r4, #8]
 800cd70:	464e      	mov	r6, r9
 800cd72:	454e      	cmp	r6, r9
 800cd74:	d900      	bls.n	800cd78 <__ssputs_r+0x84>
 800cd76:	464e      	mov	r6, r9
 800cd78:	4632      	mov	r2, r6
 800cd7a:	4641      	mov	r1, r8
 800cd7c:	6820      	ldr	r0, [r4, #0]
 800cd7e:	f000 fe3a 	bl	800d9f6 <memmove>
 800cd82:	68a3      	ldr	r3, [r4, #8]
 800cd84:	1b9b      	subs	r3, r3, r6
 800cd86:	60a3      	str	r3, [r4, #8]
 800cd88:	6823      	ldr	r3, [r4, #0]
 800cd8a:	441e      	add	r6, r3
 800cd8c:	6026      	str	r6, [r4, #0]
 800cd8e:	2000      	movs	r0, #0
 800cd90:	e7dc      	b.n	800cd4c <__ssputs_r+0x58>
 800cd92:	462a      	mov	r2, r5
 800cd94:	f000 fe98 	bl	800dac8 <_realloc_r>
 800cd98:	4606      	mov	r6, r0
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	d1e2      	bne.n	800cd64 <__ssputs_r+0x70>
 800cd9e:	6921      	ldr	r1, [r4, #16]
 800cda0:	4650      	mov	r0, sl
 800cda2:	f000 fe43 	bl	800da2c <_free_r>
 800cda6:	e7c8      	b.n	800cd3a <__ssputs_r+0x46>

0800cda8 <_svfiprintf_r>:
 800cda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdac:	461d      	mov	r5, r3
 800cdae:	898b      	ldrh	r3, [r1, #12]
 800cdb0:	061f      	lsls	r7, r3, #24
 800cdb2:	b09d      	sub	sp, #116	; 0x74
 800cdb4:	4680      	mov	r8, r0
 800cdb6:	460c      	mov	r4, r1
 800cdb8:	4616      	mov	r6, r2
 800cdba:	d50f      	bpl.n	800cddc <_svfiprintf_r+0x34>
 800cdbc:	690b      	ldr	r3, [r1, #16]
 800cdbe:	b96b      	cbnz	r3, 800cddc <_svfiprintf_r+0x34>
 800cdc0:	2140      	movs	r1, #64	; 0x40
 800cdc2:	f7ff ff3d 	bl	800cc40 <_malloc_r>
 800cdc6:	6020      	str	r0, [r4, #0]
 800cdc8:	6120      	str	r0, [r4, #16]
 800cdca:	b928      	cbnz	r0, 800cdd8 <_svfiprintf_r+0x30>
 800cdcc:	230c      	movs	r3, #12
 800cdce:	f8c8 3000 	str.w	r3, [r8]
 800cdd2:	f04f 30ff 	mov.w	r0, #4294967295
 800cdd6:	e0c8      	b.n	800cf6a <_svfiprintf_r+0x1c2>
 800cdd8:	2340      	movs	r3, #64	; 0x40
 800cdda:	6163      	str	r3, [r4, #20]
 800cddc:	2300      	movs	r3, #0
 800cdde:	9309      	str	r3, [sp, #36]	; 0x24
 800cde0:	2320      	movs	r3, #32
 800cde2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cde6:	2330      	movs	r3, #48	; 0x30
 800cde8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cdec:	9503      	str	r5, [sp, #12]
 800cdee:	f04f 0b01 	mov.w	fp, #1
 800cdf2:	4637      	mov	r7, r6
 800cdf4:	463d      	mov	r5, r7
 800cdf6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cdfa:	b10b      	cbz	r3, 800ce00 <_svfiprintf_r+0x58>
 800cdfc:	2b25      	cmp	r3, #37	; 0x25
 800cdfe:	d13e      	bne.n	800ce7e <_svfiprintf_r+0xd6>
 800ce00:	ebb7 0a06 	subs.w	sl, r7, r6
 800ce04:	d00b      	beq.n	800ce1e <_svfiprintf_r+0x76>
 800ce06:	4653      	mov	r3, sl
 800ce08:	4632      	mov	r2, r6
 800ce0a:	4621      	mov	r1, r4
 800ce0c:	4640      	mov	r0, r8
 800ce0e:	f7ff ff71 	bl	800ccf4 <__ssputs_r>
 800ce12:	3001      	adds	r0, #1
 800ce14:	f000 80a4 	beq.w	800cf60 <_svfiprintf_r+0x1b8>
 800ce18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce1a:	4453      	add	r3, sl
 800ce1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce1e:	783b      	ldrb	r3, [r7, #0]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f000 809d 	beq.w	800cf60 <_svfiprintf_r+0x1b8>
 800ce26:	2300      	movs	r3, #0
 800ce28:	f04f 32ff 	mov.w	r2, #4294967295
 800ce2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce30:	9304      	str	r3, [sp, #16]
 800ce32:	9307      	str	r3, [sp, #28]
 800ce34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce38:	931a      	str	r3, [sp, #104]	; 0x68
 800ce3a:	462f      	mov	r7, r5
 800ce3c:	2205      	movs	r2, #5
 800ce3e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ce42:	4850      	ldr	r0, [pc, #320]	; (800cf84 <_svfiprintf_r+0x1dc>)
 800ce44:	f7f3 fa04 	bl	8000250 <memchr>
 800ce48:	9b04      	ldr	r3, [sp, #16]
 800ce4a:	b9d0      	cbnz	r0, 800ce82 <_svfiprintf_r+0xda>
 800ce4c:	06d9      	lsls	r1, r3, #27
 800ce4e:	bf44      	itt	mi
 800ce50:	2220      	movmi	r2, #32
 800ce52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ce56:	071a      	lsls	r2, r3, #28
 800ce58:	bf44      	itt	mi
 800ce5a:	222b      	movmi	r2, #43	; 0x2b
 800ce5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ce60:	782a      	ldrb	r2, [r5, #0]
 800ce62:	2a2a      	cmp	r2, #42	; 0x2a
 800ce64:	d015      	beq.n	800ce92 <_svfiprintf_r+0xea>
 800ce66:	9a07      	ldr	r2, [sp, #28]
 800ce68:	462f      	mov	r7, r5
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	250a      	movs	r5, #10
 800ce6e:	4639      	mov	r1, r7
 800ce70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce74:	3b30      	subs	r3, #48	; 0x30
 800ce76:	2b09      	cmp	r3, #9
 800ce78:	d94d      	bls.n	800cf16 <_svfiprintf_r+0x16e>
 800ce7a:	b1b8      	cbz	r0, 800ceac <_svfiprintf_r+0x104>
 800ce7c:	e00f      	b.n	800ce9e <_svfiprintf_r+0xf6>
 800ce7e:	462f      	mov	r7, r5
 800ce80:	e7b8      	b.n	800cdf4 <_svfiprintf_r+0x4c>
 800ce82:	4a40      	ldr	r2, [pc, #256]	; (800cf84 <_svfiprintf_r+0x1dc>)
 800ce84:	1a80      	subs	r0, r0, r2
 800ce86:	fa0b f000 	lsl.w	r0, fp, r0
 800ce8a:	4318      	orrs	r0, r3
 800ce8c:	9004      	str	r0, [sp, #16]
 800ce8e:	463d      	mov	r5, r7
 800ce90:	e7d3      	b.n	800ce3a <_svfiprintf_r+0x92>
 800ce92:	9a03      	ldr	r2, [sp, #12]
 800ce94:	1d11      	adds	r1, r2, #4
 800ce96:	6812      	ldr	r2, [r2, #0]
 800ce98:	9103      	str	r1, [sp, #12]
 800ce9a:	2a00      	cmp	r2, #0
 800ce9c:	db01      	blt.n	800cea2 <_svfiprintf_r+0xfa>
 800ce9e:	9207      	str	r2, [sp, #28]
 800cea0:	e004      	b.n	800ceac <_svfiprintf_r+0x104>
 800cea2:	4252      	negs	r2, r2
 800cea4:	f043 0302 	orr.w	r3, r3, #2
 800cea8:	9207      	str	r2, [sp, #28]
 800ceaa:	9304      	str	r3, [sp, #16]
 800ceac:	783b      	ldrb	r3, [r7, #0]
 800ceae:	2b2e      	cmp	r3, #46	; 0x2e
 800ceb0:	d10c      	bne.n	800cecc <_svfiprintf_r+0x124>
 800ceb2:	787b      	ldrb	r3, [r7, #1]
 800ceb4:	2b2a      	cmp	r3, #42	; 0x2a
 800ceb6:	d133      	bne.n	800cf20 <_svfiprintf_r+0x178>
 800ceb8:	9b03      	ldr	r3, [sp, #12]
 800ceba:	1d1a      	adds	r2, r3, #4
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	9203      	str	r2, [sp, #12]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	bfb8      	it	lt
 800cec4:	f04f 33ff 	movlt.w	r3, #4294967295
 800cec8:	3702      	adds	r7, #2
 800ceca:	9305      	str	r3, [sp, #20]
 800cecc:	4d2e      	ldr	r5, [pc, #184]	; (800cf88 <_svfiprintf_r+0x1e0>)
 800cece:	7839      	ldrb	r1, [r7, #0]
 800ced0:	2203      	movs	r2, #3
 800ced2:	4628      	mov	r0, r5
 800ced4:	f7f3 f9bc 	bl	8000250 <memchr>
 800ced8:	b138      	cbz	r0, 800ceea <_svfiprintf_r+0x142>
 800ceda:	2340      	movs	r3, #64	; 0x40
 800cedc:	1b40      	subs	r0, r0, r5
 800cede:	fa03 f000 	lsl.w	r0, r3, r0
 800cee2:	9b04      	ldr	r3, [sp, #16]
 800cee4:	4303      	orrs	r3, r0
 800cee6:	3701      	adds	r7, #1
 800cee8:	9304      	str	r3, [sp, #16]
 800ceea:	7839      	ldrb	r1, [r7, #0]
 800ceec:	4827      	ldr	r0, [pc, #156]	; (800cf8c <_svfiprintf_r+0x1e4>)
 800ceee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cef2:	2206      	movs	r2, #6
 800cef4:	1c7e      	adds	r6, r7, #1
 800cef6:	f7f3 f9ab 	bl	8000250 <memchr>
 800cefa:	2800      	cmp	r0, #0
 800cefc:	d038      	beq.n	800cf70 <_svfiprintf_r+0x1c8>
 800cefe:	4b24      	ldr	r3, [pc, #144]	; (800cf90 <_svfiprintf_r+0x1e8>)
 800cf00:	bb13      	cbnz	r3, 800cf48 <_svfiprintf_r+0x1a0>
 800cf02:	9b03      	ldr	r3, [sp, #12]
 800cf04:	3307      	adds	r3, #7
 800cf06:	f023 0307 	bic.w	r3, r3, #7
 800cf0a:	3308      	adds	r3, #8
 800cf0c:	9303      	str	r3, [sp, #12]
 800cf0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf10:	444b      	add	r3, r9
 800cf12:	9309      	str	r3, [sp, #36]	; 0x24
 800cf14:	e76d      	b.n	800cdf2 <_svfiprintf_r+0x4a>
 800cf16:	fb05 3202 	mla	r2, r5, r2, r3
 800cf1a:	2001      	movs	r0, #1
 800cf1c:	460f      	mov	r7, r1
 800cf1e:	e7a6      	b.n	800ce6e <_svfiprintf_r+0xc6>
 800cf20:	2300      	movs	r3, #0
 800cf22:	3701      	adds	r7, #1
 800cf24:	9305      	str	r3, [sp, #20]
 800cf26:	4619      	mov	r1, r3
 800cf28:	250a      	movs	r5, #10
 800cf2a:	4638      	mov	r0, r7
 800cf2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf30:	3a30      	subs	r2, #48	; 0x30
 800cf32:	2a09      	cmp	r2, #9
 800cf34:	d903      	bls.n	800cf3e <_svfiprintf_r+0x196>
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d0c8      	beq.n	800cecc <_svfiprintf_r+0x124>
 800cf3a:	9105      	str	r1, [sp, #20]
 800cf3c:	e7c6      	b.n	800cecc <_svfiprintf_r+0x124>
 800cf3e:	fb05 2101 	mla	r1, r5, r1, r2
 800cf42:	2301      	movs	r3, #1
 800cf44:	4607      	mov	r7, r0
 800cf46:	e7f0      	b.n	800cf2a <_svfiprintf_r+0x182>
 800cf48:	ab03      	add	r3, sp, #12
 800cf4a:	9300      	str	r3, [sp, #0]
 800cf4c:	4622      	mov	r2, r4
 800cf4e:	4b11      	ldr	r3, [pc, #68]	; (800cf94 <_svfiprintf_r+0x1ec>)
 800cf50:	a904      	add	r1, sp, #16
 800cf52:	4640      	mov	r0, r8
 800cf54:	f3af 8000 	nop.w
 800cf58:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cf5c:	4681      	mov	r9, r0
 800cf5e:	d1d6      	bne.n	800cf0e <_svfiprintf_r+0x166>
 800cf60:	89a3      	ldrh	r3, [r4, #12]
 800cf62:	065b      	lsls	r3, r3, #25
 800cf64:	f53f af35 	bmi.w	800cdd2 <_svfiprintf_r+0x2a>
 800cf68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf6a:	b01d      	add	sp, #116	; 0x74
 800cf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf70:	ab03      	add	r3, sp, #12
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	4622      	mov	r2, r4
 800cf76:	4b07      	ldr	r3, [pc, #28]	; (800cf94 <_svfiprintf_r+0x1ec>)
 800cf78:	a904      	add	r1, sp, #16
 800cf7a:	4640      	mov	r0, r8
 800cf7c:	f000 f9c2 	bl	800d304 <_printf_i>
 800cf80:	e7ea      	b.n	800cf58 <_svfiprintf_r+0x1b0>
 800cf82:	bf00      	nop
 800cf84:	0800fa1c 	.word	0x0800fa1c
 800cf88:	0800fa22 	.word	0x0800fa22
 800cf8c:	0800fa26 	.word	0x0800fa26
 800cf90:	00000000 	.word	0x00000000
 800cf94:	0800ccf5 	.word	0x0800ccf5

0800cf98 <__sfputc_r>:
 800cf98:	6893      	ldr	r3, [r2, #8]
 800cf9a:	3b01      	subs	r3, #1
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	b410      	push	{r4}
 800cfa0:	6093      	str	r3, [r2, #8]
 800cfa2:	da08      	bge.n	800cfb6 <__sfputc_r+0x1e>
 800cfa4:	6994      	ldr	r4, [r2, #24]
 800cfa6:	42a3      	cmp	r3, r4
 800cfa8:	db01      	blt.n	800cfae <__sfputc_r+0x16>
 800cfaa:	290a      	cmp	r1, #10
 800cfac:	d103      	bne.n	800cfb6 <__sfputc_r+0x1e>
 800cfae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfb2:	f000 bb0d 	b.w	800d5d0 <__swbuf_r>
 800cfb6:	6813      	ldr	r3, [r2, #0]
 800cfb8:	1c58      	adds	r0, r3, #1
 800cfba:	6010      	str	r0, [r2, #0]
 800cfbc:	7019      	strb	r1, [r3, #0]
 800cfbe:	4608      	mov	r0, r1
 800cfc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfc4:	4770      	bx	lr

0800cfc6 <__sfputs_r>:
 800cfc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfc8:	4606      	mov	r6, r0
 800cfca:	460f      	mov	r7, r1
 800cfcc:	4614      	mov	r4, r2
 800cfce:	18d5      	adds	r5, r2, r3
 800cfd0:	42ac      	cmp	r4, r5
 800cfd2:	d101      	bne.n	800cfd8 <__sfputs_r+0x12>
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	e007      	b.n	800cfe8 <__sfputs_r+0x22>
 800cfd8:	463a      	mov	r2, r7
 800cfda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfde:	4630      	mov	r0, r6
 800cfe0:	f7ff ffda 	bl	800cf98 <__sfputc_r>
 800cfe4:	1c43      	adds	r3, r0, #1
 800cfe6:	d1f3      	bne.n	800cfd0 <__sfputs_r+0xa>
 800cfe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfec <_vfiprintf_r>:
 800cfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff0:	460c      	mov	r4, r1
 800cff2:	b09d      	sub	sp, #116	; 0x74
 800cff4:	4617      	mov	r7, r2
 800cff6:	461d      	mov	r5, r3
 800cff8:	4606      	mov	r6, r0
 800cffa:	b118      	cbz	r0, 800d004 <_vfiprintf_r+0x18>
 800cffc:	6983      	ldr	r3, [r0, #24]
 800cffe:	b90b      	cbnz	r3, 800d004 <_vfiprintf_r+0x18>
 800d000:	f7ff fd94 	bl	800cb2c <__sinit>
 800d004:	4b7c      	ldr	r3, [pc, #496]	; (800d1f8 <_vfiprintf_r+0x20c>)
 800d006:	429c      	cmp	r4, r3
 800d008:	d158      	bne.n	800d0bc <_vfiprintf_r+0xd0>
 800d00a:	6874      	ldr	r4, [r6, #4]
 800d00c:	89a3      	ldrh	r3, [r4, #12]
 800d00e:	0718      	lsls	r0, r3, #28
 800d010:	d55e      	bpl.n	800d0d0 <_vfiprintf_r+0xe4>
 800d012:	6923      	ldr	r3, [r4, #16]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d05b      	beq.n	800d0d0 <_vfiprintf_r+0xe4>
 800d018:	2300      	movs	r3, #0
 800d01a:	9309      	str	r3, [sp, #36]	; 0x24
 800d01c:	2320      	movs	r3, #32
 800d01e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d022:	2330      	movs	r3, #48	; 0x30
 800d024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d028:	9503      	str	r5, [sp, #12]
 800d02a:	f04f 0b01 	mov.w	fp, #1
 800d02e:	46b8      	mov	r8, r7
 800d030:	4645      	mov	r5, r8
 800d032:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d036:	b10b      	cbz	r3, 800d03c <_vfiprintf_r+0x50>
 800d038:	2b25      	cmp	r3, #37	; 0x25
 800d03a:	d154      	bne.n	800d0e6 <_vfiprintf_r+0xfa>
 800d03c:	ebb8 0a07 	subs.w	sl, r8, r7
 800d040:	d00b      	beq.n	800d05a <_vfiprintf_r+0x6e>
 800d042:	4653      	mov	r3, sl
 800d044:	463a      	mov	r2, r7
 800d046:	4621      	mov	r1, r4
 800d048:	4630      	mov	r0, r6
 800d04a:	f7ff ffbc 	bl	800cfc6 <__sfputs_r>
 800d04e:	3001      	adds	r0, #1
 800d050:	f000 80c2 	beq.w	800d1d8 <_vfiprintf_r+0x1ec>
 800d054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d056:	4453      	add	r3, sl
 800d058:	9309      	str	r3, [sp, #36]	; 0x24
 800d05a:	f898 3000 	ldrb.w	r3, [r8]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	f000 80ba 	beq.w	800d1d8 <_vfiprintf_r+0x1ec>
 800d064:	2300      	movs	r3, #0
 800d066:	f04f 32ff 	mov.w	r2, #4294967295
 800d06a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d06e:	9304      	str	r3, [sp, #16]
 800d070:	9307      	str	r3, [sp, #28]
 800d072:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d076:	931a      	str	r3, [sp, #104]	; 0x68
 800d078:	46a8      	mov	r8, r5
 800d07a:	2205      	movs	r2, #5
 800d07c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d080:	485e      	ldr	r0, [pc, #376]	; (800d1fc <_vfiprintf_r+0x210>)
 800d082:	f7f3 f8e5 	bl	8000250 <memchr>
 800d086:	9b04      	ldr	r3, [sp, #16]
 800d088:	bb78      	cbnz	r0, 800d0ea <_vfiprintf_r+0xfe>
 800d08a:	06d9      	lsls	r1, r3, #27
 800d08c:	bf44      	itt	mi
 800d08e:	2220      	movmi	r2, #32
 800d090:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d094:	071a      	lsls	r2, r3, #28
 800d096:	bf44      	itt	mi
 800d098:	222b      	movmi	r2, #43	; 0x2b
 800d09a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d09e:	782a      	ldrb	r2, [r5, #0]
 800d0a0:	2a2a      	cmp	r2, #42	; 0x2a
 800d0a2:	d02a      	beq.n	800d0fa <_vfiprintf_r+0x10e>
 800d0a4:	9a07      	ldr	r2, [sp, #28]
 800d0a6:	46a8      	mov	r8, r5
 800d0a8:	2000      	movs	r0, #0
 800d0aa:	250a      	movs	r5, #10
 800d0ac:	4641      	mov	r1, r8
 800d0ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0b2:	3b30      	subs	r3, #48	; 0x30
 800d0b4:	2b09      	cmp	r3, #9
 800d0b6:	d969      	bls.n	800d18c <_vfiprintf_r+0x1a0>
 800d0b8:	b360      	cbz	r0, 800d114 <_vfiprintf_r+0x128>
 800d0ba:	e024      	b.n	800d106 <_vfiprintf_r+0x11a>
 800d0bc:	4b50      	ldr	r3, [pc, #320]	; (800d200 <_vfiprintf_r+0x214>)
 800d0be:	429c      	cmp	r4, r3
 800d0c0:	d101      	bne.n	800d0c6 <_vfiprintf_r+0xda>
 800d0c2:	68b4      	ldr	r4, [r6, #8]
 800d0c4:	e7a2      	b.n	800d00c <_vfiprintf_r+0x20>
 800d0c6:	4b4f      	ldr	r3, [pc, #316]	; (800d204 <_vfiprintf_r+0x218>)
 800d0c8:	429c      	cmp	r4, r3
 800d0ca:	bf08      	it	eq
 800d0cc:	68f4      	ldreq	r4, [r6, #12]
 800d0ce:	e79d      	b.n	800d00c <_vfiprintf_r+0x20>
 800d0d0:	4621      	mov	r1, r4
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	f000 fae0 	bl	800d698 <__swsetup_r>
 800d0d8:	2800      	cmp	r0, #0
 800d0da:	d09d      	beq.n	800d018 <_vfiprintf_r+0x2c>
 800d0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e0:	b01d      	add	sp, #116	; 0x74
 800d0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e6:	46a8      	mov	r8, r5
 800d0e8:	e7a2      	b.n	800d030 <_vfiprintf_r+0x44>
 800d0ea:	4a44      	ldr	r2, [pc, #272]	; (800d1fc <_vfiprintf_r+0x210>)
 800d0ec:	1a80      	subs	r0, r0, r2
 800d0ee:	fa0b f000 	lsl.w	r0, fp, r0
 800d0f2:	4318      	orrs	r0, r3
 800d0f4:	9004      	str	r0, [sp, #16]
 800d0f6:	4645      	mov	r5, r8
 800d0f8:	e7be      	b.n	800d078 <_vfiprintf_r+0x8c>
 800d0fa:	9a03      	ldr	r2, [sp, #12]
 800d0fc:	1d11      	adds	r1, r2, #4
 800d0fe:	6812      	ldr	r2, [r2, #0]
 800d100:	9103      	str	r1, [sp, #12]
 800d102:	2a00      	cmp	r2, #0
 800d104:	db01      	blt.n	800d10a <_vfiprintf_r+0x11e>
 800d106:	9207      	str	r2, [sp, #28]
 800d108:	e004      	b.n	800d114 <_vfiprintf_r+0x128>
 800d10a:	4252      	negs	r2, r2
 800d10c:	f043 0302 	orr.w	r3, r3, #2
 800d110:	9207      	str	r2, [sp, #28]
 800d112:	9304      	str	r3, [sp, #16]
 800d114:	f898 3000 	ldrb.w	r3, [r8]
 800d118:	2b2e      	cmp	r3, #46	; 0x2e
 800d11a:	d10e      	bne.n	800d13a <_vfiprintf_r+0x14e>
 800d11c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d120:	2b2a      	cmp	r3, #42	; 0x2a
 800d122:	d138      	bne.n	800d196 <_vfiprintf_r+0x1aa>
 800d124:	9b03      	ldr	r3, [sp, #12]
 800d126:	1d1a      	adds	r2, r3, #4
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	9203      	str	r2, [sp, #12]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	bfb8      	it	lt
 800d130:	f04f 33ff 	movlt.w	r3, #4294967295
 800d134:	f108 0802 	add.w	r8, r8, #2
 800d138:	9305      	str	r3, [sp, #20]
 800d13a:	4d33      	ldr	r5, [pc, #204]	; (800d208 <_vfiprintf_r+0x21c>)
 800d13c:	f898 1000 	ldrb.w	r1, [r8]
 800d140:	2203      	movs	r2, #3
 800d142:	4628      	mov	r0, r5
 800d144:	f7f3 f884 	bl	8000250 <memchr>
 800d148:	b140      	cbz	r0, 800d15c <_vfiprintf_r+0x170>
 800d14a:	2340      	movs	r3, #64	; 0x40
 800d14c:	1b40      	subs	r0, r0, r5
 800d14e:	fa03 f000 	lsl.w	r0, r3, r0
 800d152:	9b04      	ldr	r3, [sp, #16]
 800d154:	4303      	orrs	r3, r0
 800d156:	f108 0801 	add.w	r8, r8, #1
 800d15a:	9304      	str	r3, [sp, #16]
 800d15c:	f898 1000 	ldrb.w	r1, [r8]
 800d160:	482a      	ldr	r0, [pc, #168]	; (800d20c <_vfiprintf_r+0x220>)
 800d162:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d166:	2206      	movs	r2, #6
 800d168:	f108 0701 	add.w	r7, r8, #1
 800d16c:	f7f3 f870 	bl	8000250 <memchr>
 800d170:	2800      	cmp	r0, #0
 800d172:	d037      	beq.n	800d1e4 <_vfiprintf_r+0x1f8>
 800d174:	4b26      	ldr	r3, [pc, #152]	; (800d210 <_vfiprintf_r+0x224>)
 800d176:	bb1b      	cbnz	r3, 800d1c0 <_vfiprintf_r+0x1d4>
 800d178:	9b03      	ldr	r3, [sp, #12]
 800d17a:	3307      	adds	r3, #7
 800d17c:	f023 0307 	bic.w	r3, r3, #7
 800d180:	3308      	adds	r3, #8
 800d182:	9303      	str	r3, [sp, #12]
 800d184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d186:	444b      	add	r3, r9
 800d188:	9309      	str	r3, [sp, #36]	; 0x24
 800d18a:	e750      	b.n	800d02e <_vfiprintf_r+0x42>
 800d18c:	fb05 3202 	mla	r2, r5, r2, r3
 800d190:	2001      	movs	r0, #1
 800d192:	4688      	mov	r8, r1
 800d194:	e78a      	b.n	800d0ac <_vfiprintf_r+0xc0>
 800d196:	2300      	movs	r3, #0
 800d198:	f108 0801 	add.w	r8, r8, #1
 800d19c:	9305      	str	r3, [sp, #20]
 800d19e:	4619      	mov	r1, r3
 800d1a0:	250a      	movs	r5, #10
 800d1a2:	4640      	mov	r0, r8
 800d1a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1a8:	3a30      	subs	r2, #48	; 0x30
 800d1aa:	2a09      	cmp	r2, #9
 800d1ac:	d903      	bls.n	800d1b6 <_vfiprintf_r+0x1ca>
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d0c3      	beq.n	800d13a <_vfiprintf_r+0x14e>
 800d1b2:	9105      	str	r1, [sp, #20]
 800d1b4:	e7c1      	b.n	800d13a <_vfiprintf_r+0x14e>
 800d1b6:	fb05 2101 	mla	r1, r5, r1, r2
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	4680      	mov	r8, r0
 800d1be:	e7f0      	b.n	800d1a2 <_vfiprintf_r+0x1b6>
 800d1c0:	ab03      	add	r3, sp, #12
 800d1c2:	9300      	str	r3, [sp, #0]
 800d1c4:	4622      	mov	r2, r4
 800d1c6:	4b13      	ldr	r3, [pc, #76]	; (800d214 <_vfiprintf_r+0x228>)
 800d1c8:	a904      	add	r1, sp, #16
 800d1ca:	4630      	mov	r0, r6
 800d1cc:	f3af 8000 	nop.w
 800d1d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d1d4:	4681      	mov	r9, r0
 800d1d6:	d1d5      	bne.n	800d184 <_vfiprintf_r+0x198>
 800d1d8:	89a3      	ldrh	r3, [r4, #12]
 800d1da:	065b      	lsls	r3, r3, #25
 800d1dc:	f53f af7e 	bmi.w	800d0dc <_vfiprintf_r+0xf0>
 800d1e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1e2:	e77d      	b.n	800d0e0 <_vfiprintf_r+0xf4>
 800d1e4:	ab03      	add	r3, sp, #12
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	4622      	mov	r2, r4
 800d1ea:	4b0a      	ldr	r3, [pc, #40]	; (800d214 <_vfiprintf_r+0x228>)
 800d1ec:	a904      	add	r1, sp, #16
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	f000 f888 	bl	800d304 <_printf_i>
 800d1f4:	e7ec      	b.n	800d1d0 <_vfiprintf_r+0x1e4>
 800d1f6:	bf00      	nop
 800d1f8:	0800f9dc 	.word	0x0800f9dc
 800d1fc:	0800fa1c 	.word	0x0800fa1c
 800d200:	0800f9fc 	.word	0x0800f9fc
 800d204:	0800f9bc 	.word	0x0800f9bc
 800d208:	0800fa22 	.word	0x0800fa22
 800d20c:	0800fa26 	.word	0x0800fa26
 800d210:	00000000 	.word	0x00000000
 800d214:	0800cfc7 	.word	0x0800cfc7

0800d218 <_printf_common>:
 800d218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d21c:	4691      	mov	r9, r2
 800d21e:	461f      	mov	r7, r3
 800d220:	688a      	ldr	r2, [r1, #8]
 800d222:	690b      	ldr	r3, [r1, #16]
 800d224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d228:	4293      	cmp	r3, r2
 800d22a:	bfb8      	it	lt
 800d22c:	4613      	movlt	r3, r2
 800d22e:	f8c9 3000 	str.w	r3, [r9]
 800d232:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d236:	4606      	mov	r6, r0
 800d238:	460c      	mov	r4, r1
 800d23a:	b112      	cbz	r2, 800d242 <_printf_common+0x2a>
 800d23c:	3301      	adds	r3, #1
 800d23e:	f8c9 3000 	str.w	r3, [r9]
 800d242:	6823      	ldr	r3, [r4, #0]
 800d244:	0699      	lsls	r1, r3, #26
 800d246:	bf42      	ittt	mi
 800d248:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d24c:	3302      	addmi	r3, #2
 800d24e:	f8c9 3000 	strmi.w	r3, [r9]
 800d252:	6825      	ldr	r5, [r4, #0]
 800d254:	f015 0506 	ands.w	r5, r5, #6
 800d258:	d107      	bne.n	800d26a <_printf_common+0x52>
 800d25a:	f104 0a19 	add.w	sl, r4, #25
 800d25e:	68e3      	ldr	r3, [r4, #12]
 800d260:	f8d9 2000 	ldr.w	r2, [r9]
 800d264:	1a9b      	subs	r3, r3, r2
 800d266:	42ab      	cmp	r3, r5
 800d268:	dc28      	bgt.n	800d2bc <_printf_common+0xa4>
 800d26a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d26e:	6822      	ldr	r2, [r4, #0]
 800d270:	3300      	adds	r3, #0
 800d272:	bf18      	it	ne
 800d274:	2301      	movne	r3, #1
 800d276:	0692      	lsls	r2, r2, #26
 800d278:	d42d      	bmi.n	800d2d6 <_printf_common+0xbe>
 800d27a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d27e:	4639      	mov	r1, r7
 800d280:	4630      	mov	r0, r6
 800d282:	47c0      	blx	r8
 800d284:	3001      	adds	r0, #1
 800d286:	d020      	beq.n	800d2ca <_printf_common+0xb2>
 800d288:	6823      	ldr	r3, [r4, #0]
 800d28a:	68e5      	ldr	r5, [r4, #12]
 800d28c:	f8d9 2000 	ldr.w	r2, [r9]
 800d290:	f003 0306 	and.w	r3, r3, #6
 800d294:	2b04      	cmp	r3, #4
 800d296:	bf08      	it	eq
 800d298:	1aad      	subeq	r5, r5, r2
 800d29a:	68a3      	ldr	r3, [r4, #8]
 800d29c:	6922      	ldr	r2, [r4, #16]
 800d29e:	bf0c      	ite	eq
 800d2a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2a4:	2500      	movne	r5, #0
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	bfc4      	itt	gt
 800d2aa:	1a9b      	subgt	r3, r3, r2
 800d2ac:	18ed      	addgt	r5, r5, r3
 800d2ae:	f04f 0900 	mov.w	r9, #0
 800d2b2:	341a      	adds	r4, #26
 800d2b4:	454d      	cmp	r5, r9
 800d2b6:	d11a      	bne.n	800d2ee <_printf_common+0xd6>
 800d2b8:	2000      	movs	r0, #0
 800d2ba:	e008      	b.n	800d2ce <_printf_common+0xb6>
 800d2bc:	2301      	movs	r3, #1
 800d2be:	4652      	mov	r2, sl
 800d2c0:	4639      	mov	r1, r7
 800d2c2:	4630      	mov	r0, r6
 800d2c4:	47c0      	blx	r8
 800d2c6:	3001      	adds	r0, #1
 800d2c8:	d103      	bne.n	800d2d2 <_printf_common+0xba>
 800d2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2d2:	3501      	adds	r5, #1
 800d2d4:	e7c3      	b.n	800d25e <_printf_common+0x46>
 800d2d6:	18e1      	adds	r1, r4, r3
 800d2d8:	1c5a      	adds	r2, r3, #1
 800d2da:	2030      	movs	r0, #48	; 0x30
 800d2dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2e0:	4422      	add	r2, r4
 800d2e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2ea:	3302      	adds	r3, #2
 800d2ec:	e7c5      	b.n	800d27a <_printf_common+0x62>
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	4622      	mov	r2, r4
 800d2f2:	4639      	mov	r1, r7
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	47c0      	blx	r8
 800d2f8:	3001      	adds	r0, #1
 800d2fa:	d0e6      	beq.n	800d2ca <_printf_common+0xb2>
 800d2fc:	f109 0901 	add.w	r9, r9, #1
 800d300:	e7d8      	b.n	800d2b4 <_printf_common+0x9c>
	...

0800d304 <_printf_i>:
 800d304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d308:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d30c:	460c      	mov	r4, r1
 800d30e:	7e09      	ldrb	r1, [r1, #24]
 800d310:	b085      	sub	sp, #20
 800d312:	296e      	cmp	r1, #110	; 0x6e
 800d314:	4617      	mov	r7, r2
 800d316:	4606      	mov	r6, r0
 800d318:	4698      	mov	r8, r3
 800d31a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d31c:	f000 80b3 	beq.w	800d486 <_printf_i+0x182>
 800d320:	d822      	bhi.n	800d368 <_printf_i+0x64>
 800d322:	2963      	cmp	r1, #99	; 0x63
 800d324:	d036      	beq.n	800d394 <_printf_i+0x90>
 800d326:	d80a      	bhi.n	800d33e <_printf_i+0x3a>
 800d328:	2900      	cmp	r1, #0
 800d32a:	f000 80b9 	beq.w	800d4a0 <_printf_i+0x19c>
 800d32e:	2958      	cmp	r1, #88	; 0x58
 800d330:	f000 8083 	beq.w	800d43a <_printf_i+0x136>
 800d334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d338:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d33c:	e032      	b.n	800d3a4 <_printf_i+0xa0>
 800d33e:	2964      	cmp	r1, #100	; 0x64
 800d340:	d001      	beq.n	800d346 <_printf_i+0x42>
 800d342:	2969      	cmp	r1, #105	; 0x69
 800d344:	d1f6      	bne.n	800d334 <_printf_i+0x30>
 800d346:	6820      	ldr	r0, [r4, #0]
 800d348:	6813      	ldr	r3, [r2, #0]
 800d34a:	0605      	lsls	r5, r0, #24
 800d34c:	f103 0104 	add.w	r1, r3, #4
 800d350:	d52a      	bpl.n	800d3a8 <_printf_i+0xa4>
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	6011      	str	r1, [r2, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	da03      	bge.n	800d362 <_printf_i+0x5e>
 800d35a:	222d      	movs	r2, #45	; 0x2d
 800d35c:	425b      	negs	r3, r3
 800d35e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d362:	486f      	ldr	r0, [pc, #444]	; (800d520 <_printf_i+0x21c>)
 800d364:	220a      	movs	r2, #10
 800d366:	e039      	b.n	800d3dc <_printf_i+0xd8>
 800d368:	2973      	cmp	r1, #115	; 0x73
 800d36a:	f000 809d 	beq.w	800d4a8 <_printf_i+0x1a4>
 800d36e:	d808      	bhi.n	800d382 <_printf_i+0x7e>
 800d370:	296f      	cmp	r1, #111	; 0x6f
 800d372:	d020      	beq.n	800d3b6 <_printf_i+0xb2>
 800d374:	2970      	cmp	r1, #112	; 0x70
 800d376:	d1dd      	bne.n	800d334 <_printf_i+0x30>
 800d378:	6823      	ldr	r3, [r4, #0]
 800d37a:	f043 0320 	orr.w	r3, r3, #32
 800d37e:	6023      	str	r3, [r4, #0]
 800d380:	e003      	b.n	800d38a <_printf_i+0x86>
 800d382:	2975      	cmp	r1, #117	; 0x75
 800d384:	d017      	beq.n	800d3b6 <_printf_i+0xb2>
 800d386:	2978      	cmp	r1, #120	; 0x78
 800d388:	d1d4      	bne.n	800d334 <_printf_i+0x30>
 800d38a:	2378      	movs	r3, #120	; 0x78
 800d38c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d390:	4864      	ldr	r0, [pc, #400]	; (800d524 <_printf_i+0x220>)
 800d392:	e055      	b.n	800d440 <_printf_i+0x13c>
 800d394:	6813      	ldr	r3, [r2, #0]
 800d396:	1d19      	adds	r1, r3, #4
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	6011      	str	r1, [r2, #0]
 800d39c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	e08c      	b.n	800d4c2 <_printf_i+0x1be>
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	6011      	str	r1, [r2, #0]
 800d3ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d3b0:	bf18      	it	ne
 800d3b2:	b21b      	sxthne	r3, r3
 800d3b4:	e7cf      	b.n	800d356 <_printf_i+0x52>
 800d3b6:	6813      	ldr	r3, [r2, #0]
 800d3b8:	6825      	ldr	r5, [r4, #0]
 800d3ba:	1d18      	adds	r0, r3, #4
 800d3bc:	6010      	str	r0, [r2, #0]
 800d3be:	0628      	lsls	r0, r5, #24
 800d3c0:	d501      	bpl.n	800d3c6 <_printf_i+0xc2>
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	e002      	b.n	800d3cc <_printf_i+0xc8>
 800d3c6:	0668      	lsls	r0, r5, #25
 800d3c8:	d5fb      	bpl.n	800d3c2 <_printf_i+0xbe>
 800d3ca:	881b      	ldrh	r3, [r3, #0]
 800d3cc:	4854      	ldr	r0, [pc, #336]	; (800d520 <_printf_i+0x21c>)
 800d3ce:	296f      	cmp	r1, #111	; 0x6f
 800d3d0:	bf14      	ite	ne
 800d3d2:	220a      	movne	r2, #10
 800d3d4:	2208      	moveq	r2, #8
 800d3d6:	2100      	movs	r1, #0
 800d3d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3dc:	6865      	ldr	r5, [r4, #4]
 800d3de:	60a5      	str	r5, [r4, #8]
 800d3e0:	2d00      	cmp	r5, #0
 800d3e2:	f2c0 8095 	blt.w	800d510 <_printf_i+0x20c>
 800d3e6:	6821      	ldr	r1, [r4, #0]
 800d3e8:	f021 0104 	bic.w	r1, r1, #4
 800d3ec:	6021      	str	r1, [r4, #0]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d13d      	bne.n	800d46e <_printf_i+0x16a>
 800d3f2:	2d00      	cmp	r5, #0
 800d3f4:	f040 808e 	bne.w	800d514 <_printf_i+0x210>
 800d3f8:	4665      	mov	r5, ip
 800d3fa:	2a08      	cmp	r2, #8
 800d3fc:	d10b      	bne.n	800d416 <_printf_i+0x112>
 800d3fe:	6823      	ldr	r3, [r4, #0]
 800d400:	07db      	lsls	r3, r3, #31
 800d402:	d508      	bpl.n	800d416 <_printf_i+0x112>
 800d404:	6923      	ldr	r3, [r4, #16]
 800d406:	6862      	ldr	r2, [r4, #4]
 800d408:	429a      	cmp	r2, r3
 800d40a:	bfde      	ittt	le
 800d40c:	2330      	movle	r3, #48	; 0x30
 800d40e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d412:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d416:	ebac 0305 	sub.w	r3, ip, r5
 800d41a:	6123      	str	r3, [r4, #16]
 800d41c:	f8cd 8000 	str.w	r8, [sp]
 800d420:	463b      	mov	r3, r7
 800d422:	aa03      	add	r2, sp, #12
 800d424:	4621      	mov	r1, r4
 800d426:	4630      	mov	r0, r6
 800d428:	f7ff fef6 	bl	800d218 <_printf_common>
 800d42c:	3001      	adds	r0, #1
 800d42e:	d14d      	bne.n	800d4cc <_printf_i+0x1c8>
 800d430:	f04f 30ff 	mov.w	r0, #4294967295
 800d434:	b005      	add	sp, #20
 800d436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d43a:	4839      	ldr	r0, [pc, #228]	; (800d520 <_printf_i+0x21c>)
 800d43c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d440:	6813      	ldr	r3, [r2, #0]
 800d442:	6821      	ldr	r1, [r4, #0]
 800d444:	1d1d      	adds	r5, r3, #4
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	6015      	str	r5, [r2, #0]
 800d44a:	060a      	lsls	r2, r1, #24
 800d44c:	d50b      	bpl.n	800d466 <_printf_i+0x162>
 800d44e:	07ca      	lsls	r2, r1, #31
 800d450:	bf44      	itt	mi
 800d452:	f041 0120 	orrmi.w	r1, r1, #32
 800d456:	6021      	strmi	r1, [r4, #0]
 800d458:	b91b      	cbnz	r3, 800d462 <_printf_i+0x15e>
 800d45a:	6822      	ldr	r2, [r4, #0]
 800d45c:	f022 0220 	bic.w	r2, r2, #32
 800d460:	6022      	str	r2, [r4, #0]
 800d462:	2210      	movs	r2, #16
 800d464:	e7b7      	b.n	800d3d6 <_printf_i+0xd2>
 800d466:	064d      	lsls	r5, r1, #25
 800d468:	bf48      	it	mi
 800d46a:	b29b      	uxthmi	r3, r3
 800d46c:	e7ef      	b.n	800d44e <_printf_i+0x14a>
 800d46e:	4665      	mov	r5, ip
 800d470:	fbb3 f1f2 	udiv	r1, r3, r2
 800d474:	fb02 3311 	mls	r3, r2, r1, r3
 800d478:	5cc3      	ldrb	r3, [r0, r3]
 800d47a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d47e:	460b      	mov	r3, r1
 800d480:	2900      	cmp	r1, #0
 800d482:	d1f5      	bne.n	800d470 <_printf_i+0x16c>
 800d484:	e7b9      	b.n	800d3fa <_printf_i+0xf6>
 800d486:	6813      	ldr	r3, [r2, #0]
 800d488:	6825      	ldr	r5, [r4, #0]
 800d48a:	6961      	ldr	r1, [r4, #20]
 800d48c:	1d18      	adds	r0, r3, #4
 800d48e:	6010      	str	r0, [r2, #0]
 800d490:	0628      	lsls	r0, r5, #24
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	d501      	bpl.n	800d49a <_printf_i+0x196>
 800d496:	6019      	str	r1, [r3, #0]
 800d498:	e002      	b.n	800d4a0 <_printf_i+0x19c>
 800d49a:	066a      	lsls	r2, r5, #25
 800d49c:	d5fb      	bpl.n	800d496 <_printf_i+0x192>
 800d49e:	8019      	strh	r1, [r3, #0]
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	6123      	str	r3, [r4, #16]
 800d4a4:	4665      	mov	r5, ip
 800d4a6:	e7b9      	b.n	800d41c <_printf_i+0x118>
 800d4a8:	6813      	ldr	r3, [r2, #0]
 800d4aa:	1d19      	adds	r1, r3, #4
 800d4ac:	6011      	str	r1, [r2, #0]
 800d4ae:	681d      	ldr	r5, [r3, #0]
 800d4b0:	6862      	ldr	r2, [r4, #4]
 800d4b2:	2100      	movs	r1, #0
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	f7f2 fecb 	bl	8000250 <memchr>
 800d4ba:	b108      	cbz	r0, 800d4c0 <_printf_i+0x1bc>
 800d4bc:	1b40      	subs	r0, r0, r5
 800d4be:	6060      	str	r0, [r4, #4]
 800d4c0:	6863      	ldr	r3, [r4, #4]
 800d4c2:	6123      	str	r3, [r4, #16]
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4ca:	e7a7      	b.n	800d41c <_printf_i+0x118>
 800d4cc:	6923      	ldr	r3, [r4, #16]
 800d4ce:	462a      	mov	r2, r5
 800d4d0:	4639      	mov	r1, r7
 800d4d2:	4630      	mov	r0, r6
 800d4d4:	47c0      	blx	r8
 800d4d6:	3001      	adds	r0, #1
 800d4d8:	d0aa      	beq.n	800d430 <_printf_i+0x12c>
 800d4da:	6823      	ldr	r3, [r4, #0]
 800d4dc:	079b      	lsls	r3, r3, #30
 800d4de:	d413      	bmi.n	800d508 <_printf_i+0x204>
 800d4e0:	68e0      	ldr	r0, [r4, #12]
 800d4e2:	9b03      	ldr	r3, [sp, #12]
 800d4e4:	4298      	cmp	r0, r3
 800d4e6:	bfb8      	it	lt
 800d4e8:	4618      	movlt	r0, r3
 800d4ea:	e7a3      	b.n	800d434 <_printf_i+0x130>
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	464a      	mov	r2, r9
 800d4f0:	4639      	mov	r1, r7
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	47c0      	blx	r8
 800d4f6:	3001      	adds	r0, #1
 800d4f8:	d09a      	beq.n	800d430 <_printf_i+0x12c>
 800d4fa:	3501      	adds	r5, #1
 800d4fc:	68e3      	ldr	r3, [r4, #12]
 800d4fe:	9a03      	ldr	r2, [sp, #12]
 800d500:	1a9b      	subs	r3, r3, r2
 800d502:	42ab      	cmp	r3, r5
 800d504:	dcf2      	bgt.n	800d4ec <_printf_i+0x1e8>
 800d506:	e7eb      	b.n	800d4e0 <_printf_i+0x1dc>
 800d508:	2500      	movs	r5, #0
 800d50a:	f104 0919 	add.w	r9, r4, #25
 800d50e:	e7f5      	b.n	800d4fc <_printf_i+0x1f8>
 800d510:	2b00      	cmp	r3, #0
 800d512:	d1ac      	bne.n	800d46e <_printf_i+0x16a>
 800d514:	7803      	ldrb	r3, [r0, #0]
 800d516:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d51a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d51e:	e76c      	b.n	800d3fa <_printf_i+0xf6>
 800d520:	0800fa2d 	.word	0x0800fa2d
 800d524:	0800fa3e 	.word	0x0800fa3e

0800d528 <_sbrk_r>:
 800d528:	b538      	push	{r3, r4, r5, lr}
 800d52a:	4c06      	ldr	r4, [pc, #24]	; (800d544 <_sbrk_r+0x1c>)
 800d52c:	2300      	movs	r3, #0
 800d52e:	4605      	mov	r5, r0
 800d530:	4608      	mov	r0, r1
 800d532:	6023      	str	r3, [r4, #0]
 800d534:	f7f4 fbcc 	bl	8001cd0 <_sbrk>
 800d538:	1c43      	adds	r3, r0, #1
 800d53a:	d102      	bne.n	800d542 <_sbrk_r+0x1a>
 800d53c:	6823      	ldr	r3, [r4, #0]
 800d53e:	b103      	cbz	r3, 800d542 <_sbrk_r+0x1a>
 800d540:	602b      	str	r3, [r5, #0]
 800d542:	bd38      	pop	{r3, r4, r5, pc}
 800d544:	20000b70 	.word	0x20000b70

0800d548 <__sread>:
 800d548:	b510      	push	{r4, lr}
 800d54a:	460c      	mov	r4, r1
 800d54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d550:	f000 fae0 	bl	800db14 <_read_r>
 800d554:	2800      	cmp	r0, #0
 800d556:	bfab      	itete	ge
 800d558:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d55a:	89a3      	ldrhlt	r3, [r4, #12]
 800d55c:	181b      	addge	r3, r3, r0
 800d55e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d562:	bfac      	ite	ge
 800d564:	6563      	strge	r3, [r4, #84]	; 0x54
 800d566:	81a3      	strhlt	r3, [r4, #12]
 800d568:	bd10      	pop	{r4, pc}

0800d56a <__swrite>:
 800d56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d56e:	461f      	mov	r7, r3
 800d570:	898b      	ldrh	r3, [r1, #12]
 800d572:	05db      	lsls	r3, r3, #23
 800d574:	4605      	mov	r5, r0
 800d576:	460c      	mov	r4, r1
 800d578:	4616      	mov	r6, r2
 800d57a:	d505      	bpl.n	800d588 <__swrite+0x1e>
 800d57c:	2302      	movs	r3, #2
 800d57e:	2200      	movs	r2, #0
 800d580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d584:	f000 f9b6 	bl	800d8f4 <_lseek_r>
 800d588:	89a3      	ldrh	r3, [r4, #12]
 800d58a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d58e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d592:	81a3      	strh	r3, [r4, #12]
 800d594:	4632      	mov	r2, r6
 800d596:	463b      	mov	r3, r7
 800d598:	4628      	mov	r0, r5
 800d59a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d59e:	f000 b869 	b.w	800d674 <_write_r>

0800d5a2 <__sseek>:
 800d5a2:	b510      	push	{r4, lr}
 800d5a4:	460c      	mov	r4, r1
 800d5a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5aa:	f000 f9a3 	bl	800d8f4 <_lseek_r>
 800d5ae:	1c43      	adds	r3, r0, #1
 800d5b0:	89a3      	ldrh	r3, [r4, #12]
 800d5b2:	bf15      	itete	ne
 800d5b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d5b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d5ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d5be:	81a3      	strheq	r3, [r4, #12]
 800d5c0:	bf18      	it	ne
 800d5c2:	81a3      	strhne	r3, [r4, #12]
 800d5c4:	bd10      	pop	{r4, pc}

0800d5c6 <__sclose>:
 800d5c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5ca:	f000 b8d3 	b.w	800d774 <_close_r>
	...

0800d5d0 <__swbuf_r>:
 800d5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5d2:	460e      	mov	r6, r1
 800d5d4:	4614      	mov	r4, r2
 800d5d6:	4605      	mov	r5, r0
 800d5d8:	b118      	cbz	r0, 800d5e2 <__swbuf_r+0x12>
 800d5da:	6983      	ldr	r3, [r0, #24]
 800d5dc:	b90b      	cbnz	r3, 800d5e2 <__swbuf_r+0x12>
 800d5de:	f7ff faa5 	bl	800cb2c <__sinit>
 800d5e2:	4b21      	ldr	r3, [pc, #132]	; (800d668 <__swbuf_r+0x98>)
 800d5e4:	429c      	cmp	r4, r3
 800d5e6:	d12a      	bne.n	800d63e <__swbuf_r+0x6e>
 800d5e8:	686c      	ldr	r4, [r5, #4]
 800d5ea:	69a3      	ldr	r3, [r4, #24]
 800d5ec:	60a3      	str	r3, [r4, #8]
 800d5ee:	89a3      	ldrh	r3, [r4, #12]
 800d5f0:	071a      	lsls	r2, r3, #28
 800d5f2:	d52e      	bpl.n	800d652 <__swbuf_r+0x82>
 800d5f4:	6923      	ldr	r3, [r4, #16]
 800d5f6:	b363      	cbz	r3, 800d652 <__swbuf_r+0x82>
 800d5f8:	6923      	ldr	r3, [r4, #16]
 800d5fa:	6820      	ldr	r0, [r4, #0]
 800d5fc:	1ac0      	subs	r0, r0, r3
 800d5fe:	6963      	ldr	r3, [r4, #20]
 800d600:	b2f6      	uxtb	r6, r6
 800d602:	4283      	cmp	r3, r0
 800d604:	4637      	mov	r7, r6
 800d606:	dc04      	bgt.n	800d612 <__swbuf_r+0x42>
 800d608:	4621      	mov	r1, r4
 800d60a:	4628      	mov	r0, r5
 800d60c:	f000 f948 	bl	800d8a0 <_fflush_r>
 800d610:	bb28      	cbnz	r0, 800d65e <__swbuf_r+0x8e>
 800d612:	68a3      	ldr	r3, [r4, #8]
 800d614:	3b01      	subs	r3, #1
 800d616:	60a3      	str	r3, [r4, #8]
 800d618:	6823      	ldr	r3, [r4, #0]
 800d61a:	1c5a      	adds	r2, r3, #1
 800d61c:	6022      	str	r2, [r4, #0]
 800d61e:	701e      	strb	r6, [r3, #0]
 800d620:	6963      	ldr	r3, [r4, #20]
 800d622:	3001      	adds	r0, #1
 800d624:	4283      	cmp	r3, r0
 800d626:	d004      	beq.n	800d632 <__swbuf_r+0x62>
 800d628:	89a3      	ldrh	r3, [r4, #12]
 800d62a:	07db      	lsls	r3, r3, #31
 800d62c:	d519      	bpl.n	800d662 <__swbuf_r+0x92>
 800d62e:	2e0a      	cmp	r6, #10
 800d630:	d117      	bne.n	800d662 <__swbuf_r+0x92>
 800d632:	4621      	mov	r1, r4
 800d634:	4628      	mov	r0, r5
 800d636:	f000 f933 	bl	800d8a0 <_fflush_r>
 800d63a:	b190      	cbz	r0, 800d662 <__swbuf_r+0x92>
 800d63c:	e00f      	b.n	800d65e <__swbuf_r+0x8e>
 800d63e:	4b0b      	ldr	r3, [pc, #44]	; (800d66c <__swbuf_r+0x9c>)
 800d640:	429c      	cmp	r4, r3
 800d642:	d101      	bne.n	800d648 <__swbuf_r+0x78>
 800d644:	68ac      	ldr	r4, [r5, #8]
 800d646:	e7d0      	b.n	800d5ea <__swbuf_r+0x1a>
 800d648:	4b09      	ldr	r3, [pc, #36]	; (800d670 <__swbuf_r+0xa0>)
 800d64a:	429c      	cmp	r4, r3
 800d64c:	bf08      	it	eq
 800d64e:	68ec      	ldreq	r4, [r5, #12]
 800d650:	e7cb      	b.n	800d5ea <__swbuf_r+0x1a>
 800d652:	4621      	mov	r1, r4
 800d654:	4628      	mov	r0, r5
 800d656:	f000 f81f 	bl	800d698 <__swsetup_r>
 800d65a:	2800      	cmp	r0, #0
 800d65c:	d0cc      	beq.n	800d5f8 <__swbuf_r+0x28>
 800d65e:	f04f 37ff 	mov.w	r7, #4294967295
 800d662:	4638      	mov	r0, r7
 800d664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d666:	bf00      	nop
 800d668:	0800f9dc 	.word	0x0800f9dc
 800d66c:	0800f9fc 	.word	0x0800f9fc
 800d670:	0800f9bc 	.word	0x0800f9bc

0800d674 <_write_r>:
 800d674:	b538      	push	{r3, r4, r5, lr}
 800d676:	4c07      	ldr	r4, [pc, #28]	; (800d694 <_write_r+0x20>)
 800d678:	4605      	mov	r5, r0
 800d67a:	4608      	mov	r0, r1
 800d67c:	4611      	mov	r1, r2
 800d67e:	2200      	movs	r2, #0
 800d680:	6022      	str	r2, [r4, #0]
 800d682:	461a      	mov	r2, r3
 800d684:	f7f4 fad3 	bl	8001c2e <_write>
 800d688:	1c43      	adds	r3, r0, #1
 800d68a:	d102      	bne.n	800d692 <_write_r+0x1e>
 800d68c:	6823      	ldr	r3, [r4, #0]
 800d68e:	b103      	cbz	r3, 800d692 <_write_r+0x1e>
 800d690:	602b      	str	r3, [r5, #0]
 800d692:	bd38      	pop	{r3, r4, r5, pc}
 800d694:	20000b70 	.word	0x20000b70

0800d698 <__swsetup_r>:
 800d698:	4b32      	ldr	r3, [pc, #200]	; (800d764 <__swsetup_r+0xcc>)
 800d69a:	b570      	push	{r4, r5, r6, lr}
 800d69c:	681d      	ldr	r5, [r3, #0]
 800d69e:	4606      	mov	r6, r0
 800d6a0:	460c      	mov	r4, r1
 800d6a2:	b125      	cbz	r5, 800d6ae <__swsetup_r+0x16>
 800d6a4:	69ab      	ldr	r3, [r5, #24]
 800d6a6:	b913      	cbnz	r3, 800d6ae <__swsetup_r+0x16>
 800d6a8:	4628      	mov	r0, r5
 800d6aa:	f7ff fa3f 	bl	800cb2c <__sinit>
 800d6ae:	4b2e      	ldr	r3, [pc, #184]	; (800d768 <__swsetup_r+0xd0>)
 800d6b0:	429c      	cmp	r4, r3
 800d6b2:	d10f      	bne.n	800d6d4 <__swsetup_r+0x3c>
 800d6b4:	686c      	ldr	r4, [r5, #4]
 800d6b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	0715      	lsls	r5, r2, #28
 800d6be:	d42c      	bmi.n	800d71a <__swsetup_r+0x82>
 800d6c0:	06d0      	lsls	r0, r2, #27
 800d6c2:	d411      	bmi.n	800d6e8 <__swsetup_r+0x50>
 800d6c4:	2209      	movs	r2, #9
 800d6c6:	6032      	str	r2, [r6, #0]
 800d6c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6cc:	81a3      	strh	r3, [r4, #12]
 800d6ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d2:	e03e      	b.n	800d752 <__swsetup_r+0xba>
 800d6d4:	4b25      	ldr	r3, [pc, #148]	; (800d76c <__swsetup_r+0xd4>)
 800d6d6:	429c      	cmp	r4, r3
 800d6d8:	d101      	bne.n	800d6de <__swsetup_r+0x46>
 800d6da:	68ac      	ldr	r4, [r5, #8]
 800d6dc:	e7eb      	b.n	800d6b6 <__swsetup_r+0x1e>
 800d6de:	4b24      	ldr	r3, [pc, #144]	; (800d770 <__swsetup_r+0xd8>)
 800d6e0:	429c      	cmp	r4, r3
 800d6e2:	bf08      	it	eq
 800d6e4:	68ec      	ldreq	r4, [r5, #12]
 800d6e6:	e7e6      	b.n	800d6b6 <__swsetup_r+0x1e>
 800d6e8:	0751      	lsls	r1, r2, #29
 800d6ea:	d512      	bpl.n	800d712 <__swsetup_r+0x7a>
 800d6ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6ee:	b141      	cbz	r1, 800d702 <__swsetup_r+0x6a>
 800d6f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6f4:	4299      	cmp	r1, r3
 800d6f6:	d002      	beq.n	800d6fe <__swsetup_r+0x66>
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	f000 f997 	bl	800da2c <_free_r>
 800d6fe:	2300      	movs	r3, #0
 800d700:	6363      	str	r3, [r4, #52]	; 0x34
 800d702:	89a3      	ldrh	r3, [r4, #12]
 800d704:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d708:	81a3      	strh	r3, [r4, #12]
 800d70a:	2300      	movs	r3, #0
 800d70c:	6063      	str	r3, [r4, #4]
 800d70e:	6923      	ldr	r3, [r4, #16]
 800d710:	6023      	str	r3, [r4, #0]
 800d712:	89a3      	ldrh	r3, [r4, #12]
 800d714:	f043 0308 	orr.w	r3, r3, #8
 800d718:	81a3      	strh	r3, [r4, #12]
 800d71a:	6923      	ldr	r3, [r4, #16]
 800d71c:	b94b      	cbnz	r3, 800d732 <__swsetup_r+0x9a>
 800d71e:	89a3      	ldrh	r3, [r4, #12]
 800d720:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d728:	d003      	beq.n	800d732 <__swsetup_r+0x9a>
 800d72a:	4621      	mov	r1, r4
 800d72c:	4630      	mov	r0, r6
 800d72e:	f000 f917 	bl	800d960 <__smakebuf_r>
 800d732:	89a2      	ldrh	r2, [r4, #12]
 800d734:	f012 0301 	ands.w	r3, r2, #1
 800d738:	d00c      	beq.n	800d754 <__swsetup_r+0xbc>
 800d73a:	2300      	movs	r3, #0
 800d73c:	60a3      	str	r3, [r4, #8]
 800d73e:	6963      	ldr	r3, [r4, #20]
 800d740:	425b      	negs	r3, r3
 800d742:	61a3      	str	r3, [r4, #24]
 800d744:	6923      	ldr	r3, [r4, #16]
 800d746:	b953      	cbnz	r3, 800d75e <__swsetup_r+0xc6>
 800d748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d74c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d750:	d1ba      	bne.n	800d6c8 <__swsetup_r+0x30>
 800d752:	bd70      	pop	{r4, r5, r6, pc}
 800d754:	0792      	lsls	r2, r2, #30
 800d756:	bf58      	it	pl
 800d758:	6963      	ldrpl	r3, [r4, #20]
 800d75a:	60a3      	str	r3, [r4, #8]
 800d75c:	e7f2      	b.n	800d744 <__swsetup_r+0xac>
 800d75e:	2000      	movs	r0, #0
 800d760:	e7f7      	b.n	800d752 <__swsetup_r+0xba>
 800d762:	bf00      	nop
 800d764:	20000044 	.word	0x20000044
 800d768:	0800f9dc 	.word	0x0800f9dc
 800d76c:	0800f9fc 	.word	0x0800f9fc
 800d770:	0800f9bc 	.word	0x0800f9bc

0800d774 <_close_r>:
 800d774:	b538      	push	{r3, r4, r5, lr}
 800d776:	4c06      	ldr	r4, [pc, #24]	; (800d790 <_close_r+0x1c>)
 800d778:	2300      	movs	r3, #0
 800d77a:	4605      	mov	r5, r0
 800d77c:	4608      	mov	r0, r1
 800d77e:	6023      	str	r3, [r4, #0]
 800d780:	f7f4 fa71 	bl	8001c66 <_close>
 800d784:	1c43      	adds	r3, r0, #1
 800d786:	d102      	bne.n	800d78e <_close_r+0x1a>
 800d788:	6823      	ldr	r3, [r4, #0]
 800d78a:	b103      	cbz	r3, 800d78e <_close_r+0x1a>
 800d78c:	602b      	str	r3, [r5, #0]
 800d78e:	bd38      	pop	{r3, r4, r5, pc}
 800d790:	20000b70 	.word	0x20000b70

0800d794 <__sflush_r>:
 800d794:	898a      	ldrh	r2, [r1, #12]
 800d796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d79a:	4605      	mov	r5, r0
 800d79c:	0710      	lsls	r0, r2, #28
 800d79e:	460c      	mov	r4, r1
 800d7a0:	d458      	bmi.n	800d854 <__sflush_r+0xc0>
 800d7a2:	684b      	ldr	r3, [r1, #4]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	dc05      	bgt.n	800d7b4 <__sflush_r+0x20>
 800d7a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	dc02      	bgt.n	800d7b4 <__sflush_r+0x20>
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7b6:	2e00      	cmp	r6, #0
 800d7b8:	d0f9      	beq.n	800d7ae <__sflush_r+0x1a>
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d7c0:	682f      	ldr	r7, [r5, #0]
 800d7c2:	6a21      	ldr	r1, [r4, #32]
 800d7c4:	602b      	str	r3, [r5, #0]
 800d7c6:	d032      	beq.n	800d82e <__sflush_r+0x9a>
 800d7c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d7ca:	89a3      	ldrh	r3, [r4, #12]
 800d7cc:	075a      	lsls	r2, r3, #29
 800d7ce:	d505      	bpl.n	800d7dc <__sflush_r+0x48>
 800d7d0:	6863      	ldr	r3, [r4, #4]
 800d7d2:	1ac0      	subs	r0, r0, r3
 800d7d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d7d6:	b10b      	cbz	r3, 800d7dc <__sflush_r+0x48>
 800d7d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d7da:	1ac0      	subs	r0, r0, r3
 800d7dc:	2300      	movs	r3, #0
 800d7de:	4602      	mov	r2, r0
 800d7e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7e2:	6a21      	ldr	r1, [r4, #32]
 800d7e4:	4628      	mov	r0, r5
 800d7e6:	47b0      	blx	r6
 800d7e8:	1c43      	adds	r3, r0, #1
 800d7ea:	89a3      	ldrh	r3, [r4, #12]
 800d7ec:	d106      	bne.n	800d7fc <__sflush_r+0x68>
 800d7ee:	6829      	ldr	r1, [r5, #0]
 800d7f0:	291d      	cmp	r1, #29
 800d7f2:	d848      	bhi.n	800d886 <__sflush_r+0xf2>
 800d7f4:	4a29      	ldr	r2, [pc, #164]	; (800d89c <__sflush_r+0x108>)
 800d7f6:	40ca      	lsrs	r2, r1
 800d7f8:	07d6      	lsls	r6, r2, #31
 800d7fa:	d544      	bpl.n	800d886 <__sflush_r+0xf2>
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	6062      	str	r2, [r4, #4]
 800d800:	04d9      	lsls	r1, r3, #19
 800d802:	6922      	ldr	r2, [r4, #16]
 800d804:	6022      	str	r2, [r4, #0]
 800d806:	d504      	bpl.n	800d812 <__sflush_r+0x7e>
 800d808:	1c42      	adds	r2, r0, #1
 800d80a:	d101      	bne.n	800d810 <__sflush_r+0x7c>
 800d80c:	682b      	ldr	r3, [r5, #0]
 800d80e:	b903      	cbnz	r3, 800d812 <__sflush_r+0x7e>
 800d810:	6560      	str	r0, [r4, #84]	; 0x54
 800d812:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d814:	602f      	str	r7, [r5, #0]
 800d816:	2900      	cmp	r1, #0
 800d818:	d0c9      	beq.n	800d7ae <__sflush_r+0x1a>
 800d81a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d81e:	4299      	cmp	r1, r3
 800d820:	d002      	beq.n	800d828 <__sflush_r+0x94>
 800d822:	4628      	mov	r0, r5
 800d824:	f000 f902 	bl	800da2c <_free_r>
 800d828:	2000      	movs	r0, #0
 800d82a:	6360      	str	r0, [r4, #52]	; 0x34
 800d82c:	e7c0      	b.n	800d7b0 <__sflush_r+0x1c>
 800d82e:	2301      	movs	r3, #1
 800d830:	4628      	mov	r0, r5
 800d832:	47b0      	blx	r6
 800d834:	1c41      	adds	r1, r0, #1
 800d836:	d1c8      	bne.n	800d7ca <__sflush_r+0x36>
 800d838:	682b      	ldr	r3, [r5, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d0c5      	beq.n	800d7ca <__sflush_r+0x36>
 800d83e:	2b1d      	cmp	r3, #29
 800d840:	d001      	beq.n	800d846 <__sflush_r+0xb2>
 800d842:	2b16      	cmp	r3, #22
 800d844:	d101      	bne.n	800d84a <__sflush_r+0xb6>
 800d846:	602f      	str	r7, [r5, #0]
 800d848:	e7b1      	b.n	800d7ae <__sflush_r+0x1a>
 800d84a:	89a3      	ldrh	r3, [r4, #12]
 800d84c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d850:	81a3      	strh	r3, [r4, #12]
 800d852:	e7ad      	b.n	800d7b0 <__sflush_r+0x1c>
 800d854:	690f      	ldr	r7, [r1, #16]
 800d856:	2f00      	cmp	r7, #0
 800d858:	d0a9      	beq.n	800d7ae <__sflush_r+0x1a>
 800d85a:	0793      	lsls	r3, r2, #30
 800d85c:	680e      	ldr	r6, [r1, #0]
 800d85e:	bf08      	it	eq
 800d860:	694b      	ldreq	r3, [r1, #20]
 800d862:	600f      	str	r7, [r1, #0]
 800d864:	bf18      	it	ne
 800d866:	2300      	movne	r3, #0
 800d868:	eba6 0807 	sub.w	r8, r6, r7
 800d86c:	608b      	str	r3, [r1, #8]
 800d86e:	f1b8 0f00 	cmp.w	r8, #0
 800d872:	dd9c      	ble.n	800d7ae <__sflush_r+0x1a>
 800d874:	4643      	mov	r3, r8
 800d876:	463a      	mov	r2, r7
 800d878:	6a21      	ldr	r1, [r4, #32]
 800d87a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d87c:	4628      	mov	r0, r5
 800d87e:	47b0      	blx	r6
 800d880:	2800      	cmp	r0, #0
 800d882:	dc06      	bgt.n	800d892 <__sflush_r+0xfe>
 800d884:	89a3      	ldrh	r3, [r4, #12]
 800d886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d88a:	81a3      	strh	r3, [r4, #12]
 800d88c:	f04f 30ff 	mov.w	r0, #4294967295
 800d890:	e78e      	b.n	800d7b0 <__sflush_r+0x1c>
 800d892:	4407      	add	r7, r0
 800d894:	eba8 0800 	sub.w	r8, r8, r0
 800d898:	e7e9      	b.n	800d86e <__sflush_r+0xda>
 800d89a:	bf00      	nop
 800d89c:	20400001 	.word	0x20400001

0800d8a0 <_fflush_r>:
 800d8a0:	b538      	push	{r3, r4, r5, lr}
 800d8a2:	690b      	ldr	r3, [r1, #16]
 800d8a4:	4605      	mov	r5, r0
 800d8a6:	460c      	mov	r4, r1
 800d8a8:	b1db      	cbz	r3, 800d8e2 <_fflush_r+0x42>
 800d8aa:	b118      	cbz	r0, 800d8b4 <_fflush_r+0x14>
 800d8ac:	6983      	ldr	r3, [r0, #24]
 800d8ae:	b90b      	cbnz	r3, 800d8b4 <_fflush_r+0x14>
 800d8b0:	f7ff f93c 	bl	800cb2c <__sinit>
 800d8b4:	4b0c      	ldr	r3, [pc, #48]	; (800d8e8 <_fflush_r+0x48>)
 800d8b6:	429c      	cmp	r4, r3
 800d8b8:	d109      	bne.n	800d8ce <_fflush_r+0x2e>
 800d8ba:	686c      	ldr	r4, [r5, #4]
 800d8bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8c0:	b17b      	cbz	r3, 800d8e2 <_fflush_r+0x42>
 800d8c2:	4621      	mov	r1, r4
 800d8c4:	4628      	mov	r0, r5
 800d8c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8ca:	f7ff bf63 	b.w	800d794 <__sflush_r>
 800d8ce:	4b07      	ldr	r3, [pc, #28]	; (800d8ec <_fflush_r+0x4c>)
 800d8d0:	429c      	cmp	r4, r3
 800d8d2:	d101      	bne.n	800d8d8 <_fflush_r+0x38>
 800d8d4:	68ac      	ldr	r4, [r5, #8]
 800d8d6:	e7f1      	b.n	800d8bc <_fflush_r+0x1c>
 800d8d8:	4b05      	ldr	r3, [pc, #20]	; (800d8f0 <_fflush_r+0x50>)
 800d8da:	429c      	cmp	r4, r3
 800d8dc:	bf08      	it	eq
 800d8de:	68ec      	ldreq	r4, [r5, #12]
 800d8e0:	e7ec      	b.n	800d8bc <_fflush_r+0x1c>
 800d8e2:	2000      	movs	r0, #0
 800d8e4:	bd38      	pop	{r3, r4, r5, pc}
 800d8e6:	bf00      	nop
 800d8e8:	0800f9dc 	.word	0x0800f9dc
 800d8ec:	0800f9fc 	.word	0x0800f9fc
 800d8f0:	0800f9bc 	.word	0x0800f9bc

0800d8f4 <_lseek_r>:
 800d8f4:	b538      	push	{r3, r4, r5, lr}
 800d8f6:	4c07      	ldr	r4, [pc, #28]	; (800d914 <_lseek_r+0x20>)
 800d8f8:	4605      	mov	r5, r0
 800d8fa:	4608      	mov	r0, r1
 800d8fc:	4611      	mov	r1, r2
 800d8fe:	2200      	movs	r2, #0
 800d900:	6022      	str	r2, [r4, #0]
 800d902:	461a      	mov	r2, r3
 800d904:	f7f4 f9d6 	bl	8001cb4 <_lseek>
 800d908:	1c43      	adds	r3, r0, #1
 800d90a:	d102      	bne.n	800d912 <_lseek_r+0x1e>
 800d90c:	6823      	ldr	r3, [r4, #0]
 800d90e:	b103      	cbz	r3, 800d912 <_lseek_r+0x1e>
 800d910:	602b      	str	r3, [r5, #0]
 800d912:	bd38      	pop	{r3, r4, r5, pc}
 800d914:	20000b70 	.word	0x20000b70

0800d918 <__swhatbuf_r>:
 800d918:	b570      	push	{r4, r5, r6, lr}
 800d91a:	460e      	mov	r6, r1
 800d91c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d920:	2900      	cmp	r1, #0
 800d922:	b096      	sub	sp, #88	; 0x58
 800d924:	4614      	mov	r4, r2
 800d926:	461d      	mov	r5, r3
 800d928:	da07      	bge.n	800d93a <__swhatbuf_r+0x22>
 800d92a:	2300      	movs	r3, #0
 800d92c:	602b      	str	r3, [r5, #0]
 800d92e:	89b3      	ldrh	r3, [r6, #12]
 800d930:	061a      	lsls	r2, r3, #24
 800d932:	d410      	bmi.n	800d956 <__swhatbuf_r+0x3e>
 800d934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d938:	e00e      	b.n	800d958 <__swhatbuf_r+0x40>
 800d93a:	466a      	mov	r2, sp
 800d93c:	f000 f8fc 	bl	800db38 <_fstat_r>
 800d940:	2800      	cmp	r0, #0
 800d942:	dbf2      	blt.n	800d92a <__swhatbuf_r+0x12>
 800d944:	9a01      	ldr	r2, [sp, #4]
 800d946:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d94a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d94e:	425a      	negs	r2, r3
 800d950:	415a      	adcs	r2, r3
 800d952:	602a      	str	r2, [r5, #0]
 800d954:	e7ee      	b.n	800d934 <__swhatbuf_r+0x1c>
 800d956:	2340      	movs	r3, #64	; 0x40
 800d958:	2000      	movs	r0, #0
 800d95a:	6023      	str	r3, [r4, #0]
 800d95c:	b016      	add	sp, #88	; 0x58
 800d95e:	bd70      	pop	{r4, r5, r6, pc}

0800d960 <__smakebuf_r>:
 800d960:	898b      	ldrh	r3, [r1, #12]
 800d962:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d964:	079d      	lsls	r5, r3, #30
 800d966:	4606      	mov	r6, r0
 800d968:	460c      	mov	r4, r1
 800d96a:	d507      	bpl.n	800d97c <__smakebuf_r+0x1c>
 800d96c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d970:	6023      	str	r3, [r4, #0]
 800d972:	6123      	str	r3, [r4, #16]
 800d974:	2301      	movs	r3, #1
 800d976:	6163      	str	r3, [r4, #20]
 800d978:	b002      	add	sp, #8
 800d97a:	bd70      	pop	{r4, r5, r6, pc}
 800d97c:	ab01      	add	r3, sp, #4
 800d97e:	466a      	mov	r2, sp
 800d980:	f7ff ffca 	bl	800d918 <__swhatbuf_r>
 800d984:	9900      	ldr	r1, [sp, #0]
 800d986:	4605      	mov	r5, r0
 800d988:	4630      	mov	r0, r6
 800d98a:	f7ff f959 	bl	800cc40 <_malloc_r>
 800d98e:	b948      	cbnz	r0, 800d9a4 <__smakebuf_r+0x44>
 800d990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d994:	059a      	lsls	r2, r3, #22
 800d996:	d4ef      	bmi.n	800d978 <__smakebuf_r+0x18>
 800d998:	f023 0303 	bic.w	r3, r3, #3
 800d99c:	f043 0302 	orr.w	r3, r3, #2
 800d9a0:	81a3      	strh	r3, [r4, #12]
 800d9a2:	e7e3      	b.n	800d96c <__smakebuf_r+0xc>
 800d9a4:	4b0d      	ldr	r3, [pc, #52]	; (800d9dc <__smakebuf_r+0x7c>)
 800d9a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9a8:	89a3      	ldrh	r3, [r4, #12]
 800d9aa:	6020      	str	r0, [r4, #0]
 800d9ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9b0:	81a3      	strh	r3, [r4, #12]
 800d9b2:	9b00      	ldr	r3, [sp, #0]
 800d9b4:	6163      	str	r3, [r4, #20]
 800d9b6:	9b01      	ldr	r3, [sp, #4]
 800d9b8:	6120      	str	r0, [r4, #16]
 800d9ba:	b15b      	cbz	r3, 800d9d4 <__smakebuf_r+0x74>
 800d9bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9c0:	4630      	mov	r0, r6
 800d9c2:	f000 f8cb 	bl	800db5c <_isatty_r>
 800d9c6:	b128      	cbz	r0, 800d9d4 <__smakebuf_r+0x74>
 800d9c8:	89a3      	ldrh	r3, [r4, #12]
 800d9ca:	f023 0303 	bic.w	r3, r3, #3
 800d9ce:	f043 0301 	orr.w	r3, r3, #1
 800d9d2:	81a3      	strh	r3, [r4, #12]
 800d9d4:	89a3      	ldrh	r3, [r4, #12]
 800d9d6:	431d      	orrs	r5, r3
 800d9d8:	81a5      	strh	r5, [r4, #12]
 800d9da:	e7cd      	b.n	800d978 <__smakebuf_r+0x18>
 800d9dc:	0800caf5 	.word	0x0800caf5

0800d9e0 <memcpy>:
 800d9e0:	b510      	push	{r4, lr}
 800d9e2:	1e43      	subs	r3, r0, #1
 800d9e4:	440a      	add	r2, r1
 800d9e6:	4291      	cmp	r1, r2
 800d9e8:	d100      	bne.n	800d9ec <memcpy+0xc>
 800d9ea:	bd10      	pop	{r4, pc}
 800d9ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9f4:	e7f7      	b.n	800d9e6 <memcpy+0x6>

0800d9f6 <memmove>:
 800d9f6:	4288      	cmp	r0, r1
 800d9f8:	b510      	push	{r4, lr}
 800d9fa:	eb01 0302 	add.w	r3, r1, r2
 800d9fe:	d807      	bhi.n	800da10 <memmove+0x1a>
 800da00:	1e42      	subs	r2, r0, #1
 800da02:	4299      	cmp	r1, r3
 800da04:	d00a      	beq.n	800da1c <memmove+0x26>
 800da06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da0a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800da0e:	e7f8      	b.n	800da02 <memmove+0xc>
 800da10:	4283      	cmp	r3, r0
 800da12:	d9f5      	bls.n	800da00 <memmove+0xa>
 800da14:	1881      	adds	r1, r0, r2
 800da16:	1ad2      	subs	r2, r2, r3
 800da18:	42d3      	cmn	r3, r2
 800da1a:	d100      	bne.n	800da1e <memmove+0x28>
 800da1c:	bd10      	pop	{r4, pc}
 800da1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da22:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800da26:	e7f7      	b.n	800da18 <memmove+0x22>

0800da28 <__malloc_lock>:
 800da28:	4770      	bx	lr

0800da2a <__malloc_unlock>:
 800da2a:	4770      	bx	lr

0800da2c <_free_r>:
 800da2c:	b538      	push	{r3, r4, r5, lr}
 800da2e:	4605      	mov	r5, r0
 800da30:	2900      	cmp	r1, #0
 800da32:	d045      	beq.n	800dac0 <_free_r+0x94>
 800da34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da38:	1f0c      	subs	r4, r1, #4
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	bfb8      	it	lt
 800da3e:	18e4      	addlt	r4, r4, r3
 800da40:	f7ff fff2 	bl	800da28 <__malloc_lock>
 800da44:	4a1f      	ldr	r2, [pc, #124]	; (800dac4 <_free_r+0x98>)
 800da46:	6813      	ldr	r3, [r2, #0]
 800da48:	4610      	mov	r0, r2
 800da4a:	b933      	cbnz	r3, 800da5a <_free_r+0x2e>
 800da4c:	6063      	str	r3, [r4, #4]
 800da4e:	6014      	str	r4, [r2, #0]
 800da50:	4628      	mov	r0, r5
 800da52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da56:	f7ff bfe8 	b.w	800da2a <__malloc_unlock>
 800da5a:	42a3      	cmp	r3, r4
 800da5c:	d90c      	bls.n	800da78 <_free_r+0x4c>
 800da5e:	6821      	ldr	r1, [r4, #0]
 800da60:	1862      	adds	r2, r4, r1
 800da62:	4293      	cmp	r3, r2
 800da64:	bf04      	itt	eq
 800da66:	681a      	ldreq	r2, [r3, #0]
 800da68:	685b      	ldreq	r3, [r3, #4]
 800da6a:	6063      	str	r3, [r4, #4]
 800da6c:	bf04      	itt	eq
 800da6e:	1852      	addeq	r2, r2, r1
 800da70:	6022      	streq	r2, [r4, #0]
 800da72:	6004      	str	r4, [r0, #0]
 800da74:	e7ec      	b.n	800da50 <_free_r+0x24>
 800da76:	4613      	mov	r3, r2
 800da78:	685a      	ldr	r2, [r3, #4]
 800da7a:	b10a      	cbz	r2, 800da80 <_free_r+0x54>
 800da7c:	42a2      	cmp	r2, r4
 800da7e:	d9fa      	bls.n	800da76 <_free_r+0x4a>
 800da80:	6819      	ldr	r1, [r3, #0]
 800da82:	1858      	adds	r0, r3, r1
 800da84:	42a0      	cmp	r0, r4
 800da86:	d10b      	bne.n	800daa0 <_free_r+0x74>
 800da88:	6820      	ldr	r0, [r4, #0]
 800da8a:	4401      	add	r1, r0
 800da8c:	1858      	adds	r0, r3, r1
 800da8e:	4282      	cmp	r2, r0
 800da90:	6019      	str	r1, [r3, #0]
 800da92:	d1dd      	bne.n	800da50 <_free_r+0x24>
 800da94:	6810      	ldr	r0, [r2, #0]
 800da96:	6852      	ldr	r2, [r2, #4]
 800da98:	605a      	str	r2, [r3, #4]
 800da9a:	4401      	add	r1, r0
 800da9c:	6019      	str	r1, [r3, #0]
 800da9e:	e7d7      	b.n	800da50 <_free_r+0x24>
 800daa0:	d902      	bls.n	800daa8 <_free_r+0x7c>
 800daa2:	230c      	movs	r3, #12
 800daa4:	602b      	str	r3, [r5, #0]
 800daa6:	e7d3      	b.n	800da50 <_free_r+0x24>
 800daa8:	6820      	ldr	r0, [r4, #0]
 800daaa:	1821      	adds	r1, r4, r0
 800daac:	428a      	cmp	r2, r1
 800daae:	bf04      	itt	eq
 800dab0:	6811      	ldreq	r1, [r2, #0]
 800dab2:	6852      	ldreq	r2, [r2, #4]
 800dab4:	6062      	str	r2, [r4, #4]
 800dab6:	bf04      	itt	eq
 800dab8:	1809      	addeq	r1, r1, r0
 800daba:	6021      	streq	r1, [r4, #0]
 800dabc:	605c      	str	r4, [r3, #4]
 800dabe:	e7c7      	b.n	800da50 <_free_r+0x24>
 800dac0:	bd38      	pop	{r3, r4, r5, pc}
 800dac2:	bf00      	nop
 800dac4:	20000318 	.word	0x20000318

0800dac8 <_realloc_r>:
 800dac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daca:	4607      	mov	r7, r0
 800dacc:	4614      	mov	r4, r2
 800dace:	460e      	mov	r6, r1
 800dad0:	b921      	cbnz	r1, 800dadc <_realloc_r+0x14>
 800dad2:	4611      	mov	r1, r2
 800dad4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dad8:	f7ff b8b2 	b.w	800cc40 <_malloc_r>
 800dadc:	b922      	cbnz	r2, 800dae8 <_realloc_r+0x20>
 800dade:	f7ff ffa5 	bl	800da2c <_free_r>
 800dae2:	4625      	mov	r5, r4
 800dae4:	4628      	mov	r0, r5
 800dae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dae8:	f000 f848 	bl	800db7c <_malloc_usable_size_r>
 800daec:	42a0      	cmp	r0, r4
 800daee:	d20f      	bcs.n	800db10 <_realloc_r+0x48>
 800daf0:	4621      	mov	r1, r4
 800daf2:	4638      	mov	r0, r7
 800daf4:	f7ff f8a4 	bl	800cc40 <_malloc_r>
 800daf8:	4605      	mov	r5, r0
 800dafa:	2800      	cmp	r0, #0
 800dafc:	d0f2      	beq.n	800dae4 <_realloc_r+0x1c>
 800dafe:	4631      	mov	r1, r6
 800db00:	4622      	mov	r2, r4
 800db02:	f7ff ff6d 	bl	800d9e0 <memcpy>
 800db06:	4631      	mov	r1, r6
 800db08:	4638      	mov	r0, r7
 800db0a:	f7ff ff8f 	bl	800da2c <_free_r>
 800db0e:	e7e9      	b.n	800dae4 <_realloc_r+0x1c>
 800db10:	4635      	mov	r5, r6
 800db12:	e7e7      	b.n	800dae4 <_realloc_r+0x1c>

0800db14 <_read_r>:
 800db14:	b538      	push	{r3, r4, r5, lr}
 800db16:	4c07      	ldr	r4, [pc, #28]	; (800db34 <_read_r+0x20>)
 800db18:	4605      	mov	r5, r0
 800db1a:	4608      	mov	r0, r1
 800db1c:	4611      	mov	r1, r2
 800db1e:	2200      	movs	r2, #0
 800db20:	6022      	str	r2, [r4, #0]
 800db22:	461a      	mov	r2, r3
 800db24:	f7f4 f866 	bl	8001bf4 <_read>
 800db28:	1c43      	adds	r3, r0, #1
 800db2a:	d102      	bne.n	800db32 <_read_r+0x1e>
 800db2c:	6823      	ldr	r3, [r4, #0]
 800db2e:	b103      	cbz	r3, 800db32 <_read_r+0x1e>
 800db30:	602b      	str	r3, [r5, #0]
 800db32:	bd38      	pop	{r3, r4, r5, pc}
 800db34:	20000b70 	.word	0x20000b70

0800db38 <_fstat_r>:
 800db38:	b538      	push	{r3, r4, r5, lr}
 800db3a:	4c07      	ldr	r4, [pc, #28]	; (800db58 <_fstat_r+0x20>)
 800db3c:	2300      	movs	r3, #0
 800db3e:	4605      	mov	r5, r0
 800db40:	4608      	mov	r0, r1
 800db42:	4611      	mov	r1, r2
 800db44:	6023      	str	r3, [r4, #0]
 800db46:	f7f4 f89a 	bl	8001c7e <_fstat>
 800db4a:	1c43      	adds	r3, r0, #1
 800db4c:	d102      	bne.n	800db54 <_fstat_r+0x1c>
 800db4e:	6823      	ldr	r3, [r4, #0]
 800db50:	b103      	cbz	r3, 800db54 <_fstat_r+0x1c>
 800db52:	602b      	str	r3, [r5, #0]
 800db54:	bd38      	pop	{r3, r4, r5, pc}
 800db56:	bf00      	nop
 800db58:	20000b70 	.word	0x20000b70

0800db5c <_isatty_r>:
 800db5c:	b538      	push	{r3, r4, r5, lr}
 800db5e:	4c06      	ldr	r4, [pc, #24]	; (800db78 <_isatty_r+0x1c>)
 800db60:	2300      	movs	r3, #0
 800db62:	4605      	mov	r5, r0
 800db64:	4608      	mov	r0, r1
 800db66:	6023      	str	r3, [r4, #0]
 800db68:	f7f4 f899 	bl	8001c9e <_isatty>
 800db6c:	1c43      	adds	r3, r0, #1
 800db6e:	d102      	bne.n	800db76 <_isatty_r+0x1a>
 800db70:	6823      	ldr	r3, [r4, #0]
 800db72:	b103      	cbz	r3, 800db76 <_isatty_r+0x1a>
 800db74:	602b      	str	r3, [r5, #0]
 800db76:	bd38      	pop	{r3, r4, r5, pc}
 800db78:	20000b70 	.word	0x20000b70

0800db7c <_malloc_usable_size_r>:
 800db7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db80:	1f18      	subs	r0, r3, #4
 800db82:	2b00      	cmp	r3, #0
 800db84:	bfbc      	itt	lt
 800db86:	580b      	ldrlt	r3, [r1, r0]
 800db88:	18c0      	addlt	r0, r0, r3
 800db8a:	4770      	bx	lr

0800db8c <_init>:
 800db8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db8e:	bf00      	nop
 800db90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db92:	bc08      	pop	{r3}
 800db94:	469e      	mov	lr, r3
 800db96:	4770      	bx	lr

0800db98 <_fini>:
 800db98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db9a:	bf00      	nop
 800db9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db9e:	bc08      	pop	{r3}
 800dba0:	469e      	mov	lr, r3
 800dba2:	4770      	bx	lr
